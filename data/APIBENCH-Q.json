{
    "1": {
        "Query": "Android AsyncTask downloads files as directories",
        "GroundTruth": [
            "java.io.File.mkdirs()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "2": {
        "Query": "Java, extract just the fractional part of a BigDecimal?",
        "GroundTruth": [
            "java.math.BigDecimal.remainder()"
        ],
        "APIClasses": [
            "java.math.BigDecimal"
        ],
        "Source": "Stack Overflow"
    },
    "3": {
        "Query": "Keeping a Java ActionListener running once it's handled an event?",
        "GroundTruth": [
            "javax.swing.JList.JList()"
        ],
        "APIClasses": [
            "javax.swing.JList"
        ],
        "Source": "Stack Overflow"
    },
    "4": {
        "Query": "JTextArea - How to set text at a specified offset?",
        "GroundTruth": [
            "javax.swing.JTextArea.replaceRange()"
        ],
        "APIClasses": [
            "javax.swing.JTextArea"
        ],
        "Source": "Stack Overflow"
    },
    "5": {
        "Query": "How to initialize all the elements of an array to any specific value in java",
        "GroundTruth": [
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "6": {
        "Query": "Splitting a string with multiple spaces",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "7": {
        "Query": "How to get depth of current node in JTree?",
        "GroundTruth": [
            "javax.swing.JTree.DropLocation.getPath()"
        ],
        "APIClasses": [
            "javax.swing.JTree.DropLocation"
        ],
        "Source": "Stack Overflow"
    },
    "8": {
        "Query": "Java - waiting to initialize an activity after all threads are completed",
        "GroundTruth": [
            "java.lang.Thread.join()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "9": {
        "Query": "Java: Disable all JToggleButtons after Submission \u2014 setEnabled(false);",
        "GroundTruth": [
            "javax.swing.AbstractButton.isSelected()"
        ],
        "APIClasses": [
            "javax.swing.AbstractButton"
        ],
        "Source": "Stack Overflow"
    },
    "10": {
        "Query": "How to increase the slow scroll speed on a JScrollPane?",
        "GroundTruth": [
            "javax.swing.JScrollPane.ScrollBar.setUnitIncrement()"
        ],
        "APIClasses": [
            "javax.swing.JScrollPane.ScrollBar"
        ],
        "Source": "Stack Overflow"
    },
    "11": {
        "Query": "How to create a joda time duration from java.sql.Time?",
        "GroundTruth": [
            "java.time.LocalTime",
            "java.sql.Time\uff0cjava.time.LocalTime\uff0cjava.time.Duration"
        ],
        "APIClasses": [
            "java.time",
            "java.sql.Time\uff0cjava.time.LocalTime\uff0cjava.time"
        ],
        "Source": "Stack Overflow"
    },
    "12": {
        "Query": "Set the JPanel size to fill parent with little margin",
        "GroundTruth": [
            "javax.swing.BorderFactory.createEmptyBorder()"
        ],
        "APIClasses": [
            "javax.swing.BorderFactory"
        ],
        "Source": "Stack Overflow"
    },
    "13": {
        "Query": "Is it possible to create an object of an interface in java?",
        "GroundTruth": [
            "java.util.Collections.shuffle()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "14": {
        "Query": "How to convert a Binary String to a base 10 integer in Java",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "15": {
        "Query": "generate short random number in java?",
        "GroundTruth": [
            "java.util.Random.nextInt()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Stack Overflow"
    },
    "16": {
        "Query": "how do I get file size of temp file in android?",
        "GroundTruth": [
            "java.io.File.length()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "17": {
        "Query": "Java Fastest Hash Function",
        "GroundTruth": [
            "java.lang.String.hashCode()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "18": {
        "Query": "Convert double to Int, rounded down",
        "GroundTruth": [
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "19": {
        "Query": "How to implement an ExecutorService to execute batches of tasks",
        "GroundTruth": [
            "java.util.concurrent.ExecutorService.invokeAll()"
        ],
        "APIClasses": [
            "java.util.concurrent.ExecutorService"
        ],
        "Source": "Stack Overflow"
    },
    "20": {
        "Query": "How to return an object after removing it from an ArrayList?",
        "GroundTruth": [
            "java.util.ArrayList.remove()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Stack Overflow"
    },
    "21": {
        "Query": "How do I POST a Pojo with Jersey Client without manually convert to JSON?",
        "GroundTruth": [
            "jersey.api.client.WebResource.accept()"
        ],
        "APIClasses": [
            "jersey.api.client.WebResource"
        ],
        "Source": "Stack Overflow"
    },
    "22": {
        "Query": "Replace sequence of characters in java",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "23": {
        "Query": "Java, Swing, getting and changing all input fields",
        "GroundTruth": [
            "java.util.List.get()",
            "javax.swing.JTextField.setText()"
        ],
        "APIClasses": [
            "java.util.List",
            "javax.swing.JTextField"
        ],
        "Source": "Stack Overflow"
    },
    "24": {
        "Query": "Is there a function to cast string tokenizer to array",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "25": {
        "Query": "How can I get the description of ResponseCode of HttpURLConnection?",
        "GroundTruth": [
            "java.net.HttpURLConnection.getResponseMessage()"
        ],
        "APIClasses": [
            "java.net.HttpURLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "26": {
        "Query": "How to start RMI Registry through java code?",
        "GroundTruth": [
            "java.rmi.registry.LocateRegistry.createRegistry()"
        ],
        "APIClasses": [
            "java.rmi.registry.LocateRegistry"
        ],
        "Source": "Stack Overflow"
    },
    "27": {
        "Query": "Including a text file inside a jar file and reading it",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "28": {
        "Query": "Access images inside jar",
        "GroundTruth": [
            "java.lang.Class.getResource()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "29": {
        "Query": "JFreeChart loading an array into dataset",
        "GroundTruth": [
            "org.jfree.data.general.DefaultPieDataset.setValue()"
        ],
        "APIClasses": [
            "org.jfree.data.general.DefaultPieDataset"
        ],
        "Source": "Stack Overflow"
    },
    "30": {
        "Query": "Synchronize access to resources in Java (Spring MVC)",
        "GroundTruth": [
            "java.util.Map.putIfAbsent()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Stack Overflow"
    },
    "31": {
        "Query": "How to get the colour of a applet viewer pixel in Java?",
        "GroundTruth": [
            "java.awt.image.BufferedImage.getRGB()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Stack Overflow"
    },
    "32": {
        "Query": "Open another swing gui after clicking a button in another swing gui",
        "GroundTruth": [
            "java.awt.Dialog.setVisible()"
        ],
        "APIClasses": [
            "java.awt.Dialog"
        ],
        "Source": "Stack Overflow"
    },
    "33": {
        "Query": "Java: How to read \"Files of type\" in JFileChooser",
        "GroundTruth": [
            "javax.swing.JFileChooser.getFileFilter()"
        ],
        "APIClasses": [
            "javax.swing.JFileChooser"
        ],
        "Source": "Stack Overflow"
    },
    "34": {
        "Query": "resize a byte array in android",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "35": {
        "Query": "Accessing a Java Resource as a File",
        "GroundTruth": [
            "java.io.File.createTempFile()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "36": {
        "Query": "Set log4j log level",
        "GroundTruth": [
            "org.slf4j.Logger.getRootLogger().setLevel()"
        ],
        "APIClasses": [
            "org.slf4j.Logger.getRootLogger()"
        ],
        "Source": "Stack Overflow"
    },
    "37": {
        "Query": "Send HTTP request manually via socket",
        "GroundTruth": [
            "java.io.PrintWriter.println()"
        ],
        "APIClasses": [
            "java.io.PrintWriter"
        ],
        "Source": "Stack Overflow"
    },
    "38": {
        "Query": "Generate Unique Id for client server authentication",
        "GroundTruth": [
            "java.util.UUID.randomUUID()"
        ],
        "APIClasses": [
            "java.util.UUID"
        ],
        "Source": "Stack Overflow"
    },
    "39": {
        "Query": "How can I get the current stack trace in Java?",
        "GroundTruth": [
            "java.lang.Thread.getStackTrace()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "40": {
        "Query": "How to dynamically load a jar with common abstract Class?",
        "GroundTruth": [
            "java.lang.Class.getClassLoader()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "41": {
        "Query": "how to add progress bar to zip utility while zipping or extracting in java?",
        "GroundTruth": [
            "javax.swing.SwingWorker.setProgress()"
        ],
        "APIClasses": [
            "javax.swing.SwingWorker"
        ],
        "Source": "Stack Overflow"
    },
    "42": {
        "Query": "Parse String to Double.NaN",
        "GroundTruth": [
            "java.lang.Double.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Stack Overflow"
    },
    "43": {
        "Query": "Convert PrintStream to PrintWriter",
        "GroundTruth": [
            "java.io.PrintWriter.PrintWriter()"
        ],
        "APIClasses": [
            "java.io.PrintWriter"
        ],
        "Source": "Stack Overflow"
    },
    "44": {
        "Query": "How to implement an eclipse VM argument in code",
        "GroundTruth": [
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "45": {
        "Query": "How to get parent for JDialog from JPanel",
        "GroundTruth": [
            "javax.swing.JComponent.getParent()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "46": {
        "Query": "Recursively search for a directory in Java",
        "GroundTruth": [
            "java.io.File.listFiles()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "47": {
        "Query": "Java equivalent to php die",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "48": {
        "Query": "How to dynamically show columns in a Jasper Report?",
        "GroundTruth": [
            "net.sf.jasperreports.engine.JasperFillManager.fillReport()"
        ],
        "APIClasses": [
            "net.sf.jasperreports.engine.JasperFillManager"
        ],
        "Source": "Stack Overflow"
    },
    "49": {
        "Query": "In java, how do you retrieve images from a jar file?",
        "GroundTruth": [
            "java.lang.Class.getResource()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "50": {
        "Query": "getting keytyped from the keycode",
        "GroundTruth": [
            "java.awt.event.KeyEvent.getKeyText()"
        ],
        "APIClasses": [
            "java.awt.event.KeyEvent"
        ],
        "Source": "Stack Overflow"
    },
    "51": {
        "Query": "How to replace first occurrence of string in Java",
        "GroundTruth": [
            "java.lang.String.replaceFirst()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "52": {
        "Query": "Get selected rows of a table with SWT.MULTI",
        "GroundTruth": [
            "org.eclipse.swt.widgets.Table.getSelection()"
        ],
        "APIClasses": [
            "org.eclipse.swt.widgets.Table"
        ],
        "Source": "Stack Overflow"
    },
    "53": {
        "Query": "How to disable arrow keys for JSliders?",
        "GroundTruth": [
            "java.awt.Component.setFocusable()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "54": {
        "Query": "Cant write string in new line",
        "GroundTruth": [
            "java.io.BufferedWriter.write()"
        ],
        "APIClasses": [
            "java.io.BufferedWriter"
        ],
        "Source": "Stack Overflow"
    },
    "55": {
        "Query": "Android/Java: Convert any string to color (hex)",
        "GroundTruth": [
            "java.lang.String.hashCode()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "56": {
        "Query": "Set System Property for JUnit Runner (Eclipse) to test a Spring Web App",
        "GroundTruth": [
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "57": {
        "Query": "How to handle an InterruptedException",
        "GroundTruth": [
            "java.lang.Thread.interrupt()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "58": {
        "Query": "Read attributes passed with href tag in JNLP",
        "GroundTruth": [
            "javax.servlet.ServletRequest.getParameter()"
        ],
        "APIClasses": [
            "javax.servlet.ServletRequest"
        ],
        "Source": "Stack Overflow"
    },
    "59": {
        "Query": "Comparing two strings in Java",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "60": {
        "Query": "Swing- close whole application when a dialog is cancelled",
        "GroundTruth": [
            "javax.swing.JFrame.dispatchEvent()"
        ],
        "APIClasses": [
            "javax.swing.JFrame"
        ],
        "Source": "Stack Overflow"
    },
    "61": {
        "Query": "parse text file in java, how to remove \"\"",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "62": {
        "Query": "Check if one date is exactly 24 hours or more after another",
        "GroundTruth": [
            "java.util.concurrent.TimeUnit.toMillis()"
        ],
        "APIClasses": [
            "java.util.concurrent.TimeUnit"
        ],
        "Source": "Stack Overflow"
    },
    "63": {
        "Query": "How to restart currently executing jar in java",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "64": {
        "Query": "How to print/log array of string in java?",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "65": {
        "Query": "Loading files with ClassLoader",
        "GroundTruth": [
            "java.lang.ClassLoader.getResource()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "66": {
        "Query": "How to check if FileObject is folder?",
        "GroundTruth": [
            "org.apache.commons.vfs2.FileObject.getType()"
        ],
        "APIClasses": [
            "org.apache.commons.vfs2.FileObject"
        ],
        "Source": "Stack Overflow"
    },
    "67": {
        "Query": "Remove all other trailing whitespace characters except tab in Java",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "68": {
        "Query": "Getting the value of an object that is a collection",
        "GroundTruth": [
            "java.util.Collection.iterator()"
        ],
        "APIClasses": [
            "java.util.Collection"
        ],
        "Source": "Stack Overflow"
    },
    "69": {
        "Query": "how to make multiple line string to single line string?",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "70": {
        "Query": "Calculating 'weight' of an object, howto",
        "GroundTruth": [
            "java.lang.instrument.Instrumentation.getObjectSize()"
        ],
        "APIClasses": [
            "java.lang.instrument.Instrumentation"
        ],
        "Source": "Stack Overflow"
    },
    "71": {
        "Query": "How to shutdown java application correctly from C# one",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "72": {
        "Query": "Is there a class that exposes an unbuffered readLine method in Java?",
        "GroundTruth": [
            "java.io.DataInputStream.readLine()",
            "java.io.BufferedInputStream.readLine()"
        ],
        "APIClasses": [
            "java.io.DataInputStream",
            "java.io.BufferedInputStream"
        ],
        "Source": "Stack Overflow"
    },
    "73": {
        "Query": "How to remove trailing character(s) from a string",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "74": {
        "Query": "How to measure time of Algorithm",
        "GroundTruth": [
            "java.lang.System.nanoTime()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "75": {
        "Query": "How to remove last element for a Singly Linked list in O(1)?",
        "GroundTruth": [
            "java.util.LinkedList.removeLast()"
        ],
        "APIClasses": [
            "java.util.LinkedList"
        ],
        "Source": "Stack Overflow"
    },
    "76": {
        "Query": "Android: Showing indeterminate progress bar in TabHost activity",
        "GroundTruth": [
            "android.app.Activity.getParent().setProgressBarIndeterminateVisibility()"
        ],
        "APIClasses": [
            "android.app.Activity.getParent()"
        ],
        "Source": "Stack Overflow"
    },
    "77": {
        "Query": "How should resources in a compiled jar be accessed?",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "78": {
        "Query": "How can I convert a stack trace to a string?",
        "GroundTruth": [
            "getStackTrace()",
            "org.apache.commons.lang.exception.ExceptionUtils.getStackTrace()"
        ],
        "APIClasses": [
            "",
            "org.apache.commons.lang.exception.ExceptionUtils"
        ],
        "Source": "Stack Overflow"
    },
    "79": {
        "Query": "Replace \"\\\\\" with \"/\" in Java",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "80": {
        "Query": "How can I make a dynamic JTabbedPane?",
        "GroundTruth": [
            "javax.swing.JTabbedPane.addTab()"
        ],
        "APIClasses": [
            "javax.swing.JTabbedPane"
        ],
        "Source": "Stack Overflow"
    },
    "81": {
        "Query": "get possible instance/type of object",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Stack Overflow"
    },
    "82": {
        "Query": "Java getting file extension without substring",
        "GroundTruth": [
            "org.apache.commons.io.FilenameUtils.getExtension()"
        ],
        "APIClasses": [
            "org.apache.commons.io.FilenameUtils"
        ],
        "Source": "Stack Overflow"
    },
    "83": {
        "Query": "How do you send sms with android sdk",
        "GroundTruth": [
            "android.telephony.SmsManager.getDefault()"
        ],
        "APIClasses": [
            "android.telephony.SmsManager"
        ],
        "Source": "Stack Overflow"
    },
    "84": {
        "Query": "How do I get java to exit when piped to head",
        "GroundTruth": [
            "java.io.FileInputStream.FileInputStream()"
        ],
        "APIClasses": [
            "java.io.FileInputStream"
        ],
        "Source": "Stack Overflow"
    },
    "85": {
        "Query": "How to get the present dimension of a JFrame during run time",
        "GroundTruth": [
            "getSize()",
            "javax.swing.JFrame.getSize()"
        ],
        "APIClasses": [
            "",
            "javax.swing.JFrame"
        ],
        "Source": "Stack Overflow"
    },
    "86": {
        "Query": "Shiro 'Any' Permission Instance",
        "GroundTruth": [
            "org.apache.shiro.SecurityUtils.getPrincipal().isPermitted()"
        ],
        "APIClasses": [
            "org.apache.shiro.SecurityUtils.getPrincipal()"
        ],
        "Source": "Stack Overflow"
    },
    "87": {
        "Query": "String, byte[] and compression",
        "GroundTruth": [
            "java.lang.String.String()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "88": {
        "Query": "How do you add a Soap Header defined in a wsdl to a web service client in CXF?",
        "GroundTruth": [
            "org.apache.cxf.frontend.ClientProxy.getClient(port).getRequestContext().put()"
        ],
        "APIClasses": [
            "org.apache.cxf.frontend.ClientProxy.getClient(port).getRequestContext()"
        ],
        "Source": "Stack Overflow"
    },
    "89": {
        "Query": "How to change/edit a JPanel object at startup/init",
        "GroundTruth": [
            "javax.swing.JComponent.getGraphics()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "90": {
        "Query": "How to play a set of frequencies (Chords) at the same time with javax.sound.sampled package",
        "GroundTruth": [
            "idk"
        ],
        "APIClasses": [
            ""
        ],
        "Source": "Stack Overflow"
    },
    "91": {
        "Query": "How to replace two double quotes with a single double quote in Java String?",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "92": {
        "Query": "how to set various row heights for a one JTable",
        "GroundTruth": [
            "javax.swing.JTable.setRowHeight()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Stack Overflow"
    },
    "93": {
        "Query": "How do I create a RSA key pair so that it can be stored in a database?",
        "GroundTruth": [
            "java.security.KeyPairGenerator.genKeyPair()"
        ],
        "APIClasses": [
            "java.security.KeyPairGenerator"
        ],
        "Source": "Stack Overflow"
    },
    "94": {
        "Query": "Check if current date and time falls within a date range excluding weekends",
        "GroundTruth": [
            "java.time.LocalDate.getDayOfWeek()"
        ],
        "APIClasses": [
            "java.time.LocalDate"
        ],
        "Source": "Stack Overflow"
    },
    "95": {
        "Query": "How to parse number string containing commas into an integer in java?",
        "GroundTruth": [
            "java.text.DateFormat.getNumberInstance().parse()"
        ],
        "APIClasses": [
            "java.text.DateFormat.getNumberInstance()"
        ],
        "Source": "Stack Overflow"
    },
    "96": {
        "Query": "Use a absolute layout inside a JScrollPane",
        "GroundTruth": [
            "java.awt.Container.setLayout()"
        ],
        "APIClasses": [
            "java.awt.Container"
        ],
        "Source": "Stack Overflow"
    },
    "97": {
        "Query": "Java - Convert Image to Icon/ImageIcon?",
        "GroundTruth": [
            "javax.swing.ImageIcon.ImageIcon()"
        ],
        "APIClasses": [
            "javax.swing.ImageIcon"
        ],
        "Source": "Stack Overflow"
    },
    "98": {
        "Query": "Detecting if a key (CTRL) is currently pressed without a KeyEvent in Java",
        "GroundTruth": [
            "java.awt.event.InputEvent.getModifiers()"
        ],
        "APIClasses": [
            "java.awt.event.InputEvent"
        ],
        "Source": "Stack Overflow"
    },
    "99": {
        "Query": "converting hashmap to stringarray",
        "GroundTruth": [
            "java.util.Collection.toArray()"
        ],
        "APIClasses": [
            "java.util.Collection"
        ],
        "Source": "Stack Overflow"
    },
    "100": {
        "Query": "How to call c++ functionality from java",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "101": {
        "Query": "Removing spaces at the end of a string in java",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "102": {
        "Query": "How to change Background Color in definite table cell",
        "GroundTruth": [
            "java.awt.Component.setBackground()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "103": {
        "Query": "Unique ID Generation in java",
        "GroundTruth": [
            "java.math.BigInteger.BigInteger()"
        ],
        "APIClasses": [
            "java.math.BigInteger"
        ],
        "Source": "Stack Overflow"
    },
    "104": {
        "Query": "How to track origin of a thread from pools?",
        "GroundTruth": [
            "java.lang.Thread.start()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "105": {
        "Query": "Caching JTable rows",
        "GroundTruth": [
            "javax.swing.SwingWorker.SwingWorker()"
        ],
        "APIClasses": [
            "javax.swing.SwingWorker"
        ],
        "Source": "Stack Overflow"
    },
    "106": {
        "Query": "get timestamp without reinstantiating the calendar and timestamp",
        "GroundTruth": [
            "java.lang.System.currentTimeMillis()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "107": {
        "Query": "Cascade deletion of embeddable objects' collection",
        "GroundTruth": [
            "org.hibernate.Session.delete()"
        ],
        "APIClasses": [
            "org.hibernate.Session"
        ],
        "Source": "Stack Overflow"
    },
    "108": {
        "Query": "set visibility of specific tabs in JTabbedPane",
        "GroundTruth": [
            "javax.swing.JTabbedPane.getTabComponentAt()"
        ],
        "APIClasses": [
            "javax.swing.JTabbedPane"
        ],
        "Source": "Stack Overflow"
    },
    "109": {
        "Query": "How to find location of JTree node on screen",
        "GroundTruth": [
            "javax.swing.JTree.getPathBounds()"
        ],
        "APIClasses": [
            "javax.swing.JTree"
        ],
        "Source": "Stack Overflow"
    },
    "110": {
        "Query": "Read an int[] from a DataInputStream",
        "GroundTruth": [
            "java.io.DataInputStream.readInt()"
        ],
        "APIClasses": [
            "java.io.DataInputStream"
        ],
        "Source": "Stack Overflow"
    },
    "111": {
        "Query": "How do I add components to a JPanel at runtime",
        "GroundTruth": [
            "validate()",
            "javax.swing.JPanel.validate()"
        ],
        "APIClasses": [
            "",
            "javax.swing.JPanel"
        ],
        "Source": "Stack Overflow"
    },
    "112": {
        "Query": "Android: How to write newline in CSV file?",
        "GroundTruth": [
            "java.io.PrintWriter.print()"
        ],
        "APIClasses": [
            "java.io.PrintWriter"
        ],
        "Source": "Stack Overflow"
    },
    "113": {
        "Query": "How to parse hex color String to Integer",
        "GroundTruth": [
            "java.lang.Long.decode()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Stack Overflow"
    },
    "114": {
        "Query": "How to check if part of a string equals another string in android",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "115": {
        "Query": "benefit of having a treeset over a manually sorted set",
        "GroundTruth": [
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "116": {
        "Query": "How to use Java Swing Actions to create menu items and toolbar items in Netbeans",
        "GroundTruth": [
            "javax.swing.JComboBox.setAction()"
        ],
        "APIClasses": [
            "javax.swing.JComboBox"
        ],
        "Source": "Stack Overflow"
    },
    "117": {
        "Query": "How can I split out individual column values from each line in a text file?",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "118": {
        "Query": "Setting the certificate used by a Java SSL ServerSocket",
        "GroundTruth": [
            "java.lang.System.setProperties()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "119": {
        "Query": "Tokenising a String containing empty tokens",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "120": {
        "Query": "TextUtils.join on integer ArrayList",
        "GroundTruth": [
            "android.text.TextUtils.join()"
        ],
        "APIClasses": [
            "android.text.TextUtils"
        ],
        "Source": "Stack Overflow"
    },
    "121": {
        "Query": "How to get the component that invoked a JPopupMenu?",
        "GroundTruth": [
            "javax.swing.JPopupMenu.getInvoker()"
        ],
        "APIClasses": [
            "javax.swing.JPopupMenu"
        ],
        "Source": "Stack Overflow"
    },
    "122": {
        "Query": "How to execute perl script from java in ubuntu",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "123": {
        "Query": "Extending HashMap<K,V> and synchronizing only puts",
        "GroundTruth": [
            "java.util.Map.get()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Stack Overflow"
    },
    "124": {
        "Query": "Convert MP3 to PCM in Java",
        "GroundTruth": [
            "javax.sound.sampled.AudioSystem.getAudioInputStream()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioSystem"
        ],
        "Source": "Stack Overflow"
    },
    "125": {
        "Query": "json to xml java",
        "GroundTruth": [
            "java.io.ByteArrayInputStream.ByteArrayInputStream()"
        ],
        "APIClasses": [
            "java.io.ByteArrayInputStream"
        ],
        "Source": "Stack Overflow"
    },
    "126": {
        "Query": "How can I decode chinese",
        "GroundTruth": [
            "java.lang.Character.toChars()"
        ],
        "APIClasses": [
            "java.lang.Character"
        ],
        "Source": "Stack Overflow"
    },
    "127": {
        "Query": "Floating point precision: JDBC, double and DECIMAL, how to avoid loss?",
        "GroundTruth": [
            "java.sql.ResultSet.getBigDecimal()"
        ],
        "APIClasses": [
            "java.sql.ResultSet"
        ],
        "Source": "Stack Overflow"
    },
    "128": {
        "Query": "Accessing Image pixel by pixel in Java",
        "GroundTruth": [
            "java.awt.image.BufferedImage.getRGB()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Stack Overflow"
    },
    "129": {
        "Query": "Insert UTC/GMT date in Oracle database with Java and Spring",
        "GroundTruth": [
            "java.sql.PreparedStatement.setDate()"
        ],
        "APIClasses": [
            "java.sql.PreparedStatement"
        ],
        "Source": "Stack Overflow"
    },
    "130": {
        "Query": "In Java, is there something like \"DoEvents\" from VB6",
        "GroundTruth": [
            "java.lang.Thread.yield()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "131": {
        "Query": "How to get multiple regex matches in Java?",
        "GroundTruth": [
            "java.util.regex.Matcher.find()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher"
        ],
        "Source": "Stack Overflow"
    },
    "132": {
        "Query": "updating JLabel image, dynamic via selection",
        "GroundTruth": [
            "javax.swing.JLabel.setIcon()"
        ],
        "APIClasses": [
            "javax.swing.JLabel"
        ],
        "Source": "Stack Overflow"
    },
    "133": {
        "Query": "Best practice to validate null and empty collection in Java",
        "GroundTruth": [
            "org.apache.commons.collections4.CollectionUtils.isEmpty()",
            "org.apache.commons.collections4.MapUtils.isEmpty()"
        ],
        "APIClasses": [
            "org.apache.commons.collections4.CollectionUtils",
            "org.apache.commons.collections4.MapUtils"
        ],
        "Source": "Stack Overflow"
    },
    "134": {
        "Query": "Fetching a resource in Java main method",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "135": {
        "Query": "Converting Message from RabbitMQ into string/json",
        "GroundTruth": [
            "com.rabbitmq.client.Message.getBody()"
        ],
        "APIClasses": [
            "com.rabbitmq.client.Message"
        ],
        "Source": "Stack Overflow"
    },
    "136": {
        "Query": "pass object to Arraylist",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "137": {
        "Query": "Formatting output in Java",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "138": {
        "Query": "How to select an element in the ListViewer",
        "GroundTruth": [
            "org.eclipse.jface.viewers.StructuredViewer.setSelection()"
        ],
        "APIClasses": [
            "org.eclipse.jface.viewers.StructuredViewer"
        ],
        "Source": "Stack Overflow"
    },
    "139": {
        "Query": "Receive and print string array object over socket",
        "GroundTruth": [
            "java.io.ObjectInputStream.readObject()"
        ],
        "APIClasses": [
            "java.io.ObjectInputStream"
        ],
        "Source": "Stack Overflow"
    },
    "140": {
        "Query": "converting array of strings to ArrayList<String>",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "141": {
        "Query": "Remove default padding in JTextPane on Windows",
        "GroundTruth": [
            "javax.swing.text.JTextComponent.getMargin()"
        ],
        "APIClasses": [
            "javax.swing.text.JTextComponent"
        ],
        "Source": "Stack Overflow"
    },
    "142": {
        "Query": "How do I populate a JComboBox with an ArrayList?",
        "GroundTruth": [
            "java.util.List.toArray()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "143": {
        "Query": "Java ArrayList how to add elements at the beginning",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "144": {
        "Query": "How to convert float to int with Java",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "145": {
        "Query": "Creating subset of a Set in Java",
        "GroundTruth": [
            "com.google.common.collect.ImmutableSet.copyOf()"
        ],
        "APIClasses": [
            "com.google.common.collect.ImmutableSet"
        ],
        "Source": "Stack Overflow"
    },
    "146": {
        "Query": "how to check SSL certificate expiration date programmatically in Java",
        "GroundTruth": [
            "java.security.cert.X509Certificate.getNotAfter()"
        ],
        "APIClasses": [
            "java.security.cert.X509Certificate"
        ],
        "Source": "Stack Overflow"
    },
    "147": {
        "Query": "Executing Linux Command in Java",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "148": {
        "Query": "Java ServerSocket connection limit?",
        "GroundTruth": [
            "java.net.ServerSocket()"
        ],
        "APIClasses": [
            "java.net"
        ],
        "Source": "Stack Overflow"
    },
    "149": {
        "Query": "Java: How to get values from console input easily",
        "GroundTruth": [
            "java.io.BufferedReader.readLine()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.io.BufferedReader",
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "150": {
        "Query": "How to override fillOval function in Java?",
        "GroundTruth": [
            "java.awt.Graphics2D.fill()",
            "java.awt.RenderingHints"
        ],
        "APIClasses": [
            "java.awt.Graphics2D",
            "java.awt"
        ],
        "Source": "Stack Overflow"
    },
    "151": {
        "Query": "Adding multiple files with JFileChooser",
        "GroundTruth": [
            "javax.swing.JFileChooser.setMultiSelectionEnabled()"
        ],
        "APIClasses": [
            "javax.swing.JFileChooser"
        ],
        "Source": "Stack Overflow"
    },
    "152": {
        "Query": "Splitting string on multiple spaces in java",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "153": {
        "Query": "Java: How to parse a date strictly?",
        "GroundTruth": [
            "java.text.DateFormat.setLenient()"
        ],
        "APIClasses": [
            "java.text.DateFormat"
        ],
        "Source": "Stack Overflow"
    },
    "154": {
        "Query": "How to find out whether an entity is detached in JPA / Hibernate?",
        "GroundTruth": [
            "javax.persistence.EntityManager.contains()"
        ],
        "APIClasses": [
            "javax.persistence.EntityManager"
        ],
        "Source": "Stack Overflow"
    },
    "155": {
        "Query": "Parsing Java String into GMT Date",
        "GroundTruth": [
            "java.text.DateFormat.formate()"
        ],
        "APIClasses": [
            "java.text.DateFormat"
        ],
        "Source": "Stack Overflow"
    },
    "156": {
        "Query": "Java execute a program in java program for mac",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "157": {
        "Query": "Java BigDecimal remove decimal and trailing numbers",
        "GroundTruth": [
            "java.math.BigDecimal.toBigInteger()"
        ],
        "APIClasses": [
            "java.math.BigDecimal"
        ],
        "Source": "Stack Overflow"
    },
    "158": {
        "Query": "Java replace method, replacing with empty character",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "159": {
        "Query": "Read xml in java - all nodes and data sort",
        "GroundTruth": [
            "org.w3c.dom.Document.getChildNodes()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document"
        ],
        "Source": "Stack Overflow"
    },
    "160": {
        "Query": "How do I store time in a variable?",
        "GroundTruth": [
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Stack Overflow"
    },
    "161": {
        "Query": "Fast sqrt in Java at the expense of accuracy",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "162": {
        "Query": "Getting data of a direct buffer object returned from JNI method to Java?",
        "GroundTruth": [
            "java.nio.ByteBuffer.order()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Stack Overflow"
    },
    "163": {
        "Query": "Listing files in the order in which they were created in folder",
        "GroundTruth": [
            "java.io.File.listFiles()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "164": {
        "Query": "Resolve a path name with .. parent directory specifiers (\"dot dot\") without resolving symlinks",
        "GroundTruth": [
            "org.apache.commons.io.FilenameUtils.normalize()"
        ],
        "APIClasses": [
            "org.apache.commons.io.FilenameUtils"
        ],
        "Source": "Stack Overflow"
    },
    "165": {
        "Query": "Setting the SWT Button to pressed state programmatically?",
        "GroundTruth": [
            "Button.setSelection()"
        ],
        "APIClasses": [
            "Button"
        ],
        "Source": "Stack Overflow"
    },
    "166": {
        "Query": "Java Scanner with URLConnection",
        "GroundTruth": [
            "java.util.Scanner.Scanner()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Stack Overflow"
    },
    "167": {
        "Query": "Is there a Java / Android equivalent to the iOS function \"componentsJoinedByString\" for an NSArray?",
        "GroundTruth": [
            "java.lang.String.join()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "168": {
        "Query": "StringTokenizer for split space",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "169": {
        "Query": "How can I get the 5th root in Java?",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "170": {
        "Query": "Recording/Playback Gesture in Android",
        "GroundTruth": [
            "android.gesture.Gesture.toPath()"
        ],
        "APIClasses": [
            "android.gesture.Gesture"
        ],
        "Source": "Stack Overflow"
    },
    "171": {
        "Query": "Make a SurfaceView transparent without setZOrderOnTop(true)",
        "GroundTruth": [
            "android.view.SurfaceView.setZOrderOnTop()"
        ],
        "APIClasses": [
            "android.view.SurfaceView"
        ],
        "Source": "Stack Overflow"
    },
    "172": {
        "Query": "How to get the EXACT middle of a screen, even when re-sized",
        "GroundTruth": [
            "java.awt.Window.setLocationRelativeTo()"
        ],
        "APIClasses": [
            "java.awt.Window"
        ],
        "Source": "Stack Overflow"
    },
    "173": {
        "Query": "Cast smallint unsigned in Java",
        "GroundTruth": [
            "java.lang.UShort.intValue()"
        ],
        "APIClasses": [
            "java.lang.UShort"
        ],
        "Source": "Stack Overflow"
    },
    "174": {
        "Query": "Check if a type is an interface",
        "GroundTruth": [
            "java.lang.Class.isInterface()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "175": {
        "Query": "How to execute VBS script in Java?",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "176": {
        "Query": "Making Thread sleep for random amount of MS",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "177": {
        "Query": "Java - stopping all tasks in ExecutorService",
        "GroundTruth": [
            "java.lang.Thread.isInterrupted()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "178": {
        "Query": "Convert BufferedImage to ImageIcon",
        "GroundTruth": [
            "javax.swing.ImageIcon.ImageIcon()"
        ],
        "APIClasses": [
            "javax.swing.ImageIcon"
        ],
        "Source": "Stack Overflow"
    },
    "179": {
        "Query": "Spring application showing server time instead of client time",
        "GroundTruth": [
            "java.text.SimpleDateFormat()"
        ],
        "APIClasses": [
            "java.text"
        ],
        "Source": "Stack Overflow"
    },
    "180": {
        "Query": "Split a String on | (pipe) in Java",
        "GroundTruth": [
            "java.util.regex.Pattern.quote()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Stack Overflow"
    },
    "181": {
        "Query": "Changing the colour of JComboBox selected item permanantly",
        "GroundTruth": [
            "list.getModel()",
            "JList.ListSelectionModel()"
        ],
        "APIClasses": [
            "list",
            "JList"
        ],
        "Source": "Stack Overflow"
    },
    "182": {
        "Query": "How to read the list of files/folders on a shared location?",
        "GroundTruth": [
            "java.io.File.list()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "183": {
        "Query": "Running a bash shell script in java",
        "GroundTruth": [
            "java.lang.Runtime.exec()",
            "java.lang.Process.waitFor()",
            "java.lang.ProcessBuilder.ProcessBuilder.start()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Process",
            "java.lang.ProcessBuilder.ProcessBuilder"
        ],
        "Source": "Stack Overflow"
    },
    "184": {
        "Query": "Split a String by another string",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "185": {
        "Query": "How do I put only unique values into an array?",
        "GroundTruth": [
            "java.util.Set.toArray()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Stack Overflow"
    },
    "186": {
        "Query": "sort specific index in array in descending order",
        "GroundTruth": [
            "java.util.Arrays.sort()",
            "Collections.reverseOrder()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "Collections"
        ],
        "Source": "Stack Overflow"
    },
    "187": {
        "Query": "How to extract a string between two delimiters",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "188": {
        "Query": "Java/Android absolute fastest way to periodically get current seconds (0-59) and/or milliseconds (0-999)",
        "GroundTruth": [
            "java.lang.System.currentTimeMillis()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "189": {
        "Query": "Java - Convert hex to decimal - make a string = the correct number",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "190": {
        "Query": "how to get button name on click event in java",
        "GroundTruth": [
            "javafx.event.ActionEvent.getSource()"
        ],
        "APIClasses": [
            "javafx.event.ActionEvent"
        ],
        "Source": "Stack Overflow"
    },
    "191": {
        "Query": "How can I generate a random 15 digit-long in java",
        "GroundTruth": [
            "java.util.Random.nextLong()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Stack Overflow"
    },
    "192": {
        "Query": "Write File without deleting older data",
        "GroundTruth": [
            "java.io.FileWriter.FileWriter()"
        ],
        "APIClasses": [
            "java.io.FileWriter"
        ],
        "Source": "Stack Overflow"
    },
    "193": {
        "Query": "Remove all occurrences of \\ from string",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "194": {
        "Query": "How to acquire the source from a MuleEvent?",
        "GroundTruth": [
            "org.mule.api.MuleEvent.getMessage().getPayload()"
        ],
        "APIClasses": [
            "org.mule.api.MuleEvent.getMessage()"
        ],
        "Source": "Stack Overflow"
    },
    "195": {
        "Query": "How to get an EXACT Character in a CharSequence?",
        "GroundTruth": [
            "java.lang.CharSequence.charAt()"
        ],
        "APIClasses": [
            "java.lang.CharSequence"
        ],
        "Source": "Stack Overflow"
    },
    "196": {
        "Query": "Converting string to float in Java without round it",
        "GroundTruth": [
            "java.lang.Double.parseDouble()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Stack Overflow"
    },
    "197": {
        "Query": "Size of extended jframe?",
        "GroundTruth": [
            "java.awt.Component.getSize().getWidth()"
        ],
        "APIClasses": [
            "java.awt.Component.getSize()"
        ],
        "Source": "Stack Overflow"
    },
    "198": {
        "Query": "How to get a Date object from String",
        "GroundTruth": [
            "java.sql.Date.toString()"
        ],
        "APIClasses": [
            "java.sql.Date"
        ],
        "Source": "Stack Overflow"
    },
    "199": {
        "Query": "Float returning exponential notation",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "200": {
        "Query": "Java Swing Focus on Tab key",
        "GroundTruth": [
            "java.awt.Component.setFocusable()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "201": {
        "Query": "Most efficient way to convert java.lang.Long to primitive int",
        "GroundTruth": [
            "java.lang.Long.intValue()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Stack Overflow"
    },
    "202": {
        "Query": "Waiting for a short period of time in EJB 3.0",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "203": {
        "Query": "android reading from a file",
        "GroundTruth": [
            "java.lang.StringBuilder.append()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder"
        ],
        "Source": "Stack Overflow"
    },
    "204": {
        "Query": "Java: Set timeout for threads in a ThreadPool",
        "GroundTruth": [
            "java.util.concurrent.ExecutorService.invokeAll()"
        ],
        "APIClasses": [
            "java.util.concurrent.ExecutorService"
        ],
        "Source": "Stack Overflow"
    },
    "205": {
        "Query": "Determine Java version through JMX",
        "GroundTruth": [
            "java.lang.management.RuntimeMXBean.getSystemProperties()"
        ],
        "APIClasses": [
            "java.lang.management.RuntimeMXBean"
        ],
        "Source": "Stack Overflow"
    },
    "206": {
        "Query": "How do you set a focus on Textfield in Swing?",
        "GroundTruth": [
            "java.awt.Component.requestFocus()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "207": {
        "Query": "How to deal with derived color in Nimbus Look and Feel?",
        "GroundTruth": [
            "javax.swing.plaf.nimbus.TextAreaPainter()"
        ],
        "APIClasses": [
            "javax.swing.plaf.nimbus"
        ],
        "Source": "Stack Overflow"
    },
    "208": {
        "Query": "How can I sort a string with integers in Java?",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "209": {
        "Query": "Array of buttons, make only one button change its text when clicked",
        "GroundTruth": [
            "javax.swing.AbstractButton.setText()"
        ],
        "APIClasses": [
            "javax.swing.AbstractButton"
        ],
        "Source": "Stack Overflow"
    },
    "210": {
        "Query": "How do I get the default font for Swing JTabbedPane labels?",
        "GroundTruth": [
            "javax.swing.UIManager.getDefaults()"
        ],
        "APIClasses": [
            "javax.swing.UIManager"
        ],
        "Source": "Stack Overflow"
    },
    "211": {
        "Query": "Matching words with spaces regex in java",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "212": {
        "Query": "How to get the enclosing method node with JDT?",
        "GroundTruth": [
            "org.eclipse.jdt.internal.corext.dom.ASTNodes.getParent()"
        ],
        "APIClasses": [
            "org.eclipse.jdt.internal.corext.dom.ASTNodes"
        ],
        "Source": "Stack Overflow"
    },
    "213": {
        "Query": "Get total size of file in bytes",
        "GroundTruth": [
            "java.io.File.length()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "214": {
        "Query": "Printing unique object identity for debugging purposes in Java",
        "GroundTruth": [
            "java.lang.System.identityHashCode()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "215": {
        "Query": "Check if an ArrayList contains every element from another ArrayList (or Collection)",
        "GroundTruth": [
            "java.util.Collection.containsAll()"
        ],
        "APIClasses": [
            "java.util.Collection"
        ],
        "Source": "Stack Overflow"
    },
    "216": {
        "Query": "Move the first element of a list to the end",
        "GroundTruth": [
            "java.util.Collections.rotate()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "217": {
        "Query": "Passing environment variables to a JVM, in a platform-independent manner",
        "GroundTruth": [
            "java.lang.System.getenv()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "218": {
        "Query": "Get the interface name from the implementation class",
        "GroundTruth": [
            "java.lang.Class.getInterfaces()",
            "java.lang.Class.getSimpleName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "219": {
        "Query": "java - check whether a string contains any characters other than spaces",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "220": {
        "Query": "Java Scanner class reading strings",
        "GroundTruth": [
            "java.util.Scanner.nextLine()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Stack Overflow"
    },
    "221": {
        "Query": "How can I detect whether a Mac has a Retina display from Java?",
        "GroundTruth": [
            "java.awt.Toolkit.getDesktopProperty()"
        ],
        "APIClasses": [
            "java.awt.Toolkit"
        ],
        "Source": "Stack Overflow"
    },
    "222": {
        "Query": "Java jtable allow row selection",
        "GroundTruth": [
            "javax.swing.JTable.setRowSelectionAllowed()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Stack Overflow"
    },
    "223": {
        "Query": "How to display Indian Numbering format in iReport?",
        "GroundTruth": [
            "com.ibm.icu.text.NumberFormat.getCurrencyInstance().format()"
        ],
        "APIClasses": [
            "com.ibm.icu.text.NumberFormat.getCurrencyInstance()"
        ],
        "Source": "Stack Overflow"
    },
    "224": {
        "Query": "How to change default/start value of JSlider",
        "GroundTruth": [
            "javax.swing.JSlider.setValue()"
        ],
        "APIClasses": [
            "javax.swing.JSlider"
        ],
        "Source": "Stack Overflow"
    },
    "225": {
        "Query": "Java create array from generic runtime type of another array",
        "GroundTruth": [
            "getClass().getComponentType().getComponentType()"
        ],
        "APIClasses": [
            "getClass().getComponentType()"
        ],
        "Source": "Stack Overflow"
    },
    "226": {
        "Query": "Java: basic plotting, drawing a point/dot/pixel",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Stack Overflow"
    },
    "227": {
        "Query": "read time from text file in java",
        "GroundTruth": [
            "org.joda.time.format.DateTimeFormatter.parseLocalTime()"
        ],
        "APIClasses": [
            "org.joda.time.format.DateTimeFormatter"
        ],
        "Source": "Stack Overflow"
    },
    "228": {
        "Query": "Getting value from JTable as Integer?",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "229": {
        "Query": "How do I generate a 160 bit prime number in java?",
        "GroundTruth": [
            "java.math.BigInteger.probablePrime()"
        ],
        "APIClasses": [
            "java.math.BigInteger"
        ],
        "Source": "Stack Overflow"
    },
    "230": {
        "Query": "Clearing a group of radio buttons in Java",
        "GroundTruth": [
            "javax.swing.ButtonGroup.clearSelection()"
        ],
        "APIClasses": [
            "javax.swing.ButtonGroup"
        ],
        "Source": "Stack Overflow"
    },
    "231": {
        "Query": "Moving a row in jTable",
        "GroundTruth": [
            "javax.swing.table.DefaultTableModel.moveRow()"
        ],
        "APIClasses": [
            "javax.swing.table.DefaultTableModel"
        ],
        "Source": "Stack Overflow"
    },
    "232": {
        "Query": "Multicast server receive the same data it sends",
        "GroundTruth": [
            "java.net.MulticastSocket.setLoopbackMode()"
        ],
        "APIClasses": [
            "java.net.MulticastSocket"
        ],
        "Source": "Stack Overflow"
    },
    "233": {
        "Query": "Fill rectangle with image in Java",
        "GroundTruth": [
            "java.awt.Graphics.drawImage()"
        ],
        "APIClasses": [
            "java.awt.Graphics"
        ],
        "Source": "Stack Overflow"
    },
    "234": {
        "Query": "Capitalise first letter in String",
        "GroundTruth": [
            "java.lang.String.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "235": {
        "Query": "Substring of a link String",
        "GroundTruth": [
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "236": {
        "Query": "Get jSON Response for POST",
        "GroundTruth": [
            "org.apache.http.util.EntityUtils.toString()"
        ],
        "APIClasses": [
            "org.apache.http.util.EntityUtils"
        ],
        "Source": "Stack Overflow"
    },
    "237": {
        "Query": "How to give a refresh equal to Ctrl+ R in gwt web app?",
        "GroundTruth": [
            "com.google.gwt.user.client.Window.Location.reload()"
        ],
        "APIClasses": [
            "com.google.gwt.user.client.Window.Location"
        ],
        "Source": "Stack Overflow"
    },
    "238": {
        "Query": "how to detect last running thread in java",
        "GroundTruth": [
            "java.lang.Thread.join()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "239": {
        "Query": "Get Primary Key and Foreign Key constraint",
        "GroundTruth": [
            "java.sql.DatabaseMetaData.getIndexInfo()"
        ],
        "APIClasses": [
            "java.sql.DatabaseMetaData"
        ],
        "Source": "Stack Overflow"
    },
    "240": {
        "Query": "How to copy(memory) array in java?",
        "GroundTruth": [
            "java.util.ArrayList.clone()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Stack Overflow"
    },
    "241": {
        "Query": "Where to put a text file in Grails, and how to get the path",
        "GroundTruth": [
            "java.lang.ClassLoader.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "242": {
        "Query": "Show prompt before closing JFrame",
        "GroundTruth": [
            "javax.swing.JFrame.setDefaultCloseOperation()"
        ],
        "APIClasses": [
            "javax.swing.JFrame"
        ],
        "Source": "Stack Overflow"
    },
    "243": {
        "Query": "How do I receive input from a textbox in a JFrame?",
        "GroundTruth": [
            "JTextField.getText()"
        ],
        "APIClasses": [
            "JTextField"
        ],
        "Source": "Stack Overflow"
    },
    "244": {
        "Query": "Input stream reader- read method return wrong value",
        "GroundTruth": [
            "parseInt",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "",
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "245": {
        "Query": "Remove first white space in Java",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "246": {
        "Query": "Java delete files of certain size",
        "GroundTruth": [
            "java.io.File.listFiles()",
            "java.io.FileFilter.accept()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.FileFilter"
        ],
        "Source": "Stack Overflow"
    },
    "247": {
        "Query": "Finding duplicate words within a string regex C/W",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "248": {
        "Query": "How to Instantiate Joda DateTime from TimeZone String ID and Epoch",
        "GroundTruth": [
            "java.lang.System.currentTimeMillis()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "249": {
        "Query": "Adding a background image to a JPanel",
        "GroundTruth": [
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Stack Overflow"
    },
    "250": {
        "Query": "Create a .eml (email) file in Java",
        "GroundTruth": [
            "javax.mail.Message.writeTo()"
        ],
        "APIClasses": [
            "javax.mail.Message"
        ],
        "Source": "Stack Overflow"
    },
    "251": {
        "Query": "compare two numeric String values",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "252": {
        "Query": "Resolving ip-address of a hostname",
        "GroundTruth": [
            "java.net.InetAddress.getHostAddress()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Stack Overflow"
    },
    "253": {
        "Query": "Best practice for setting focus to a Swing control in a JPanel",
        "GroundTruth": [
            "javax.swing.JComponent.requestFocusInWindow()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "254": {
        "Query": "Getting full path from an HTTP request",
        "GroundTruth": [
            "javax.xml.ws.spi.http.HttpExchange.getRequestURI()"
        ],
        "APIClasses": [
            "javax.xml.ws.spi.http.HttpExchange"
        ],
        "Source": "Stack Overflow"
    },
    "255": {
        "Query": "Java DOM How to check if node exists in XML",
        "GroundTruth": [
            "org.w3c.dom.Element.getElementsByTagName()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element"
        ],
        "Source": "Stack Overflow"
    },
    "256": {
        "Query": "Calculating Skewness and kurtosis with apache commons",
        "GroundTruth": [
            "org.apache.commons.math3.stat.descriptive.moment.Kurtosis.evaluate()"
        ],
        "APIClasses": [
            "org.apache.commons.math3.stat.descriptive.moment.Kurtosis"
        ],
        "Source": "Stack Overflow"
    },
    "257": {
        "Query": "How to get simple classname from class with interface reference?",
        "GroundTruth": [
            "java.lang.Class.getSimpleName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "258": {
        "Query": "How to expand JTree nodes (in advance), but keep them invisible",
        "GroundTruth": [
            "javax.swing.JTree.addTreeExpansionListener()"
        ],
        "APIClasses": [
            "javax.swing.JTree"
        ],
        "Source": "Stack Overflow"
    },
    "259": {
        "Query": "Create a File in a Protected Folder",
        "GroundTruth": [
            "javax.swing.filechooser.FileSystemView.getHomeDirectory()"
        ],
        "APIClasses": [
            "javax.swing.filechooser.FileSystemView"
        ],
        "Source": "Stack Overflow"
    },
    "260": {
        "Query": "Get absolute file path via Java applet or flash",
        "GroundTruth": [
            "javax.swing.JFileChooser.getSelectedFile()"
        ],
        "APIClasses": [
            "javax.swing.JFileChooser"
        ],
        "Source": "Stack Overflow"
    },
    "261": {
        "Query": "Is it possible to write soap message to a xml file?",
        "GroundTruth": [
            "javax.xml.soap.SOAPMessage.writeTo()"
        ],
        "APIClasses": [
            "javax.xml.soap.SOAPMessage"
        ],
        "Source": "Stack Overflow"
    },
    "262": {
        "Query": "data type to represent a big decimal in java",
        "GroundTruth": [
            "BigDecimal()"
        ],
        "APIClasses": [
            ""
        ],
        "Source": "Stack Overflow"
    },
    "263": {
        "Query": "Find and kill a specific Java process from another Java App",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "264": {
        "Query": "How to copy from a string to another string in Java?",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "265": {
        "Query": "Android Get the Background Ressource of an ImageButton",
        "GroundTruth": [
            "android.view.View.getBackground()"
        ],
        "APIClasses": [
            "android.view.View"
        ],
        "Source": "Stack Overflow"
    },
    "266": {
        "Query": "How to handle path to resource in maven project packed to jar",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "267": {
        "Query": "Java : split a string that containing special characters",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "268": {
        "Query": "Split a string in Java with blank removed",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "269": {
        "Query": "printing the address of the string instances",
        "GroundTruth": [
            "java.lang.String.hashCode()",
            "java.lang.Integer.toHexString()",
            "java.lang.System.out.println()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer",
            "java.lang.System.out"
        ],
        "Source": "Stack Overflow"
    },
    "270": {
        "Query": "Add listener to all objects in a JPanel",
        "GroundTruth": [
            "java.awt.Container.getComponents()"
        ],
        "APIClasses": [
            "java.awt.Container"
        ],
        "Source": "Stack Overflow"
    },
    "271": {
        "Query": "Hibernate criteria group by date without time",
        "GroundTruth": [
            "org.hibernate.criterion.sqlGroupProjection()"
        ],
        "APIClasses": [
            "org.hibernate.criterion"
        ],
        "Source": "Stack Overflow"
    },
    "272": {
        "Query": "how to use setLocation to move componets",
        "GroundTruth": [
            "javax.swing.JFrame.setLocation()"
        ],
        "APIClasses": [
            "javax.swing.JFrame"
        ],
        "Source": "Stack Overflow"
    },
    "273": {
        "Query": "TreeCellRenderer: how to set background color?",
        "GroundTruth": [
            "setOpaque()",
            "javax.swing.tree.TreeCellRenderer.setOpaque()"
        ],
        "APIClasses": [
            "",
            "javax.swing.tree.TreeCellRenderer"
        ],
        "Source": "Stack Overflow"
    },
    "274": {
        "Query": "Managing JInternalFrames in a Swing MDI",
        "GroundTruth": [
            "javax.swing.JInternalFrame.setSelected()"
        ],
        "APIClasses": [
            "javax.swing.JInternalFrame"
        ],
        "Source": "Stack Overflow"
    },
    "275": {
        "Query": "Read an array of ints at once from RandomAccessFile",
        "GroundTruth": [
            "java.nio.ByteBuffer.wrap()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Stack Overflow"
    },
    "276": {
        "Query": "JButton only appears after mouse rolls over it",
        "GroundTruth": [
            "javax.swing.JComponent.paintComponent()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "277": {
        "Query": "How to handle synchronization of frequent concurrent read/writes on a Java ArrayList",
        "GroundTruth": [
            "java.util.Collections.synchronizedList()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "278": {
        "Query": "converting a calendar date to a string?",
        "GroundTruth": [
            "java.text.SimpleDateFormat.SimpleDateFormat()"
        ],
        "APIClasses": [
            "java.text.SimpleDateFormat"
        ],
        "Source": "Stack Overflow"
    },
    "279": {
        "Query": "Checking whether all tasks in ThreadPoolExecutor are completed",
        "GroundTruth": [
            "java.util.concurrent.ThreadPoolExecutor.getActiveCount()"
        ],
        "APIClasses": [
            "java.util.concurrent.ThreadPoolExecutor"
        ],
        "Source": "Stack Overflow"
    },
    "280": {
        "Query": "hibernate: create table with names in lowercase",
        "GroundTruth": [
            "java.lang.String.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "281": {
        "Query": "Accessing properties of subclasses and superclasses in java with reflection",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "282": {
        "Query": "How to search for a special character in java string?",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "283": {
        "Query": "How to specify Log4J 2.x config location?",
        "GroundTruth": [
            "org.apache.logging.log4j.core.config.Configurator.initialize()"
        ],
        "APIClasses": [
            "org.apache.logging.log4j.core.config.Configurator"
        ],
        "Source": "Stack Overflow"
    },
    "284": {
        "Query": "Java convert StringBuilder into CharBuffer",
        "GroundTruth": [
            "java.nio.CharBuffer.append()"
        ],
        "APIClasses": [
            "java.nio.CharBuffer"
        ],
        "Source": "Stack Overflow"
    },
    "285": {
        "Query": "How do I draw over top of a JScrollPane?",
        "GroundTruth": [
            "java.awt.event.InputEvent.consume()"
        ],
        "APIClasses": [
            "java.awt.event.InputEvent"
        ],
        "Source": "Stack Overflow"
    },
    "286": {
        "Query": "How to get the Array Class for a given Class in Java?",
        "GroundTruth": [
            "java.lang.Class.arrayType()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "287": {
        "Query": "How to add buttons inside a cell of jtable and give it action",
        "GroundTruth": [
            "javax.swing.table.TableModel.isCellEditable()"
        ],
        "APIClasses": [
            "javax.swing.table.TableModel"
        ],
        "Source": "Stack Overflow"
    },
    "288": {
        "Query": "How to convert Youtube API V3 duration in Java",
        "GroundTruth": [
            "org.joda.time.format.ISOPeriodFormat.standard()"
        ],
        "APIClasses": [
            "org.joda.time.format.ISOPeriodFormat"
        ],
        "Source": "Stack Overflow"
    },
    "289": {
        "Query": "Returning values from a java program back to a batch file",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "290": {
        "Query": "From arrayList to long[]",
        "GroundTruth": [
            "java.util.List.toArray()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "291": {
        "Query": "How to Structure JSON response properly in Java",
        "GroundTruth": [
            "setHeader()",
            "avax.servlet.http.HttpServletResponse.setHeader()"
        ],
        "APIClasses": [
            "",
            "avax.servlet.http.HttpServletResponse"
        ],
        "Source": "Stack Overflow"
    },
    "292": {
        "Query": "How to remove integer from list?",
        "GroundTruth": [
            "java.util.List.remove()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "293": {
        "Query": "How to freeze a HashMap to prevent further changes?",
        "GroundTruth": [
            "java.util.Collections.unmodifiableMap()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "294": {
        "Query": "How to convert public key and signature value in human readable format",
        "GroundTruth": [
            "javax.xml.bind.DatatypeConverter.printHexBinary()"
        ],
        "APIClasses": [
            "javax.xml.bind.DatatypeConverter"
        ],
        "Source": "Stack Overflow"
    },
    "295": {
        "Query": "How to Add Element to JList in swing?",
        "GroundTruth": [
            "javax.swing.JComboBox.addItem()"
        ],
        "APIClasses": [
            "javax.swing.JComboBox"
        ],
        "Source": "Stack Overflow"
    },
    "296": {
        "Query": "Add file to a folder that is inside a zip file java",
        "GroundTruth": [
            "java.nio.file.Path.resolve()"
        ],
        "APIClasses": [
            "java.nio.file.Path"
        ],
        "Source": "Stack Overflow"
    },
    "297": {
        "Query": "JFrame to behave as JDialog?",
        "GroundTruth": [
            "java.awt.Dialog.setModal()"
        ],
        "APIClasses": [
            "java.awt.Dialog"
        ],
        "Source": "Stack Overflow"
    },
    "298": {
        "Query": "How to put date from mysql database into JFreeChart graph?",
        "GroundTruth": [
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Stack Overflow"
    },
    "299": {
        "Query": "I would like to add a right-padding to a JTable column, is it possible?",
        "GroundTruth": [
            "javax.swing.AbstractButton.setHorizontalAlignment()"
        ],
        "APIClasses": [
            "javax.swing.AbstractButton"
        ],
        "Source": "Stack Overflow"
    },
    "300": {
        "Query": "Java SessionID: How to get the Name of the GET SessionID Parameter?",
        "GroundTruth": [
            "HttpSession.getId()"
        ],
        "APIClasses": [
            "HttpSession"
        ],
        "Source": "Stack Overflow"
    },
    "301": {
        "Query": "How to find the largest power of 2 less than the given number",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "302": {
        "Query": "Java swing keybinding",
        "GroundTruth": [
            "javax.swing.JComponent.getInputMap()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "303": {
        "Query": "Multiples Hadoop FileSystem instances",
        "GroundTruth": [
            "org.apache.hadoop.conf.Configuration.setBoolean()"
        ],
        "APIClasses": [
            "org.apache.hadoop.conf.Configuration"
        ],
        "Source": "Stack Overflow"
    },
    "304": {
        "Query": "How to use Wrap Method of ByteBuffer in Java",
        "GroundTruth": [
            "java.nio.ByteBuffer.getInt()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Stack Overflow"
    },
    "305": {
        "Query": "How to parse end of line string in Java",
        "GroundTruth": [
            "java.io.BufferedReader.readLine()"
        ],
        "APIClasses": [
            "java.io.BufferedReader"
        ],
        "Source": "Stack Overflow"
    },
    "306": {
        "Query": "Replace tags in a word file",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "307": {
        "Query": "Convert JSON from URL to JSONNode",
        "GroundTruth": [
            "com.fasterxml.jackson.core.JsonPointer.of()"
        ],
        "APIClasses": [
            "com.fasterxml.jackson.core.JsonPointer"
        ],
        "Source": "Stack Overflow"
    },
    "308": {
        "Query": "How to add a checkbox in a column in a table in Java",
        "GroundTruth": [
            "javax.swing.JTable.getColumnClass()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Stack Overflow"
    },
    "309": {
        "Query": "JTable, disable user column dragging",
        "GroundTruth": [
            "javax.swing.table.JTableHeader.setReorderingAllowed()"
        ],
        "APIClasses": [
            "javax.swing.table.JTableHeader"
        ],
        "Source": "Stack Overflow"
    },
    "310": {
        "Query": "Save HTMLDocument",
        "GroundTruth": [
            "javax.swing.text.html.HTMLEditorKit.write()"
        ],
        "APIClasses": [
            "javax.swing.text.html.HTMLEditorKit"
        ],
        "Source": "Stack Overflow"
    },
    "311": {
        "Query": "How to run an adb command through a Java file?",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "312": {
        "Query": "resizing image to fit exactly Jlabel of 300 by 300 px",
        "GroundTruth": [
            "java.awt.Image.getScaledInstance()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Stack Overflow"
    },
    "313": {
        "Query": "Deserialization of enum in Java",
        "GroundTruth": [
            "java.io.ObjectInputStream.readObject()"
        ],
        "APIClasses": [
            "java.io.ObjectInputStream"
        ],
        "Source": "Stack Overflow"
    },
    "314": {
        "Query": "Java - replace all instances of path separators with system path separator",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "315": {
        "Query": "How do I determine when a Hashtable with double hashing is full?",
        "GroundTruth": [
            "java.util.Map.size()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Stack Overflow"
    },
    "316": {
        "Query": "Wait for all threads in an Executor to finish?",
        "GroundTruth": [
            "java.util.concurrent.ThreadPoolExecutor.awaitTermination()"
        ],
        "APIClasses": [
            "java.util.concurrent.ThreadPoolExecutor"
        ],
        "Source": "Stack Overflow"
    },
    "317": {
        "Query": "How to send a char or int to a method which require string a s parameter in Java?",
        "GroundTruth": [
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "318": {
        "Query": "get list of all hostnames matching certificate",
        "GroundTruth": [
            "java.security.cert.X509Certificate.getSubjectAlternativeNames()"
        ],
        "APIClasses": [
            "java.security.cert.X509Certificate"
        ],
        "Source": "Stack Overflow"
    },
    "319": {
        "Query": "Wait for process to finish before proceeding in Java",
        "GroundTruth": [
            "java.lang.Process.waitFor()"
        ],
        "APIClasses": [
            "java.lang.Process"
        ],
        "Source": "Stack Overflow"
    },
    "320": {
        "Query": "Java Regex: Match any word from pattern",
        "GroundTruth": [
            "java.util.regex.Pattern.quote()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Stack Overflow"
    },
    "321": {
        "Query": "How to check if a class implements a interface",
        "GroundTruth": [
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "322": {
        "Query": "Getting the JDBC column types",
        "GroundTruth": [
            "java.sql.DatabaseMetaData.getColumns()"
        ],
        "APIClasses": [
            "java.sql.DatabaseMetaData"
        ],
        "Source": "Stack Overflow"
    },
    "323": {
        "Query": "How to read special characters from file system in libgdx",
        "GroundTruth": [
            "readString()"
        ],
        "APIClasses": [
            ""
        ],
        "Source": "Stack Overflow"
    },
    "324": {
        "Query": "Java - How to know when thread is waiting?",
        "GroundTruth": [
            "java.lang.Thread.getState()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "325": {
        "Query": "Setting source port on a Java Socket?",
        "GroundTruth": [
            "java.net.ServerSocket.bind()"
        ],
        "APIClasses": [
            "java.net.ServerSocket"
        ],
        "Source": "Stack Overflow"
    },
    "326": {
        "Query": "ArrayList automatically adding null items",
        "GroundTruth": [
            "java.util.ArrayList.size()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Stack Overflow"
    },
    "327": {
        "Query": "String to java.sql.Date",
        "GroundTruth": [
            "java.sql.Date.valueOf()"
        ],
        "APIClasses": [
            "java.sql.Date"
        ],
        "Source": "Stack Overflow"
    },
    "328": {
        "Query": "Instantiating a class in Java with reflection",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "329": {
        "Query": "Shutdown scheduler - Java",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "330": {
        "Query": "Mockito: mocking an arraylist that will be looped in a for loop",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "331": {
        "Query": "Splitting a Java String return empty array?",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "332": {
        "Query": "Check if Date X is after Date Y with JodaTime",
        "GroundTruth": [
            "org.joda.time.ReadableInstant.isAfter()"
        ],
        "APIClasses": [
            "org.joda.time.ReadableInstant"
        ],
        "Source": "Stack Overflow"
    },
    "333": {
        "Query": "Java SAX Searching an XML file for Data",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "334": {
        "Query": "Java - load data into a Singleton when it is accessed, but only after time has passed",
        "GroundTruth": [
            "idk",
            ".getInstance().method()",
            "getInstance()"
        ],
        "APIClasses": [
            "",
            ".getInstance()"
        ],
        "Source": "Stack Overflow"
    },
    "335": {
        "Query": "In Java, best way to check if Selenium WebDriver has quit",
        "GroundTruth": [
            "org.openqa.selenium.WebDriver.toString().contains()"
        ],
        "APIClasses": [
            "org.openqa.selenium.WebDriver.toString()"
        ],
        "Source": "Stack Overflow"
    },
    "336": {
        "Query": "Java Finalize method call when close the application",
        "GroundTruth": [
            "java.lang.System.runFinalizersOnExit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "337": {
        "Query": "java.nio.file.Files alternative for jdk 1.6 or less",
        "GroundTruth": [
            "com.google.common.io.Files.copy()"
        ],
        "APIClasses": [
            "com.google.common.io.Files"
        ],
        "Source": "Stack Overflow"
    },
    "338": {
        "Query": "regex to match on three leading and ending single quotes",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Stack Overflow"
    },
    "339": {
        "Query": "BouncyCastle: Extract public key informationfrom Certificate Signing Request",
        "GroundTruth": [
            "org.bouncycastle.pkcs.jcajce.JcaPKCS10CertificationRequest.getPublicKey()"
        ],
        "APIClasses": [
            "org.bouncycastle.pkcs.jcajce.JcaPKCS10CertificationRequest"
        ],
        "Source": "Stack Overflow"
    },
    "340": {
        "Query": "How to pull out substrings (words) from string?",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "341": {
        "Query": "CDI-Interceptor: Get param from intercepted Method",
        "GroundTruth": [
            "InvocationContext.getParameters()"
        ],
        "APIClasses": [
            "InvocationContext"
        ],
        "Source": "Stack Overflow"
    },
    "342": {
        "Query": "List with max elements",
        "GroundTruth": [
            "java.util.List.remove()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "343": {
        "Query": "Best practice to start a swing application",
        "GroundTruth": [
            "javax.swing.SwingUtilities.invokeLater()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Stack Overflow"
    },
    "344": {
        "Query": "Sorting data by column in java",
        "GroundTruth": [
            "javax.swing.JTable.setAutoCreateRowSorter()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Stack Overflow"
    },
    "345": {
        "Query": "how to restrict the Formatter from expanding",
        "GroundTruth": [
            "java.util.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter"
        ],
        "Source": "Stack Overflow"
    },
    "346": {
        "Query": "Check String whether it contains only Latin characters?",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "347": {
        "Query": "How to stop java process gracefully?",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "348": {
        "Query": "Java: how to make a private field Map immutable within a class?",
        "GroundTruth": [
            "java.util.Collections.unmodifiableMap()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "349": {
        "Query": "How to access bean from another context",
        "GroundTruth": [
            "org.springframework.context.ApplicationContext.getBean()."
        ],
        "APIClasses": [
            "org.springframework.context.ApplicationContext.getBean()"
        ],
        "Source": "Stack Overflow"
    },
    "350": {
        "Query": "how to read and write in arabic in eclipse",
        "GroundTruth": [
            "java.lang.System.out"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "351": {
        "Query": "How to add delay between JFrame components",
        "GroundTruth": [
            "invalidate()",
            "javax.swing.JFrame.invalidate()"
        ],
        "APIClasses": [
            "",
            "javax.swing.JFrame"
        ],
        "Source": "Stack Overflow"
    },
    "352": {
        "Query": "Java: How should look an instanceof method",
        "GroundTruth": [
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "353": {
        "Query": "in netbeans 6.8 how do you insert an image and change the size of it?",
        "GroundTruth": [
            "java.awt.Image.getScaledInstance()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Stack Overflow"
    },
    "354": {
        "Query": "Sort Array based on number of character occurrences",
        "GroundTruth": [
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "355": {
        "Query": "How to use Data URI from Image as an InputStream?",
        "GroundTruth": [
            "javax.xml.bind.DatatypeConverter.parseBase64Binary()"
        ],
        "APIClasses": [
            "javax.xml.bind.DatatypeConverter"
        ],
        "Source": "Stack Overflow"
    },
    "356": {
        "Query": "How to set spinner text in android",
        "GroundTruth": [
            "android.widget.AbsSpinner.setSelection()"
        ],
        "APIClasses": [
            "android.widget.AbsSpinner"
        ],
        "Source": "Stack Overflow"
    },
    "357": {
        "Query": "Conversion of resultset to Java model slow for a million records",
        "GroundTruth": [
            "java.sql.Statement.setFetchSize()"
        ],
        "APIClasses": [
            "java.sql.Statement"
        ],
        "Source": "Stack Overflow"
    },
    "358": {
        "Query": "Getting max value from an arraylist of objects?",
        "GroundTruth": [
            "java.util.Collections.max()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "359": {
        "Query": "Unicode to string conversion in Java",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "360": {
        "Query": "Switch SWT progressbar to indeterminate (replacing the widget)",
        "GroundTruth": [
            "javax.swing.JProgressBar.setIndeterminate()"
        ],
        "APIClasses": [
            "javax.swing.JProgressBar"
        ],
        "Source": "Stack Overflow"
    },
    "361": {
        "Query": "Implement 'Maybe' in Java",
        "GroundTruth": [
            "com.google.common.base.Optional.transform()"
        ],
        "APIClasses": [
            "com.google.common.base.Optional"
        ],
        "Source": "Stack Overflow"
    },
    "362": {
        "Query": "How do I format a long integer as a string without separator in Java?",
        "GroundTruth": [
            "java.lang.Long.toString()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Stack Overflow"
    },
    "363": {
        "Query": "Adding JPanels to JFrame with a for loop",
        "GroundTruth": [
            "JFrame.add()"
        ],
        "APIClasses": [
            "JFrame"
        ],
        "Source": "Stack Overflow"
    },
    "364": {
        "Query": "Java Fastest way to read through text file with 2 million lines",
        "GroundTruth": [
            "java.io.BufferedReader.readLine()"
        ],
        "APIClasses": [
            "java.io.BufferedReader"
        ],
        "Source": "Stack Overflow"
    },
    "365": {
        "Query": "Extract content after \"=\" and before \"&\", Regex expression in java",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "366": {
        "Query": "Java: Initialize collection (list) of size n > 1 with the same elements",
        "GroundTruth": [
            "java.util.Collections.nCopies()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "367": {
        "Query": "grant privileges to Firebird user with jaybird",
        "GroundTruth": [
            "java.sql.Statement.execute()"
        ],
        "APIClasses": [
            "java.sql.Statement"
        ],
        "Source": "Stack Overflow"
    },
    "368": {
        "Query": "replace all occurrences of a character in a string in java?",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "369": {
        "Query": "Always Round UP a Double",
        "GroundTruth": [
            "java.lang.Math.ceil()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "370": {
        "Query": "How to handle mouse dragging event in JFreeChart",
        "GroundTruth": [
            "org.jfree.chart.ChartPanel.mouseDragged()"
        ],
        "APIClasses": [
            "org.jfree.chart.ChartPanel"
        ],
        "Source": "Stack Overflow"
    },
    "371": {
        "Query": "How to round up to the next integer?",
        "GroundTruth": [
            "java.lang.Math.ceil()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "372": {
        "Query": "AST Parser get the name of Java class",
        "GroundTruth": [
            "com.github.javaparser.ast.CompilationUnit.accept()"
        ],
        "APIClasses": [
            "com.github.javaparser.ast.CompilationUnit"
        ],
        "Source": "Stack Overflow"
    },
    "373": {
        "Query": "Setting logging level through CLI argument? Java",
        "GroundTruth": [
            "java.util.logging.Level.parse()"
        ],
        "APIClasses": [
            "java.util.logging.Level"
        ],
        "Source": "Stack Overflow"
    },
    "374": {
        "Query": "How can I sort my Arraylist alphabetical? (Java)",
        "GroundTruth": [
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "375": {
        "Query": "How to combine multiple boolean comparisons into one",
        "GroundTruth": [
            "java.util.List.contains()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "376": {
        "Query": "How can I format a String number to have commas in android Edit Field",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "377": {
        "Query": "Monitoring the LMAX Disruptor",
        "GroundTruth": [
            "com.hazelcast.ringbuffer.Ringbuffer.remainingCapacity()"
        ],
        "APIClasses": [
            "com.hazelcast.ringbuffer.Ringbuffer"
        ],
        "Source": "Stack Overflow"
    },
    "378": {
        "Query": "Android: BasicClientCookie/CookieStore adds quotes around cookie value",
        "GroundTruth": [
            "java.net.HttpCookie.setVersion()"
        ],
        "APIClasses": [
            "java.net.HttpCookie"
        ],
        "Source": "Stack Overflow"
    },
    "379": {
        "Query": "How to pass a list as parameter for varargs?",
        "GroundTruth": [
            "java.util.List.toArray()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "380": {
        "Query": "JDBC PreparedStatement, how to select and insert?",
        "GroundTruth": [
            "connection.prepareCall()",
            "connection.prepareCall().execute()",
            "connection.commit()"
        ],
        "APIClasses": [
            "connection",
            "connection.prepareCall()"
        ],
        "Source": "Stack Overflow"
    },
    "381": {
        "Query": "Keyboard Input with swing Java",
        "GroundTruth": [
            "javax.swing.JComponent.getInputMap()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "382": {
        "Query": "Setting sun.rmi.transport.tcp.maxConnectionThreads",
        "GroundTruth": [
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "383": {
        "Query": "How to create a process in Java",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "384": {
        "Query": "Converting Hexadecimal String to Decimal Integer",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "385": {
        "Query": "How do I get which JRadioButton is selected from a ButtonGroup",
        "GroundTruth": [
            "javax.swing.AbstractButton.isSelected()"
        ],
        "APIClasses": [
            "javax.swing.AbstractButton"
        ],
        "Source": "Stack Overflow"
    },
    "386": {
        "Query": "Java/Struts2: How to get action name from current url",
        "GroundTruth": [
            "com.opensymphony.xwork2.ActionContext.getContext().getName()"
        ],
        "APIClasses": [
            "com.opensymphony.xwork2.ActionContext.getContext()"
        ],
        "Source": "Stack Overflow"
    },
    "387": {
        "Query": "How to write a new line to a file in Java?",
        "GroundTruth": [
            "java.io.FileWriter.FileWriter()"
        ],
        "APIClasses": [
            "java.io.FileWriter"
        ],
        "Source": "Stack Overflow"
    },
    "388": {
        "Query": "How could I test update method use Junit",
        "GroundTruth": [
            "org.mockito.Mockito.when().thenThrow()",
            "org.mockito.Mockito.doThrow().when()"
        ],
        "APIClasses": [
            "org.mockito.Mockito.when()",
            "org.mockito.Mockito.doThrow()"
        ],
        "Source": "Stack Overflow"
    },
    "389": {
        "Query": "How to measure time taken by Java code?",
        "GroundTruth": [
            "java.lang.System.nanoTime()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "390": {
        "Query": "Receiving UDP in Java without dropping packets",
        "GroundTruth": [
            "java.net.DatagramSocket.setReceiveBufferSize()"
        ],
        "APIClasses": [
            "java.net.DatagramSocket"
        ],
        "Source": "Stack Overflow"
    },
    "391": {
        "Query": "Check if a String matches specific regular expression",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "392": {
        "Query": "How to read header and footer lines with RTFEditorKit",
        "GroundTruth": [
            "javax.swing.text.AbstractDocument.getDocumentProperties()"
        ],
        "APIClasses": [
            "javax.swing.text.AbstractDocument"
        ],
        "Source": "Stack Overflow"
    },
    "393": {
        "Query": "Sorting an int array from highest to lowest",
        "GroundTruth": [
            "java.util.Collections.reverseOrder()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "394": {
        "Query": "How to replace a value in a Specific Location in arraylist?",
        "GroundTruth": [
            "java.util.ArrayList.get()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Stack Overflow"
    },
    "395": {
        "Query": "How to access to the text inside a Swing JPasswordField object?",
        "GroundTruth": [
            "javax.swing.JPasswordField.getPassword()"
        ],
        "APIClasses": [
            "javax.swing.JPasswordField"
        ],
        "Source": "Stack Overflow"
    },
    "396": {
        "Query": "Size of Iterable<Type>",
        "GroundTruth": [
            "java.util.Iterator.hasNext()"
        ],
        "APIClasses": [
            "java.util.Iterator"
        ],
        "Source": "Stack Overflow"
    },
    "397": {
        "Query": "Updating an XML String",
        "GroundTruth": [
            "org.w3c.dom.Node.setTextContent()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Stack Overflow"
    },
    "398": {
        "Query": "How to quickly and conveniently create a one element arraylist",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "399": {
        "Query": "How can I delay the time between two method calls?",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "400": {
        "Query": "Android: setting up utf-8 encoding to String and Array",
        "GroundTruth": [
            "java.lang.String.concat()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "401": {
        "Query": "GridLayout java center alignment",
        "GroundTruth": [
            "javax.swing.JLabel.setHorizontalAlignment()"
        ],
        "APIClasses": [
            "javax.swing.JLabel"
        ],
        "Source": "Stack Overflow"
    },
    "402": {
        "Query": "Load ResourceBundle from classpath",
        "GroundTruth": [
            "java.util.ResourceBundle.getBundle()"
        ],
        "APIClasses": [
            "java.util.ResourceBundle"
        ],
        "Source": "Stack Overflow"
    },
    "403": {
        "Query": "How to print out a hashset",
        "GroundTruth": [
            "java.util.HashSet.next()",
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.HashSet",
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "404": {
        "Query": "Adding Row to JTable with \"Real-Time Feeling\"",
        "GroundTruth": [
            "javax.swing.SwingWorker()",
            "java.util.concurrent.ThreadPoolExecutor()"
        ],
        "APIClasses": [
            "javax.swing",
            "java.util.concurrent"
        ],
        "Source": "Stack Overflow"
    },
    "405": {
        "Query": "Passing Map to JSP",
        "GroundTruth": [
            "getAttribute()",
            "javax.servlet.http.HttpServletRequest.getAttribute()"
        ],
        "APIClasses": [
            "",
            "javax.servlet.http.HttpServletRequest"
        ],
        "Source": "Stack Overflow"
    },
    "406": {
        "Query": "Java: How to add a button to a frame?",
        "GroundTruth": [
            "javax.swing.JFrame.add()"
        ],
        "APIClasses": [
            "javax.swing.JFrame"
        ],
        "Source": "Stack Overflow"
    },
    "407": {
        "Query": "Creating Cells for GridLayout in Java",
        "GroundTruth": [
            "java.awt.GridLayout.GridLayout()"
        ],
        "APIClasses": [
            "java.awt.GridLayout"
        ],
        "Source": "Stack Overflow"
    },
    "408": {
        "Query": "Java, limit the BufferedReader reading time",
        "GroundTruth": [
            "java.net.URLConnection.setReadTimeout()"
        ],
        "APIClasses": [
            "java.net.URLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "409": {
        "Query": "How to add whitepaces between each capital letter?",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "410": {
        "Query": "How to find angle of point from x-axis independant of quadrant?",
        "GroundTruth": [
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "411": {
        "Query": "Vertical progress bar in swing?",
        "GroundTruth": [
            "javax.swing.JProgressBar.JProgressBar()"
        ],
        "APIClasses": [
            "javax.swing.JProgressBar"
        ],
        "Source": "Stack Overflow"
    },
    "412": {
        "Query": "How can i disable jtable row sorter",
        "GroundTruth": [
            "javax.swing.JTable.setRowSorter()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Stack Overflow"
    },
    "413": {
        "Query": "parsing xml document java with documentBuilder",
        "GroundTruth": [
            "org.w3c.dom.Document.getElementsByTagName()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document"
        ],
        "Source": "Stack Overflow"
    },
    "414": {
        "Query": "How do you close a AsynchronousSocketChannel cleanly?",
        "GroundTruth": [
            "java.nio.channels.CompletionHandler.completed()"
        ],
        "APIClasses": [
            "java.nio.channels.CompletionHandler"
        ],
        "Source": "Stack Overflow"
    },
    "415": {
        "Query": "Get search result of google in java",
        "GroundTruth": [
            "java.net.URLConnection.setRequestProperty()"
        ],
        "APIClasses": [
            "java.net.URLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "416": {
        "Query": "Java localizing number formatting",
        "GroundTruth": [
            "javax.swing.JComponent.setDefaultLocale()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "417": {
        "Query": "Converting BigInteger to binary string",
        "GroundTruth": [
            "java.lang.BigInteger.toString()"
        ],
        "APIClasses": [
            "java.lang.BigInteger"
        ],
        "Source": "Stack Overflow"
    },
    "418": {
        "Query": "How to specify server-preferred order of SSL cipher suites for Java?",
        "GroundTruth": [
            "javax.net.ssl.SSLSocket.setEnabledCipherSuites()"
        ],
        "APIClasses": [
            "javax.net.ssl.SSLSocket"
        ],
        "Source": "Stack Overflow"
    },
    "419": {
        "Query": "How would you convert a string to a 64 bit integer?",
        "GroundTruth": [
            "java.lang.String.hashCode()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "420": {
        "Query": "most accurate time type in java?",
        "GroundTruth": [
            "java.lang.System.nanoTime()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "421": {
        "Query": "Lucene - retrieve all values for a multi-valued field in a document",
        "GroundTruth": [
            "org.apache.lucene.document.Document.getFields()"
        ],
        "APIClasses": [
            "org.apache.lucene.document.Document"
        ],
        "Source": "Stack Overflow"
    },
    "422": {
        "Query": "Java - Scanner Class - Skipping over the first line when reading a textfile",
        "GroundTruth": [
            "java.util.Scanner.nextLine()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Stack Overflow"
    },
    "423": {
        "Query": "Mouse over - display on screen message Java Application",
        "GroundTruth": [
            "javax.swing.JComponent.setToolTipText()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "424": {
        "Query": "How do I set a Calendar with TimeZone?",
        "GroundTruth": [
            "java.util.TimeZone.getAvailableIDs()"
        ],
        "APIClasses": [
            "java.util.TimeZone"
        ],
        "Source": "Stack Overflow"
    },
    "425": {
        "Query": "How to center text in Alert Dialog Builder?",
        "GroundTruth": [
            "android.app.AlertDialog.Builder.setView()"
        ],
        "APIClasses": [
            "android.app.AlertDialog.Builder"
        ],
        "Source": "Stack Overflow"
    },
    "426": {
        "Query": "SimpleDateFormat parse for time",
        "GroundTruth": [
            "java.text.SimpleDateFormat.SimpleDateFormat()"
        ],
        "APIClasses": [
            "java.text.SimpleDateFormat"
        ],
        "Source": "Stack Overflow"
    },
    "427": {
        "Query": "Convert current datetime to long in Java",
        "GroundTruth": [
            "java.lang.System.currentTimeMillis()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "428": {
        "Query": "1's complement to 2's complement conversion",
        "GroundTruth": [
            "java.lang.Integer.toBinaryString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "429": {
        "Query": "Copy file from one folder to another in Java",
        "GroundTruth": [
            "java.nio.file.Files.copy()"
        ],
        "APIClasses": [
            "java.nio.file.Files"
        ],
        "Source": "Stack Overflow"
    },
    "430": {
        "Query": "Add Element to Document and find with XPath",
        "GroundTruth": [
            "org.w3c.dom.Document.createElementNS()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document"
        ],
        "Source": "Stack Overflow"
    },
    "431": {
        "Query": "In Java, how do I dynamically determine the type of an array?",
        "GroundTruth": [
            "java.lang.Class.getComponentType()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "432": {
        "Query": "How to get a numeric value from a webelement in Selenium Webdriver (Java)",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "433": {
        "Query": "JScrollPane and JList auto scroll",
        "GroundTruth": [
            "javax.swing.JComponent.scrollRectToVisible()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "434": {
        "Query": "Obtaining focus on a JPanel",
        "GroundTruth": [
            "java.awt.Component.requestFocus()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "435": {
        "Query": "How to display a PNG properly on JFrame",
        "GroundTruth": [
            "java.awt.Frame.setShape()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Stack Overflow"
    },
    "436": {
        "Query": "Concatenating to a file name before the \u2018.\u2019 Filename extension in Java",
        "GroundTruth": [
            "java.lang.String.lastIndexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "437": {
        "Query": "How do we use Class.forName to get a primitive byte class?",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "438": {
        "Query": "How do I create a constant object in Java?",
        "GroundTruth": [
            "java.util.Collections.unmodifiableList()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "439": {
        "Query": "How to negate a method reference predicate",
        "GroundTruth": [
            "java.util.function.Predicate.not()"
        ],
        "APIClasses": [
            "java.util.function.Predicate"
        ],
        "Source": "Stack Overflow"
    },
    "440": {
        "Query": "Setting UserPrincipal in form based authentication",
        "GroundTruth": [
            "javax.servlet.http.HttpServletRequest.login()"
        ],
        "APIClasses": [
            "javax.servlet.http.HttpServletRequest"
        ],
        "Source": "Stack Overflow"
    },
    "441": {
        "Query": "Get an OutputStream into a String",
        "GroundTruth": [
            "java.io.ByteArrayOutputStream()"
        ],
        "APIClasses": [
            "java.io"
        ],
        "Source": "Stack Overflow"
    },
    "442": {
        "Query": "Waiting for a thread result to return value on a method (Webapp)",
        "GroundTruth": [
            "java.util.concurrent.Future.get()"
        ],
        "APIClasses": [
            "java.util.concurrent.Future"
        ],
        "Source": "Stack Overflow"
    },
    "443": {
        "Query": "Get all Images from WebPage Program | Java",
        "GroundTruth": [
            "getElementsByTagName()",
            "com.gargoylesoftware.htmlunit.html.HtmlPage.getElementsByTagName()"
        ],
        "APIClasses": [
            "",
            "com.gargoylesoftware.htmlunit.html.HtmlPage"
        ],
        "Source": "Stack Overflow"
    },
    "444": {
        "Query": "How to make HttpURLConnection timeout?",
        "GroundTruth": [
            "java.net.URLConnection.setReadTimeout()"
        ],
        "APIClasses": [
            "java.net.URLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "445": {
        "Query": "How to fix ambiguous type on method reference (toString of an Integer)?",
        "GroundTruth": [
            "java.lang.Integer.toString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "446": {
        "Query": "How can I make a socket close immediately, bypassing the timeout period?",
        "GroundTruth": [
            "java.net.Socket.setReuseAddress()"
        ],
        "APIClasses": [
            "java.net.Socket"
        ],
        "Source": "Stack Overflow"
    },
    "447": {
        "Query": "How can we compare two hashmap's in java",
        "GroundTruth": [
            "java.util.Map.values.containsAll()",
            "org.apache.commons.collections4.CollectionUtils.isEqualCollection()"
        ],
        "APIClasses": [
            "java.util.Map.values",
            "org.apache.commons.collections4.CollectionUtils"
        ],
        "Source": "Stack Overflow"
    },
    "448": {
        "Query": "How to get screen position of a Swing element?",
        "GroundTruth": [
            "java.awt.Component.getLocationOnScreen()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "449": {
        "Query": "Pull entry from List<String> nested in HashMap",
        "GroundTruth": [
            "java.util.ArrayList.size()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Stack Overflow"
    },
    "450": {
        "Query": "How to make a JProgress bar with a gradient",
        "GroundTruth": [
            "javax.swing.plaf.basic.BasicProgressBarUI.paintDeterminate()"
        ],
        "APIClasses": [
            "javax.swing.plaf.basic.BasicProgressBarUI"
        ],
        "Source": "Stack Overflow"
    },
    "451": {
        "Query": "Java Open a JFrame relative to the position of a button (menu like behaviour)",
        "GroundTruth": [
            "java.awt.Component.getLocationOnScreen()",
            "java.awt.Window.setLocation()"
        ],
        "APIClasses": [
            "java.awt.Component",
            "java.awt.Window"
        ],
        "Source": "Stack Overflow"
    },
    "452": {
        "Query": "How to update the cells of a table from a combobox?",
        "GroundTruth": [
            "javax.swing.table.TableModel.setValueAt()"
        ],
        "APIClasses": [
            "javax.swing.table.TableModel"
        ],
        "Source": "Stack Overflow"
    },
    "453": {
        "Query": "save state by overwriting a properties file",
        "GroundTruth": [
            "usethePreferencesAPI"
        ],
        "APIClasses": [
            ""
        ],
        "Source": "Stack Overflow"
    },
    "454": {
        "Query": "Flying-saucer - html to png render always 16 pixels high",
        "GroundTruth": [
            "Graphics2DRenderer.renderToImageAutoSize()"
        ],
        "APIClasses": [
            "Graphics2DRenderer"
        ],
        "Source": "Stack Overflow"
    },
    "455": {
        "Query": "Java Thread stack memory allocation and management",
        "GroundTruth": [
            "java.lang.Thread.start()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "456": {
        "Query": "Creating a random 4 digit number, and storing it to a string",
        "GroundTruth": [
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "457": {
        "Query": "Getting a random number between 0 and 0.06 in Java?",
        "GroundTruth": [
            "java.util.Random.nextDouble()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Stack Overflow"
    },
    "458": {
        "Query": "Is it possible to get the raw bits in memory of a double?",
        "GroundTruth": [
            "java.lang.Double.doubleToLongBits()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Stack Overflow"
    },
    "459": {
        "Query": "PrintWriter deleting old contents of a txt file when writing",
        "GroundTruth": [
            "java.io.FileWriter.FileWriter()"
        ],
        "APIClasses": [
            "java.io.FileWriter"
        ],
        "Source": "Stack Overflow"
    },
    "460": {
        "Query": "How to stop WebEngine after closing stage JavaFX?",
        "GroundTruth": [
            "javafx.scene.web.WebView.getEngine().load()"
        ],
        "APIClasses": [
            "javafx.scene.web.WebView.getEngine()"
        ],
        "Source": "Stack Overflow"
    },
    "461": {
        "Query": "Set Background Drawable Resource from String",
        "GroundTruth": [
            "android.app.Activity.getResources().getIdentifier()"
        ],
        "APIClasses": [
            "android.app.Activity.getResources()"
        ],
        "Source": "Stack Overflow"
    },
    "462": {
        "Query": "Route an Http(s)URLConnection through a pre-existing Socket",
        "GroundTruth": [
            "javax.net.ssl.SSLSocketFactory.createSocket()"
        ],
        "APIClasses": [
            "javax.net.ssl.SSLSocketFactory"
        ],
        "Source": "Stack Overflow"
    },
    "463": {
        "Query": "Sort HashMap keys and store in ArrayList",
        "GroundTruth": [
            "java.util.Collections.sort()",
            "java.util.Map.keySet()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.util.Map"
        ],
        "Source": "Stack Overflow"
    },
    "464": {
        "Query": "Splitting a Byte array",
        "GroundTruth": [
            "java.util.Arrays.copyOfRange()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "465": {
        "Query": "Getting a list of all the bootstrap classes on the JVM?",
        "GroundTruth": [
            "java.lang.ClassLoader.getParent()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "466": {
        "Query": "Check if a collection contains an object, comparing by reference",
        "GroundTruth": [
            "java.util.Collection.stream()"
        ],
        "APIClasses": [
            "java.util.Collection"
        ],
        "Source": "Stack Overflow"
    },
    "467": {
        "Query": "Is there java.util.concurrent equivalent for WeakHashMap?",
        "GroundTruth": [
            "com.google.common.cache.CacheBuilder.CacheBuilder()"
        ],
        "APIClasses": [
            "com.google.common.cache.CacheBuilder"
        ],
        "Source": "Stack Overflow"
    },
    "468": {
        "Query": "how to make JTextPane paint anti-aliased font?",
        "GroundTruth": [
            "javax.swing.JComponent.putClientProperty()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "469": {
        "Query": "How to embed xml file into java package and access it?",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "470": {
        "Query": "Load image to ImageView JavaFX",
        "GroundTruth": [
            "java.net.URLClassLoader.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.net.URLClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "471": {
        "Query": "Java Priority Queue Sorting",
        "GroundTruth": [
            "java.lang.Comparable.compareTo()"
        ],
        "APIClasses": [
            "java.lang.Comparable"
        ],
        "Source": "Stack Overflow"
    },
    "472": {
        "Query": "how to call default parser (registered in mapper) from custom deserializer",
        "GroundTruth": [
            "org.codehaus.jackson.map.ObjectMapper.readValue()"
        ],
        "APIClasses": [
            "org.codehaus.jackson.map.ObjectMapper"
        ],
        "Source": "Stack Overflow"
    },
    "473": {
        "Query": "Java DecimalFormat get Pattern as text",
        "GroundTruth": [
            "java.text.DecimalFormat.toPattern()"
        ],
        "APIClasses": [
            "java.text.DecimalFormat"
        ],
        "Source": "Stack Overflow"
    },
    "474": {
        "Query": "Remove all elements from a List after a particular index",
        "GroundTruth": [
            "java.util.List.subList()",
            "java.util.List.subList().clear()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.util.List.subList()"
        ],
        "Source": "Stack Overflow"
    },
    "475": {
        "Query": "Java: How to check that 2 binary files are same?",
        "GroundTruth": [
            "com.google.common.io.File.equal()"
        ],
        "APIClasses": [
            "com.google.common.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "476": {
        "Query": "LibGDX internal button spacing",
        "GroundTruth": [
            "com.badlogic.gdx.scenes.scene2d.ui.TextButton.add().padBottom()",
            "com.badlogic.gdx.scenes.scene2d.ui.Cell.height()"
        ],
        "APIClasses": [
            "com.badlogic.gdx.scenes.scene2d.ui.TextButton.add()",
            "com.badlogic.gdx.scenes.scene2d.ui.Cell"
        ],
        "Source": "Stack Overflow"
    },
    "477": {
        "Query": "Add \".00\" to an integer BigDecimal in Java",
        "GroundTruth": [
            "java.math.BigDecimal.setScale()"
        ],
        "APIClasses": [
            "java.math.BigDecimal"
        ],
        "Source": "Stack Overflow"
    },
    "478": {
        "Query": "Java printing symbol for positive number",
        "GroundTruth": [
            "java.lang.System.out.format()"
        ],
        "APIClasses": [
            "java.lang.System.out"
        ],
        "Source": "Stack Overflow"
    },
    "479": {
        "Query": "Remove white space and special characters in java",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "480": {
        "Query": "TreeMap removing all keys greater than a certain key",
        "GroundTruth": [
            "java.util.TreeMap.tailMap().clear()"
        ],
        "APIClasses": [
            "java.util.TreeMap.tailMap()"
        ],
        "Source": "Stack Overflow"
    },
    "481": {
        "Query": "How to instantiate a Socket class in Java?",
        "GroundTruth": [
            "java.net.Socket.Socket()"
        ],
        "APIClasses": [
            "java.net.Socket"
        ],
        "Source": "Stack Overflow"
    },
    "482": {
        "Query": "JAVA: Getting the content of specific strings from text files",
        "GroundTruth": [
            "org.apache.commons.io.FileUtils.readFileToString()"
        ],
        "APIClasses": [
            "org.apache.commons.io.FileUtils"
        ],
        "Source": "Stack Overflow"
    },
    "483": {
        "Query": "How to read key=value file and how to split a comma-separated String?",
        "GroundTruth": [
            "java.util.Properties",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.util",
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "484": {
        "Query": "How to add all elements of an ArrayList into another ArrayList in java",
        "GroundTruth": [
            "java.util.ArrayList.addAll()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Stack Overflow"
    },
    "485": {
        "Query": "Reverse the JSON array",
        "GroundTruth": [
            "java.util.Collections.reverse()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "486": {
        "Query": "How to convert outputStream to a byte array?",
        "GroundTruth": [
            "java.io.ByteArrayOutputStream.toByteArray()"
        ],
        "APIClasses": [
            "java.io.ByteArrayOutputStream"
        ],
        "Source": "Stack Overflow"
    },
    "487": {
        "Query": "How to check a (unchecked) cast in java?",
        "GroundTruth": [
            "java.lang.Class.asSubclass()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "488": {
        "Query": "PrintWriter create empty file",
        "GroundTruth": [
            "java.io.PrintWriter.PrintWriter()"
        ],
        "APIClasses": [
            "java.io.PrintWriter"
        ],
        "Source": "Stack Overflow"
    },
    "489": {
        "Query": "Make a double 0.00 display as 0.00 in Java",
        "GroundTruth": [
            "java.text.NumberFormat.getCurrencyInstance()"
        ],
        "APIClasses": [
            "java.text.NumberFormat"
        ],
        "Source": "Stack Overflow"
    },
    "490": {
        "Query": "How to extract HTTP status code from the RestTemplate call to a URL?",
        "GroundTruth": [
            "org.springframework.web.client.RestTemplate.exchange()"
        ],
        "APIClasses": [
            "org.springframework.web.client.RestTemplate"
        ],
        "Source": "Stack Overflow"
    },
    "491": {
        "Query": "Open Two Windows Simultaneously - JavaFX",
        "GroundTruth": [
            "java.lang.Class.getResource()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "492": {
        "Query": "Get the next higher integer value in java",
        "GroundTruth": [
            "java.lang.Math.ceil()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "493": {
        "Query": "How to change color of SWT progress bar?",
        "GroundTruth": [
            "java.awt.Frame.setState()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Stack Overflow"
    },
    "494": {
        "Query": "Converting a birthdate into milliseconds",
        "GroundTruth": [
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Stack Overflow"
    },
    "495": {
        "Query": "Random over ThreadLocalRandom",
        "GroundTruth": [
            "java.util.concurrent.ThreadLocalRandom.ThreadLocalRandom()"
        ],
        "APIClasses": [
            "java.util.concurrent.ThreadLocalRandom"
        ],
        "Source": "Stack Overflow"
    },
    "496": {
        "Query": "Pattern Matching with dynamic matcher",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "497": {
        "Query": "Outputting to a .dat file",
        "GroundTruth": [
            "java.io.PrintStream.print()"
        ],
        "APIClasses": [
            "java.io.PrintStream"
        ],
        "Source": "Stack Overflow"
    },
    "498": {
        "Query": "Java Card Layout. One component in multiple cards",
        "GroundTruth": [
            "java.awt.Container.addImpl()"
        ],
        "APIClasses": [
            "java.awt.Container"
        ],
        "Source": "Stack Overflow"
    },
    "499": {
        "Query": "Convert date to other format in JodaTime",
        "GroundTruth": [
            "org.joda.time.format.DateTimeFormatter.print()"
        ],
        "APIClasses": [
            "org.joda.time.format.DateTimeFormatter"
        ],
        "Source": "Stack Overflow"
    },
    "500": {
        "Query": "Insert into LinkedList Alphabetically",
        "GroundTruth": [
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "501": {
        "Query": "Showing Stars On Screen of TextField",
        "GroundTruth": [
            "javax.swing.JPasswordField.JPasswordField()"
        ],
        "APIClasses": [
            "javax.swing.JPasswordField"
        ],
        "Source": "Stack Overflow"
    },
    "502": {
        "Query": "How to get TimeZone.getDisplayName(locale) value to return non-English text?",
        "GroundTruth": [
            "java.util.TimeZone.getDisplayName()"
        ],
        "APIClasses": [
            "java.util.TimeZone"
        ],
        "Source": "Stack Overflow"
    },
    "503": {
        "Query": "Passing Native Function a reference variable in Java JNA",
        "GroundTruth": [
            "com.sun.jna.NativeLong.toString()"
        ],
        "APIClasses": [
            "com.sun.jna.NativeLong"
        ],
        "Source": "Stack Overflow"
    },
    "504": {
        "Query": "How to write a Consumer that counts how many times it was called?",
        "GroundTruth": [
            "java.util.concurrent.atomic.AtomicInteger.incrementAndGet()"
        ],
        "APIClasses": [
            "java.util.concurrent.atomic.AtomicInteger"
        ],
        "Source": "Stack Overflow"
    },
    "505": {
        "Query": "copying array by value in java",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "506": {
        "Query": "Getting Screen Size in Java as a Statric Variable",
        "GroundTruth": [
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit"
        ],
        "Source": "Stack Overflow"
    },
    "507": {
        "Query": "How to get 100 objects from a Set as a collection?",
        "GroundTruth": [
            "java.util.List.subList()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "508": {
        "Query": "Converting a String with spaces to an Integer in java",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "509": {
        "Query": "Manipulating IPv6 Addresses in Java",
        "GroundTruth": [
            "java.net.InetAddress.getByName()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Stack Overflow"
    },
    "510": {
        "Query": "How to replace ' with empty string in Java",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "511": {
        "Query": "How to validate a file path in java?",
        "GroundTruth": [
            "java.nio.file.Path.resolve()",
            "java.nio.file.Path.normalize()"
        ],
        "APIClasses": [
            "java.nio.file.Path"
        ],
        "Source": "Stack Overflow"
    },
    "512": {
        "Query": "How to escape the equals sign in properties files",
        "GroundTruth": [
            "java.util.Properties.load()"
        ],
        "APIClasses": [
            "java.util.Properties"
        ],
        "Source": "Stack Overflow"
    },
    "513": {
        "Query": "Google Api Java client list root folder children",
        "GroundTruth": [
            "com.google.api.services.drive.Drive.Files.list()"
        ],
        "APIClasses": [
            "com.google.api.services.drive.Drive.Files"
        ],
        "Source": "Stack Overflow"
    },
    "514": {
        "Query": "Is there a utility method to separate a list by given string?",
        "GroundTruth": [
            "java.lang.String.join()",
            "commons-langStringUtils.join"
        ],
        "APIClasses": [
            "java.lang.String",
            "commons-langStringUtils"
        ],
        "Source": "Stack Overflow"
    },
    "515": {
        "Query": "How to remove all key and its value of a particular keyname from json string(with children) in java",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "516": {
        "Query": "make ArrayList Read only",
        "GroundTruth": [
            "java.util.Collections.unmodifiableList()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "517": {
        "Query": "passing password through spring security to dao object",
        "GroundTruth": [
            "org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication()"
        ],
        "APIClasses": [
            "org.springframework.security.core.context.SecurityContextHolder.getContext()"
        ],
        "Source": "Stack Overflow"
    },
    "518": {
        "Query": "Make all but 1 element float left FlowLayout",
        "GroundTruth": [
            "javax.swing.Box.createHorizontalStrut()"
        ],
        "APIClasses": [
            "javax.swing.Box"
        ],
        "Source": "Stack Overflow"
    },
    "519": {
        "Query": "Java, remove elements from multiple threads",
        "GroundTruth": [
            "java.util.Collections.synchronizedList()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "520": {
        "Query": "How do I make my ArrayList Thread-Safe? Another approach to problem in Java?",
        "GroundTruth": [
            "java.util.Collections.synchronizedList()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "521": {
        "Query": "How do I use the session in WebView in my other stuff (Android)?",
        "GroundTruth": [
            "getInstance()",
            "java.net.CookieManager.getInstance()"
        ],
        "APIClasses": [
            "",
            "java.net.CookieManager"
        ],
        "Source": "Stack Overflow"
    },
    "522": {
        "Query": "Linking static library with JNI",
        "GroundTruth": [
            "java.lang.System.loadLibrary()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "523": {
        "Query": "How to use prepared statement for select query in Java?",
        "GroundTruth": [
            "java.sql.PreparedStatement.executeQuery()"
        ],
        "APIClasses": [
            "java.sql.PreparedStatement"
        ],
        "Source": "Stack Overflow"
    },
    "524": {
        "Query": "Standard way to iterate over a StringBuilder in Java?",
        "GroundTruth": [
            "java.lang.StringBuilder.charAt()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder"
        ],
        "Source": "Stack Overflow"
    },
    "525": {
        "Query": "Best way to clear session",
        "GroundTruth": [
            "org.apache.struts2.dispatcher.SessionMap.invalidate()"
        ],
        "APIClasses": [
            "org.apache.struts2.dispatcher.SessionMap"
        ],
        "Source": "Stack Overflow"
    },
    "526": {
        "Query": "Java 8: Get Operator-Function-Object with method reference",
        "GroundTruth": [
            "java.lang.Integer.sum()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "527": {
        "Query": "Recognize pattern matches in String with regular expression",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "528": {
        "Query": "Java Graphics disable xor mode",
        "GroundTruth": [
            "java.awt.Graphics.setPaintMode()"
        ],
        "APIClasses": [
            "java.awt.Graphics"
        ],
        "Source": "Stack Overflow"
    },
    "529": {
        "Query": "How can I clear ehcahe objects in spring configured java project programmatically",
        "GroundTruth": [
            "org.springframework.cache.Cache.clear()"
        ],
        "APIClasses": [
            "org.springframework.cache.Cache"
        ],
        "Source": "Stack Overflow"
    },
    "530": {
        "Query": "How can I get a first element from a sorted list?",
        "GroundTruth": [
            "java.util.List.get()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "531": {
        "Query": "Check if String equals class name",
        "GroundTruth": [
            "java.lang.Class.getSimpleName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "532": {
        "Query": "Base64 encoding of Crc32c (long) value",
        "GroundTruth": [
            "java.util.Arrays.copyOfRange()",
            "java.lang.Longs.toByteArray()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Longs"
        ],
        "Source": "Stack Overflow"
    },
    "533": {
        "Query": "java Matcher returns the whole match",
        "GroundTruth": [
            "java.util.regex.Matcher.group()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher"
        ],
        "Source": "Stack Overflow"
    },
    "534": {
        "Query": "How to preload classes in Java?",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "535": {
        "Query": "Add month with JodaTime?",
        "GroundTruth": [
            "org.joda.time.DateTime.plusMonths()"
        ],
        "APIClasses": [
            "org.joda.time.DateTime"
        ],
        "Source": "Stack Overflow"
    },
    "536": {
        "Query": "Best approach for returning connection objects to HikariCP pool",
        "GroundTruth": [
            "java.sql.Connection.close()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Stack Overflow"
    },
    "537": {
        "Query": "Java8 java.util.Date conversion to java.time.ZonedDateTime",
        "GroundTruth": [
            "java.time.ZonedDateTime.ofInstant()"
        ],
        "APIClasses": [
            "java.time.ZonedDateTime"
        ],
        "Source": "Stack Overflow"
    },
    "538": {
        "Query": "The best way to check if List<String[]> contains a String[]",
        "GroundTruth": [
            "java.util.Arrays.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "539": {
        "Query": "How can I force the text go to the button of the panel?",
        "GroundTruth": [
            "javax.swing.JLabel.setVerticalAlignment()"
        ],
        "APIClasses": [
            "javax.swing.JLabel"
        ],
        "Source": "Stack Overflow"
    },
    "540": {
        "Query": "Use class name from properties file as default for factory return",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "541": {
        "Query": "best way to compare between two-dimension integer arrays in java",
        "GroundTruth": [
            "java.util.Arrays.deepEquals()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "542": {
        "Query": "Force next word to a new line if the word is too long for the textview",
        "GroundTruth": [
            "android.widget.TextView.getPaint()"
        ],
        "APIClasses": [
            "android.widget.TextView"
        ],
        "Source": "Stack Overflow"
    },
    "543": {
        "Query": "How do I get a VLC Media Player in Java without a Displayable Component?",
        "GroundTruth": [
            "AudioMediaPlayerComponent()"
        ],
        "APIClasses": [
            ""
        ],
        "Source": "Stack Overflow"
    },
    "544": {
        "Query": "Fastest way to generate a hash key for an int[] array?",
        "GroundTruth": [
            "java.util.Arrays.hashCode()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "545": {
        "Query": "Injecting generics with Guice",
        "GroundTruth": [
            "com.google.inject.Injector.getInstance()",
            "com.google.inject.AbstractModule.bind()"
        ],
        "APIClasses": [
            "com.google.inject.Injector",
            "com.google.inject.AbstractModule"
        ],
        "Source": "Stack Overflow"
    },
    "546": {
        "Query": "Java package scanner - find all classes with a given interface",
        "GroundTruth": [
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "547": {
        "Query": "How to get the index of a JMenuItem in the JMenu?",
        "GroundTruth": [
            "java.awt.Container.getComponentZOrder()"
        ],
        "APIClasses": [
            "java.awt.Container"
        ],
        "Source": "Stack Overflow"
    },
    "548": {
        "Query": "ArrayList shallow copy iterate or clone()",
        "GroundTruth": [
            "java.util.ArrayList.clone()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Stack Overflow"
    },
    "549": {
        "Query": "Java - I've got a library(.a/.so) and header(.h), how to use Java call their functions?",
        "GroundTruth": [
            "java.lang.System.loadLibrary()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "550": {
        "Query": "How can I trim beginning and ending double quotes from a string?",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "551": {
        "Query": "Java concurrent logging to file",
        "GroundTruth": [
            "java.util.concurrent.LinkedBlockingQueue.poll()",
            "java.util.concurrent.ConcurrentLinkedQueue.poll()"
        ],
        "APIClasses": [
            "java.util.concurrent.LinkedBlockingQueue",
            "java.util.concurrent.ConcurrentLinkedQueue"
        ],
        "Source": "Stack Overflow"
    },
    "552": {
        "Query": "Writing data to text file in table format",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "553": {
        "Query": "Formatting output column of arraylist neatly in Java",
        "GroundTruth": [
            "java.lang.System.out.format"
        ],
        "APIClasses": [
            "java.lang.System.out"
        ],
        "Source": "Stack Overflow"
    },
    "554": {
        "Query": "Extracting a given number of the highest values in a List",
        "GroundTruth": [
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "555": {
        "Query": "What is the right way to move the mouse in a game?",
        "GroundTruth": [
            "java.awt.Point.getLocation()"
        ],
        "APIClasses": [
            "java.awt.Point"
        ],
        "Source": "Stack Overflow"
    },
    "556": {
        "Query": "Java MulticastSocket. How to stop/pause the \"receive\" method",
        "GroundTruth": [
            "java.net.MulticastSocket.setSoTimeout()"
        ],
        "APIClasses": [
            "java.net.MulticastSocket"
        ],
        "Source": "Stack Overflow"
    },
    "557": {
        "Query": "how to add a hyphen in between a string",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "558": {
        "Query": "Convert an Image object To FormFile object",
        "GroundTruth": [
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Stack Overflow"
    },
    "559": {
        "Query": "Can I set a timeout for a InputStream's read() function?",
        "GroundTruth": [
            "java.net.Socket.setSoTimeout()"
        ],
        "APIClasses": [
            "java.net.Socket"
        ],
        "Source": "Stack Overflow"
    },
    "560": {
        "Query": "Is there any data structure that offers fast key/value access, but that is also ordered and can be accessed by a position index?",
        "GroundTruth": [
            "ListOrderedMap.get"
        ],
        "APIClasses": [
            "ListOrderedMap"
        ],
        "Source": "Stack Overflow"
    },
    "561": {
        "Query": "Java: How to check if a directory is inside other directory",
        "GroundTruth": [
            "toAbsolutePath()",
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "",
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "562": {
        "Query": "Java.util.logger Keeps writing to a new log file",
        "GroundTruth": [
            "java.util.logging.Handler.close()"
        ],
        "APIClasses": [
            "java.util.logging.Handler"
        ],
        "Source": "Stack Overflow"
    },
    "563": {
        "Query": "How to use .nextInt() and hasNextInt() in a while loop",
        "GroundTruth": [
            "java.io.File.File()",
            "java.util.Scanner.Scanner()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.util.Scanner"
        ],
        "Source": "Stack Overflow"
    },
    "564": {
        "Query": "Easiest way to convert an int (byte) to a single-character String in Java",
        "GroundTruth": [
            "java.lang.Character.toChars()"
        ],
        "APIClasses": [
            "java.lang.Character"
        ],
        "Source": "Stack Overflow"
    },
    "565": {
        "Query": "java.util.logging: Remove date time line",
        "GroundTruth": [
            "java.util.logging.Handler.setFormatter()"
        ],
        "APIClasses": [
            "java.util.logging.Handler"
        ],
        "Source": "Stack Overflow"
    },
    "566": {
        "Query": "Use try-with-resource to read a text file line by line in java",
        "GroundTruth": [
            "java.nio.file.Files.lines()"
        ],
        "APIClasses": [
            "java.nio.file.Files"
        ],
        "Source": "Stack Overflow"
    },
    "567": {
        "Query": "Finding Errant Output to System.out in Large Java Program",
        "GroundTruth": [
            "java.lang.System.setOut()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "568": {
        "Query": "The best way to collect the Java-8 Stream to Guava ImmutableList",
        "GroundTruth": [
            "java.util.stream.Collectors.toList()"
        ],
        "APIClasses": [
            "java.util.stream.Collectors"
        ],
        "Source": "Stack Overflow"
    },
    "569": {
        "Query": "How to get the name of a class without the package?",
        "GroundTruth": [
            "java.lang.Class.getSimpleName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "570": {
        "Query": "How to remove first 4 bytes from a byte array in Java?",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "571": {
        "Query": "find number range in java",
        "GroundTruth": [
            "java.time.Duration.abs()"
        ],
        "APIClasses": [
            "java.time.Duration"
        ],
        "Source": "Stack Overflow"
    },
    "572": {
        "Query": "How to extract multiple regex matches from a string in java",
        "GroundTruth": [
            "java.util.regex.Matcher.find()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher"
        ],
        "Source": "Stack Overflow"
    },
    "573": {
        "Query": "Restore previously serialized JFrame-object, how?",
        "GroundTruth": [
            "java.awt.EventQueue.invokeLater()"
        ],
        "APIClasses": [
            "java.awt.EventQueue"
        ],
        "Source": "Stack Overflow"
    },
    "574": {
        "Query": "Ignoring uppercase and lowercase on char when comparing",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "575": {
        "Query": "Remove dash from a phone number",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "576": {
        "Query": "Java: How to return the only element in an ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.get()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Stack Overflow"
    },
    "577": {
        "Query": "Joda time : How to convert String to LocalDate?",
        "GroundTruth": [
            "org.joda.time.LocalDate.LocalDate()"
        ],
        "APIClasses": [
            "org.joda.time.LocalDate"
        ],
        "Source": "Stack Overflow"
    },
    "578": {
        "Query": "How to escape backslash in Java",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "579": {
        "Query": "How do I exit a NetBeans Platform GUI application?",
        "GroundTruth": [
            "org.openide.LifecycleManager.getDefault().exit()"
        ],
        "APIClasses": [
            "org.openide.LifecycleManager.getDefault()"
        ],
        "Source": "Stack Overflow"
    },
    "580": {
        "Query": "String get text at the end of line",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "581": {
        "Query": "Is there a BiMap implementation with predictable iteration ordering (insertion order)?",
        "GroundTruth": [
            "com.google.common.collect.ImmutableBiMap()"
        ],
        "APIClasses": [
            "com.google.common.collect"
        ],
        "Source": "Stack Overflow"
    },
    "582": {
        "Query": "Update the JLabel's label text during the event - Swing",
        "GroundTruth": [
            "javax.swing.JLabel.setText()"
        ],
        "APIClasses": [
            "javax.swing.JLabel"
        ],
        "Source": "Stack Overflow"
    },
    "583": {
        "Query": "Inserting unsigned integer value into bytebuffer, maintaining binary representation",
        "GroundTruth": [
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Stack Overflow"
    },
    "584": {
        "Query": "HttpURLConnection getInputStream to read page, and then make POST request",
        "GroundTruth": [
            "java.net.URL.openConnection()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Stack Overflow"
    },
    "585": {
        "Query": "Find absolute path of *.properties file in Spring context",
        "GroundTruth": [
            "java.lang.ClassLoader.getResource()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "586": {
        "Query": "phone Number validation in java",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "587": {
        "Query": "Mockito Matchers any Map",
        "GroundTruth": [
            "org.hamcrest.Matchers.eq()"
        ],
        "APIClasses": [
            "org.hamcrest.Matchers"
        ],
        "Source": "Stack Overflow"
    },
    "588": {
        "Query": "Printing all elements of an array in one println statement in Java",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "589": {
        "Query": "How to do a culture invariant conversion from int to String in Java?",
        "GroundTruth": [
            "java.lang.Integer.toString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "590": {
        "Query": "Java XML: how to output the namespace of child elements?",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Stack Overflow"
    },
    "591": {
        "Query": "how to return a formatted number by String.format in English?",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "592": {
        "Query": "Escaping individual characters in a character class",
        "GroundTruth": [
            "java.util.regex.Pattern.quote()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Stack Overflow"
    },
    "593": {
        "Query": "Random multivariate normal distribution",
        "GroundTruth": [
            "org.apache.commons.math3.distribution.MultivariateNormalDistribution()"
        ],
        "APIClasses": [
            "org.apache.commons.math3.distribution"
        ],
        "Source": "Stack Overflow"
    },
    "594": {
        "Query": "Half-Even Rounding",
        "GroundTruth": [
            "java.lang.BigDecimal.BigDecimal()"
        ],
        "APIClasses": [
            "java.lang.BigDecimal"
        ],
        "Source": "Stack Overflow"
    },
    "595": {
        "Query": "Spring batch RowMapper - get number of columns and type",
        "GroundTruth": [
            "java.sql.ResultSet.getMetaData()"
        ],
        "APIClasses": [
            "java.sql.ResultSet"
        ],
        "Source": "Stack Overflow"
    },
    "596": {
        "Query": "How do I Create a java.sql.Date variable?",
        "GroundTruth": [
            "java.text.SimpleDateFormat()"
        ],
        "APIClasses": [
            "java.text"
        ],
        "Source": "Stack Overflow"
    },
    "597": {
        "Query": "Java HTTP Request : get content size",
        "GroundTruth": [
            "java.net.URLConnection.getContentLength()"
        ],
        "APIClasses": [
            "java.net.URLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "598": {
        "Query": "Java display length of int containing leading zeros",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "599": {
        "Query": "Java int to hex with 0x",
        "GroundTruth": [
            "java.lang.Integer.toHexString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "600": {
        "Query": "get line number of a MethodDeclaration",
        "GroundTruth": [
            "com.github.javaparser.ast.body.CallableDeclaration.getName()"
        ],
        "APIClasses": [
            "com.github.javaparser.ast.body.CallableDeclaration"
        ],
        "Source": "Stack Overflow"
    },
    "601": {
        "Query": "JDBC Return generated key or existing key",
        "GroundTruth": [
            "java.sql.Statement.getGeneratedKeys()"
        ],
        "APIClasses": [
            "java.sql.Statement"
        ],
        "Source": "Stack Overflow"
    },
    "602": {
        "Query": "Efficient way to exclude a specific value from a TreeMap",
        "GroundTruth": [
            "java.util.Map.entrySet()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Stack Overflow"
    },
    "603": {
        "Query": "Converting string value with comma to Decimal with correct Locale",
        "GroundTruth": [
            "java.text.NumberFormat.getInstance().parse()"
        ],
        "APIClasses": [
            "java.text.NumberFormat.getInstance()"
        ],
        "Source": "Stack Overflow"
    },
    "604": {
        "Query": "Check whether two arrays have same elements in some order",
        "GroundTruth": [
            "java.util.Set.equals()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Stack Overflow"
    },
    "605": {
        "Query": "Is there a way to find the first element to match a Predicate?",
        "GroundTruth": [
            "java.util.stream.Stream.findFirst()"
        ],
        "APIClasses": [
            "java.util.stream.Stream"
        ],
        "Source": "Stack Overflow"
    },
    "606": {
        "Query": "How to annotate injector.getInstance?",
        "GroundTruth": [
            "com.google.inject.Injector.getInstance()"
        ],
        "APIClasses": [
            "com.google.inject.Injector"
        ],
        "Source": "Stack Overflow"
    },
    "607": {
        "Query": "how to get a class reference to parameterized type",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Stack Overflow"
    },
    "608": {
        "Query": "Java, JavaCC: How to parse characters outside the BMP?",
        "GroundTruth": [
            "java.lang.Character.toCodePoint()",
            "java.lang.String.codePointAt()"
        ],
        "APIClasses": [
            "java.lang.Character",
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "609": {
        "Query": "Write a stream into a file with NIO and the Channel system",
        "GroundTruth": [
            "java.nio.channels.Channels.newChannel()"
        ],
        "APIClasses": [
            "java.nio.channels.Channels"
        ],
        "Source": "Stack Overflow"
    },
    "610": {
        "Query": "Convert InputStream to String with encoding given in stream data",
        "GroundTruth": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()"
        ],
        "APIClasses": [
            "java.io.ByteArrayOutputStream"
        ],
        "Source": "Stack Overflow"
    },
    "611": {
        "Query": "Execute external program from Java",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "612": {
        "Query": "How to define log4j2 path by application.properties?",
        "GroundTruth": [
            "java.lang.management.ManagementFactory.getRuntimeMXBean()"
        ],
        "APIClasses": [
            "java.lang.management.ManagementFactory"
        ],
        "Source": "Stack Overflow"
    },
    "613": {
        "Query": "Setting the run time properties on SpringApplicationBuilder()",
        "GroundTruth": [
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "614": {
        "Query": "Java reverse string",
        "GroundTruth": [
            "java.lang.StringBuilder.reverse()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder"
        ],
        "Source": "Stack Overflow"
    },
    "615": {
        "Query": "How can I get an Object's name in java?",
        "GroundTruth": [
            "java.awt.Component.setName()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "616": {
        "Query": "JasperReport with spring MVC : print report on client side without displaying it",
        "GroundTruth": [
            "java.awt.print.PrinterJob.print()"
        ],
        "APIClasses": [
            "java.awt.print.PrinterJob"
        ],
        "Source": "Stack Overflow"
    },
    "617": {
        "Query": "How to represent NA in rJava",
        "GroundTruth": [
            "org.rosuda.REngine.REXPDouble.NA"
        ],
        "APIClasses": [
            "org.rosuda.REngine.REXPDouble"
        ],
        "Source": "Stack Overflow"
    },
    "618": {
        "Query": "StAX XML formatting in Java",
        "GroundTruth": [
            "javax.xml.transform.Transformer.setOutputProperty()"
        ],
        "APIClasses": [
            "javax.xml.transform.Transformer"
        ],
        "Source": "Stack Overflow"
    },
    "619": {
        "Query": "Store JPA entity with given field object id instead of object itself",
        "GroundTruth": [
            "javax.persistence.EntityManager.getReference()"
        ],
        "APIClasses": [
            "javax.persistence.EntityManager"
        ],
        "Source": "Stack Overflow"
    },
    "620": {
        "Query": "How to add header to HttpRequest of GET method in Java",
        "GroundTruth": [
            "java.net.URLConnection.setRequestProperty()"
        ],
        "APIClasses": [
            "java.net.URLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "621": {
        "Query": "How to convert a number always to be negative?",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "622": {
        "Query": "How to remove text from textflow in javafx?",
        "GroundTruth": [
            "javafx.scene.text.TextFlow.getChildren().clear()"
        ],
        "APIClasses": [
            "javafx.scene.text.TextFlow.getChildren()"
        ],
        "Source": "Stack Overflow"
    },
    "623": {
        "Query": "Java: Determin angle between two points",
        "GroundTruth": [
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "624": {
        "Query": "How can I convert float to integer in Java",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "625": {
        "Query": "Reseting Spinner Value in Java Swing",
        "GroundTruth": [
            "javax.swing.SpinnerNumberModel.SpinnerNumberModel()"
        ],
        "APIClasses": [
            "javax.swing.SpinnerNumberModel"
        ],
        "Source": "Stack Overflow"
    },
    "626": {
        "Query": "Removing a part of a string before second /",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "627": {
        "Query": "How do I draw a triangle?",
        "GroundTruth": [
            "java.awt.Graphics.drawPolygon()"
        ],
        "APIClasses": [
            "java.awt.Graphics"
        ],
        "Source": "Stack Overflow"
    },
    "628": {
        "Query": "Java's equivalent to bisect in python",
        "GroundTruth": [
            "java.util.Arrays.binarySearch",
            "java.util.Collections.binarySearch"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "629": {
        "Query": "Trying to implement SSL on the Jersey client in order to talk to a secure server",
        "GroundTruth": [
            "javax.net.ssl.SSLContext.init()"
        ],
        "APIClasses": [
            "javax.net.ssl.SSLContext"
        ],
        "Source": "Stack Overflow"
    },
    "630": {
        "Query": "How to remove first element from the Linked List?",
        "GroundTruth": [
            "java.util.LinkedList.removeFirst()"
        ],
        "APIClasses": [
            "java.util.LinkedList"
        ],
        "Source": "Stack Overflow"
    },
    "631": {
        "Query": "Get DTD from an XML file",
        "GroundTruth": [
            "org.w3c.dom.DocumentType.getSystemId()"
        ],
        "APIClasses": [
            "org.w3c.dom.DocumentType"
        ],
        "Source": "Stack Overflow"
    },
    "632": {
        "Query": "Covert timestamp to json iso8601 in java",
        "GroundTruth": [
            "java.text.SimpleDateFormat.SimpleDateFormat()"
        ],
        "APIClasses": [
            "java.text.SimpleDateFormat"
        ],
        "Source": "Stack Overflow"
    },
    "633": {
        "Query": "How to read .sql files internally in Java jar?",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "634": {
        "Query": "Adding rows to a JTable",
        "GroundTruth": [
            "javax.swing.table.AbstractTableModel.fireTableRowsInserted()"
        ],
        "APIClasses": [
            "javax.swing.table.AbstractTableModel"
        ],
        "Source": "Stack Overflow"
    },
    "635": {
        "Query": "Convert Graphics2D to ImageIcon",
        "GroundTruth": [
            "javax.swing.Icon.paintIcon()"
        ],
        "APIClasses": [
            "javax.swing.Icon"
        ],
        "Source": "Stack Overflow"
    },
    "636": {
        "Query": "how to get file name from the server request?",
        "GroundTruth": [
            "java.net.HttpURLConnection.getHeaderField()"
        ],
        "APIClasses": [
            "java.net.HttpURLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "637": {
        "Query": "How can I authenticate a system user for scheduled processes in Spring?",
        "GroundTruth": [
            "SecurityContextHolder.getContext().setAuthentication()"
        ],
        "APIClasses": [
            "SecurityContextHolder.getContext()"
        ],
        "Source": "Stack Overflow"
    },
    "638": {
        "Query": "Return object from arraylist with highest value?",
        "GroundTruth": [
            "java.util.Collections.max()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "639": {
        "Query": "Is it possible to get a raw deflate out of java.util.zip.Deflater?",
        "GroundTruth": [
            "java.util.zip.Deflater.Deflater()"
        ],
        "APIClasses": [
            "java.util.zip.Deflater"
        ],
        "Source": "Stack Overflow"
    },
    "640": {
        "Query": "How to handle a SIGTERM",
        "GroundTruth": [
            "java.lang.Runtime.addShutdownHook()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "641": {
        "Query": "How do I create an empty Guava ImmutableList?",
        "GroundTruth": [
            "com.google.common.collect.ImmutableList.of()"
        ],
        "APIClasses": [
            "com.google.common.collect.ImmutableList"
        ],
        "Source": "Stack Overflow"
    },
    "642": {
        "Query": "How to set current date to jDateChooser from pc?",
        "GroundTruth": [
            "java.util.Date.setDate()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Stack Overflow"
    },
    "643": {
        "Query": "Checking empty string in an arraylist",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "644": {
        "Query": "Maven and Eclipse : loading default properties in maven library project and use it in runnable Jar",
        "GroundTruth": [
            "java.lang.Class.getResource()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "645": {
        "Query": "How to re-use a thread in Java?",
        "GroundTruth": [
            "java.util.concurrent.Executors.newFixedThreadPool()"
        ],
        "APIClasses": [
            "java.util.concurrent.Executors"
        ],
        "Source": "Stack Overflow"
    },
    "646": {
        "Query": "Close all Java child windows",
        "GroundTruth": [
            "java.awt.Dialog.setVisible()"
        ],
        "APIClasses": [
            "java.awt.Dialog"
        ],
        "Source": "Stack Overflow"
    },
    "647": {
        "Query": "Fastest way to pad a number in Java to a certain number of digits",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "648": {
        "Query": "Java String, single char to hex bytes",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "649": {
        "Query": "Typesafe Config: Load configuration from src/test/resources",
        "GroundTruth": [
            "com.typesafe.config.ConfigFactory.load()"
        ],
        "APIClasses": [
            "com.typesafe.config.ConfigFactory"
        ],
        "Source": "Stack Overflow"
    },
    "650": {
        "Query": "Java: convert a char[] to a CharSequence",
        "GroundTruth": [
            "java.lang.String.String()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "651": {
        "Query": "How to read/write .dat file within Jar file?",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "652": {
        "Query": "Change text size of Textbutton in LibGDX",
        "GroundTruth": [
            "com.badlogic.gdx.scenes.scene2d.ui.TextButton.getLabel().setFontScale()"
        ],
        "APIClasses": [
            "com.badlogic.gdx.scenes.scene2d.ui.TextButton.getLabel()"
        ],
        "Source": "Stack Overflow"
    },
    "653": {
        "Query": "Displaying Blob Value from JTable cell to JLabel",
        "GroundTruth": [
            "javax.swing.event.ListSelectionEvent.getValueIsAdjusting()"
        ],
        "APIClasses": [
            "javax.swing.event.ListSelectionEvent"
        ],
        "Source": "Stack Overflow"
    },
    "654": {
        "Query": "Java InputStream to ByteBuffer",
        "GroundTruth": [
            "org.apache.commons.io.IOUtils.toByteArray()"
        ],
        "APIClasses": [
            "org.apache.commons.io.IOUtils"
        ],
        "Source": "Stack Overflow"
    },
    "655": {
        "Query": "Extract JSESSIONID in REST after login",
        "GroundTruth": [
            "javax.servlet.http.HttpServletRequest.getSession()"
        ],
        "APIClasses": [
            "javax.servlet.http.HttpServletRequest"
        ],
        "Source": "Stack Overflow"
    },
    "656": {
        "Query": "Collectors.toSet() and HashSet",
        "GroundTruth": [
            "java.util.stream.Collectors.toCollection()"
        ],
        "APIClasses": [
            "java.util.stream.Collectors"
        ],
        "Source": "Stack Overflow"
    },
    "657": {
        "Query": "Sorting half empty array in java",
        "GroundTruth": [
            "java.util.ArrayList.sort()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Stack Overflow"
    },
    "658": {
        "Query": "Is there a way to force a native thread to exit through JNI?",
        "GroundTruth": [
            "java.lang.Thread.interrupt()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "659": {
        "Query": "How to get string name of a method in java?",
        "GroundTruth": [
            "java.lang.Class.getMethods()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "660": {
        "Query": "How to backup ArrayList in Java?",
        "GroundTruth": [
            "java.util.ArrayList.clone()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Stack Overflow"
    },
    "661": {
        "Query": "How to convert array to collection in Java?",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "662": {
        "Query": "Fastest way to put contents of Set<String> to a single String with words separated by a whitespace?",
        "GroundTruth": [
            "java.lang.String.join()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "663": {
        "Query": "How to use sine, cosine, log function in android studio",
        "GroundTruth": [
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "664": {
        "Query": "How to make jTextArea Transparent background",
        "GroundTruth": [
            "javax.swing.JViewport.setOpaque()"
        ],
        "APIClasses": [
            "javax.swing.JViewport"
        ],
        "Source": "Stack Overflow"
    },
    "665": {
        "Query": "Java dynamic function calling",
        "GroundTruth": [
            "java.lang.Class.getMethod().invoke()"
        ],
        "APIClasses": [
            "java.lang.Class.getMethod()"
        ],
        "Source": "Stack Overflow"
    },
    "666": {
        "Query": "Refreshing multiple Realm instances at once?",
        "GroundTruth": [
            "io.realm.Realm.getInstance()"
        ],
        "APIClasses": [
            "io.realm.Realm"
        ],
        "Source": "Stack Overflow"
    },
    "667": {
        "Query": "JUnit asserting two Strings whether they're equal or not",
        "GroundTruth": [
            "java.io.PrintStream.println()"
        ],
        "APIClasses": [
            "java.io.PrintStream"
        ],
        "Source": "Stack Overflow"
    },
    "668": {
        "Query": "Monitor thread status",
        "GroundTruth": [
            "java.util.concurrent.Executors.newSingleThreadExecutor()"
        ],
        "APIClasses": [
            "java.util.concurrent.Executors"
        ],
        "Source": "Stack Overflow"
    },
    "669": {
        "Query": "Convert plaintext to perform elgamal encryption",
        "GroundTruth": [
            "java.lang.String.String()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "670": {
        "Query": "Coloring Buttons in Android with AppCompat",
        "GroundTruth": [
            "android.support.v7.widget.AppCompatButton.setSupportBackgroundTintList(getResources().getColorStateList())"
        ],
        "APIClasses": [
            "android.support.v7.widget.AppCompatButton.setSupportBackgroundTintList(getResources()"
        ],
        "Source": "Stack Overflow"
    },
    "671": {
        "Query": "How to reset back to default css after adding style?",
        "GroundTruth": [
            "javafx.scene.control.TextField.getStyleClass()"
        ],
        "APIClasses": [
            "javafx.scene.control.TextField"
        ],
        "Source": "Stack Overflow"
    },
    "672": {
        "Query": "How can I know if the image is in RGB or BGR format?",
        "GroundTruth": [
            "java.awt.image.BufferedImage.getType()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Stack Overflow"
    },
    "673": {
        "Query": "java jtree redisplay tooltip for every item after a delay",
        "GroundTruth": [
            "javax.swing.JComponent.setToolTipText()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "674": {
        "Query": "How can I get the current date and time in UTC or GMT in Java?",
        "GroundTruth": [
            "java.util.Date.toString()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Stack Overflow"
    },
    "675": {
        "Query": "Surround string with another string",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "676": {
        "Query": "Java - Convert byte[] to char[]. The encoding is UTF-16",
        "GroundTruth": [
            "java.lang.String.String()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "677": {
        "Query": "How to do custom rounding of numbers in Java?",
        "GroundTruth": [
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "678": {
        "Query": "How do I get to the raw http headers (for basic authentication) with Wicket (Java)?",
        "GroundTruth": [
            "getHeader()",
            "org.apache.wicket.request.http.WebRequest.getHeader()"
        ],
        "APIClasses": [
            "",
            "org.apache.wicket.request.http.WebRequest"
        ],
        "Source": "Stack Overflow"
    },
    "679": {
        "Query": "Java regex for accepting a valid hostname,IPv4, or IPv6 address",
        "GroundTruth": [
            "java.net.InetAddress.getByName()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Stack Overflow"
    },
    "680": {
        "Query": "RestAssured: Making a GET request with a parameters map",
        "GroundTruth": [
            "RestAssured.given().param(paramsMap).when().get(url)"
        ],
        "APIClasses": [
            "RestAssured.given().param(paramsMap).when()"
        ],
        "Source": "Stack Overflow"
    },
    "681": {
        "Query": "Creating a file from a file path that can be opened in Linux",
        "GroundTruth": [
            "java.io.File.exists()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "682": {
        "Query": "Libgdx rotating to angle with Vector2s",
        "GroundTruth": [
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "683": {
        "Query": "How to get objects from criteria query in List in order of ids provided",
        "GroundTruth": [
            "getAll()"
        ],
        "APIClasses": [
            ""
        ],
        "Source": "Stack Overflow"
    },
    "684": {
        "Query": "How can we list all files and folders recursively?",
        "GroundTruth": [
            "org.apache.commons.io.FilenameUtils.listFiles()"
        ],
        "APIClasses": [
            "org.apache.commons.io.FilenameUtils"
        ],
        "Source": "Stack Overflow"
    },
    "685": {
        "Query": "How do I write to the console in Google App Engine (JAVA)?",
        "GroundTruth": [
            "java.lang.System.out.println()"
        ],
        "APIClasses": [
            "java.lang.System.out"
        ],
        "Source": "Stack Overflow"
    },
    "686": {
        "Query": "Remove button after it has been clicked?",
        "GroundTruth": [
            "javax.swing.JComponent.repaint()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "687": {
        "Query": "Round up when multiplying an integer by 0.5",
        "GroundTruth": [
            "java.lang.Math.ceil()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "688": {
        "Query": "How to get boolean of JCheckBoxMenuItem?",
        "GroundTruth": [
            "javax.swing.AbstractButton.isSelected()"
        ],
        "APIClasses": [
            "javax.swing.AbstractButton"
        ],
        "Source": "Stack Overflow"
    },
    "689": {
        "Query": "Java: Convert signed Int_32 (hex) to Int",
        "GroundTruth": [
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Stack Overflow"
    },
    "690": {
        "Query": "How to get full URL from compressed URL in Android?",
        "GroundTruth": [
            "java.net.HttpURLConnection.getResponseCode()",
            "java.net.URLConnection.getHeaderField()"
        ],
        "APIClasses": [
            "java.net.HttpURLConnection",
            "java.net.URLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "691": {
        "Query": "Username Validation Java",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "692": {
        "Query": "Append new value to javax.json.JsonObject",
        "GroundTruth": [
            "javax.json.JsonObject",
            "javax.json.JsonObject.put"
        ],
        "APIClasses": [
            "javax.json",
            "javax.json.JsonObject"
        ],
        "Source": "Stack Overflow"
    },
    "693": {
        "Query": "Returning a \"Java\" New Line in a String?",
        "GroundTruth": [
            "java.lang.System.lineSeparator()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "694": {
        "Query": "Java equivalent of C#'s Type?",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Stack Overflow"
    },
    "695": {
        "Query": "JTable How to refresh table model after insert delete or update the data.",
        "GroundTruth": [
            "javax.swing.table.AbstractTableModel.fireTableDataChanged()"
        ],
        "APIClasses": [
            "javax.swing.table.AbstractTableModel"
        ],
        "Source": "Stack Overflow"
    },
    "696": {
        "Query": "How to update a value in a map if it exists else insert it",
        "GroundTruth": [
            "java.util.Map.put()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Stack Overflow"
    },
    "697": {
        "Query": "How can I determine if a String equals a range of numbers in Java?",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "698": {
        "Query": "Get `Instant` from `ZonedDateTime` in java.time",
        "GroundTruth": [
            "java.time.chrono.ChronoZonedDateTime.toInstant()"
        ],
        "APIClasses": [
            "java.time.chrono.ChronoZonedDateTime"
        ],
        "Source": "Stack Overflow"
    },
    "699": {
        "Query": "Sending HTTP Header Info with Java UrlConnection",
        "GroundTruth": [
            "java.net.URLConnection.setRequestProperty()"
        ],
        "APIClasses": [
            "java.net.URLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "700": {
        "Query": "Parse CSV file in java, and delaing with empty values",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "701": {
        "Query": "Java Date Conversion from Millisecond time",
        "GroundTruth": [
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Stack Overflow"
    },
    "702": {
        "Query": "How I can use Java Regex for Turkish characters to UTF-8",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Stack Overflow"
    },
    "703": {
        "Query": "How to use java.util.zip to archive/deflate string in java for use in Google Earth?",
        "GroundTruth": [
            "java.util.zip.ZipOutputStream.close()"
        ],
        "APIClasses": [
            "java.util.zip.ZipOutputStream"
        ],
        "Source": "Stack Overflow"
    },
    "704": {
        "Query": "loadResourceasStream from a subfolder of the project java",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "705": {
        "Query": "Cast from an Object ArrayList to Object Array in JSP",
        "GroundTruth": [
            "java.util.List.toArray()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "706": {
        "Query": "Converting hex to binary with leading zeros",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "707": {
        "Query": "How to update an OWL ontology file in order to add a new individual with some properties?",
        "GroundTruth": [
            "org.coode.xml.XMLWriterPreferences.getInstance.setUseNamespaceEntities()"
        ],
        "APIClasses": [
            "org.coode.xml.XMLWriterPreferences.getInstance"
        ],
        "Source": "Stack Overflow"
    },
    "708": {
        "Query": "How to flush Couchbase bucket from Java code?",
        "GroundTruth": [
            "com.couchbase.client.java.bucket.BucketManager.flush()"
        ],
        "APIClasses": [
            "com.couchbase.client.java.bucket.BucketManager"
        ],
        "Source": "Stack Overflow"
    },
    "709": {
        "Query": "is it possible to get a zipentry's inputstream from a zipinputstream?",
        "GroundTruth": [
            "java.util.zip.ZipInputStream.getNextEntry()"
        ],
        "APIClasses": [
            "java.util.zip.ZipInputStream"
        ],
        "Source": "Stack Overflow"
    },
    "710": {
        "Query": "Split a string only two times",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "711": {
        "Query": "Spring Batch accessing job parameter inside step",
        "GroundTruth": [
            "org.springframework.batch.core.scope.context.ChunkContext.getStepContext().getStepExecution().getJobParameters().getString()",
            "org.springframework.batch.core.scope.context.ChunkContext.getStepContext().getJobParameters().get()"
        ],
        "APIClasses": [
            "org.springframework.batch.core.scope.context.ChunkContext.getStepContext().getStepExecution().getJobParameters()",
            "org.springframework.batch.core.scope.context.ChunkContext.getStepContext().getJobParameters()"
        ],
        "Source": "Stack Overflow"
    },
    "712": {
        "Query": "How to create performance counters that are exposed by jmx and accessed via jconsole?",
        "GroundTruth": [
            "java.lang.management.ManagementFactory.getPlatformMBeanServer()"
        ],
        "APIClasses": [
            "java.lang.management.ManagementFactory"
        ],
        "Source": "Stack Overflow"
    },
    "713": {
        "Query": "Trying to compare performance of lib to copy an InputStream to an OutputStream",
        "GroundTruth": [
            "java.nio.file.Files.copy()"
        ],
        "APIClasses": [
            "java.nio.file.Files"
        ],
        "Source": "Stack Overflow"
    },
    "714": {
        "Query": "Jersey 2.x: How to add Headers on RESTful Client",
        "GroundTruth": [
            "javax.ws.rs.client.ClientRequestContext.getHeaders()"
        ],
        "APIClasses": [
            "javax.ws.rs.client.ClientRequestContext"
        ],
        "Source": "Stack Overflow"
    },
    "715": {
        "Query": "How to determine a file path in Maven project?",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "716": {
        "Query": "How to implement (x pow y) in java,where x,y are double?",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "717": {
        "Query": "How to format a String onto one line, StringUtils?",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "718": {
        "Query": "Removing invisible characters from the end of a Java String",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "719": {
        "Query": "Is there an infinite Duration in Java 8 equivalent to the .NET Timeout.InfiniteTimeSpan Field?",
        "GroundTruth": [
            "java.util.concurrent.locks.LockSupport.park()"
        ],
        "APIClasses": [
            "java.util.concurrent.locks.LockSupport"
        ],
        "Source": "Stack Overflow"
    },
    "720": {
        "Query": "Java | compare char word in a char array",
        "GroundTruth": [
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "721": {
        "Query": "Sending an OWA logon form from Java",
        "GroundTruth": [
            "java.net.URLConnection.setRequestProperty()"
        ],
        "APIClasses": [
            "java.net.URLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "722": {
        "Query": "How to get the current opened stage in JavaFX?",
        "GroundTruth": [
            "javafx.stage.Stage.getWindows().stream().filter()"
        ],
        "APIClasses": [
            "javafx.stage.Stage.getWindows().stream()"
        ],
        "Source": "Stack Overflow"
    },
    "723": {
        "Query": "spring-integration : how to delete a file?",
        "GroundTruth": [
            "java.io.File.delete()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "724": {
        "Query": "Grid component and sorting with custom sort listener",
        "GroundTruth": [
            "sort()",
            "javax.swing.Container.sort()"
        ],
        "APIClasses": [
            "",
            "javax.swing.Container"
        ],
        "Source": "Stack Overflow"
    },
    "725": {
        "Query": "How to read the fully qualified name of a .class file",
        "GroundTruth": [
            "java.lang.ClassLoader.defineClass()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "726": {
        "Query": "How to collect DoubleStream to List",
        "GroundTruth": [
            "java.util.stream.DoubleStream.boxed()"
        ],
        "APIClasses": [
            "java.util.stream.DoubleStream"
        ],
        "Source": "Stack Overflow"
    },
    "727": {
        "Query": "Verify that all key/value pairs in a Map are present in another Map",
        "GroundTruth": [
            "java.util.Map.equals()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Stack Overflow"
    },
    "728": {
        "Query": "Javafx HBox Hgrow(SOMETIMES) child scrollpane node how to get width?",
        "GroundTruth": [
            "javax.swing.JScrollPane.getWidth()"
        ],
        "APIClasses": [
            "javax.swing.JScrollPane"
        ],
        "Source": "Stack Overflow"
    },
    "729": {
        "Query": "Java File Splitting",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "730": {
        "Query": "Create new or clone XSSFCellStyle from another XSSFCellStyle (POI APACHE)",
        "GroundTruth": [
            "org.apache.poi.xssf.usermodel.XSSFCellStyle.cloneStyleFrom()"
        ],
        "APIClasses": [
            "org.apache.poi.xssf.usermodel.XSSFCellStyle"
        ],
        "Source": "Stack Overflow"
    },
    "731": {
        "Query": "How to force use of specific XML parser",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Stack Overflow"
    },
    "732": {
        "Query": "Java jdbc - how to execute a statement strictly read only",
        "GroundTruth": [
            "java.sql.Connection.setReadOnly()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Stack Overflow"
    },
    "733": {
        "Query": "Input String Is Encoded, Need The Original String - Java Code",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "734": {
        "Query": "Java how to draw and fill a Polygon which has holes",
        "GroundTruth": [
            "java.awt.geom.Area.subtract()"
        ],
        "APIClasses": [
            "java.awt.geom.Area"
        ],
        "Source": "Stack Overflow"
    },
    "735": {
        "Query": "How to call an InputVerifier in Java?",
        "GroundTruth": [
            "javax.swing.JTextPane.setText()",
            "javax.swing.JTextPane.requestFocusInWindow()"
        ],
        "APIClasses": [
            "javax.swing.JTextPane"
        ],
        "Source": "Stack Overflow"
    },
    "736": {
        "Query": "Java nio: How to add extension to an absolute path?",
        "GroundTruth": [
            "java.nio.file.Path.resolveSibling()"
        ],
        "APIClasses": [
            "java.nio.file.Path"
        ],
        "Source": "Stack Overflow"
    },
    "737": {
        "Query": "Convert Curl to Java equivalent",
        "GroundTruth": [
            "java.io.InputStream()"
        ],
        "APIClasses": [
            "java.io"
        ],
        "Source": "Stack Overflow"
    },
    "738": {
        "Query": "Java - Set width/height of JLabel",
        "GroundTruth": [
            "java.awt.Component.setMinimumSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "739": {
        "Query": "Java 8 sum or subtract depending on even odd",
        "GroundTruth": [
            "java.util.Arrays.stream()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "740": {
        "Query": "How do I get the underlying type of a proxy object in java?",
        "GroundTruth": [
            "java.lang.reflect.Proxy.getInvocationHandler()"
        ],
        "APIClasses": [
            "java.lang.reflect.Proxy"
        ],
        "Source": "Stack Overflow"
    },
    "741": {
        "Query": "Android, get resource id by string?",
        "GroundTruth": [
            "android.app.Activity.getResources().getIdentifier()"
        ],
        "APIClasses": [
            "android.app.Activity.getResources()"
        ],
        "Source": "Stack Overflow"
    },
    "742": {
        "Query": "Pad DateTimeFormatter with traling zeros",
        "GroundTruth": [
            "java.time.format.DateTimeFormatter.ofPattern()"
        ],
        "APIClasses": [
            "java.time.format.DateTimeFormatter"
        ],
        "Source": "Stack Overflow"
    },
    "743": {
        "Query": "How to read a zip file from a remote URL without extracting it",
        "GroundTruth": [
            "java.net.URLConnection.getInputStream()"
        ],
        "APIClasses": [
            "java.net.URLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "744": {
        "Query": "How do I cast Stream.empty() in Java 8?",
        "GroundTruth": [
            "java.util.stream.Stream.empty()"
        ],
        "APIClasses": [
            "java.util.stream.Stream"
        ],
        "Source": "Stack Overflow"
    },
    "745": {
        "Query": "split JSON and string in android",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "746": {
        "Query": "How to get Last Week of Month from Calendar in JAVA",
        "GroundTruth": [
            "java.util.Calendar.getActualMaximum()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Stack Overflow"
    },
    "747": {
        "Query": "Formatting a Hexadecimal number with Thymeleaf",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "748": {
        "Query": "Correct way to use retrieve external object with Lazy fetch type",
        "GroundTruth": [
            "com.fasterxml.jackson.datatype.hibernate4.Hibernate4Module()"
        ],
        "APIClasses": [
            "com.fasterxml.jackson.datatype.hibernate4"
        ],
        "Source": "Stack Overflow"
    },
    "749": {
        "Query": "Exclude elements from ArrayList",
        "GroundTruth": [
            "subList()",
            "java.util.List.subList()"
        ],
        "APIClasses": [
            "",
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "750": {
        "Query": "How to use OkHttp's HttpUrl with a request?",
        "GroundTruth": [
            "okhttp3.Request.Builder().url()"
        ],
        "APIClasses": [
            "okhttp3.Request.Builder()"
        ],
        "Source": "Stack Overflow"
    },
    "751": {
        "Query": "How to kill a thread that is waiting on synchronized resource?",
        "GroundTruth": [
            "java.lang.Thread.interrupt()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "752": {
        "Query": "Multiple conditions with.ReplaceAll",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "753": {
        "Query": "How to convert an Optional<T> into a Stream<T>?",
        "GroundTruth": [
            "java.util.Optional.stream()"
        ],
        "APIClasses": [
            "java.util.Optional"
        ],
        "Source": "Stack Overflow"
    },
    "754": {
        "Query": "How to Render a Hex Grid",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "755": {
        "Query": "How can I access values in a scala.collection.mutable.WrappedArray of WrappedArray's in java",
        "GroundTruth": [
            "org.apache.spark.sql.Row.getList()"
        ],
        "APIClasses": [
            "org.apache.spark.sql.Row"
        ],
        "Source": "Stack Overflow"
    },
    "756": {
        "Query": "Convert Clob to String",
        "GroundTruth": [
            "java.sql.ResultSet.getString()"
        ],
        "APIClasses": [
            "java.sql.ResultSet"
        ],
        "Source": "Stack Overflow"
    },
    "757": {
        "Query": "Set keyboard focus",
        "GroundTruth": [
            "javax.swing.JComponent.requestFocusInWindow()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "758": {
        "Query": "Java RandomAccessFile how to Read nth byte as a character",
        "GroundTruth": [
            "java.io.RandomAccessFile.readByte()"
        ],
        "APIClasses": [
            "java.io.RandomAccessFile"
        ],
        "Source": "Stack Overflow"
    },
    "759": {
        "Query": "Java 8 Convert HashSet to HashMap",
        "GroundTruth": [
            "java.util.stream.Collectors.toMap()"
        ],
        "APIClasses": [
            "java.util.stream.Collectors"
        ],
        "Source": "Stack Overflow"
    },
    "760": {
        "Query": "Convert .net date to Java date",
        "GroundTruth": [
            "java.util.Date.Date()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Stack Overflow"
    },
    "761": {
        "Query": "Android: Managing multiple notifications in status bar",
        "GroundTruth": [
            "android.content.Intent.setAction()"
        ],
        "APIClasses": [
            "android.content.Intent"
        ],
        "Source": "Stack Overflow"
    },
    "762": {
        "Query": "Programmatically getting Certificate Details",
        "GroundTruth": [
            "java.lang.Class.getProtectionDomain..getCodeSource().getCertificates()"
        ],
        "APIClasses": [
            "java.lang.Class.getProtectionDomain..getCodeSource()"
        ],
        "Source": "Stack Overflow"
    },
    "763": {
        "Query": "How to use a java Hashmap as variable in JasperReport",
        "GroundTruth": [
            "java.util.HashMap.HashMap()"
        ],
        "APIClasses": [
            "java.util.HashMap"
        ],
        "Source": "Stack Overflow"
    },
    "764": {
        "Query": "How can I split by the last point of a String?",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "765": {
        "Query": "Are there any java library for thumbnails generation?",
        "GroundTruth": [
            "javax.imageio.ImageIO",
            "java.awt.Image.getScaledInstance()"
        ],
        "APIClasses": [
            "javax.imageio",
            "java.awt.Image"
        ],
        "Source": "Stack Overflow"
    },
    "766": {
        "Query": "Resolving a sub-URI relative to a base URI",
        "GroundTruth": [
            "java.net.URI.resolve()"
        ],
        "APIClasses": [
            "java.net.URI"
        ],
        "Source": "Stack Overflow"
    },
    "767": {
        "Query": "BufferedImage imageType in swing",
        "GroundTruth": [
            "java.awt.GraphicsConfiguration.createCompatibleImage()"
        ],
        "APIClasses": [
            "java.awt.GraphicsConfiguration"
        ],
        "Source": "Stack Overflow"
    },
    "768": {
        "Query": "How can a StringBuilder best be converted to a String[]?",
        "GroundTruth": [
            "Java.lang.StringBuilder.toString()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "Java.lang.StringBuilder",
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "769": {
        "Query": "Get max length of row and column in java two dimensional array",
        "GroundTruth": [
            "java.lang.Integer.max()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "770": {
        "Query": "How to remove auto-focus in Swing",
        "GroundTruth": [
            "javax.swing.JComponent.requestFocusInWindow()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "771": {
        "Query": "How to get 5 years before now",
        "GroundTruth": [
            "java.time.ZonedDateTime.now()",
            "java.time.ZonedDateTime.now().minusYears().toInstant()"
        ],
        "APIClasses": [
            "java.time.ZonedDateTime",
            "java.time.ZonedDateTime.now().minusYears()"
        ],
        "Source": "Stack Overflow"
    },
    "772": {
        "Query": "How to get System Language?",
        "GroundTruth": [
            "android.content.res.Resources.getSystem..getConfiguration().locale.getLanguage()"
        ],
        "APIClasses": [
            "android.content.res.Resources.getSystem..getConfiguration().locale"
        ],
        "Source": "Stack Overflow"
    },
    "773": {
        "Query": "Execute cmd script with double quotes",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "774": {
        "Query": "How to check string for colon and split to get first index if it has colon",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "775": {
        "Query": "How do I get the folder name from a String containing the Absolute file path in android?",
        "GroundTruth": [
            "java.io.File.getParentFile()",
            "File(path).getParentFile().getName()"
        ],
        "APIClasses": [
            "java.io.File",
            "File(path).getParentFile()"
        ],
        "Source": "Stack Overflow"
    },
    "776": {
        "Query": "Create an enum set of generic type",
        "GroundTruth": [
            "java.util.EnumSet.noneOf()"
        ],
        "APIClasses": [
            "java.util.EnumSet"
        ],
        "Source": "Stack Overflow"
    },
    "777": {
        "Query": "Java get bean value",
        "GroundTruth": [
            "org.apache.commons.beanutils.BeanUtils.getProperty()"
        ],
        "APIClasses": [
            "org.apache.commons.beanutils.BeanUtils"
        ],
        "Source": "Stack Overflow"
    },
    "778": {
        "Query": "jpa flush or find before persist",
        "GroundTruth": [
            "javax.persistence.EntityManager.flush()"
        ],
        "APIClasses": [
            "javax.persistence.EntityManager"
        ],
        "Source": "Stack Overflow"
    },
    "779": {
        "Query": "How to determine whether an EJB call is from a remote or local client",
        "GroundTruth": [
            "java.lang.Throwable.getStackTrace()"
        ],
        "APIClasses": [
            "java.lang.Throwable"
        ],
        "Source": "Stack Overflow"
    },
    "780": {
        "Query": "Alternatives to setting encoding in FileWriter - Java",
        "GroundTruth": [
            "java.io.OutputStreamWriter.OutputStreamWriter()"
        ],
        "APIClasses": [
            "java.io.OutputStreamWriter"
        ],
        "Source": "Stack Overflow"
    },
    "781": {
        "Query": "Java JSON to Array",
        "GroundTruth": [
            "org.json.JSONArray.JSONArray()"
        ],
        "APIClasses": [
            "org.json.JSONArray"
        ],
        "Source": "Stack Overflow"
    },
    "782": {
        "Query": "Converting JSONObject to JSONArray",
        "GroundTruth": [
            "JSONObject.getJSONArray"
        ],
        "APIClasses": [
            "JSONObject"
        ],
        "Source": "Stack Overflow"
    },
    "783": {
        "Query": "JAVA-How to split string to int array based on spaces",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "784": {
        "Query": "How to get the first key of a hashmap?",
        "GroundTruth": [
            "java.util.stream.Stream.findAny()"
        ],
        "APIClasses": [
            "java.util.stream.Stream"
        ],
        "Source": "Stack Overflow"
    },
    "785": {
        "Query": "Java how to increase font size?",
        "GroundTruth": [
            "setFont()",
            "java.awt.Font.deriveFont()"
        ],
        "APIClasses": [
            "",
            "java.awt.Font"
        ],
        "Source": "Stack Overflow"
    },
    "786": {
        "Query": "Searching a list of names in a text file from user input",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "787": {
        "Query": "How to convert Integer to int?",
        "GroundTruth": [
            "java.lang.Integer.intValue()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "788": {
        "Query": "How to let Timestamp object show in type long in JSON?",
        "GroundTruth": [
            "java.sql.Timestamp.getTime()"
        ],
        "APIClasses": [
            "java.sql.Timestamp"
        ],
        "Source": "Stack Overflow"
    },
    "789": {
        "Query": "Java converts standard String to CP1250 with only one byte for every char",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "790": {
        "Query": "How to access resources in Pax Exam test probe bundle?",
        "GroundTruth": [
            "java.lang.ClassLoader.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "791": {
        "Query": "How can a Java program get its own process ID?",
        "GroundTruth": [
            "java.lang.ProcessHandle..current().pid()"
        ],
        "APIClasses": [
            "java.lang.ProcessHandle..current()"
        ],
        "Source": "Stack Overflow"
    },
    "792": {
        "Query": "Remove method for Stack in Java",
        "GroundTruth": [
            "java.util.Stack.pop()"
        ],
        "APIClasses": [
            "java.util.Stack"
        ],
        "Source": "Stack Overflow"
    },
    "793": {
        "Query": "I want to display the value from json object in android activity",
        "GroundTruth": [
            "com.android.volley.RequestQueue.add()"
        ],
        "APIClasses": [
            "com.android.volley.RequestQueue"
        ],
        "Source": "Stack Overflow"
    },
    "794": {
        "Query": "How to round off longitude and latitude values",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "795": {
        "Query": "Find out dependencies for a any .jar bundle",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "796": {
        "Query": "Java GUI How to Popup Message Windows like MSN Messenger",
        "GroundTruth": [
            "java.awt.TrayIcon.displayMessage()"
        ],
        "APIClasses": [
            "java.awt.TrayIcon"
        ],
        "Source": "Stack Overflow"
    },
    "797": {
        "Query": "how to remove the borders in JInternalFrame?",
        "GroundTruth": [
            "frame.setBorder()"
        ],
        "APIClasses": [
            "frame"
        ],
        "Source": "Stack Overflow"
    },
    "798": {
        "Query": "How do you parse input from a text file in JAVA?",
        "GroundTruth": [
            "Scanner()",
            "java.io.File.File()"
        ],
        "APIClasses": [
            "",
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "799": {
        "Query": "How to find matching length of matching elements having same xpath in selenium",
        "GroundTruth": [
            "org.openqa.selenium.WebDriver.findElements().size()"
        ],
        "APIClasses": [
            "org.openqa.selenium.WebDriver.findElements()"
        ],
        "Source": "Stack Overflow"
    },
    "800": {
        "Query": "Null safe date comparator for sorting in Java 8 Stream",
        "GroundTruth": [
            "java.util.stream.Stream.sorted()"
        ],
        "APIClasses": [
            "java.util.stream.Stream"
        ],
        "Source": "Stack Overflow"
    },
    "801": {
        "Query": "Padding for Hex to Binary Conversion so each hex digit produces 4 bits",
        "GroundTruth": [
            "java.lang.String.replaceAll()",
            "java.lang.Integer.toBinaryString()",
            "java.lang.String.format().java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer",
            "java.lang.String.format().java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "802": {
        "Query": "JSON strings and how to handle escaped characters",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "803": {
        "Query": "Can you pull apart a string?",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "804": {
        "Query": "How to wait for completion of multiple tasks in Java?",
        "GroundTruth": [
            "java.util.concurrent.CountDownLatch.await()"
        ],
        "APIClasses": [
            "java.util.concurrent.CountDownLatch"
        ],
        "Source": "Stack Overflow"
    },
    "805": {
        "Query": "Regex to check if a number is even",
        "GroundTruth": [
            "java.math.BigInteger.remainder()"
        ],
        "APIClasses": [
            "java.math.BigInteger"
        ],
        "Source": "Stack Overflow"
    },
    "806": {
        "Query": "Vertically centering a label in a HBox control with Javafx",
        "GroundTruth": [
            "javafx.scene.layout.HBox.setAlignment()"
        ],
        "APIClasses": [
            "javafx.scene.layout.HBox"
        ],
        "Source": "Stack Overflow"
    },
    "807": {
        "Query": "Spark job in Java: how to access files from 'resources' when run on a cluster",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "808": {
        "Query": "How to read an Environment variable from Java code",
        "GroundTruth": [
            "java.lang.System.getenv()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "809": {
        "Query": "Selecting multiple elements in jsoup",
        "GroundTruth": [
            "org.jsoup.nodes.Document.select()"
        ],
        "APIClasses": [
            "org.jsoup.nodes.Document"
        ],
        "Source": "Stack Overflow"
    },
    "810": {
        "Query": "Closing Java FrameView",
        "GroundTruth": [
            "javax.swing.JInternalFrame.dispose()"
        ],
        "APIClasses": [
            "javax.swing.JInternalFrame"
        ],
        "Source": "Stack Overflow"
    },
    "811": {
        "Query": "Send and Receive data Simultaneously via Sockets",
        "GroundTruth": [
            "java.io.BufferedReader.readLine()"
        ],
        "APIClasses": [
            "java.io.BufferedReader"
        ],
        "Source": "Stack Overflow"
    },
    "812": {
        "Query": "Enumerate Java Fields",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "813": {
        "Query": "How to return an index within an ArrayList based on an attribute of the elements it holds",
        "GroundTruth": [
            "java.util.ArrayList.indexOf()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Stack Overflow"
    },
    "814": {
        "Query": "Java | Binary string to byte",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "815": {
        "Query": "How to change bottom line color of EditText?",
        "GroundTruth": [
            "editText.getBackground().mutate().setColorFilter()"
        ],
        "APIClasses": [
            "editText.getBackground().mutate()"
        ],
        "Source": "Stack Overflow"
    },
    "816": {
        "Query": "Best practice for reading until a marker with sockets (Java)?",
        "GroundTruth": [
            "java.io.BufferedReader.readLine()"
        ],
        "APIClasses": [
            "java.io.BufferedReader"
        ],
        "Source": "Stack Overflow"
    },
    "817": {
        "Query": "How do I replace HTML escapes in an input stream before parsing it to XML?",
        "GroundTruth": [
            "org.w3c.dom.Node.normalize()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Stack Overflow"
    },
    "818": {
        "Query": "How to total a list of numbers in FreeMarker",
        "GroundTruth": [
            "java.util.stream.LongStream.sum()"
        ],
        "APIClasses": [
            "java.util.stream.LongStream"
        ],
        "Source": "Stack Overflow"
    },
    "819": {
        "Query": "how to format string to show two decimal places",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "820": {
        "Query": "Java - control Z order of JPanels",
        "GroundTruth": [
            "javax.swing.JDesktopPane.setComponentZOrder()"
        ],
        "APIClasses": [
            "javax.swing.JDesktopPane"
        ],
        "Source": "Stack Overflow"
    },
    "821": {
        "Query": "compare ByteBuffer contents?",
        "GroundTruth": [
            "java.nio.ByteBuffer.equals()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Stack Overflow"
    },
    "822": {
        "Query": "Java SWT: Clear all items in a table before writing",
        "GroundTruth": [
            "javax.swing.JTabbedPane.removeAll()"
        ],
        "APIClasses": [
            "javax.swing.JTabbedPane"
        ],
        "Source": "Stack Overflow"
    },
    "823": {
        "Query": "How to read file from ZIP archive",
        "GroundTruth": [
            "java.util.zip.ZipFile.getInputStream()"
        ],
        "APIClasses": [
            "java.util.zip.ZipFile"
        ],
        "Source": "Stack Overflow"
    },
    "824": {
        "Query": "Partial match for regular expression in Java",
        "GroundTruth": [
            "java.util.regex.Matcher.find()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher"
        ],
        "Source": "Stack Overflow"
    },
    "825": {
        "Query": "Upload a zip file, unzip and read file",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "826": {
        "Query": "How to stop editing with DefaultCellEditor when a separate JBtton is pressed",
        "GroundTruth": [
            "javax.swing.JComponent.putClientProperty()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "827": {
        "Query": "How to convert android.net.Uri to java.net.URL?",
        "GroundTruth": [
            "java.net.URL.URL()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Stack Overflow"
    },
    "828": {
        "Query": "How get location of the source folder in Eclipse plugin development",
        "GroundTruth": [
            "getPackageDeclarations",
            "JavaCore.create(file)"
        ],
        "APIClasses": [
            "",
            "JavaCore"
        ],
        "Source": "Stack Overflow"
    },
    "829": {
        "Query": "disable item in listview android java",
        "GroundTruth": [
            "javax.swing.ButtonModel.setEnabled()"
        ],
        "APIClasses": [
            "javax.swing.ButtonModel"
        ],
        "Source": "Stack Overflow"
    },
    "830": {
        "Query": "How to input a sentence in Java",
        "GroundTruth": [
            "java.util.Scanner.nextLine()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Stack Overflow"
    },
    "831": {
        "Query": "Access external config file from Java EE app",
        "GroundTruth": [
            "java.lang.ClassLoader.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "832": {
        "Query": "Disabling hibernate validation annotations dynamically at runtime?",
        "GroundTruth": [
            "javax.xml.validation.Validator.Validator()"
        ],
        "APIClasses": [
            "javax.xml.validation.Validator"
        ],
        "Source": "Stack Overflow"
    },
    "833": {
        "Query": "java split missing commas at the end",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "834": {
        "Query": "Writing data to System.in",
        "GroundTruth": [
            "java.lang.System.setIn()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "835": {
        "Query": "How can I display a byte array as a String in java's debug detail formatter?",
        "GroundTruth": [
            "java.lang.String.String()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "836": {
        "Query": "How to set a text padding in a TextField?",
        "GroundTruth": [
            "getStyle().background.setLeftWidth()"
        ],
        "APIClasses": [
            "getStyle().background"
        ],
        "Source": "Stack Overflow"
    },
    "837": {
        "Query": "Hibernate Compare PersistentSet with HashSet",
        "GroundTruth": [
            "org.hibernate.collection.PersistentSet.equals()"
        ],
        "APIClasses": [
            "org.hibernate.collection.PersistentSet"
        ],
        "Source": "Stack Overflow"
    },
    "838": {
        "Query": "How to get an image resource by it's name in android?",
        "GroundTruth": [
            "android.app.Activity.getResources().getIdentifier()"
        ],
        "APIClasses": [
            "android.app.Activity.getResources()"
        ],
        "Source": "Stack Overflow"
    },
    "839": {
        "Query": "Passing user credentials from session to an applet?",
        "GroundTruth": [
            "java.util.UUID.randomUUID()"
        ],
        "APIClasses": [
            "java.util.UUID"
        ],
        "Source": "Stack Overflow"
    },
    "840": {
        "Query": "HTML processing in Java: Convert HTML to other formats",
        "GroundTruth": [
            "javax.swing.text.html.InlineView.InlineView()"
        ],
        "APIClasses": [
            "javax.swing.text.html.InlineView"
        ],
        "Source": "Stack Overflow"
    },
    "841": {
        "Query": "Java Swing: Relative Positioning and Automatic Resizing?",
        "GroundTruth": [
            "javax.swing.JTable.setAutoResizeMode()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Stack Overflow"
    },
    "842": {
        "Query": "How to retrieve header values from JTable",
        "GroundTruth": [
            "javax.swing.JTable.getColumnName()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Stack Overflow"
    },
    "843": {
        "Query": "Swing - JTable JScrollPane remove bottom border or add header border",
        "GroundTruth": [
            "javax.swing.JTable.getPreferredScrollableViewportSize()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Stack Overflow"
    },
    "844": {
        "Query": "How to check if contours are the same?",
        "GroundTruth": [
            "java.util.List.equals()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "845": {
        "Query": "Search for a word in a String",
        "GroundTruth": [
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "846": {
        "Query": "Determine the square root of a number",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "847": {
        "Query": "Convert BufferedReader to File",
        "GroundTruth": [
            "org.apache.pdfbox.pdmodel.PDDocument.load()"
        ],
        "APIClasses": [
            "org.apache.pdfbox.pdmodel.PDDocument"
        ],
        "Source": "Stack Overflow"
    },
    "848": {
        "Query": "Get specific ArrayList item",
        "GroundTruth": [
            "java.util.ArrayList.get()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Stack Overflow"
    },
    "849": {
        "Query": "Howto make image generation scalable on Java?",
        "GroundTruth": [
            "java.awt.image.VolatileImage()"
        ],
        "APIClasses": [
            "java.awt.image"
        ],
        "Source": "Stack Overflow"
    },
    "850": {
        "Query": "Freemarker - access value at a particular key in map",
        "GroundTruth": [
            "java.util.Map.get()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Stack Overflow"
    },
    "851": {
        "Query": "How do I check if a string contains a word without case sensitivity?",
        "GroundTruth": [
            "java.lang.String.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "852": {
        "Query": "Set KeyPressed event for a TextField in JavaFX",
        "GroundTruth": [
            "javafx.scene.Node.setOnKeyPressed()"
        ],
        "APIClasses": [
            "javafx.scene.Node"
        ],
        "Source": "Stack Overflow"
    },
    "853": {
        "Query": "How to prevent SimpleDateFormat to parse wrong formatted dates?",
        "GroundTruth": [
            "java.text.DateFormat.setLenient()"
        ],
        "APIClasses": [
            "java.text.DateFormat"
        ],
        "Source": "Stack Overflow"
    },
    "854": {
        "Query": "Replace all regex matches in String with substring of match",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "855": {
        "Query": "Printing an array with slf4j only prints the first element",
        "GroundTruth": [
            "org.slf4j.Logger.info()"
        ],
        "APIClasses": [
            "org.slf4j.Logger"
        ],
        "Source": "Stack Overflow"
    },
    "856": {
        "Query": "Access shell environment variables in Java",
        "GroundTruth": [
            "java.lang.System.getenv()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "857": {
        "Query": "Specifying file location for PrintWriter class (Java) and automatically appending .txt",
        "GroundTruth": [
            "java.lang.String.endsWith()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "858": {
        "Query": "Filter dynamically jTable by column value",
        "GroundTruth": [
            "javax.swing.RowFilter.regexFilter()"
        ],
        "APIClasses": [
            "javax.swing.RowFilter"
        ],
        "Source": "Stack Overflow"
    },
    "859": {
        "Query": "How to convert byte array into integer value",
        "GroundTruth": [
            "java.nio.ByteBuffer.getInt()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Stack Overflow"
    },
    "860": {
        "Query": "How to fill a progress bar via a variable?",
        "GroundTruth": [
            "android.widget.ProgressBar.setProgress()"
        ],
        "APIClasses": [
            "android.widget.ProgressBar"
        ],
        "Source": "Stack Overflow"
    },
    "861": {
        "Query": "How to call RESTFUL services from GWT?",
        "GroundTruth": [
            "com.google.gwt.http.client.RequestBuilder()"
        ],
        "APIClasses": [
            "com.google.gwt.http.client"
        ],
        "Source": "Stack Overflow"
    },
    "862": {
        "Query": "Remove minutes, seconds, and nanoseconds from OffsetDateTime",
        "GroundTruth": [
            "java.time.OffsetTime.truncatedTo()"
        ],
        "APIClasses": [
            "java.time.OffsetTime"
        ],
        "Source": "Stack Overflow"
    },
    "863": {
        "Query": "How can my Java program store files inside of its .jar file?",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "864": {
        "Query": "How to get absolute path from FileDialog?",
        "GroundTruth": [
            "java.io.File.getAbsolutePath()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "865": {
        "Query": "Creating Pagination in Spring Data JPA",
        "GroundTruth": [
            "org.springframework.data.domain.Pageable.Pageable()"
        ],
        "APIClasses": [
            "org.springframework.data.domain.Pageable"
        ],
        "Source": "Stack Overflow"
    },
    "866": {
        "Query": "In Java: Get array of values of a map sorted by the map's keys",
        "GroundTruth": [
            "java.util.SortedMap.values()"
        ],
        "APIClasses": [
            "java.util.SortedMap"
        ],
        "Source": "Stack Overflow"
    },
    "867": {
        "Query": "Is there any replacement for WindowsLookAndFeel.java in jdk9",
        "GroundTruth": [
            "javax.swing.UIManager.getSystemLookAndFeelClassName()"
        ],
        "APIClasses": [
            "javax.swing.UIManager"
        ],
        "Source": "Stack Overflow"
    },
    "868": {
        "Query": "How to append semi-colon on to each element in an ArrayList<String>",
        "GroundTruth": [
            "java.util.stream.Collectors.joining()"
        ],
        "APIClasses": [
            "java.util.stream.Collectors"
        ],
        "Source": "Stack Overflow"
    },
    "869": {
        "Query": "java, How to calculate degree from tan",
        "GroundTruth": [
            "java.lang.Math.atan()",
            "java.lang.Math.toDegrees()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "870": {
        "Query": "How to add button in JTabbedPane background?",
        "GroundTruth": [
            "javax.swing.JTabbedPane.setTabComponentAt()"
        ],
        "APIClasses": [
            "javax.swing.JTabbedPane"
        ],
        "Source": "Stack Overflow"
    },
    "871": {
        "Query": "How to find the rank of an element in a TreeSet",
        "GroundTruth": [
            "java.util.TreeSet.tailSet().size()"
        ],
        "APIClasses": [
            "java.util.TreeSet.tailSet()"
        ],
        "Source": "Stack Overflow"
    },
    "872": {
        "Query": "How to test if one rect is in another rect?",
        "GroundTruth": [
            "java.awt.geom.Rectangle2D.intersects()"
        ],
        "APIClasses": [
            "java.awt.geom.Rectangle2D"
        ],
        "Source": "Stack Overflow"
    },
    "873": {
        "Query": "How to kill a java thread?",
        "GroundTruth": [
            "java.lang.Thread.interrupt()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "874": {
        "Query": "Spring beans with scope prototype",
        "GroundTruth": [
            "org.springframework.context.ApplicationContext.getBean()"
        ],
        "APIClasses": [
            "org.springframework.context.ApplicationContext"
        ],
        "Source": "Stack Overflow"
    },
    "875": {
        "Query": "download file with multiple connections",
        "GroundTruth": [
            "java.io.RandomAccessFile()"
        ],
        "APIClasses": [
            "java.io"
        ],
        "Source": "Stack Overflow"
    },
    "876": {
        "Query": "When would the garbage collector erase an instance of an object that uses Singleton pattern?",
        "GroundTruth": [
            "java.lang.System.gc()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "877": {
        "Query": "Reading hexadecimal data into byte array in Java?",
        "GroundTruth": [
            "java.lang.Integer.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "878": {
        "Query": "Junit test of method with Scanner and System.in (Java)",
        "GroundTruth": [
            "java.util.Scanner.Scanner()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Stack Overflow"
    },
    "879": {
        "Query": "How do I get the response code on an HttpClient request",
        "GroundTruth": [
            "javax.xml.ws.http.HTTPException.getStatusCode()"
        ],
        "APIClasses": [
            "javax.xml.ws.http.HTTPException"
        ],
        "Source": "Stack Overflow"
    },
    "880": {
        "Query": "How to restart clip from the beginning after stopping it?",
        "GroundTruth": [
            "javax.sound.sampled.Clip.setMicrosecondPosition()"
        ],
        "APIClasses": [
            "javax.sound.sampled.Clip"
        ],
        "Source": "Stack Overflow"
    },
    "881": {
        "Query": "How can i get data from json to spinner?",
        "GroundTruth": [
            "android.widget.Spinner.setAdapter()"
        ],
        "APIClasses": [
            "android.widget.Spinner"
        ],
        "Source": "Stack Overflow"
    },
    "882": {
        "Query": "How to update a value, given a key in a hashmap?",
        "GroundTruth": [
            "java.util.Map.put()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Stack Overflow"
    },
    "883": {
        "Query": "IPv6 Multicast Check Java",
        "GroundTruth": [
            "java.net.Socket.setSoTimeout()"
        ],
        "APIClasses": [
            "java.net.Socket"
        ],
        "Source": "Stack Overflow"
    },
    "884": {
        "Query": "add button to contentPane which uses java graphics",
        "GroundTruth": [
            "javax.swing.JFrame.getContentPane()",
            "java.awt.Container.add()"
        ],
        "APIClasses": [
            "javax.swing.JFrame",
            "java.awt.Container"
        ],
        "Source": "Stack Overflow"
    },
    "885": {
        "Query": "Easy way to resolve available messages from a set of codes",
        "GroundTruth": [
            "org.springframework.context.MessageSource.getMessage()"
        ],
        "APIClasses": [
            "org.springframework.context.MessageSource"
        ],
        "Source": "Stack Overflow"
    },
    "886": {
        "Query": "Create windows 10 persistent notifications",
        "GroundTruth": [
            "javax.swing.JOptionPane.showMessageDialog()",
            "JCarrierPigeon",
            "JTelegraph",
            "JCommunique",
            "Twinkle"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane",
            ""
        ],
        "Source": "Stack Overflow"
    },
    "887": {
        "Query": "JavaFX LineChart - clean data from chart",
        "GroundTruth": [
            "javafx.scene.chart.LineChart.getData().clear()"
        ],
        "APIClasses": [
            "javafx.scene.chart.LineChart.getData()"
        ],
        "Source": "Stack Overflow"
    },
    "888": {
        "Query": "Replace new line with n in Java",
        "GroundTruth": [
            "EditText.getText().replaceAll()"
        ],
        "APIClasses": [
            "EditText.getText()"
        ],
        "Source": "Stack Overflow"
    },
    "889": {
        "Query": "Viewing styled text in a JTextPane as HTML",
        "GroundTruth": [
            "javax.swing.JTextPane.getText()"
        ],
        "APIClasses": [
            "javax.swing.JTextPane"
        ],
        "Source": "Stack Overflow"
    },
    "890": {
        "Query": "Sending message to serviceActivator in Spring Integration after sending response in TCP gateway",
        "GroundTruth": [
            "java.beans.beancontext.BeanContextSupport.serialize()"
        ],
        "APIClasses": [
            "java.beans.beancontext.BeanContextSupport"
        ],
        "Source": "Stack Overflow"
    },
    "891": {
        "Query": "JAVA - Checking for NULL value from a result set",
        "GroundTruth": [
            "java.sql.ResultSet.getObject()"
        ],
        "APIClasses": [
            "java.sql.ResultSet"
        ],
        "Source": "Stack Overflow"
    },
    "892": {
        "Query": "How I can use a Fragment without a id in android?",
        "GroundTruth": [
            "android.view.View.setId()"
        ],
        "APIClasses": [
            "android.view.View"
        ],
        "Source": "Stack Overflow"
    },
    "893": {
        "Query": "How do I create an empty Stream in Java?",
        "GroundTruth": [
            "java.util.stream.Stream.empty()"
        ],
        "APIClasses": [
            "java.util.stream.Stream"
        ],
        "Source": "Stack Overflow"
    },
    "894": {
        "Query": "Convert java.sql.date to java.time.LocalDateTime",
        "GroundTruth": [
            "java.sql.ResultSet.getTimestamp()",
            "java.sql.TimeStamp.toLocalDateTime()"
        ],
        "APIClasses": [
            "java.sql.ResultSet",
            "java.sql.TimeStamp"
        ],
        "Source": "Stack Overflow"
    },
    "895": {
        "Query": "creating a URL object with a relative path",
        "GroundTruth": [
            "java.io.File.toURI()",
            "java.io.File.toURL()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "896": {
        "Query": "How to compare the Firebase retrieved value with a string?",
        "GroundTruth": [
            "com.google.firebase.database.DataSnapshot.child().getValue()"
        ],
        "APIClasses": [
            "com.google.firebase.database.DataSnapshot.child()"
        ],
        "Source": "Stack Overflow"
    },
    "897": {
        "Query": "Executing an SQL command with EntityManager",
        "GroundTruth": [
            "java.sql.Statement.executeUpdate()",
            "javax.persistence.Query.getResultList()"
        ],
        "APIClasses": [
            "java.sql.Statement",
            "javax.persistence.Query"
        ],
        "Source": "Stack Overflow"
    },
    "898": {
        "Query": "How do I inject property from one bean into another in Spring 3.0?",
        "GroundTruth": [
            "org.springframework.context.support.GenericApplicationContext.refresh()"
        ],
        "APIClasses": [
            "org.springframework.context.support.GenericApplicationContext"
        ],
        "Source": "Stack Overflow"
    },
    "899": {
        "Query": "How to split String without leaving behind empty strings?",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "900": {
        "Query": "Fastest way to perform a lot of strings replace in Java",
        "GroundTruth": [
            "org.apache.commons.lang.StringUtils.replace()"
        ],
        "APIClasses": [
            "org.apache.commons.lang.StringUtils"
        ],
        "Source": "Stack Overflow"
    },
    "901": {
        "Query": "Java Reflection : invoking inherited methods from child class",
        "GroundTruth": [
            "java.lang.Class.getMethod()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "902": {
        "Query": "How to set proxy for each request in OkHttp?",
        "GroundTruth": [
            "newBuilder()",
            "com.squareup.okhttp3.newBuilder()"
        ],
        "APIClasses": [
            "",
            "com.squareup.okhttp3"
        ],
        "Source": "Stack Overflow"
    },
    "903": {
        "Query": "Checking if a Class<?> is instane of other by reflection",
        "GroundTruth": [
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "904": {
        "Query": "Download a zip from a servlet Java",
        "GroundTruth": [
            "getOutputStream()",
            "javax.servlet.http.HttpServletResponse.getOutputStream()"
        ],
        "APIClasses": [
            "",
            "javax.servlet.http.HttpServletResponse"
        ],
        "Source": "Stack Overflow"
    },
    "905": {
        "Query": "How to convert an int[] array to a List?",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "906": {
        "Query": "I need to use a Java 8 Optional method that either gets the wrapped value, or calls a void return Consumer lambda",
        "GroundTruth": [
            "java.util.Optional.isPresent()",
            "java.util.Optional.ifPresentOrElse()"
        ],
        "APIClasses": [
            "java.util.Optional"
        ],
        "Source": "Stack Overflow"
    },
    "907": {
        "Query": "How to check if an Android Thread is running",
        "GroundTruth": [
            "java.lang.Thread.isAlive()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "908": {
        "Query": "How to run a Mac application From Java?",
        "GroundTruth": [
            "java.awt.Desktop.open()"
        ],
        "APIClasses": [
            "java.awt.Desktop"
        ],
        "Source": "Stack Overflow"
    },
    "909": {
        "Query": "How to check if user input is a certain base?",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "910": {
        "Query": "How to set relative path with java?",
        "GroundTruth": [
            "java.lang.ClassLoader.getResource()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "911": {
        "Query": "Extract DLL from within JNA jar file to a custom path",
        "GroundTruth": [
            "java.lang.System.loadLibrary()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "912": {
        "Query": "Java: how to replace multiple carriage return by only one?",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "913": {
        "Query": "Get the screen device information of the display where the JFrame is currently located",
        "GroundTruth": [
            "javax.swing.JFrame.getLocation()"
        ],
        "APIClasses": [
            "javax.swing.JFrame"
        ],
        "Source": "Stack Overflow"
    },
    "914": {
        "Query": "How to determine whether a string contains an integer?",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "915": {
        "Query": "replace a particular word in string",
        "GroundTruth": [
            "java.lang.String.contains()",
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "916": {
        "Query": "Logging in Java",
        "GroundTruth": [
            "java.util.logging.Handler.setLevel()"
        ],
        "APIClasses": [
            "java.util.logging.Handler"
        ],
        "Source": "Stack Overflow"
    },
    "917": {
        "Query": "Multiple Threads executing same Method (Non Synchronized) behavior",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.synchronizedList()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "918": {
        "Query": "Filling empty cells of a matrix with random values in java",
        "GroundTruth": [
            "java.util.Random.nextInt()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Stack Overflow"
    },
    "919": {
        "Query": "Start GitLog with Java Process Builder",
        "GroundTruth": [
            "java.lang.ProcessBuilder.directory()"
        ],
        "APIClasses": [
            "java.lang.ProcessBuilder"
        ],
        "Source": "Stack Overflow"
    },
    "920": {
        "Query": "Lexicographically comparing two strings",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "921": {
        "Query": "How to get property names of a pojo class without public no-arg constructor?",
        "GroundTruth": [
            "java.beans.Introspector.getBeanInfo()"
        ],
        "APIClasses": [
            "java.beans.Introspector"
        ],
        "Source": "Stack Overflow"
    },
    "922": {
        "Query": "Kill a thread that is waiting for socket output",
        "GroundTruth": [
            "java.io.InputStream.close()"
        ],
        "APIClasses": [
            "java.io.InputStream"
        ],
        "Source": "Stack Overflow"
    },
    "923": {
        "Query": "when is a spring bean instantiated",
        "GroundTruth": [
            "getBean()",
            "org.springframework.context.ApplicationContext.getBean()"
        ],
        "APIClasses": [
            "org.springframework.context.ApplicationContext"
        ],
        "Source": "Stack Overflow"
    },
    "924": {
        "Query": "Finding EDT time in java",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.TimeZone.getTimeZone()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.TimeZone"
        ],
        "Source": "Stack Overflow"
    },
    "925": {
        "Query": "CompletableFuture get result of first future waiting for other futures depending of first one",
        "GroundTruth": [
            "java.util.concurrent.CompletableFuture.join()"
        ],
        "APIClasses": [
            "java.util.concurrent.CompletableFuture"
        ],
        "Source": "Stack Overflow"
    },
    "926": {
        "Query": "Get current time of day in seconds",
        "GroundTruth": [
            "LocalDateTime.now().toLocalTime()",
            "java.time.LocalTime.toSecondOfDay()"
        ],
        "APIClasses": [
            "LocalDateTime.now()",
            "java.time.LocalTime"
        ],
        "Source": "Stack Overflow"
    },
    "927": {
        "Query": "Replace hashtags in a single pass with regex",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "928": {
        "Query": "Execute process from java and keeping it alive for input",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "929": {
        "Query": "How to take a screenshot in Java?",
        "GroundTruth": [
            "java.awt.Robot.createScreenCapture()"
        ],
        "APIClasses": [
            "java.awt.Robot"
        ],
        "Source": "Stack Overflow"
    },
    "930": {
        "Query": "How to check if firebase task is complete in Java?",
        "GroundTruth": [
            "Tasks.await()"
        ],
        "APIClasses": [
            "Tasks"
        ],
        "Source": "Stack Overflow"
    },
    "931": {
        "Query": "Java: Flash a window to grab user's attention",
        "GroundTruth": [
            "java.awt.TrayIcon.displayMessage()"
        ],
        "APIClasses": [
            "java.awt.TrayIcon"
        ],
        "Source": "Stack Overflow"
    },
    "932": {
        "Query": "Count files in ZIP's directory - JAVA, Android",
        "GroundTruth": [
            "java.util.zip.ZipFile.size()"
        ],
        "APIClasses": [
            "java.util.zip.ZipFile"
        ],
        "Source": "Stack Overflow"
    },
    "933": {
        "Query": "How to update all the items in ArrayList due to shift in drag and drop of recyclerview",
        "GroundTruth": [
            "java.util.List.remove()",
            "java.util.List.insert()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "934": {
        "Query": "How to change a char in a String - replacing letters java",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "935": {
        "Query": "How to get the right week of year number through a Calendar?",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.TimeZone.getTimeZone()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.TimeZone"
        ],
        "Source": "Stack Overflow"
    },
    "936": {
        "Query": "load file within a jar",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "937": {
        "Query": "How to set a JComboBox's selected item from my JTable?",
        "GroundTruth": [
            "table.getValueAt()",
            "comboBox.setSelectedItem()"
        ],
        "APIClasses": [
            "table",
            "comboBox"
        ],
        "Source": "Stack Overflow"
    },
    "938": {
        "Query": "java write data to file without erasing the old content",
        "GroundTruth": [
            "java.io.FileOutputStream.FileOutputStream()"
        ],
        "APIClasses": [
            "java.io.FileOutputStream"
        ],
        "Source": "Stack Overflow"
    },
    "939": {
        "Query": "GUI: How can I find out if certain Unicode characters are supported?",
        "GroundTruth": [
            "java.awt.Font.canDisplay()"
        ],
        "APIClasses": [
            "java.awt.Font"
        ],
        "Source": "Stack Overflow"
    },
    "940": {
        "Query": "SonarQube: Create custom rules to get custom annotations in a class",
        "GroundTruth": [
            "org.sonar.java.checks.verifier.JavaCheckVerifier.verify()"
        ],
        "APIClasses": [
            "org.sonar.java.checks.verifier.JavaCheckVerifier"
        ],
        "Source": "Stack Overflow"
    },
    "941": {
        "Query": "How to initialize each element of an array with a specific value at declaration?",
        "GroundTruth": [
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "942": {
        "Query": "JPA, save relation without querying entities",
        "GroundTruth": [
            "getReference()",
            "javax.persistence.EntityManager.getReference()"
        ],
        "APIClasses": [
            "",
            "javax.persistence.EntityManager"
        ],
        "Source": "Stack Overflow"
    },
    "943": {
        "Query": "Creating an invisible button in Java Swing",
        "GroundTruth": [
            "javax.swing.AbstractButton.setBorderPainted()"
        ],
        "APIClasses": [
            "javax.swing.AbstractButton"
        ],
        "Source": "Stack Overflow"
    },
    "944": {
        "Query": "Stop JMeter test in Beanshell PreProcessor",
        "GroundTruth": [
            "org.apache.jmeter.threads.JMeterContext.getEngine().askThreadsToStop()"
        ],
        "APIClasses": [
            "org.apache.jmeter.threads.JMeterContext.getEngine()"
        ],
        "Source": "Stack Overflow"
    },
    "945": {
        "Query": "how to open a file with name in a string in java",
        "GroundTruth": [
            "java.io.FileInputStream"
        ],
        "APIClasses": [
            "java.io"
        ],
        "Source": "Stack Overflow"
    },
    "946": {
        "Query": "How can get boolean user Input",
        "GroundTruth": [
            "java.util.Scanner.nextBoolean()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Stack Overflow"
    },
    "947": {
        "Query": "How do I get localized date pattern string?",
        "GroundTruth": [
            "java.time.format.DateTimeFormatter.ofLocalizedDate()"
        ],
        "APIClasses": [
            "java.time.format.DateTimeFormatter"
        ],
        "Source": "Stack Overflow"
    },
    "948": {
        "Query": "Initializing an array of pairs in Java",
        "GroundTruth": [
            "java.util.List.get()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "949": {
        "Query": "How to parse Time PT15H30M received as json string int Time object?",
        "GroundTruth": [
            "ava.time.Duration.parse()"
        ],
        "APIClasses": [
            "ava.time.Duration"
        ],
        "Source": "Stack Overflow"
    },
    "950": {
        "Query": "writing byte array to a raw column in oracle",
        "GroundTruth": [
            "java.sql.PreparedStatement.setBytes()"
        ],
        "APIClasses": [
            "java.sql.PreparedStatement"
        ],
        "Source": "Stack Overflow"
    },
    "951": {
        "Query": "Java Swing: Centering components",
        "GroundTruth": [
            "java.awt.Window.setLocationRelativeTo()"
        ],
        "APIClasses": [
            "java.awt.Window"
        ],
        "Source": "Stack Overflow"
    },
    "952": {
        "Query": "Extract timezone from ISO8601 date time string",
        "GroundTruth": [
            "java.time.ZonedDateTime.parse().getZone()"
        ],
        "APIClasses": [
            "java.time.ZonedDateTime.parse()"
        ],
        "Source": "Stack Overflow"
    },
    "953": {
        "Query": "How to allow space in url with string variable in android?",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "954": {
        "Query": "How to kill a process in Java, given a specific PID",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "955": {
        "Query": "Setting the focus to a text field",
        "GroundTruth": [
            "java.awt.Component.requestFocusInWindow()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "956": {
        "Query": "How to determine if a DynamoDB item was indeed deleted?",
        "GroundTruth": [
            "com.amazonaws.services.dynamodbv2.model.DeleteItemResult.getAttributes()"
        ],
        "APIClasses": [
            "com.amazonaws.services.dynamodbv2.model.DeleteItemResult"
        ],
        "Source": "Stack Overflow"
    },
    "957": {
        "Query": "How to prevent GWT from generating inline styles?",
        "GroundTruth": [
            "com.google.gwt.user.client.ui.RootPanel.getElement().getStyle().setDisplay()"
        ],
        "APIClasses": [
            "com.google.gwt.user.client.ui.RootPanel.getElement().getStyle()"
        ],
        "Source": "Stack Overflow"
    },
    "958": {
        "Query": "Timezone format, how to know the timezone",
        "GroundTruth": [
            "java.time.ZonedDateTime.getZone()"
        ],
        "APIClasses": [
            "java.time.ZonedDateTime"
        ],
        "Source": "Stack Overflow"
    },
    "959": {
        "Query": "deepHashCode with byte array",
        "GroundTruth": [
            "java.util.Arrays.hashCode()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "960": {
        "Query": "Is there a way to apply the Knuth shuffle to a Stack data structure?",
        "GroundTruth": [
            "java.util.Collections.shuffle()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "961": {
        "Query": "String to Clob in Java?",
        "GroundTruth": [
            "java.sql.Clob.setString()"
        ],
        "APIClasses": [
            "java.sql.Clob"
        ],
        "Source": "Stack Overflow"
    },
    "962": {
        "Query": "How to get the name of a proxy class?",
        "GroundTruth": [
            "java.lang.reflect.Proxy.getInvocationHandler()"
        ],
        "APIClasses": [
            "java.lang.reflect.Proxy"
        ],
        "Source": "Stack Overflow"
    },
    "963": {
        "Query": "Find elements in a Node without the proper namespace, in Java",
        "GroundTruth": [
            "org.w3c.dom.Document.getDocumentElement().getElementsByTagNameNS"
        ],
        "APIClasses": [
            "org.w3c.dom.Document.getDocumentElement()"
        ],
        "Source": "Stack Overflow"
    },
    "964": {
        "Query": "How can I concatenate two float arrays in Java?",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "965": {
        "Query": "Java Socket Accept Connection from one IP",
        "GroundTruth": [
            "java.net.ServerSocket.ServerSocket()"
        ],
        "APIClasses": [
            "java.net.ServerSocket"
        ],
        "Source": "Stack Overflow"
    },
    "966": {
        "Query": "Is it possible to split a String around \".\" in java?",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "967": {
        "Query": "Detect null reference in an array",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.contains()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "968": {
        "Query": "Traversals for Java TreeMap",
        "GroundTruth": [
            "java.util.TreeMap.entrySet()"
        ],
        "APIClasses": [
            "java.util.TreeMap"
        ],
        "Source": "Stack Overflow"
    },
    "969": {
        "Query": "Split windows path",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.io.FIle.isDirectory()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.io.FIle"
        ],
        "Source": "Stack Overflow"
    },
    "970": {
        "Query": "Parsing apache tomcat accesslog with java",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "971": {
        "Query": "How can we get the objects in reverse order from list object?",
        "GroundTruth": [
            "java.util.Collections.reverse()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "972": {
        "Query": "how to sort vector of items in android while targeting api level 15?",
        "GroundTruth": [
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "973": {
        "Query": "Custom implementation of InputStream",
        "GroundTruth": [
            "com.google.common.io.FileBackedOutputStream()"
        ],
        "APIClasses": [
            "com.google.common.io"
        ],
        "Source": "Stack Overflow"
    },
    "974": {
        "Query": "Buffered Reader text file?",
        "GroundTruth": [
            "java.util.Scanner.nextLine()",
            "java.io.File.getAbsolutePath()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "975": {
        "Query": "How to declare a numerical variable in java that is to hold a digit value with a fixed length of 3 digits always.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "976": {
        "Query": "Java - get \"program files\" path",
        "GroundTruth": [
            "java.lang.System.getenv()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "977": {
        "Query": "Get HTML tags in Selenium",
        "GroundTruth": [
            "org.openqa.selenium.WebElement.getAttribute()"
        ],
        "APIClasses": [
            "org.openqa.selenium.WebElement"
        ],
        "Source": "Stack Overflow"
    },
    "978": {
        "Query": "How could I know the status of the socket connection inside a PrintWriter",
        "GroundTruth": [
            "java.io.PrintWriter.checkError()"
        ],
        "APIClasses": [
            "java.io.PrintWriter"
        ],
        "Source": "Stack Overflow"
    },
    "979": {
        "Query": "Accessing files packaged into a jar file",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "980": {
        "Query": "Remove all JMenuItem from JMenu",
        "GroundTruth": [
            "javax.swing.JMenu.removeAll()"
        ],
        "APIClasses": [
            "javax.swing.JMenu"
        ],
        "Source": "Stack Overflow"
    },
    "981": {
        "Query": "How do I find the URL of my web service?",
        "GroundTruth": [
            "javax.xml.ws.spi.http.HttpExchange.getRequestHeader()"
        ],
        "APIClasses": [
            "javax.xml.ws.spi.http.HttpExchange"
        ],
        "Source": "Stack Overflow"
    },
    "982": {
        "Query": "How to find a user's home directory on linux or unix?",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "983": {
        "Query": "constructor calling in array creation",
        "GroundTruth": [
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "984": {
        "Query": "How to convert 3 letter language code to corresponding text?",
        "GroundTruth": [
            "java.util.Locale.getDisplayLanguage()"
        ],
        "APIClasses": [
            "java.util.Locale"
        ],
        "Source": "Stack Overflow"
    },
    "985": {
        "Query": "SSL Session reuse in Apache FTPS client in JDK 8u161",
        "GroundTruth": [
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "986": {
        "Query": "Moving items around in an ArrayList",
        "GroundTruth": [
            "java.util.Collections.rotate()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "987": {
        "Query": "Detect which button was clicked in a 2D array Java",
        "GroundTruth": [
            "java.util.EventObject.getSource()"
        ],
        "APIClasses": [
            "java.util.EventObject"
        ],
        "Source": "Stack Overflow"
    },
    "988": {
        "Query": "Java LocalTime how to compare time?",
        "GroundTruth": [
            "java.time.LocalTime.equals()"
        ],
        "APIClasses": [
            "java.time.LocalTime"
        ],
        "Source": "Stack Overflow"
    },
    "989": {
        "Query": "How a static method get context from the calling activity?",
        "GroundTruth": [
            "android.view.View.getContext()"
        ],
        "APIClasses": [
            "android.view.View"
        ],
        "Source": "Stack Overflow"
    },
    "990": {
        "Query": "Are there any classes in Java suitable to be used as a 'simulation clock' in discrete-event simulation?",
        "GroundTruth": [
            "java.util.concurent.atomic.AtomicInteger.incrementAndGet()"
        ],
        "APIClasses": [
            "java.util.concurent.atomic.AtomicInteger"
        ],
        "Source": "Stack Overflow"
    },
    "991": {
        "Query": "Appending a StringBuilder to another StringBuilder",
        "GroundTruth": [
            "java.lang.StringBuilder.append()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder"
        ],
        "Source": "Stack Overflow"
    },
    "992": {
        "Query": "how to get string from string.xml in adapter class on click method",
        "GroundTruth": [
            "android.view.View.getContext().getResources().getString()"
        ],
        "APIClasses": [
            "android.view.View.getContext().getResources()"
        ],
        "Source": "Stack Overflow"
    },
    "993": {
        "Query": "iText creating readonly textfield on existing pdf",
        "GroundTruth": [
            "javax.swing.JOptionPane.setOptions()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Stack Overflow"
    },
    "994": {
        "Query": "How can I sort an ArrayList faster?",
        "GroundTruth": [
            "List.sort()"
        ],
        "APIClasses": [
            "List"
        ],
        "Source": "Stack Overflow"
    },
    "995": {
        "Query": "Java - directly reading a file without downloading and storing locally",
        "GroundTruth": [
            "java.io.InputStreamReader.InputStreamReader()",
            "com.google.common.io.CharStreams.toString()"
        ],
        "APIClasses": [
            "java.io.InputStreamReader",
            "com.google.common.io.CharStreams"
        ],
        "Source": "Stack Overflow"
    },
    "996": {
        "Query": "Can I create a DOM Document from an encoded UTF-8 byte array?",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilder.parse()",
            "java.xml.parsers.DocumentBuilder.parse()",
            "ByteArrayInputStream()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilder",
            "java.xml.parsers.DocumentBuilder",
            ""
        ],
        "Source": "Stack Overflow"
    },
    "997": {
        "Query": "How to get today's Date?",
        "GroundTruth": [
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Stack Overflow"
    },
    "998": {
        "Query": "Hex string to binary in Java",
        "GroundTruth": [
            "java.math.BigInteger.toString()"
        ],
        "APIClasses": [
            "java.math.BigInteger"
        ],
        "Source": "Stack Overflow"
    },
    "999": {
        "Query": "Storing Serializable Objects in the Database",
        "GroundTruth": [
            "java.io.ByteArrayOutputStream.toByteArray()"
        ],
        "APIClasses": [
            "java.io.ByteArrayOutputStream"
        ],
        "Source": "Stack Overflow"
    },
    "1000": {
        "Query": "Java DayOfWeek convert Day Name (String) to Day Number",
        "GroundTruth": [
            "java.time.DayOfWeek.valueOf().getValue()"
        ],
        "APIClasses": [
            "java.time.DayOfWeek.valueOf()"
        ],
        "Source": "Stack Overflow"
    },
    "1001": {
        "Query": "How to Load File Outside of, but Relative to, the JAR?",
        "GroundTruth": [
            "java.lang.ClassLoader.getResource()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "1002": {
        "Query": "Thread reacting to signal 3",
        "GroundTruth": [
            "android.os.SystemClock.sleep()"
        ],
        "APIClasses": [
            "android.os.SystemClock"
        ],
        "Source": "Stack Overflow"
    },
    "1003": {
        "Query": "Removing the first 3 characters from a string",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1004": {
        "Query": "How to get the Push id of current user in Firebase Android?",
        "GroundTruth": [
            "getInstance().getCurrentUser().getUid()",
            "com.google.firebase.auth.FirebaseAuth.getInstance().getCurrentUser().getUid()"
        ],
        "APIClasses": [
            "getInstance().getCurrentUser()",
            "com.google.firebase.auth.FirebaseAuth.getInstance().getCurrentUser()"
        ],
        "Source": "Stack Overflow"
    },
    "1005": {
        "Query": "Getting A File's Mime Type In Java",
        "GroundTruth": [
            "java.nio.file.Files.probeContentType()"
        ],
        "APIClasses": [
            "java.nio.file.Files"
        ],
        "Source": "Stack Overflow"
    },
    "1006": {
        "Query": "JDBC result set retrieve LocalDateTime",
        "GroundTruth": [
            "java.sql.Timestamp()",
            "java.sql.Timestamp().toLocalDateTime()"
        ],
        "APIClasses": [
            "java.sql",
            "java.sql.Timestamp()"
        ],
        "Source": "Stack Overflow"
    },
    "1007": {
        "Query": "search for string in array",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1008": {
        "Query": "How can I change the language of the months provided by LocalDate?",
        "GroundTruth": [
            "java.time.Month.getDisplayName()"
        ],
        "APIClasses": [
            "java.time.Month"
        ],
        "Source": "Stack Overflow"
    },
    "1009": {
        "Query": "How to convert standard input to a string?",
        "GroundTruth": [
            "java.util.Scanner.readline()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Stack Overflow"
    },
    "1010": {
        "Query": "How to update array elements in Firestore with Android?",
        "GroundTruth": [
            "firebase.firestore.DocumentReference.update()"
        ],
        "APIClasses": [
            "firebase.firestore.DocumentReference"
        ],
        "Source": "Stack Overflow"
    },
    "1011": {
        "Query": "Specifying JAAS config file in a local application",
        "GroundTruth": [
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "1012": {
        "Query": "Searching for a value in an ArrayList that is stored in a HashMap",
        "GroundTruth": [
            "java.util.Map.entrySet()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Stack Overflow"
    },
    "1013": {
        "Query": "How to disable Checkbox depending on another Checkbox?",
        "GroundTruth": [
            "setEnabled()",
            "javax.swing.JCheckBox.setEnabled()"
        ],
        "APIClasses": [
            "",
            "javax.swing.JCheckBox"
        ],
        "Source": "Stack Overflow"
    },
    "1014": {
        "Query": "Changing Standard output in Java",
        "GroundTruth": [
            "java.lang.System.setOut()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "1015": {
        "Query": "Can we call a Windows cmd command in Java?",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "1016": {
        "Query": "How to disable XInclude when parsing XML?",
        "GroundTruth": [
            "javax.xml.parsers.SAXParserFactory.setNamespaceAware()"
        ],
        "APIClasses": [
            "javax.xml.parsers.SAXParserFactory"
        ],
        "Source": "Stack Overflow"
    },
    "1017": {
        "Query": "Is there a way to compare 2 Strings without it being case-sensitive?",
        "GroundTruth": [
            "java.lang.String.compareToIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1018": {
        "Query": "Java Class to execute in JButton MouseClicked",
        "GroundTruth": [
            "java.awt.Desktop.open()"
        ],
        "APIClasses": [
            "java.awt.Desktop"
        ],
        "Source": "Stack Overflow"
    },
    "1019": {
        "Query": "Displaying Currency in Indian Numbering Format",
        "GroundTruth": [
            "com.ibm.icu.text.NumberFormat.getCurrencyInstance()"
        ],
        "APIClasses": [
            "com.ibm.icu.text.NumberFormat"
        ],
        "Source": "Stack Overflow"
    },
    "1020": {
        "Query": "List of File to array in Java",
        "GroundTruth": [
            "java.io.File.getName()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "1021": {
        "Query": "Java - How to do floor division?",
        "GroundTruth": [
            "java.lang.Math.floorDiv()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "1022": {
        "Query": "How to Identify threads in Eclipse Debug Perspective?",
        "GroundTruth": [
            "java.lang.Thread.setName()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "1023": {
        "Query": "Convert an array to list with specific range in Java 8",
        "GroundTruth": [
            "java.util.stream.Stream.skip()"
        ],
        "APIClasses": [
            "java.util.stream.Stream"
        ],
        "Source": "Stack Overflow"
    },
    "1024": {
        "Query": "Cancel an HttpClient request",
        "GroundTruth": [
            "org.apache.http.client.methods.HttpGet.abort()"
        ],
        "APIClasses": [
            "org.apache.http.client.methods.HttpGet"
        ],
        "Source": "Stack Overflow"
    },
    "1025": {
        "Query": "toString java of arrays",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "1026": {
        "Query": "Convert the hexadecimal string representation of some bytes into a byte array in Java",
        "GroundTruth": [
            "org.apache.commons.codec.binary.Hex.decodeHex()"
        ],
        "APIClasses": [
            "org.apache.commons.codec.binary.Hex"
        ],
        "Source": "Stack Overflow"
    },
    "1027": {
        "Query": "How to represent an empty / invalid java.nio.Path",
        "GroundTruth": [
            "java.util.Optional.empty()"
        ],
        "APIClasses": [
            "java.util.Optional"
        ],
        "Source": "Stack Overflow"
    },
    "1028": {
        "Query": "Java - search collection of strings providing the first few characters",
        "GroundTruth": [
            "java.util.TreeSet.tailSet()"
        ],
        "APIClasses": [
            "java.util.TreeSet"
        ],
        "Source": "Stack Overflow"
    },
    "1029": {
        "Query": "Run Java Threads sequentially",
        "GroundTruth": [
            "java.util.concurrent.Executors.newSingleThreadExecutor()"
        ],
        "APIClasses": [
            "java.util.concurrent.Executors"
        ],
        "Source": "Stack Overflow"
    },
    "1030": {
        "Query": "how to add and read resource file from jar",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "1031": {
        "Query": "RemoveIf with lambda expression to remove only one occurence of integer",
        "GroundTruth": [
            "java.util.List.remove()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "1032": {
        "Query": "Add images to jar",
        "GroundTruth": [
            "java.lang.Class.getResource()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "1033": {
        "Query": "Sort JTable column of longs",
        "GroundTruth": [
            "javax.swing.JTable.getColumnClass()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Stack Overflow"
    },
    "1034": {
        "Query": "number of ways to decode a string?",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1035": {
        "Query": "Converting char[] to byte[]",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1036": {
        "Query": "How can I make reading from a DatagramSocket only block for a limited time (time out)?",
        "GroundTruth": [
            "java.net.DatagramSocket.setSoTimeout()"
        ],
        "APIClasses": [
            "java.net.DatagramSocket"
        ],
        "Source": "Stack Overflow"
    },
    "1037": {
        "Query": "String to binary and vice versa: extended ASCII",
        "GroundTruth": [
            "java.lang.Integer.toBinaryString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "1038": {
        "Query": "How to remove from a HashMap if value is present in Java 8 style",
        "GroundTruth": [
            "java.util.HashMap.computeIfPresent()"
        ],
        "APIClasses": [
            "java.util.HashMap"
        ],
        "Source": "Stack Overflow"
    },
    "1039": {
        "Query": "Alphabetically Sort a Java Collection based upon the 'toString' value of its member items",
        "GroundTruth": [
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "1040": {
        "Query": "Displaying doubles to a certain precision in java",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1041": {
        "Query": "Java: Convert a String (representing an IP) to InetAddress",
        "GroundTruth": [
            "java.net.InetAddress.getByName()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Stack Overflow"
    },
    "1042": {
        "Query": "Library to clean up and simplify filenames?",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1043": {
        "Query": "Java security policy: granting access depending on classloader",
        "GroundTruth": [
            "java.net.URLClassLoader.getPermissions()"
        ],
        "APIClasses": [
            "java.net.URLClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "1044": {
        "Query": "String replace a Backslash",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1045": {
        "Query": "Java Detect Closed Stream",
        "GroundTruth": [
            "java.io.InputStream.read()"
        ],
        "APIClasses": [
            "java.io.InputStream"
        ],
        "Source": "Stack Overflow"
    },
    "1046": {
        "Query": "Convert Enumeration to a Set/List",
        "GroundTruth": [
            "java.util.Collections.list()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "1047": {
        "Query": "How do I Click a JButton without the user Clicking it?",
        "GroundTruth": [
            "javax.swing.AbstractButton.doClick()"
        ],
        "APIClasses": [
            "javax.swing.AbstractButton"
        ],
        "Source": "Stack Overflow"
    },
    "1048": {
        "Query": "Capture byte number/offset for SAXParser",
        "GroundTruth": [
            "javax.xml.stream.XMLStreamReader.getLocation()"
        ],
        "APIClasses": [
            "javax.xml.stream.XMLStreamReader"
        ],
        "Source": "Stack Overflow"
    },
    "1049": {
        "Query": "How to convert a Java String to an ASCII byte array?",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1050": {
        "Query": "Cleanup before exiting Java application",
        "GroundTruth": [
            "java.awt.event.WindowAdapter.windowClosing()"
        ],
        "APIClasses": [
            "java.awt.event.WindowAdapter"
        ],
        "Source": "Stack Overflow"
    },
    "1051": {
        "Query": "How to use a void method in a Java Reactor chain?",
        "GroundTruth": [
            "reactor.core.publisher.Mono.doOnNext()"
        ],
        "APIClasses": [
            "reactor.core.publisher.Mono"
        ],
        "Source": "Stack Overflow"
    },
    "1052": {
        "Query": "how to convert Vector<Integer> to an int[]?",
        "GroundTruth": [
            "java.util.Vector.toArray()"
        ],
        "APIClasses": [
            "java.util.Vector"
        ],
        "Source": "Stack Overflow"
    },
    "1053": {
        "Query": "How to view everything running on the event thread",
        "GroundTruth": [
            "java.awt.EventQueue.push()"
        ],
        "APIClasses": [
            "java.awt.EventQueue"
        ],
        "Source": "Stack Overflow"
    },
    "1054": {
        "Query": "How to tell if JDK is available from within running JVM?",
        "GroundTruth": [
            "javax.tools.ToolProvider.getSystemJavaCompiler()"
        ],
        "APIClasses": [
            "javax.tools.ToolProvider"
        ],
        "Source": "Stack Overflow"
    },
    "1055": {
        "Query": "how to generate sequence of unique id in jsp starting from 1000",
        "GroundTruth": [
            "java.util.Random.nextInt()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Stack Overflow"
    },
    "1056": {
        "Query": "How get accurate UTC timestamp in android",
        "GroundTruth": [
            "java.lang.System.currentTimeMillis()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "1057": {
        "Query": "How to read/get unicode value for an emoji in Java",
        "GroundTruth": [
            "java.lang.CharSequence.codePoints()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1058": {
        "Query": "Java: How to get nth letter of words in a String array",
        "GroundTruth": [
            "java.lang.StringBuilder()"
        ],
        "APIClasses": [
            "java.lang"
        ],
        "Source": "Stack Overflow"
    },
    "1059": {
        "Query": "Running code on program exit in Java",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "getRunTime()",
            "addShutdownHook()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            ""
        ],
        "Source": "Stack Overflow"
    },
    "1060": {
        "Query": "How to convert a negative integer into two's complement binary form? (Java)",
        "GroundTruth": [
            "java.lang.Integer.toBinaryString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "1061": {
        "Query": "Convert from Radians to Degrees in Java",
        "GroundTruth": [
            "java.lang.Math.toDegrees()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "1062": {
        "Query": "How can I cast a Long to an int in Java?",
        "GroundTruth": [
            "java.lang.Long.intValue()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Stack Overflow"
    },
    "1063": {
        "Query": "How can I convert a String to a char array?",
        "GroundTruth": [
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1064": {
        "Query": "How to round average in Java stream?",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "1065": {
        "Query": "How to get browsed filepath in jsp..............?",
        "GroundTruth": [
            "java.io.File.getAbsolutePath()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "1066": {
        "Query": "How to calculate the size of a file in Android",
        "GroundTruth": [
            "java.io.File.length()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "1067": {
        "Query": "Float to Double conversion for android",
        "GroundTruth": [
            "java.lang.Double.parseDouble()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Stack Overflow"
    },
    "1068": {
        "Query": "spring data jpa - Custom type conversion in interface-based projection",
        "GroundTruth": [
            "getSharedInstance()",
            "org.springframework.core.convert.support.DefaultConversionService.getSharedInstance()"
        ],
        "APIClasses": [
            "",
            "org.springframework.core.convert.support.DefaultConversionService"
        ],
        "Source": "Stack Overflow"
    },
    "1069": {
        "Query": "setting horizontal and vertical margins",
        "GroundTruth": [
            "javax.swing.JLayer.setBorder()"
        ],
        "APIClasses": [
            "javax.swing.JLayer"
        ],
        "Source": "Stack Overflow"
    },
    "1070": {
        "Query": "length of Array of Objects in Java",
        "GroundTruth": [
            "Array.length"
        ],
        "APIClasses": [
            "Array"
        ],
        "Source": "Stack Overflow"
    },
    "1071": {
        "Query": "Better way to check if a joda.time.Interval spans exactly 1 calendar week (accounting for daylight savings etc)",
        "GroundTruth": [
            "joda.time.Interval.toPeriod().equals()"
        ],
        "APIClasses": [
            "joda.time.Interval.toPeriod()"
        ],
        "Source": "Stack Overflow"
    },
    "1072": {
        "Query": "Getting Integer object from ResultSet",
        "GroundTruth": [
            "java.sql.ResultSet.getObject()"
        ],
        "APIClasses": [
            "java.sql.ResultSet"
        ],
        "Source": "Stack Overflow"
    },
    "1073": {
        "Query": "Counting keys in LinkedHashMap<String, ArrayList<String>>",
        "GroundTruth": [
            "java.util.HashMap.get()",
            "java.uutil.HashMap.get().size()"
        ],
        "APIClasses": [
            "java.util.HashMap",
            "java.uutil.HashMap.get()"
        ],
        "Source": "Stack Overflow"
    },
    "1074": {
        "Query": "How to sort ArrayList<Long> in decreasing order?",
        "GroundTruth": [
            "java.util.Collections.reverseOrder()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "1075": {
        "Query": "JTextField time in HH:mm:ss",
        "GroundTruth": [
            "java.text.DateFormat.getTimeInstance()",
            "java.text.SimpleDateFormat"
        ],
        "APIClasses": [
            "java.text.DateFormat",
            "java.text"
        ],
        "Source": "Stack Overflow"
    },
    "1076": {
        "Query": "How do I load a properties file with JUnit / Ant?",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()",
            "java.lang.ClassLoader.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.ClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "1077": {
        "Query": "Change Font color of textfield input via JCheckBox",
        "GroundTruth": [
            "java.awt.Component.setForeground()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "1078": {
        "Query": "Removing Column from TableModel in Java",
        "GroundTruth": [
            "javax.swing.JTable.setAutoCreateColumnsFromModel()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Stack Overflow"
    },
    "1079": {
        "Query": "How to instantiate an empty element with JAXB",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newTransformer()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory"
        ],
        "Source": "Stack Overflow"
    },
    "1080": {
        "Query": "Java find nearest (or equal) value in collection",
        "GroundTruth": [
            "java.util.TreeSet.floor()"
        ],
        "APIClasses": [
            "java.util.TreeSet"
        ],
        "Source": "Stack Overflow"
    },
    "1081": {
        "Query": "How to integrate a JMenuBar in an MVC architecture in Java?",
        "GroundTruth": [
            "javax.swing.Action.Action()"
        ],
        "APIClasses": [
            "javax.swing.Action"
        ],
        "Source": "Stack Overflow"
    },
    "1082": {
        "Query": "Maven exec:java : how to open and read a file in the resources directory?",
        "GroundTruth": [
            "java.lang.ClassLoader.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "1083": {
        "Query": "How to sort a Vector of Vectors?",
        "GroundTruth": [
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "1084": {
        "Query": "Make the console wait for a user input to close",
        "GroundTruth": [
            "java.lang.System.in.read()"
        ],
        "APIClasses": [
            "java.lang.System.in"
        ],
        "Source": "Stack Overflow"
    },
    "1085": {
        "Query": "how to convert object to string in java",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1086": {
        "Query": "memcpy function in C++ to Java equivalent",
        "GroundTruth": [
            "java.lang.Object.clone()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Stack Overflow"
    },
    "1087": {
        "Query": "How to access application scope in http session listeners?",
        "GroundTruth": [
            "getServletContext()",
            "javax.servlet.http.HttpSession.getServletContext();javax.servlet.ServletContext.removeAttribute()"
        ],
        "APIClasses": [
            "",
            "javax.servlet.http.HttpSession.getServletContext();javax.servlet.ServletContext"
        ],
        "Source": "Stack Overflow"
    },
    "1088": {
        "Query": "alternative to CopyOnWriteArrayList for frequent writes, occasional iterating",
        "GroundTruth": [
            "java.util.Collections.newSetFromMap()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "1089": {
        "Query": "Spring: search resources in inner jar",
        "GroundTruth": [
            "java.lang.ClassLoader.getResources()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "1090": {
        "Query": "Save Properties to XML without header",
        "GroundTruth": [
            "java.util.Properties.loadFromXML()"
        ],
        "APIClasses": [
            "java.util.Properties"
        ],
        "Source": "Stack Overflow"
    },
    "1091": {
        "Query": "Generate Random X.XXX numbers between [-2, 2]",
        "GroundTruth": [
            "java.util.Random.nextDouble()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Stack Overflow"
    },
    "1092": {
        "Query": "Get MAC address on local machine with Java",
        "GroundTruth": [
            "java.net.NetworkInterface.getNetworkInterfaces()"
        ],
        "APIClasses": [
            "java.net.NetworkInterface"
        ],
        "Source": "Stack Overflow"
    },
    "1093": {
        "Query": "Getting the size of a big file",
        "GroundTruth": [
            "java.nio.file.files.length()"
        ],
        "APIClasses": [
            "java.nio.file.files"
        ],
        "Source": "Stack Overflow"
    },
    "1094": {
        "Query": "how to split the string in java",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1095": {
        "Query": "Download URL content with timeout",
        "GroundTruth": [
            "java.net.URLConnection.setReadTimeout()"
        ],
        "APIClasses": [
            "java.net.URLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "1096": {
        "Query": "how to generate the instance for logger?",
        "GroundTruth": [
            "org.apache.log4j.spi.LoggerFactory.getLogger()"
        ],
        "APIClasses": [
            "org.apache.log4j.spi.LoggerFactory"
        ],
        "Source": "Stack Overflow"
    },
    "1097": {
        "Query": "Un-rarring with java?",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "1098": {
        "Query": "(Java) Specify number of bits (length) when converting binary number to string?",
        "GroundTruth": [
            "java.lang.Integer.toBinaryString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "1099": {
        "Query": "How do I get a JLabel to accurately predict how wide it should be?",
        "GroundTruth": [
            "javax.swing.JLabel.getPreferredSize()",
            "getWidth()"
        ],
        "APIClasses": [
            "javax.swing.JLabel",
            ""
        ],
        "Source": "Stack Overflow"
    },
    "1100": {
        "Query": "Most elegant way to clip a line?",
        "GroundTruth": [
            "java.awt.geom.Rectangle2D.intersect()"
        ],
        "APIClasses": [
            "java.awt.geom.Rectangle2D"
        ],
        "Source": "Stack Overflow"
    },
    "1101": {
        "Query": "Converting a String to Date, almost done!",
        "GroundTruth": [
            "java.text.SimpleDateFormat()"
        ],
        "APIClasses": [
            "java.text"
        ],
        "Source": "Stack Overflow"
    },
    "1102": {
        "Query": "Java - creating new file, how do I specify the directory with a method?",
        "GroundTruth": [
            "getCacheDirectory()"
        ],
        "APIClasses": [
            ""
        ],
        "Source": "Stack Overflow"
    },
    "1103": {
        "Query": "How to parse a url from a String in android?",
        "GroundTruth": [
            "java.util.regex.Matcher.find()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher"
        ],
        "Source": "Stack Overflow"
    },
    "1104": {
        "Query": "How to show progressbar for FFMPEG process in java",
        "GroundTruth": [
            "java.lang.Process.getErrorStream()"
        ],
        "APIClasses": [
            "java.lang.Process"
        ],
        "Source": "Stack Overflow"
    },
    "1105": {
        "Query": "Clearing Activity Stack",
        "GroundTruth": [
            "android.app.Activity.finish()"
        ],
        "APIClasses": [
            "android.app.Activity"
        ],
        "Source": "Stack Overflow"
    },
    "1106": {
        "Query": "Collect Linux command output",
        "GroundTruth": [
            "java.lang.Process.getInputStream()"
        ],
        "APIClasses": [
            "java.lang.Process"
        ],
        "Source": "Stack Overflow"
    },
    "1107": {
        "Query": "How do you get both date and time from a PreparedStatement in Java?",
        "GroundTruth": [
            "getTimestamp()",
            "java.sql.PreparedStatement.getTimestamp()"
        ],
        "APIClasses": [
            "",
            "java.sql.PreparedStatement"
        ],
        "Source": "Stack Overflow"
    },
    "1108": {
        "Query": "how to force cell editor in jtable to accept edits",
        "GroundTruth": [
            "javax.swing.JTable.getCellEditor().stopCellEditing()"
        ],
        "APIClasses": [
            "javax.swing.JTable.getCellEditor()"
        ],
        "Source": "Stack Overflow"
    },
    "1109": {
        "Query": "A reflection based Object binder for java.util.Properties?",
        "GroundTruth": [
            "org.apache.commons.beanutils.BeanUtils.populate()"
        ],
        "APIClasses": [
            "org.apache.commons.beanutils.BeanUtils"
        ],
        "Source": "Stack Overflow"
    },
    "1110": {
        "Query": "How do you crash a JVM?",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "1111": {
        "Query": "Convert a generic list to an array",
        "GroundTruth": [
            "java.util.List.toArray()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "1112": {
        "Query": "Unsetting a variable in Velocity",
        "GroundTruth": [
            "setProperty()",
            "org.apache.velocity.app.Velocity.setProperty()"
        ],
        "APIClasses": [
            "",
            "org.apache.velocity.app.Velocity"
        ],
        "Source": "Stack Overflow"
    },
    "1113": {
        "Query": "How to return a list of keys from a Hash Map?",
        "GroundTruth": [
            "java.util.Map.keySet()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Stack Overflow"
    },
    "1114": {
        "Query": "Ensuring that a JButton can fit a String of a given length",
        "GroundTruth": [
            "javax.swing.JComponent.getInsets()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "1115": {
        "Query": "Encrypt and decrypt a password in Java",
        "GroundTruth": [
            "java.security.MessageDigest.getInstance()"
        ],
        "APIClasses": [
            "java.security.MessageDigest"
        ],
        "Source": "Stack Overflow"
    },
    "1116": {
        "Query": "Convert int to unsigned short java",
        "GroundTruth": [
            "java.nio.ByteBuffer.putChar()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Stack Overflow"
    },
    "1117": {
        "Query": "Construct a URL with Request Parameters in Java",
        "GroundTruth": [
            "java.lang.StringBuilder.append()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder"
        ],
        "Source": "Stack Overflow"
    },
    "1118": {
        "Query": "Increment Date String by 1 Day",
        "GroundTruth": [
            "java.text.SimpleDateFormat.SimpleDateFormat()"
        ],
        "APIClasses": [
            "java.text.SimpleDateFormat"
        ],
        "Source": "Stack Overflow"
    },
    "1119": {
        "Query": "Forcing a spurious-wake up in Java",
        "GroundTruth": [
            "java.lang.Object.notify()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Stack Overflow"
    },
    "1120": {
        "Query": "Obfuscating the SSL client Hello v2 message in Java",
        "GroundTruth": [
            "javax.net.SocketFactory.createSocket()"
        ],
        "APIClasses": [
            "javax.net.SocketFactory"
        ],
        "Source": "Stack Overflow"
    },
    "1121": {
        "Query": "getting only name of the class Class.getName()",
        "GroundTruth": [
            "java.lang.Class.getSimpleName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "1122": {
        "Query": "How to identify the monitor from Java Swing application?",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getScreenDevices()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Stack Overflow"
    },
    "1123": {
        "Query": "Java Reflection - listing properties (getters & setters) of a class",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "1124": {
        "Query": "Any library for authentication in a java web-app?",
        "GroundTruth": [
            "javax.servlet.http.HttpServletRequest.login()"
        ],
        "APIClasses": [
            "javax.servlet.http.HttpServletRequest"
        ],
        "Source": "Stack Overflow"
    },
    "1125": {
        "Query": "Windows taskbar height/width",
        "GroundTruth": [
            "java.awt.Frame.setExtendedState()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Stack Overflow"
    },
    "1126": {
        "Query": "Dynamically change the width of JDialog",
        "GroundTruth": [
            "java.swing.SwingUtilities.computeStringWidth()"
        ],
        "APIClasses": [
            "java.swing.SwingUtilities"
        ],
        "Source": "Stack Overflow"
    },
    "1127": {
        "Query": "Quickly read the last line of a text file?",
        "GroundTruth": [
            "java.io.BufferedReader.readLine()"
        ],
        "APIClasses": [
            "java.io.BufferedReader"
        ],
        "Source": "Stack Overflow"
    },
    "1128": {
        "Query": "Spring Dependency Injection beyond the basic tutorials",
        "GroundTruth": [
            "AspectJ@Configurableannotation"
        ],
        "APIClasses": [
            ""
        ],
        "Source": "Stack Overflow"
    },
    "1129": {
        "Query": "Insert node as first child always",
        "GroundTruth": [
            "org.w3c.dom.Node.insertBefore()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Stack Overflow"
    },
    "1130": {
        "Query": "InputStream from a URL",
        "GroundTruth": [
            "java.net.URL.openStream()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Stack Overflow"
    },
    "1131": {
        "Query": "Java URL / HttpURLConnection how to avoid InputStream while posting?",
        "GroundTruth": [
            "java.net.HttpURLConnection.getResponseCode()"
        ],
        "APIClasses": [
            "java.net.HttpURLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "1132": {
        "Query": "Java long to binary",
        "GroundTruth": [
            "java.lang.Integer.toBinaryString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "1133": {
        "Query": "Update JProgressBar Without Knowing Progress",
        "GroundTruth": [
            "javax.swing.JProgressBar.setIndeterminate()"
        ],
        "APIClasses": [
            "javax.swing.JProgressBar"
        ],
        "Source": "Stack Overflow"
    },
    "1134": {
        "Query": "Bring a component on a JPanel to front (Java)",
        "GroundTruth": [
            "javax.swing.JComponent.isOptimizedDrawingEnabled()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "1135": {
        "Query": "In Java, when writing to a file with DataOutputStream, how do I define the Endian of the data being written?",
        "GroundTruth": [
            "java.nio.ByteBuffer.order()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Stack Overflow"
    },
    "1136": {
        "Query": "Passing data to envers revision listener",
        "GroundTruth": [
            "play.mvc.Http.Request.current().args"
        ],
        "APIClasses": [
            "play.mvc.Http.Request.current()"
        ],
        "Source": "Stack Overflow"
    },
    "1137": {
        "Query": "Java Swing L&F native keyboard shortcuts",
        "GroundTruth": [
            "java.awt.Toolkit.getMenuShortcutKeyMask()"
        ],
        "APIClasses": [
            "java.awt.Toolkit"
        ],
        "Source": "Stack Overflow"
    },
    "1138": {
        "Query": "How to make repaint for JDialog in Swing?",
        "GroundTruth": [
            "javax.swing.SwingUtilities.getWindowAncestor().repaint()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities.getWindowAncestor()"
        ],
        "Source": "Stack Overflow"
    },
    "1139": {
        "Query": "java string to utc date",
        "GroundTruth": [
            "java.text.SimpleDateFormat()"
        ],
        "APIClasses": [
            "java.text"
        ],
        "Source": "Stack Overflow"
    },
    "1140": {
        "Query": "How to implement a universal file loader in Java?",
        "GroundTruth": [
            "java.net.URL.openStream()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Stack Overflow"
    },
    "1141": {
        "Query": "Display application name in Session Information when connecting via JDBC",
        "GroundTruth": [
            "java.sql.Connection.setClientInfo()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Stack Overflow"
    },
    "1142": {
        "Query": "JFrame : Getting actual content size",
        "GroundTruth": [
            "javax.swing.JComponent.getInsets()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "1143": {
        "Query": "How to handle ~ in file paths",
        "GroundTruth": [
            "java.lang.String.replaceFirst()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1144": {
        "Query": "How to use Java Arrays.sort",
        "GroundTruth": [
            "java.lang.System.arrayCopy()",
            "java.util.Arrays.copyOf()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "1145": {
        "Query": "Is there a JFrame.getBounds equivalent that gets only the actual client area?",
        "GroundTruth": [
            "java.awt.Component.getBounds()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "1146": {
        "Query": "How to set UI for all Components of a type in java swing?",
        "GroundTruth": [
            "UIManager.put()"
        ],
        "APIClasses": [
            "UIManager"
        ],
        "Source": "Stack Overflow"
    },
    "1147": {
        "Query": "Reading a binary input stream into a single byte array in Java",
        "GroundTruth": [
            "com.google.common.io.ByteStreams.toByteArray()"
        ],
        "APIClasses": [
            "com.google.common.io.ByteStreams"
        ],
        "Source": "Stack Overflow"
    },
    "1148": {
        "Query": "How would I go about including Ctrl+Click as a right-click? (Java)",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isRightMouseButton()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Stack Overflow"
    },
    "1149": {
        "Query": "Reset/remove a border in Swing",
        "GroundTruth": [
            "javax.swing.JComponent.getBorder()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "1150": {
        "Query": "How to check if an IFile in Java Eclipse Plugin Development really exists?",
        "GroundTruth": [
            "org.eclipse.core.resources.IResource.exists()"
        ],
        "APIClasses": [
            "org.eclipse.core.resources.IResource"
        ],
        "Source": "Stack Overflow"
    },
    "1151": {
        "Query": "Detect mouse click anywhere on window",
        "GroundTruth": [
            "java.awt.Toolkit.addAWTEventListener()"
        ],
        "APIClasses": [
            "java.awt.Toolkit"
        ],
        "Source": "Stack Overflow"
    },
    "1152": {
        "Query": "Get running time of a thread java",
        "GroundTruth": [
            "java.lang.System.nanoTime()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "1153": {
        "Query": "Syntax for \"addAll()\" to list in grails?",
        "GroundTruth": [
            "java.util.Set.addAll()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Stack Overflow"
    },
    "1154": {
        "Query": "Java - Converting a continuing InputStream into a String without waiting for close",
        "GroundTruth": [
            "java.io.BufferedReader.readLine()"
        ],
        "APIClasses": [
            "java.io.BufferedReader"
        ],
        "Source": "Stack Overflow"
    },
    "1155": {
        "Query": "How can we prepend strings with StringBuilder?",
        "GroundTruth": [
            "java.lang.StringBuilder.insert()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder"
        ],
        "Source": "Stack Overflow"
    },
    "1156": {
        "Query": "How to convert from ByteBuffer to Integer and String?",
        "GroundTruth": [
            "java.nio.ByteBuffer.getInt()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Stack Overflow"
    },
    "1157": {
        "Query": "Obtain byte array of a JPEG image without compressing",
        "GroundTruth": [
            "com.google.common.io.Files.toByteArray()"
        ],
        "APIClasses": [
            "com.google.common.io.Files"
        ],
        "Source": "Stack Overflow"
    },
    "1158": {
        "Query": "DexClassLoader - invoke method with parameter",
        "GroundTruth": [
            "java.lang.Class.getMethod()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "1159": {
        "Query": "How do I find the GraphicsDevice where an external process' window is opened",
        "GroundTruth": [
            "java.awt.Desktop.browse()"
        ],
        "APIClasses": [
            "java.awt.Desktop"
        ],
        "Source": "Stack Overflow"
    },
    "1160": {
        "Query": "How to remove newlines from beginning and end of a string?",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1161": {
        "Query": "Custom node icon for JTree when disabled",
        "GroundTruth": [
            "javax.swing.JLabel.setDisabledIcon()"
        ],
        "APIClasses": [
            "javax.swing.JLabel"
        ],
        "Source": "Stack Overflow"
    },
    "1162": {
        "Query": "Java Calendar: getting time for the timezone",
        "GroundTruth": [
            "java.text.DateFormat()"
        ],
        "APIClasses": [
            "java.text"
        ],
        "Source": "Stack Overflow"
    },
    "1163": {
        "Query": "Read JFrame size from JPanel",
        "GroundTruth": [
            "java.awt.Component.getParent()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "1164": {
        "Query": "How to convert comma-separated String to List?",
        "GroundTruth": [
            "split(),asList()",
            "java.lang.String.solit()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "",
            "java.lang.String",
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "1165": {
        "Query": "How to convert Vector to String array in java",
        "GroundTruth": [
            "java.util.Vector.toArray()"
        ],
        "APIClasses": [
            "java.util.Vector"
        ],
        "Source": "Stack Overflow"
    },
    "1166": {
        "Query": "Java detect if class is a proxy",
        "GroundTruth": [
            "java.lang.reflect.Proxy.isProxyClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.Proxy"
        ],
        "Source": "Stack Overflow"
    },
    "1167": {
        "Query": "Remove the extension of a file",
        "GroundTruth": [
            "java.lang.String.lastIndexOf()",
            "java.lang.String.LastIndexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1168": {
        "Query": "Java AWT: Remove frame title bar and add customised title Bar",
        "GroundTruth": [
            "java.awt.Frame.setUndecorated()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Stack Overflow"
    },
    "1169": {
        "Query": "Any neat way to limit significant figures with BigDecimal",
        "GroundTruth": [
            "java.math.BigDecimal.toPlainString()",
            "java.math.BigDecimal.precision()",
            "java.math.BigDecimal.scale()",
            "java.math.BigDecimal.setScale()"
        ],
        "APIClasses": [
            "java.math.BigDecimal"
        ],
        "Source": "Stack Overflow"
    },
    "1170": {
        "Query": "How can I resize and paintComponent inside a frame",
        "GroundTruth": [
            "java.awt.geom.Ellipse2D.Double.getHeight()"
        ],
        "APIClasses": [
            "java.awt.geom.Ellipse2D.Double"
        ],
        "Source": "Stack Overflow"
    },
    "1171": {
        "Query": "HttpSession - how to get the session.setAttribute?",
        "GroundTruth": [
            "getAttribute()",
            "javax.servlet.http.HttpSession.getAttribute()"
        ],
        "APIClasses": [
            "",
            "javax.servlet.http.HttpSession"
        ],
        "Source": "Stack Overflow"
    },
    "1172": {
        "Query": "How to apply applyPattern for SimpleDateFormat in java?",
        "GroundTruth": [
            "java.text.SimpleDateFormat()"
        ],
        "APIClasses": [
            "java.text"
        ],
        "Source": "Stack Overflow"
    },
    "1173": {
        "Query": "Relative sort - insertBefore() and insertAfter() methods",
        "GroundTruth": [
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "1174": {
        "Query": "How to get TimeZone from android mobile?",
        "GroundTruth": [
            "java.util.TimeZone.getDefault()"
        ],
        "APIClasses": [
            "java.util.TimeZone"
        ],
        "Source": "Stack Overflow"
    },
    "1175": {
        "Query": "Name the Thread of an AsyncTask",
        "GroundTruth": [
            "java.lang.Thread.currentThread.setName()"
        ],
        "APIClasses": [
            "java.lang.Thread.currentThread"
        ],
        "Source": "Stack Overflow"
    },
    "1176": {
        "Query": "How to obtain the next Power Of Two of a given number?",
        "GroundTruth": [
            "java.lang.Integer.highestOneBit()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "1177": {
        "Query": "How to convert CharSequence to String?",
        "GroundTruth": [
            "java.lang.CharSequence.toString()"
        ],
        "APIClasses": [
            "java.lang.CharSequence"
        ],
        "Source": "Stack Overflow"
    },
    "1178": {
        "Query": "JButton minimizing a window(JFrame)",
        "GroundTruth": [
            "java.awt.Frame.setExtendedState()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Stack Overflow"
    },
    "1179": {
        "Query": "Text Changed event in JTextArea? How to?",
        "GroundTruth": [
            "javax.swing.event.DocumentEvent.getDocument()",
            "javax.swing.event.DocumentEvent.getDocument().addDocumentListener()"
        ],
        "APIClasses": [
            "javax.swing.event.DocumentEvent",
            "javax.swing.event.DocumentEvent.getDocument()"
        ],
        "Source": "Stack Overflow"
    },
    "1180": {
        "Query": "Getting the real (virtual) host name under an application server",
        "GroundTruth": [
            "javax.servlet.ServletRequest.getServerName()"
        ],
        "APIClasses": [
            "javax.servlet.ServletRequest"
        ],
        "Source": "Stack Overflow"
    },
    "1181": {
        "Query": "set the JFileChooser to open current directory",
        "GroundTruth": [
            "javax.swing.JFileChooser.setCurrentDirectory()"
        ],
        "APIClasses": [
            "javax.swing.JFileChooser"
        ],
        "Source": "Stack Overflow"
    },
    "1182": {
        "Query": "Load all images from folder in Android",
        "GroundTruth": [
            "java.io.File.list()",
            "android.graphics.BitmapFactory"
        ],
        "APIClasses": [
            "java.io.File",
            "android.graphics"
        ],
        "Source": "Stack Overflow"
    },
    "1183": {
        "Query": "How to change text in EditText",
        "GroundTruth": [
            "android.widget.EditText.setText()"
        ],
        "APIClasses": [
            "android.widget.EditText"
        ],
        "Source": "Stack Overflow"
    },
    "1184": {
        "Query": "Any Equivalent for mcrypt (in PHP) to use in Java?",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1185": {
        "Query": "How to send SIGINT signal from Java to an external process?",
        "GroundTruth": [
            "java.lang.Process.destroy()"
        ],
        "APIClasses": [
            "java.lang.Process"
        ],
        "Source": "Stack Overflow"
    },
    "1186": {
        "Query": "Specification of class name when invoking findClass in Java Custom Class loader",
        "GroundTruth": [
            "java.lang.ClassLoader.findClass()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Stack Overflow"
    },
    "1187": {
        "Query": "Kill the Thread in android",
        "GroundTruth": [
            "java.lang.Thread.interrupt()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "1188": {
        "Query": "Netbean: how to resize the UI Window to screen Size",
        "GroundTruth": [
            "java.awt.Frame.setExtendedState()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Stack Overflow"
    },
    "1189": {
        "Query": "How do you set one array's values to another array's values in Java?",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "1190": {
        "Query": "how to run dmg on mac through java",
        "GroundTruth": [
            "java.awt.Desktop.open()"
        ],
        "APIClasses": [
            "java.awt.Desktop"
        ],
        "Source": "Stack Overflow"
    },
    "1191": {
        "Query": "How to replace all characters in a user input string except one",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1192": {
        "Query": "Convert a String to a byte array and then back to the original String",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1193": {
        "Query": "How do I read x bytes from a stream?",
        "GroundTruth": [
            "java.io.DataInputStream.readFully()"
        ],
        "APIClasses": [
            "java.io.DataInputStream"
        ],
        "Source": "Stack Overflow"
    },
    "1194": {
        "Query": "How to set position of objects in JFrame?",
        "GroundTruth": [
            "java.awt.GridBagLayout()"
        ],
        "APIClasses": [
            "java.awt"
        ],
        "Source": "Stack Overflow"
    },
    "1195": {
        "Query": "Setting the default SocketFactory",
        "GroundTruth": [
            "javax.net.SocketFactory.getDefault()"
        ],
        "APIClasses": [
            "javax.net.SocketFactory"
        ],
        "Source": "Stack Overflow"
    },
    "1196": {
        "Query": "Frame displayed with InvokeLater after all other processes are done",
        "GroundTruth": [
            "javax.swing.SwingUtilities.invokeLater()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Stack Overflow"
    },
    "1197": {
        "Query": "Cloning with generics",
        "GroundTruth": [
            "com.rits.cloning.Cloner.Cloner()"
        ],
        "APIClasses": [
            "com.rits.cloning.Cloner"
        ],
        "Source": "Stack Overflow"
    },
    "1198": {
        "Query": "Oracle Database BLOB to InputStream in Java?",
        "GroundTruth": [
            "java.sql.Blob.getBinaryStream()"
        ],
        "APIClasses": [
            "java.sql.Blob"
        ],
        "Source": "Stack Overflow"
    },
    "1199": {
        "Query": "Loading a Linux .so File at Java Runtime",
        "GroundTruth": [
            "java.lang.System.loadLibrary()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "1200": {
        "Query": "Java sort array based on three column",
        "GroundTruth": [
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "1201": {
        "Query": "Java getting my IP address",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Stack Overflow"
    },
    "1202": {
        "Query": "Java carriage to previous line",
        "GroundTruth": [
            "java.io.PrintStream.print()"
        ],
        "APIClasses": [
            "java.io.PrintStream"
        ],
        "Source": "Stack Overflow"
    },
    "1203": {
        "Query": "How to make ScriptEngine to run multiple javascript files?",
        "GroundTruth": [
            "eval()"
        ],
        "APIClasses": [
            ""
        ],
        "Source": "Stack Overflow"
    },
    "1204": {
        "Query": "get value from private field having object \"Field\". JAVA",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject"
        ],
        "Source": "Stack Overflow"
    },
    "1205": {
        "Query": "LinkedHashMap to Pojo",
        "GroundTruth": [
            "org.apache.commons.beanutils.BeanUtils.populate()"
        ],
        "APIClasses": [
            "org.apache.commons.beanutils.BeanUtils"
        ],
        "Source": "Stack Overflow"
    },
    "1206": {
        "Query": "how do you execute an http post in Java?",
        "GroundTruth": [
            "java.net.URLConnection.setDoOutput()"
        ],
        "APIClasses": [
            "java.net.URLConnection"
        ],
        "Source": "Stack Overflow"
    },
    "1207": {
        "Query": "Open and close Hibernate session",
        "GroundTruth": [
            "org.hibernate.Session.close()"
        ],
        "APIClasses": [
            "org.hibernate.Session"
        ],
        "Source": "Stack Overflow"
    },
    "1208": {
        "Query": "Dynamically removing elements from List",
        "GroundTruth": [
            "java.util.Iterator.remove()"
        ],
        "APIClasses": [
            "java.util.Iterator"
        ],
        "Source": "Stack Overflow"
    },
    "1209": {
        "Query": "How to find and kill running Win-Processes from within Java?",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Stack Overflow"
    },
    "1210": {
        "Query": "Convert String to Enum?",
        "GroundTruth": [
            "java.lang.Enum.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Enum"
        ],
        "Source": "Stack Overflow"
    },
    "1211": {
        "Query": "How to trap the Window state?",
        "GroundTruth": [
            "java.awt.event.WindowEvent.getNewState()"
        ],
        "APIClasses": [
            "java.awt.event.WindowEvent"
        ],
        "Source": "Stack Overflow"
    },
    "1212": {
        "Query": "How to subtract or add two hexadecimal value in java",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "1213": {
        "Query": "Proxy With Java URLConnection class",
        "GroundTruth": [
            "java.net.URL.openConnection()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Stack Overflow"
    },
    "1214": {
        "Query": "How can I listen to a TAB key pressed/typed in Java?",
        "GroundTruth": [
            "java.awt.Component.setFocusTraversalKeysEnabled()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "1215": {
        "Query": "Set all JTable cells unselectable",
        "GroundTruth": [
            "javax.swing.JTable.isCellEditable()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Stack Overflow"
    },
    "1216": {
        "Query": "Check if a double is infinite in Java",
        "GroundTruth": [
            "java.lang.Double.isInfinite()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Stack Overflow"
    },
    "1217": {
        "Query": "Removing a column with table editor components",
        "GroundTruth": [
            "javax.swing.JTable.removeColumn()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Stack Overflow"
    },
    "1218": {
        "Query": "generating pi to nth digit java",
        "GroundTruth": [
            "java.math.PI",
            "java.math.BigDecimal.setScale()"
        ],
        "APIClasses": [
            "java.math",
            "java.math.BigDecimal"
        ],
        "Source": "Stack Overflow"
    },
    "1219": {
        "Query": "Show the first element in a JComboBox",
        "GroundTruth": [
            "javax.swing.JComboBox.setSelectedIndex()"
        ],
        "APIClasses": [
            "javax.swing.JComboBox"
        ],
        "Source": "Stack Overflow"
    },
    "1220": {
        "Query": "Spymemcached Hanging after Operations Completed",
        "GroundTruth": [
            "net.spy.memcached.MemcachedClient.shutdown()"
        ],
        "APIClasses": [
            "net.spy.memcached.MemcachedClient"
        ],
        "Source": "Stack Overflow"
    },
    "1221": {
        "Query": "HashMap destroys encoding?",
        "GroundTruth": [
            "java.io.InputStreamReader.InputStreamReader()"
        ],
        "APIClasses": [
            "java.io.InputStreamReader"
        ],
        "Source": "Stack Overflow"
    },
    "1222": {
        "Query": "Detecting mouseClick event on JScrollPane in Java Swing",
        "GroundTruth": [
            "javax.swing.JScrollPane.getVerticalScrollBar().addMouseListener()"
        ],
        "APIClasses": [
            "javax.swing.JScrollPane.getVerticalScrollBar()"
        ],
        "Source": "Stack Overflow"
    },
    "1223": {
        "Query": "Initialize an array of a generic type in the constructor of a class without having to pass the Class<T> parameter",
        "GroundTruth": [
            "java.util.List.toArray()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Stack Overflow"
    },
    "1224": {
        "Query": "Loading JPGs into Swing Apps",
        "GroundTruth": [
            "java.lang.Class.getResource()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "1225": {
        "Query": "How to draw on a JLabel?",
        "GroundTruth": [
            "javax.imageio.ImageIO.write()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Stack Overflow"
    },
    "1226": {
        "Query": "How to unformat xml file",
        "GroundTruth": [
            "org.apache.commons.io.IOUtils.toString()"
        ],
        "APIClasses": [
            "org.apache.commons.io.IOUtils"
        ],
        "Source": "Stack Overflow"
    },
    "1227": {
        "Query": "Is there a way to render a BasicDBObject into Map<String,String> with MongoDB/Java?",
        "GroundTruth": [
            "org.bson.BasicBSONObject.toMap()"
        ],
        "APIClasses": [
            "org.bson.BasicBSONObject"
        ],
        "Source": "Stack Overflow"
    },
    "1228": {
        "Query": "set a boolean value",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1229": {
        "Query": "How to display in JFrame web browser view in order to display web page?",
        "GroundTruth": [
            "javax.swing.JEditorPane.setPage()"
        ],
        "APIClasses": [
            "javax.swing.JEditorPane"
        ],
        "Source": "Stack Overflow"
    },
    "1230": {
        "Query": "Retrieving data from EditText in Android?",
        "GroundTruth": [
            "EditText.getText().toString()"
        ],
        "APIClasses": [
            "EditText.getText()"
        ],
        "Source": "Stack Overflow"
    },
    "1231": {
        "Query": "Generate MD5 hash in Java -Output 16 character",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1232": {
        "Query": "Get the number of bytes of a file behind a Java InputStream",
        "GroundTruth": [
            "java.io.InputStream.available()"
        ],
        "APIClasses": [
            "java.io.InputStream"
        ],
        "Source": "Stack Overflow"
    },
    "1233": {
        "Query": "How to get focus in JPopupMenu",
        "GroundTruth": [
            "java.awt.PopupMenu.show()"
        ],
        "APIClasses": [
            "java.awt.PopupMenu"
        ],
        "Source": "Stack Overflow"
    },
    "1234": {
        "Query": "How to display data from a Text file in a listView",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1235": {
        "Query": "How do i get an integer to set the value the same as a scanner",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "1236": {
        "Query": "Executing thread \"one by one\"",
        "GroundTruth": [
            "java.util.concurrent.CyclicBarrier.await()"
        ],
        "APIClasses": [
            "java.util.concurrent.CyclicBarrier"
        ],
        "Source": "Stack Overflow"
    },
    "1237": {
        "Query": "How to convert String to Reader in java",
        "GroundTruth": [
            "java.io.StringReader.StringReader()"
        ],
        "APIClasses": [
            "java.io.StringReader"
        ],
        "Source": "Stack Overflow"
    },
    "1238": {
        "Query": "Referencing a file in Eclipse without hard-coding the path?",
        "GroundTruth": [
            "javax.servlet.ServletContext.getRealPath()",
            "javax.servlet.ServletContext.getResourceAsStream()"
        ],
        "APIClasses": [
            "javax.servlet.ServletContext"
        ],
        "Source": "Stack Overflow"
    },
    "1239": {
        "Query": "String to byte conversion",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Stack Overflow"
    },
    "1240": {
        "Query": "Is it possible to write a newline to a socket's OutputStream?",
        "GroundTruth": [
            "java.io.BufferedWriter.newLine()"
        ],
        "APIClasses": [
            "java.io.BufferedWriter"
        ],
        "Source": "Stack Overflow"
    },
    "1241": {
        "Query": "How to programmatically trigger validation of EMF model?",
        "GroundTruth": [
            "org.eclipse.emf.ecore.util.Diagnostician.INSTANCE.validate()"
        ],
        "APIClasses": [
            "org.eclipse.emf.ecore.util.Diagnostician.INSTANCE"
        ],
        "Source": "Stack Overflow"
    },
    "1242": {
        "Query": "Reading and checking strings from user input",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1243": {
        "Query": "Changing Font Style when Clicking on a JButton Java",
        "GroundTruth": [
            "javax.swing.JComponent.setFont()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "1244": {
        "Query": "How to compare generic type member of generic classin java",
        "GroundTruth": [
            "compareTo()",
            "java.lang.Comparable.compareTo()"
        ],
        "APIClasses": [
            "",
            "java.lang.Comparable"
        ],
        "Source": "Stack Overflow"
    },
    "1245": {
        "Query": "String comparison in java, again",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1246": {
        "Query": "How can I specify run-time variables in a jar's manifest file?",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "1247": {
        "Query": "Something like 'contains any' for Java set?",
        "GroundTruth": [
            "java.util.Collections.disjoint()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "1248": {
        "Query": "How to use a sleep/wait function to display a countdown",
        "GroundTruth": [
            "javax.swing.Timer"
        ],
        "APIClasses": [
            "javax.swing"
        ],
        "Source": "Stack Overflow"
    },
    "1249": {
        "Query": "Resolving the root of a webapp from getResource",
        "GroundTruth": [
            "javax.servlet.ServletContext.getResource()"
        ],
        "APIClasses": [
            "javax.servlet.ServletContext"
        ],
        "Source": "Stack Overflow"
    },
    "1250": {
        "Query": "Fastest way to concatenate multiple strings ",
        "GroundTruth": [
            "java.lang.StringBuffer.StringBuffer()"
        ],
        "APIClasses": [
            "java.lang.StringBuffer"
        ],
        "Source": "Stack Overflow"
    },
    "1251": {
        "Query": "Dragging text from a Word document to a Java text component?",
        "GroundTruth": [
            "javax.swing.TransferHandler.importData()"
        ],
        "APIClasses": [
            "javax.swing.TransferHandler"
        ],
        "Source": "Stack Overflow"
    },
    "1252": {
        "Query": "Best way to Format a Double value to 2 Decimal places",
        "GroundTruth": [
            "java.text.DecimalFormat.DecimalFormat()"
        ],
        "APIClasses": [
            "java.text.DecimalFormat"
        ],
        "Source": "Stack Overflow"
    },
    "1253": {
        "Query": "rounding decimal points",
        "GroundTruth": [
            "java.lang.Math.round()",
            "java.math.BigDecimal.setScale()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.math.BigDecimal"
        ],
        "Source": "Stack Overflow"
    },
    "1254": {
        "Query": "How to get get Time Zone from Locale value in android?",
        "GroundTruth": [
            "java.util.TimeZone.getDefault()"
        ],
        "APIClasses": [
            "java.util.TimeZone"
        ],
        "Source": "Stack Overflow"
    },
    "1255": {
        "Query": "Pass Single Element to Method that Accepts a Collection",
        "GroundTruth": [
            "java.util.Collections.singleton()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "1256": {
        "Query": "Steps for Instantiating a BufferedImage",
        "GroundTruth": [
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Stack Overflow"
    },
    "1257": {
        "Query": "Raising a number to a power in Java",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "1258": {
        "Query": "Find the last index of \"\\\" in a string in java",
        "GroundTruth": [
            "java.lang.String.lastIndexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1259": {
        "Query": "Get text element inside JList to a variable?",
        "GroundTruth": [
            "javax.swing.ListModel.getElementAt()"
        ],
        "APIClasses": [
            "javax.swing.ListModel"
        ],
        "Source": "Stack Overflow"
    },
    "1260": {
        "Query": "How to implement non-static method in a static class?",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Stack Overflow"
    },
    "1261": {
        "Query": "Check if files exists without too much garbage",
        "GroundTruth": [
            "java.io.File.File()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "1262": {
        "Query": "How to add a URL String in a JSON object",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1263": {
        "Query": "how to get client ip address?",
        "GroundTruth": [
            "java.net.Socket.getInetAddress()"
        ],
        "APIClasses": [
            "java.net.Socket"
        ],
        "Source": "Stack Overflow"
    },
    "1264": {
        "Query": "How to get EOL character of any file in java",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "1265": {
        "Query": "Path for image loading",
        "GroundTruth": [
            "java.lang.Class.getResource()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "1266": {
        "Query": "Java: How to package and access resources inside a runnable Jar file?",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "1267": {
        "Query": "How to get parameter names with Java reflection",
        "GroundTruth": [
            "java.lang.Class.getMethods()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "1268": {
        "Query": "Make java scrollbar start in middle of the scrolling content",
        "GroundTruth": [
            "javax.swing.JScrollBar.setValues()"
        ],
        "APIClasses": [
            "javax.swing.JScrollBar"
        ],
        "Source": "Stack Overflow"
    },
    "1269": {
        "Query": "How to specify test classpath in Eclipse",
        "GroundTruth": [
            "Thread.currentThread().getContextClassLoader().getResourceAsStream()"
        ],
        "APIClasses": [
            "Thread.currentThread().getContextClassLoader()"
        ],
        "Source": "Stack Overflow"
    },
    "1270": {
        "Query": "How to compare that sequence of doubles are all \"approximately equal\" in Java?",
        "GroundTruth": [
            "java.lang.Math.ulp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "1271": {
        "Query": "Java - Swing setting colour to text in JTextArea",
        "GroundTruth": [
            "java.awt.Component.setForeground()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "1272": {
        "Query": "How to format an Integer to a four-zero-left string?",
        "GroundTruth": [
            "java.text.DecimalFormat.format()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.text.DecimalFormat",
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1273": {
        "Query": "Check if point is on line in Java Swing",
        "GroundTruth": [
            "java.awt.geom.Line2D.ptSegDist()"
        ],
        "APIClasses": [
            "java.awt.geom.Line2D"
        ],
        "Source": "Stack Overflow"
    },
    "1274": {
        "Query": "Fastest way to set all values of an array?",
        "GroundTruth": [
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "1275": {
        "Query": "Java - Splitting a String based on a String and a new line",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1276": {
        "Query": "Get current path of java file that is running",
        "GroundTruth": [
            "java.io.File.listFiles()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "1277": {
        "Query": "Acquiring a country's currency code",
        "GroundTruth": [
            "java.util.Currency.getInstance()"
        ],
        "APIClasses": [
            "java.util.Currency"
        ],
        "Source": "Stack Overflow"
    },
    "1278": {
        "Query": "How do I detect that a JComboBox is empty?",
        "GroundTruth": [
            "javax.swing.JComboBox.getItemCount()"
        ],
        "APIClasses": [
            "javax.swing.JComboBox"
        ],
        "Source": "Stack Overflow"
    },
    "1279": {
        "Query": "Java - Given a String, how to order all its chars alphabetically to produce a new String?",
        "GroundTruth": [
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Stack Overflow"
    },
    "1280": {
        "Query": "arrayList/vector add element at position , method",
        "GroundTruth": [
            "java.util.List.add()",
            "java.util.Vector.add()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.util.Vector"
        ],
        "Source": "Stack Overflow"
    },
    "1281": {
        "Query": "Detecting text selection in JTextArea",
        "GroundTruth": [
            "java.awt.Component.setEnabled()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Stack Overflow"
    },
    "1282": {
        "Query": "Java: How to cancel application exit",
        "GroundTruth": [
            "javax.swing.JFrame.setDefaultCloseOperation()"
        ],
        "APIClasses": [
            "javax.swing.JFrame"
        ],
        "Source": "Stack Overflow"
    },
    "1283": {
        "Query": "How to replace brackets in strings",
        "GroundTruth": [
            "java.util.regex.Pattern.quote()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Stack Overflow"
    },
    "1284": {
        "Query": "Is there a way to add a row selected listener on JTable?",
        "GroundTruth": [
            "javax.swing.JTable.getSelectionModel().addListSelectionListener()"
        ],
        "APIClasses": [
            "javax.swing.JTable.getSelectionModel()"
        ],
        "Source": "Stack Overflow"
    },
    "1285": {
        "Query": "Java & Windows 7: Reliably getting IPv4 netmask?",
        "GroundTruth": [
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "1286": {
        "Query": "Regex to remove escape slashes in string",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1287": {
        "Query": "JButtons to adjust to size based on it's textual contents",
        "GroundTruth": [
            "javax.swing.JComponent.getPreferredSize()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Stack Overflow"
    },
    "1288": {
        "Query": "Most efficient way to make a data structure thread-safe (Java)",
        "GroundTruth": [
            "java.util.concurrent.ConcurrentHashMap()"
        ],
        "APIClasses": [
            "java.util.concurrent"
        ],
        "Source": "Stack Overflow"
    },
    "1289": {
        "Query": "How can I use ReadableByteChannel to get file contents and store it in byteBuffer?",
        "GroundTruth": [
            "java.nio.channels.ReadableByteChannel.read()"
        ],
        "APIClasses": [
            "java.nio.channels.ReadableByteChannel"
        ],
        "Source": "Stack Overflow"
    },
    "1290": {
        "Query": "Is it possible to cast in fast enumeration?",
        "GroundTruth": [
            "java.util.Collection.toArray()"
        ],
        "APIClasses": [
            "java.util.Collection"
        ],
        "Source": "Stack Overflow"
    },
    "1291": {
        "Query": "Determining if a point lies within an ellipse, including the edge",
        "GroundTruth": [
            "java.awt.geom.Ellipse2D.contains()"
        ],
        "APIClasses": [
            "java.awt.geom.Ellipse2D"
        ],
        "Source": "Stack Overflow"
    },
    "1292": {
        "Query": "How do I access a config file inside the jar?",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "1293": {
        "Query": "Jtabbedpane how to set one tab enable to false",
        "GroundTruth": [
            "javax.swing.JTabbedPane.setEnabledAt()"
        ],
        "APIClasses": [
            "javax.swing.JTabbedPane"
        ],
        "Source": "Stack Overflow"
    },
    "1294": {
        "Query": "How to change spaces to underscore and make string case insensitive?",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1295": {
        "Query": "Dynamic Visible Row Count In JList",
        "GroundTruth": [
            "javax.swing.JList.setVisibleRowCount()"
        ],
        "APIClasses": [
            "javax.swing.JList"
        ],
        "Source": "Stack Overflow"
    },
    "1296": {
        "Query": "ResultSet How to get String from an object when data is null?",
        "GroundTruth": [
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1297": {
        "Query": "JPanel - Set only a minimum height",
        "GroundTruth": [
            "javax.swing.JPanel.getMinimumSize()"
        ],
        "APIClasses": [
            "javax.swing.JPanel"
        ],
        "Source": "Stack Overflow"
    },
    "1298": {
        "Query": "How to use ProgressMonitor window without losing focus on the main JFrame?",
        "GroundTruth": [
            "javax.swing.ProgressMonitor.ProgressMonitor()"
        ],
        "APIClasses": [
            "javax.swing.ProgressMonitor"
        ],
        "Source": "Stack Overflow"
    },
    "1299": {
        "Query": "How do I correctly get a URL for a resource on the classpath in WebSphere 6.1?",
        "GroundTruth": [
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "1300": {
        "Query": "Java convert system's current date-time to a count of seconds from epoch reference",
        "GroundTruth": [
            "java.lang.System.currentTimeMillis()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "1301": {
        "Query": "JPanel/Component expansion when a row is dynamically added - Java Swing",
        "GroundTruth": [
            "javax.swing.JPopupMenu.pack()"
        ],
        "APIClasses": [
            "javax.swing.JPopupMenu"
        ],
        "Source": "Stack Overflow"
    },
    "1302": {
        "Query": "Set value in ArrayList<Object[]>",
        "GroundTruth": [
            "java.util.ArrayList.set()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Stack Overflow"
    },
    "1303": {
        "Query": "Preloading approx. 10 images (8Mpix) in Java",
        "GroundTruth": [
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Stack Overflow"
    },
    "1304": {
        "Query": "Allow only one instance of JInternalFrame",
        "GroundTruth": [
            "javax.swing.JInternalFrame.setVisible()"
        ],
        "APIClasses": [
            "javax.swing.JInternalFrame"
        ],
        "Source": "Stack Overflow"
    },
    "1305": {
        "Query": "Use Gson to serialize a POJO",
        "GroundTruth": [
            "com.google.gson.Gson.toJson()"
        ],
        "APIClasses": [
            "com.google.gson.Gson"
        ],
        "Source": "Stack Overflow"
    },
    "1306": {
        "Query": "How can I make JList update when ListModel changed in java?",
        "GroundTruth": [
            "javax.swing.SwingWorker()"
        ],
        "APIClasses": [
            "javax.swing"
        ],
        "Source": "Stack Overflow"
    },
    "1307": {
        "Query": "How to get current class name including package name in Java?",
        "GroundTruth": [
            "java.lang.Class.getCanonicalName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Stack Overflow"
    },
    "1308": {
        "Query": "regular expression to allow only 1 dash",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Stack Overflow"
    },
    "1309": {
        "Query": "Changing the color of a BufferedImage",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()",
            "java.awt.iamge.RescaleOp.RescaleOp()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage",
            "java.awt.iamge.RescaleOp"
        ],
        "Source": "Stack Overflow"
    },
    "1310": {
        "Query": "GWT: Showing PDF created as POST response",
        "GroundTruth": [
            "com.google.gwt.user.client.Window.Location.setUrl()"
        ],
        "APIClasses": [
            "com.google.gwt.user.client.Window.Location"
        ],
        "Source": "Stack Overflow"
    },
    "1311": {
        "Query": "How to open the temporary directory in Java?",
        "GroundTruth": [
            "java.io.File.File()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Stack Overflow"
    },
    "1312": {
        "Query": "How to get coordinates of a point in a coordinate system based on angle and distance",
        "GroundTruth": [
            "java.lang.Math.toRadians()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "1313": {
        "Query": "keep only alphabet characters",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Stack Overflow"
    },
    "1314": {
        "Query": "How to get styled language/country code from the Java Locale",
        "GroundTruth": [
            "java.util.Locale.toString()"
        ],
        "APIClasses": [
            "java.util.Locale"
        ],
        "Source": "Stack Overflow"
    },
    "1315": {
        "Query": "How to set java.net.preferIPv4Stack=true at runtime?",
        "GroundTruth": [
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Stack Overflow"
    },
    "1316": {
        "Query": "Java: Trying to get the percentage of integers, how to round up?",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Stack Overflow"
    },
    "1317": {
        "Query": "Java play multimedia file from byte array",
        "GroundTruth": [
            "java.io.ByteArrayInputStream.ByteArrayInputStream()"
        ],
        "APIClasses": [
            "java.io.ByteArrayInputStream"
        ],
        "Source": "Stack Overflow"
    },
    "1318": {
        "Query": "adding JScrollBar to a JPanel with GridBagLayout",
        "GroundTruth": [
            "javax.swing.JScrollPane.setHorizontalScrollBarPolicy()"
        ],
        "APIClasses": [
            "javax.swing.JScrollPane"
        ],
        "Source": "Stack Overflow"
    },
    "1319": {
        "Query": "How to open file with default application in SWT?",
        "GroundTruth": [
            "org.eclipse.swt.program.Program.lauch()"
        ],
        "APIClasses": [
            "org.eclipse.swt.program.Program"
        ],
        "Source": "Stack Overflow"
    },
    "1320": {
        "Query": "Reverse Array Order",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.reverse()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Stack Overflow"
    },
    "1321": {
        "Query": "'this' keyword used implicitly and explicitly to refer to members of an object.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1322": {
        "Query": "(Partial) replacement for Arrays.copyOfRange, which is only available in JDK6.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1323": {
        "Query": "1-D Double array to integer array.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1324": {
        "Query": "1-D Integer array to double array.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1325": {
        "Query": "1-D Integer array to float array.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1326": {
        "Query": "3D Box and Sphere",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Object",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "1327": {
        "Query": "Back Referencing a Group in a Replacement Text",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1328": {
        "Query": "Backslashes in regular expressions",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.replaceFirst()",
            "java.util.regex.Matcher.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "1329": {
        "Query": "Based on date and timezone return ZonedDateTime instance.",
        "GroundTruth": [
            "java.time.ZonedDateTime.parse()",
            "java.lang.StringBuilder.append()",
            "java.lang.StringBuilder.toString()"
        ],
        "APIClasses": [
            "java.time.ZonedDateTime",
            "java.lang.StringBuilder"
        ],
        "Source": "Tutorial Websites"
    },
    "1330": {
        "Query": "Basic RSA decrypt method",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()",
            "javax.crypto.Cipher.doFinal()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "1331": {
        "Query": "Bi dimensional Array, Spiral Pattern Build. Type 2: Out-In.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1332": {
        "Query": "BigDecimal Sets [n] to [dp] decimal places.",
        "GroundTruth": [
            "java.math.BigDecimal.setScale()"
        ],
        "APIClasses": [
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "1333": {
        "Query": "BigDecimal greater Than Or Equal",
        "GroundTruth": [
            "java.math.BigInteger.compareTo()",
            "java.math.BigDecimal.compareTo()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "1334": {
        "Query": "BigDecimal greater than Zero",
        "GroundTruth": [
            "java.math.BigInteger.compareTo()",
            "java.math.BigDecimal.compareTo()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "1335": {
        "Query": "BigDecimal to Byte Buffer",
        "GroundTruth": [
            "java.nio.ByteBuffer.wrap()",
            "java.math.BigDecimal.unscaledValue()",
            "java.math.BigInteger.toByteArray()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer",
            "java.math.BigDecimal",
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "1336": {
        "Query": "BigInteger to Byte Array Little Endian",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.math.BigInteger.toByteArray()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "1337": {
        "Query": "BigInteger to Byte Array Little Endian Unsigned",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.math.BigInteger.toByteArray()",
            "java.util.Arrays.copyOfRange()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "1338": {
        "Query": "BigInteger to Byte Array Unsigned",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.math.BigInteger.toByteArray()",
            "java.util.Arrays.copyOfRange()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "1339": {
        "Query": "Binary To Decimal with while loop",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1340": {
        "Query": "Binary files are encoded with a variable length prefix that tells you the size of the string.",
        "GroundTruth": [
            "java.lang.Readable.read()"
        ],
        "APIClasses": [
            "java.lang.Readable"
        ],
        "Source": "Tutorial Websites"
    },
    "1341": {
        "Query": "Binary search int Array for the non-existing value",
        "GroundTruth": [
            "java.util.Arrays.binarySearch()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1342": {
        "Query": "Binary search int Array for the value 5",
        "GroundTruth": [
            "java.util.Arrays.binarySearch()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1343": {
        "Query": "Bind a Serializable object to a directory with a codebase",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1344": {
        "Query": "Binds an Action to a JComponent via the Action's configured ACCELERATOR_KEY.",
        "GroundTruth": [
            "javax.swing.Action.getValue()",
            "javax.swing.JComponent.getInputMap()"
        ],
        "APIClasses": [
            "javax.swing.Action",
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "1345": {
        "Query": "Blends the given colors by the given factor.",
        "GroundTruth": [
            "java.awt.Color.getRGBComponents()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1346": {
        "Query": "Blocks the specified user in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1347": {
        "Query": "Break Up Lines in string via regex",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1348": {
        "Query": "Breaking a String into Words",
        "GroundTruth": [
            "java.util.StringTokenizer.hasMoreTokens()"
        ],
        "APIClasses": [
            "java.util.StringTokenizer"
        ],
        "Source": "Tutorial Websites"
    },
    "1349": {
        "Query": "Brightens each of the RGB components of color by the specified factor.",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1350": {
        "Query": "Buffered copy with BufferedReader and BufferedWriter",
        "GroundTruth": [
            "org.omg.CORBA.portable.InputStream.read()",
            "org.omg.CORBA.portable.OutputStream.write()",
            "java.io.InputStream.close()",
            "java.io.OutputStream.close()"
        ],
        "APIClasses": [
            "org.omg.CORBA.portable.InputStream",
            "org.omg.CORBA.portable.OutputStream",
            "java.io.InputStream",
            "java.io.OutputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "1351": {
        "Query": "BufferedImage draw Borders Black And White",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "1352": {
        "Query": "BufferedImage make Color Transparent",
        "GroundTruth": [
            "java.awt.Color.getRGB()",
            "java.awt.Toolkit.getDefaultToolkit()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "1353": {
        "Query": "BufferedImage to Pixel Matrix",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1354": {
        "Query": "Build an javafx.scene.control.Alert Alert object.",
        "GroundTruth": [
            "java.util.concurrent.Future.get()",
            "java.util.logging.Logger.log()"
        ],
        "APIClasses": [
            "java.util.concurrent.Future",
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "1355": {
        "Query": "ByteBuffer to Utf String",
        "GroundTruth": [
            "java.nio.Buffer.remaining()",
            "java.nio.ByteBuffer.get()"
        ],
        "APIClasses": [
            "java.nio.Buffer",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1356": {
        "Query": "CSV 2 weka Arff",
        "GroundTruth": [
            "java.awt.FileDialog.setFile()"
        ],
        "APIClasses": [
            "java.awt.FileDialog"
        ],
        "Source": "Tutorial Websites"
    },
    "1357": {
        "Query": "Calculate Exponentiation for all values in an array of doubles by a given exponent.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1358": {
        "Query": "Calculate angle at B, given 3 positions via Vector3d",
        "GroundTruth": [
            "java.lang.Math.acos()",
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1359": {
        "Query": "Calculate area of a convex polygon",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1360": {
        "Query": "Calculate area of triangle given lengths of sides.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1361": {
        "Query": "Calculate frames based on AudioFormat",
        "GroundTruth": [
            "javax.sound.sampled.AudioFormat.getFrameSize()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "1362": {
        "Query": "Calculate how long it will take to play the given number of bytes of Audio.",
        "GroundTruth": [
            "javax.sound.sampled.AudioFormat.getFrameSize()",
            "javax.sound.sampled.AudioFormat.getFrameRate()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFormat",
            "javax.sound.sampled.AudioFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "1363": {
        "Query": "Calculate how long it will take to play the given number of frames of Audio.",
        "GroundTruth": [
            "javax.sound.sampled.AudioFormat.getFrameRate()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "1364": {
        "Query": "Calculate int value square root",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1365": {
        "Query": "Calculate long value to readable Size",
        "GroundTruth": [
            "java.lang.Double.valueOf()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1366": {
        "Query": "Calculate the desired X offset given the specified image, bounding rectangle, alignment.",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.awt.Image",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1367": {
        "Query": "Calculate the pseudo-inverse of a matrix",
        "GroundTruth": [
            "java.lang.Object.clone()",
            "java.lang.Enum.clone()",
            "java.lang.Thread.clone()",
            "javax.management.Query.times()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Enum",
            "java.lang.Thread",
            "javax.management.Query",
            "javax.management.Query"
        ],
        "Source": "Tutorial Websites"
    },
    "1368": {
        "Query": "Calculate the sphericity of a particle (Laurent formula)",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1369": {
        "Query": "Calculate the sphericity of a particle (Mathilde formula)",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1370": {
        "Query": "Calculate the sphericity of a particle (Wikipedia formula)",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1371": {
        "Query": "Calculate the start point for drawing a TextLayout.",
        "GroundTruth": [
            "java.awt.font.TextLayout.getBounds()",
            "java.awt.font.TextLayout.getAscent()"
        ],
        "APIClasses": [
            "java.awt.font.TextLayout"
        ],
        "Source": "Tutorial Websites"
    },
    "1372": {
        "Query": "Calculate the volume of a sphere.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1373": {
        "Query": "Calculate whether current year is Leap year in persian or not",
        "GroundTruth": [
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1374": {
        "Query": "Calculates BigDecimal divided by total",
        "GroundTruth": [
            "java.math.BigInteger.divide()",
            "java.math.BigDecimal.divide()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "1375": {
        "Query": "Calculates BigDecimal divided by total in percent form e.g.",
        "GroundTruth": [
            "java.math.BigInteger.multiply()",
            "java.math.BigDecimal.multiply()",
            "java.math.BigDecimal.setScale()",
            "java.math.BigInteger.divide()",
            "java.math.BigDecimal.divide()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "1376": {
        "Query": "Calculates BigDecimal multiply i",
        "GroundTruth": [
            "java.math.BigInteger.multiply()",
            "java.math.BigDecimal.multiply()",
            "java.math.BigDecimal.setScale()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "1377": {
        "Query": "Calculates Spearman's rank correlation coefficient",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.Math.pow()",
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Math",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1378": {
        "Query": "Calculates a rectangle into two points, where as the points are handled as the diagonal vector.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1379": {
        "Query": "Calculates a smoothly (cosine) interpolated value, given a start value, an end value, and the position to get the value at.",
        "GroundTruth": [
            "java.lang.Math.cos()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1380": {
        "Query": "Calculates difference in years between to dates.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "1381": {
        "Query": "Calculates inverse hyperbolic cosine of a double value.",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1382": {
        "Query": "Calculates inverse hyperbolic sine of a double value.",
        "GroundTruth": [
            "java.lang.Double.doubleToRawLongBits()",
            "java.lang.Math.abs()",
            "java.lang.Math.log()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1383": {
        "Query": "Calculates inverse hyperbolic tangent of a double value.",
        "GroundTruth": [
            "java.lang.Double.doubleToRawLongBits()",
            "java.lang.Math.abs()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1384": {
        "Query": "Calculates ln(ex - 1).",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.exp()",
            "java.lang.Double.isInfinite()",
            "java.lang.Double.isNaN()",
            "java.lang.Double.doubleToRawLongBits()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "1385": {
        "Query": "Calculates max absolute value in short type array.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1386": {
        "Query": "Calculates the Pythagorean Theorem (c2 = a2 + b2).",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1387": {
        "Query": "Calculates the absolute orientation of a given vector.",
        "GroundTruth": [
            "java.lang.Math.atan()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1388": {
        "Query": "Calculates the area of a equilateral triangle.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1389": {
        "Query": "Calculates the average character width for the given Component .",
        "GroundTruth": [
            "java.awt.Component.getFontMetrics()",
            "java.awt.Component.getFont()",
            "java.awt.FontMetrics.getWidths()"
        ],
        "APIClasses": [
            "java.awt.Component",
            "java.awt.FontMetrics"
        ],
        "Source": "Tutorial Websites"
    },
    "1390": {
        "Query": "Calculates the binomial coefficient C(n,k).",
        "GroundTruth": [
            "java.math.BigInteger.valueOf()"
        ],
        "APIClasses": [
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "1391": {
        "Query": "Calculates the byte length of a UTF-8 encoded string.",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1392": {
        "Query": "Calculates the byte wise XOR of two arrays of bytes",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1393": {
        "Query": "Calculates the center point of the first available graphics device (screen).",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getScreenDevices()",
            "java.awt.GraphicsDevice.getDisplayMode()",
            "java.awt.DisplayMode.getWidth()",
            "java.awt.DisplayMode.getHeight()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice",
            "java.awt.DisplayMode"
        ],
        "Source": "Tutorial Websites"
    },
    "1394": {
        "Query": "Calculates the distance between two points using Pythagoras.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.pow()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1395": {
        "Query": "Calculates the elapsed time from the future to now.",
        "GroundTruth": [
            "java.util.Calendar.getTime()",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "1396": {
        "Query": "Calculates the elapsed time from the past to now.",
        "GroundTruth": [
            "java.util.Calendar.getTime()",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "1397": {
        "Query": "Calculates the greatest common divisor of an array using Euclid's method.",
        "GroundTruth": [
            "java.lang.Iterable.iterator()",
            "java.lang.Math.abs()",
            "java.lang.Math.max()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Iterable",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1398": {
        "Query": "Calculates the hyperbolic area sine.",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.sqrt()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1399": {
        "Query": "Calculates the length of a vector.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1400": {
        "Query": "Calculates the line height at a given font, by looking at the height of the first word",
        "GroundTruth": [
            "java.awt.Font.getStringBounds()"
        ],
        "APIClasses": [
            "java.awt.Font"
        ],
        "Source": "Tutorial Websites"
    },
    "1401": {
        "Query": "Calculates the line width at a given font",
        "GroundTruth": [
            "java.awt.Font.getStringBounds()"
        ],
        "APIClasses": [
            "java.awt.Font"
        ],
        "Source": "Tutorial Websites"
    },
    "1402": {
        "Query": "Calculates the monthly payment for a loan of a given amount and with a given interest rate.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1403": {
        "Query": "Calculates the natural logarithm of a number",
        "GroundTruth": [
            "java.lang.Double.doubleToLongBits()",
            "java.lang.Math.sqrt()",
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1404": {
        "Query": "Calculates the normalized dot product of two vectors.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1405": {
        "Query": "Calculates the number of UTF8 bytes necessary to write a UTF16 string.",
        "GroundTruth": [
            "java.lang.StringBuilder.charAt()",
            "java.lang.StringBuffer.charAt()",
            "java.lang.CharSequence.charAt()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1406": {
        "Query": "Calculates the power in a sample as sum of the squares of the absolute values of all samples.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1407": {
        "Query": "Calculates the surface area of a cylinder.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1408": {
        "Query": "Calculates the surface area of a sphere.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1409": {
        "Query": "Calculates the vector that lies between the given vectors from - a and from b with the given length.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1410": {
        "Query": "Calculates the volume of a cone.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1411": {
        "Query": "Calculates the volume of a cube.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1412": {
        "Query": "Calculates the volume of a cylinder.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1413": {
        "Query": "Calculates the volume of a sphere.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1414": {
        "Query": "Calculating the inner product of two vectors given as arrays",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1415": {
        "Query": "Call default private or public constructor.",
        "GroundTruth": [
            "java.lang.reflect.Modifier.isPrivate()",
            "java.lang.Class.getDeclaredConstructor()",
            "java.lang.reflect.Constructor.getModifiers()",
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Constructor.newInstance()"
        ],
        "APIClasses": [
            "java.lang.reflect.Modifier",
            "java.lang.Class",
            "java.lang.reflect.Constructor",
            "java.lang.reflect.AccessibleObject"
        ],
        "Source": "Tutorial Websites"
    },
    "1416": {
        "Query": "Call to get all the methods of a class that have the given annotation.",
        "GroundTruth": [
            "java.lang.Class.getMethods()",
            "java.lang.reflect.Method.getAnnotation()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.Method"
        ],
        "Source": "Tutorial Websites"
    },
    "1417": {
        "Query": "Call to get an annotation that is expected on the given class, throwing a runtime exception if not found.",
        "GroundTruth": [
            "java.lang.reflect.Method.getAnnotation()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method"
        ],
        "Source": "Tutorial Websites"
    },
    "1418": {
        "Query": "Called to properly resolve return type of root finder or inherited finder method.",
        "GroundTruth": [
            "java.lang.reflect.Method.getGenericReturnType()",
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "1419": {
        "Query": "Calling a Function in a Database",
        "GroundTruth": [
            "java.sql.Connection.prepareCall()",
            "java.sql.CallableStatement.registerOutParameter()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.CallableStatement"
        ],
        "Source": "Tutorial Websites"
    },
    "1420": {
        "Query": "Calling a Stored Procedure in a Database",
        "GroundTruth": [
            "java.sql.Connection.prepareCall()",
            "java.sql.CallableStatement.registerOutParameter()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.CallableStatement"
        ],
        "Source": "Tutorial Websites"
    },
    "1421": {
        "Query": "Can I create a boolean variable from string?",
        "GroundTruth": [
            "java.lang.Boolean.parseBoolean()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "1422": {
        "Query": "Cancel = 0, Close = 1, Yes = 2 Swing Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showOptionDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "1423": {
        "Query": "Cancelling Updates to an Updatable Result Set",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.ResultSet.first()",
            "java.sql.ResultSet.updateString()",
            "java.sql.ResultSet.cancelRowUpdates()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "1424": {
        "Query": "Capitalize a string by using Character.toTitleCase",
        "GroundTruth": [
            "java.lang.String.isEmpty()",
            "java.lang.String.toCharArray()",
            "java.lang.Character.toTitleCase()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1425": {
        "Query": "Capitalizes the first letter of the given string",
        "GroundTruth": [
            "java.lang.StringBuilder.substring()",
            "java.lang.StringBuffer.substring()",
            "java.lang.String.substring()",
            "java.lang.String.toUpperCase()",
            "java.lang.Character.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1426": {
        "Query": "Capturing Text in a Group in a Regular Expression",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.groupCount()",
            "java.util.regex.Matcher.group()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "1427": {
        "Query": "Capturing a Screen Shot",
        "GroundTruth": [
            "java.awt.Robot.createScreenCapture()",
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Robot",
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "1428": {
        "Query": "Card shuffling and dealing with Collections method shuffle.",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.util.List.size()",
            "java.util.List.get()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "1429": {
        "Query": "Card shuffling and dealing.",
        "GroundTruth": [
            "java.util.Collections.shuffle()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "1430": {
        "Query": "Cartesian To Polar Coordinate",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.toDegrees()",
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1431": {
        "Query": "Case insensitive check if a String ends with a specified suffix. nulls are handled without exceptions.",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()",
            "java.lang.String.regionMatches()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1432": {
        "Query": "Case insensitive check if a String starts with a specified prefix. nulls are handled without exceptions.",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()",
            "java.lang.String.regionMatches()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1433": {
        "Query": "Cast Object by Class",
        "GroundTruth": [
            "java.lang.Class.isInstance()",
            "java.lang.Class.cast()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "1434": {
        "Query": "Catch two exceptions with finally statement",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.awt.geom.AffineTransform.concatenate()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.geom.AffineTransform"
        ],
        "Source": "Tutorial Websites"
    },
    "1435": {
        "Query": "Catching Multiple Exception Types To Improve Type Handling",
        "GroundTruth": [
            "java.util.Scanner.nextInt()",
            "java.util.logging.Logger.log()",
            "java.lang.Throwable.addSuppressed()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.logging.Logger",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "1436": {
        "Query": "Catching Multiple Exceptions with a vertical bar operator | for each of the exceptions",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "1437": {
        "Query": "Catching Multiple Exceptions with several catch statement",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "1438": {
        "Query": "Catching all Errors and Exceptions",
        "GroundTruth": [
            "java.util.logging.Logger.log()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "1439": {
        "Query": "Catching multiple exception types to improve type checking",
        "GroundTruth": [
            "java.nio.file.Files.delete()",
            "java.nio.file.Paths.get()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.nio.file.Paths"
        ],
        "Source": "Tutorial Websites"
    },
    "1440": {
        "Query": "Catching multiple exceptions in the same catch block is useful when different exceptions need to be handled in the same way.",
        "GroundTruth": [
            "java.util.Scanner.nextInt()",
            "java.util.logging.Logger.log()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "1441": {
        "Query": "Center a Window, Frame, JFrame, Dialog, etc., but do it the American Spelling Way :-)",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "1442": {
        "Query": "Center a big window",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "1443": {
        "Query": "Centering a Frame, Window, or Dialog on the Screen",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()",
            "java.awt.Window.setLocation()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "1444": {
        "Query": "Centering a JFrame, JWindow, or JDialog on the Screen",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()",
            "java.awt.Window.setLocation()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "1445": {
        "Query": "Centers a JFrame on the screen and gives it the specified width and height",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "1446": {
        "Query": "Centers a window on screen.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "1447": {
        "Query": "Centers an AWT window on the screen.",
        "GroundTruth": [
            "java.awt.Window.getToolkit()",
            "java.awt.Toolkit.getScreenSize()",
            "java.awt.Window.setLocation()"
        ],
        "APIClasses": [
            "java.awt.Window",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "1448": {
        "Query": "Change Symbol for Date Format",
        "GroundTruth": [
            "java.text.DateFormatSymbols.getShortWeekdays()",
            "java.text.DateFormatSymbols.setShortWeekdays()",
            "java.util.Formatter.format()"
        ],
        "APIClasses": [
            "java.text.DateFormatSymbols",
            "java.text.DateFormatSymbols",
            "java.util.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "1449": {
        "Query": "Changing Text Fonts Using FXML",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "1450": {
        "Query": "Changing and Removing the Default Icons in a JTree Component",
        "GroundTruth": [
            "javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon()",
            "javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon()",
            "javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon()",
            "javax.swing.UIManager.put()"
        ],
        "APIClasses": [
            "javax.swing.tree.DefaultTreeCellRenderer",
            "javax.swing.tree.DefaultTreeCellRenderer",
            "javax.swing.tree.DefaultTreeCellRenderer",
            "javax.swing.UIManager"
        ],
        "Source": "Tutorial Websites"
    },
    "1451": {
        "Query": "Changing the Thickness of the Stroking Pen",
        "GroundTruth": [
            "java.awt.Graphics2D.setStroke()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "1452": {
        "Query": "Character class instance methods",
        "GroundTruth": [
            "java.lang.Character.charValue()",
            "java.lang.String.toString()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Character",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1453": {
        "Query": "Check File apache hadoop Hdfs Exist",
        "GroundTruth": [
            "java.net.URI.create()"
        ],
        "APIClasses": [
            "java.net.URI"
        ],
        "Source": "Tutorial Websites"
    },
    "1454": {
        "Query": "Check User-Defined Attributes Supportability",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.getFileStore()",
            "java.nio.file.FileStore.supportsFileAttributeView()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.nio.file.FileStore"
        ],
        "Source": "Tutorial Websites"
    },
    "1455": {
        "Query": "Check a collection is empty or not.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "1456": {
        "Query": "Check for a non null and full ByteBuffer.",
        "GroundTruth": [
            "java.nio.Buffer.limit()",
            "java.nio.Buffer.capacity()"
        ],
        "APIClasses": [
            "java.nio.Buffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1457": {
        "Query": "Check for an empty or null ByteBuffer.",
        "GroundTruth": [
            "java.nio.Buffer.remaining()"
        ],
        "APIClasses": [
            "java.nio.Buffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1458": {
        "Query": "Check if Annotation array contains an Annotation",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.annotation.Annotation.equals()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "1459": {
        "Query": "Check if Collection has At Least One Not Null Element",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.isEmpty()",
            "java.util.Collection.contains()",
            "java.util.Collection.size()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "1460": {
        "Query": "Check if Collection has Elements",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "1461": {
        "Query": "Check if JDBC always returns the generated key",
        "GroundTruth": [
            "java.sql.DriverManager.getConnection()",
            "java.sql.DatabaseMetaData.generatedKeyAlwaysReturned()"
        ],
        "APIClasses": [
            "java.sql.DriverManager",
            "java.sql.DatabaseMetaData"
        ],
        "Source": "Tutorial Websites"
    },
    "1462": {
        "Query": "Check if Object array contains an Object",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1463": {
        "Query": "Check if XML Element has Child",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1464": {
        "Query": "Check if a String ends with a specified suffix. nulls are handled without exceptions.",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()",
            "java.lang.String.regionMatches()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1465": {
        "Query": "Check if a String starts with a specified prefix. nulls are handled without exceptions.",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()",
            "java.lang.String.regionMatches()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1466": {
        "Query": "Check if a String starts with any of an array of specified strings",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()",
            "java.lang.String.regionMatches()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1467": {
        "Query": "Check if a file store in which a particular file resides supports a single view",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.getFileStore()",
            "java.nio.file.FileStore.supportsFileAttributeView()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.nio.file.FileStore"
        ],
        "Source": "Tutorial Websites"
    },
    "1468": {
        "Query": "Check if a number if prime or not",
        "GroundTruth": [
            "java.lang.String.contains()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1469": {
        "Query": "Check if a particular element exists in HashSet",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1470": {
        "Query": "Check if a particular element exists in LinkedHashSet",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1471": {
        "Query": "Check if a particular element exists in LinkedList",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1472": {
        "Query": "Check if a particular string is starting with a specified word",
        "GroundTruth": [
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1473": {
        "Query": "Check if a particular value exists in Hashtable",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1474": {
        "Query": "Check if a particular value exists in TreeMap",
        "GroundTruth": [
            "java.util.TreeMap.put()",
            "java.util.TreeMap.containsValue()"
        ],
        "APIClasses": [
            "java.util.TreeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "1475": {
        "Query": "Check if a particular value exists in TreeSet",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1476": {
        "Query": "Check if a path is a symbolic link",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.getAttribute()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1477": {
        "Query": "Check if a string ends With Prefixes",
        "GroundTruth": [
            "java.lang.String.endsWith()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1478": {
        "Query": "Check if a string has Chinese using regex to check unicode range",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "1479": {
        "Query": "Check if a string is Date format by Regex",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "1480": {
        "Query": "Check if a string is email Format via regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "1481": {
        "Query": "Check if an Integer is Contained in List by binary search",
        "GroundTruth": [
            "java.util.Collections.binarySearch()",
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "1482": {
        "Query": "Check if an Item is contained in an array",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1483": {
        "Query": "Check if an array Contains a value",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1484": {
        "Query": "Check if an integer is Prime",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1485": {
        "Query": "Check if collection is null or empty.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "1486": {
        "Query": "Check if list contains an object Based On Entry Identity",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1487": {
        "Query": "Check if locale is Right-To-Left oriented.",
        "GroundTruth": [
            "java.util.Locale.getDefault()",
            "java.util.Locale.getLanguage()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.util.Locale",
            "java.util.Locale",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1488": {
        "Query": "Check if string contains valid number",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.Double.parseDouble()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Double",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1489": {
        "Query": "Check if the first calendar is actually dated before the second calendar.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.after()",
            "java.util.Date.after()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "1490": {
        "Query": "Check if the given collection contains the given object instance.",
        "GroundTruth": [
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "1491": {
        "Query": "Check if the given message is a real \"Note On\" MIDI message.",
        "GroundTruth": [
            "javax.sound.midi.ShortMessage.getCommand()",
            "javax.sound.midi.ShortMessage.getData2()"
        ],
        "APIClasses": [
            "javax.sound.midi.ShortMessage"
        ],
        "Source": "Tutorial Websites"
    },
    "1492": {
        "Query": "Check if two double precision numbers are \"equal\", i.e.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1493": {
        "Query": "Check if two doubles are equal to machine precision.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Math.max()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1494": {
        "Query": "Check if two doubles are equal to within specified tolerance.",
        "GroundTruth": [
            "java.lang.Double.isNaN()",
            "java.lang.Double.isInfinite()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "1495": {
        "Query": "Check if two paths are the same file/folder.",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.isSameFile()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "1496": {
        "Query": "Check input type using Scanner",
        "GroundTruth": [
            "java.util.Scanner.hasNextInt()",
            "java.util.Scanner.hasNextFloat()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "1497": {
        "Query": "Check palindrome using LinkedList as queue and stack",
        "GroundTruth": [
            "java.util.Stack.push()",
            "java.util.Stack.pop()",
            "java.util.Queue.remove()",
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.util.Stack",
            "java.util.Queue",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1498": {
        "Query": "Check string index of and handle null value",
        "GroundTruth": [
            "java.lang.StringBuilder.indexOf()",
            "java.lang.StringBuffer.indexOf()",
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1499": {
        "Query": "Check the validity of the Length of a UTF8 String.",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1500": {
        "Query": "Check whether the argument primitive double value is infinite number or not",
        "GroundTruth": [
            "java.lang.Double.isInfinite()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "1501": {
        "Query": "Check whether the given Collection contains the given element instance.",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1502": {
        "Query": "Check whether the input string matches the regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1503": {
        "Query": "Check whether the running VM's underlying operating operating system is Mac OS X.",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1504": {
        "Query": "Checking If Two Paths Point to the Same File",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.isSameFile()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "1505": {
        "Query": "Checking If a Link and a Target Point to the Same File",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.createSymbolicLink()",
            "java.nio.file.Files.readSymbolicLink()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1506": {
        "Query": "Checking a Symbolic Link",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.isSymbolicLink()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1507": {
        "Query": "Checking for the Existence of a File or Directory",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.exists()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "1508": {
        "Query": "Checking for the Translucency support on a Platform",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getDefaultScreenDevice()",
            "java.awt.GraphicsDevice.isWindowTranslucencySupported()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice"
        ],
        "Source": "Tutorial Websites"
    },
    "1509": {
        "Query": "Checks a IP Address string for proper IPv4 syntax via regex",
        "GroundTruth": [
            "java.util.regex.Matcher.reset()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "1510": {
        "Query": "Checks a IP Address string for proper IPv6 syntax via regex",
        "GroundTruth": [
            "java.util.regex.Matcher.reset()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "1511": {
        "Query": "Checks if String with modifiers contains ABSTRACT_MODIFIER and returns Modifier States TRUE if String contains this String or Modifier States.UNSET if not.",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1512": {
        "Query": "Checks if a String contains a valid numeric, in this definition either 1 or more digits or 0 or more digits, followed by a dot (.), followed by 1 or more digits.",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1513": {
        "Query": "Checks if a String is empty (\"\") or null without using trim method",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1514": {
        "Query": "Checks if a String is empty (\"\") or null.",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1515": {
        "Query": "Checks if a String is not empty (\"\") and not null.",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1516": {
        "Query": "Checks if a String is whitespace, empty (\"\") or null",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence"
        ],
        "Source": "Tutorial Websites"
    },
    "1517": {
        "Query": "Checks if a character value should be escaped/unescaped.",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1518": {
        "Query": "Checks if a given double is close to being zero.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1519": {
        "Query": "Checks if a given receiver is already connected to the Midi device",
        "GroundTruth": [
            "javax.sound.midi.MidiDevice.getTransmitters()",
            "javax.sound.midi.Transmitter.getReceiver()",
            "java.lang.Object.getClass()",
            "javax.sound.midi.Sequencer.SyncMode.equals()",
            "javax.sound.midi.MidiDevice.Info.equals()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiDevice",
            "javax.sound.midi.Transmitter",
            "java.lang.Object",
            "javax.sound.midi.Sequencer.SyncMode",
            "javax.sound.midi.MidiDevice.Info",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "1520": {
        "Query": "Checks if an array of Object Array is empty or null .",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1521": {
        "Query": "Checks if child element has same owner document before appending to the parent, and imports it to the parent's document if necessary.",
        "GroundTruth": [
            "org.w3c.dom.Document.importNode()",
            "org.w3c.dom.Node.getNodeType()",
            "org.w3c.dom.Node.getOwnerDocument()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document",
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "1522": {
        "Query": "Checks if constructor of class i private and adds line coverage",
        "GroundTruth": [
            "java.lang.Class.getDeclaredConstructor()",
            "java.lang.reflect.Constructor.getModifiers()",
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Constructor.newInstance()",
            "java.lang.reflect.Modifier.isPrivate()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.Constructor",
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Modifier"
        ],
        "Source": "Tutorial Websites"
    },
    "1523": {
        "Query": "Checks if is file exists.",
        "GroundTruth": [
            "java.io.File.exists()",
            "java.io.File.isDirectory()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "1524": {
        "Query": "Checks if the Class of the given object is assignable from a reference Class.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "1525": {
        "Query": "Checks if the Date object \"between\" is between from the given to Date objects.",
        "GroundTruth": [
            "java.util.Calendar.getTime()",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "1526": {
        "Query": "Checks if the Element contains all of the attributes contained in the list of labels, or throws an XMLParserException if it does not.",
        "GroundTruth": [
            "org.w3c.dom.Element.hasAttribute()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1527": {
        "Query": "Checks if the String contains only hexidecimal digits or space (' ').",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1528": {
        "Query": "Checks if the String contains only hexidecimal digits.",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1529": {
        "Query": "Checks if the XML Element contains all of the attributes contained in the list of labels.",
        "GroundTruth": [
            "org.w3c.dom.Element.hasAttribute()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "1530": {
        "Query": "Checks if the XML Element contains any of the attributes contained in the list of labels.",
        "GroundTruth": [
            "org.w3c.dom.Element.hasAttribute()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "1531": {
        "Query": "Checks if the given int is a prime number.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1532": {
        "Query": "Checks if the list (iterable) contains something of an instance class c",
        "GroundTruth": [
            "java.lang.Class.isInstance()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "1533": {
        "Query": "Checks if the method exists or not",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1534": {
        "Query": "Checks if the number is a prime number.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1535": {
        "Query": "Checks if the specified collection/array/iterator is empty.",
        "GroundTruth": [
            "java.lang.reflect.Array.getLength()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "1536": {
        "Query": "Checks if two BigInteger arrays contain the same entries",
        "GroundTruth": [
            "java.math.BigInteger.compareTo()",
            "java.math.BigDecimal.compareTo()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "1537": {
        "Query": "Checks if two doubles are approximately equal.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1538": {
        "Query": "Checks that the item is between the two bounds, inclusive.",
        "GroundTruth": [
            "java.util.Comparator.naturalOrder()",
            "java.util.Comparator.compare()"
        ],
        "APIClasses": [
            "java.util.Comparator"
        ],
        "Source": "Tutorial Websites"
    },
    "1539": {
        "Query": "Checks the first 16 bytes of the given ByteBuffer for a 0 byte.",
        "GroundTruth": [
            "java.lang.Math.min()",
            "java.nio.ByteBuffer.get()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1540": {
        "Query": "Checks the given dates for being equal.",
        "GroundTruth": [
            "java.util.Date.equals()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "1541": {
        "Query": "Checks the the given doubles if they are equals - which means they are closer than a predefined epsilon value, because comparing two doubles directly is a bad practice.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1542": {
        "Query": "Checks to see if an array contains an item.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1543": {
        "Query": "Checks to see if this array contains an object.",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.lang.String.hashCode()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1544": {
        "Query": "Checks whether a given path is a File, does not exist (unless allowOverwrite is true) and is writable",
        "GroundTruth": [
            "java.io.File.isFile()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "1545": {
        "Query": "Checks whether a given string only contains numeric characters and thus is a number.",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1546": {
        "Query": "Checks whether a string can be obtained from the clipboard.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()",
            "java.awt.datatransfer.Clipboard.isDataFlavorAvailable()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.awt.datatransfer.Clipboard"
        ],
        "Source": "Tutorial Websites"
    },
    "1547": {
        "Query": "Checks whether a string is a primitive type of java.",
        "GroundTruth": [
            "javax.sound.sampled.AudioFileFormat.Type.equals()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFileFormat.Type"
        ],
        "Source": "Tutorial Websites"
    },
    "1548": {
        "Query": "Checks whether line (x1, y1) - (x2, y2) and line (x3, y3) - (x4, y4) intersect.",
        "GroundTruth": [
            "java.lang.Math.min()",
            "java.lang.Math.max()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1549": {
        "Query": "Checks whether or not a file is a text file or a binary one.",
        "GroundTruth": [
            "java.io.File.isFile()",
            "java.io.RandomAccessFile.getFilePointer()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.RandomAccessFile",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1550": {
        "Query": "Checks whether the COLLECTION is not NULL and has at least one element.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.size()",
            "java.util.Map.size()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection",
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "1551": {
        "Query": "Checks whether the given day, month and year combination is a valid date or not.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.clear()",
            "java.util.Calendar.setLenient()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTimeInMillis()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "1552": {
        "Query": "Checks whether the given hour, minute and second combination is a valid time or not.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.clear()",
            "java.util.Calendar.setLenient()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTimeInMillis()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "1553": {
        "Query": "Checks whether the key event was a \"insert from clipboard\" combination (Ctrl+V or Shift+Ins).",
        "GroundTruth": [
            "java.awt.event.InputEvent.isControlDown()",
            "java.awt.event.InputEvent.isAltDown()",
            "java.awt.event.InputEvent.isShiftDown()"
        ],
        "APIClasses": [
            "java.awt.event.InputEvent",
            "java.awt.event.InputEvent",
            "java.awt.event.InputEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "1554": {
        "Query": "Checks whether the line and the cubic curve intersect.",
        "GroundTruth": [
            "java.awt.geom.CubicCurve2D.solveCubic()"
        ],
        "APIClasses": [
            "java.awt.geom.CubicCurve2D"
        ],
        "Source": "Tutorial Websites"
    },
    "1555": {
        "Query": "Checks whether the mouse event is a \"print screen\" event: Alt+Shift+Left-Click.",
        "GroundTruth": [
            "java.awt.event.InputEvent.isAltDown()",
            "java.awt.event.InputEvent.isShiftDown()",
            "java.awt.event.InputEvent.isControlDown()"
        ],
        "APIClasses": [
            "java.awt.event.InputEvent",
            "java.awt.event.InputEvent",
            "java.awt.event.InputEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "1556": {
        "Query": "Checks whether the mouse event is a double-click event (with the left mouse button).",
        "GroundTruth": [
            "java.awt.event.MouseEvent.getClickCount()"
        ],
        "APIClasses": [
            "java.awt.event.MouseEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "1557": {
        "Query": "Checks whether the mouse event is a left-click event.",
        "GroundTruth": [
            "java.awt.event.MouseEvent.getClickCount()"
        ],
        "APIClasses": [
            "java.awt.event.MouseEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "1558": {
        "Query": "Checks whether the mouse event is a middle/wheel-click event.",
        "GroundTruth": [
            "java.awt.event.MouseEvent.getClickCount()"
        ],
        "APIClasses": [
            "java.awt.event.MouseEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "1559": {
        "Query": "Checks whether the mouse event is a right-click event.",
        "GroundTruth": [
            "java.awt.event.MouseEvent.getClickCount()",
            "java.awt.event.InputEvent.isAltDown()",
            "java.awt.event.InputEvent.isShiftDown()",
            "java.awt.event.InputEvent.isControlDown()"
        ],
        "APIClasses": [
            "java.awt.event.MouseEvent",
            "java.awt.event.InputEvent",
            "java.awt.event.InputEvent",
            "java.awt.event.InputEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "1560": {
        "Query": "Checks whether the parameter is a valid IPv6 address (including compressed).",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.matches()",
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "1561": {
        "Query": "Checks whether the parameter is a valid compressed IPv6 address",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "1562": {
        "Query": "Checks whether the property is editable or not.",
        "GroundTruth": [
            "java.beans.PropertyDescriptor.getWriteMethod()",
            "java.beans.Introspector.getBeanInfo()",
            "java.beans.BeanInfo.getPropertyDescriptors()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.beans.PropertyDescriptor",
            "java.beans.Introspector",
            "java.beans.BeanInfo",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1563": {
        "Query": "Checks whether the quad and the cubic curves intersect.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1564": {
        "Query": "Checks whether the specified \"flavor\" can be obtained from the clipboard.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()",
            "java.awt.datatransfer.Clipboard.isDataFlavorAvailable()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.awt.datatransfer.Clipboard"
        ],
        "Source": "Tutorial Websites"
    },
    "1565": {
        "Query": "Checks whether two cubic curves intersect.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1566": {
        "Query": "Checks whether two quads curve intersect.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1567": {
        "Query": "Checks, whether the given Class 'clazz' overrides the given method in the Class 'base Clazz'.",
        "GroundTruth": [
            "java.lang.Class.getDeclaredMethod()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "1568": {
        "Query": "Class That Implements the Comparable Interface",
        "GroundTruth": [
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1569": {
        "Query": "Class declaration maintains the time in 24-hour format",
        "GroundTruth": [
            "java.sql.Time.setTime()",
            "java.lang.String.toString()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.sql.Time",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1570": {
        "Query": "Class declaration with overloaded constructors",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1571": {
        "Query": "Class has Super Class",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1572": {
        "Query": "Classes Pattern and Matcher.",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.group()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "1573": {
        "Query": "Clean the JTable, only apply to DefaultTableModel",
        "GroundTruth": [
            "javax.swing.table.DefaultTableModel.setRowCount()"
        ],
        "APIClasses": [
            "javax.swing.table.DefaultTableModel"
        ],
        "Source": "Tutorial Websites"
    },
    "1574": {
        "Query": "Clean up HTML so it doesn't break XML",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1575": {
        "Query": "Clear the ByteBuffer to be empty in flush mode.",
        "GroundTruth": [
            "java.nio.Buffer.position()",
            "java.nio.Buffer.limit()"
        ],
        "APIClasses": [
            "java.nio.Buffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1576": {
        "Query": "Clear the time part from calendar",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "1577": {
        "Query": "Clears all child nodes in XML document",
        "GroundTruth": [
            "org.w3c.dom.NodeList.getLength()",
            "org.w3c.dom.NodeList.item()"
        ],
        "APIClasses": [
            "org.w3c.dom.NodeList"
        ],
        "Source": "Tutorial Websites"
    },
    "1578": {
        "Query": "Clickme Application With An Exit  Button",
        "GroundTruth": [
            "java.lang.System.exit()",
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "java.lang.System",
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "1579": {
        "Query": "Client Execute Direct using apache http",
        "GroundTruth": [
            "javax.xml.soap.MimeHeaders.getAllHeaders()",
            "javax.swing.text.html.parser.DTD.getEntity()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.soap.MimeHeaders",
            "javax.swing.text.html.parser.DTD",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1580": {
        "Query": "Client Socket based on Thread",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1581": {
        "Query": "Clone Hashtable, Returns an enumeration of the hashtable elements that is not changed by parallel changes to the hashtable.",
        "GroundTruth": [
            "java.util.Hashtable.clone()"
        ],
        "APIClasses": [
            "java.util.Hashtable"
        ],
        "Source": "Tutorial Websites"
    },
    "1582": {
        "Query": "Clone Vector, Returns an enumeration of the vector list that is not changed by parallel changes to the vector.",
        "GroundTruth": [
            "java.util.Vector.clone()"
        ],
        "APIClasses": [
            "java.util.Vector"
        ],
        "Source": "Tutorial Websites"
    },
    "1583": {
        "Query": "Close a Writer in finally statement",
        "GroundTruth": [
            "java.util.List.get()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "1584": {
        "Query": "Closes the connection and print the stack-trace if there is any exception.",
        "GroundTruth": [
            "java.sql.Connection.close()",
            "java.lang.Throwable.printStackTrace()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "1585": {
        "Query": "Closest power of two above.",
        "GroundTruth": [
            "java.lang.Math.ceil()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1586": {
        "Query": "Collecting the Return Value of a Script in a Result Object",
        "GroundTruth": [
            "javax.script.ScriptEngineManager.getEngineByName()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngineManager"
        ],
        "Source": "Tutorial Websites"
    },
    "1587": {
        "Query": "Color rgb To HSV Color",
        "GroundTruth": [
            "java.lang.Math.max()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1588": {
        "Query": "Color to Hex Lowercase",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.format()",
            "java.awt.Color.getRGB()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1589": {
        "Query": "Color to Hex String",
        "GroundTruth": [
            "java.awt.Color.getRGB()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1590": {
        "Query": "Combine the contents of two arrays and return the result.",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.lang.Object.getClass()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.Object",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1591": {
        "Query": "Combines multiple byte arrays into a single, longer byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1592": {
        "Query": "Combines the elements of various lists into one list.",
        "GroundTruth": [
            "java.util.List.addAll()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "1593": {
        "Query": "Combining paths using path resolution",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Path.toAbsolutePath()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "1594": {
        "Query": "Committing and Rolling Back Updates to a Database",
        "GroundTruth": [
            "java.sql.Connection.setAutoCommit()",
            "java.sql.Connection.commit()",
            "java.sql.Connection.rollback()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "1595": {
        "Query": "Compare Base64 encoding for JDK, apache common and bouncy castle",
        "GroundTruth": [
            "java.util.Base64.Encoder.encode()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.util.Base64.Encoder",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1596": {
        "Query": "Compare Two Java boolean Arrays",
        "GroundTruth": [
            "java.util.Arrays.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1597": {
        "Query": "Compare Two Java byte Arrays",
        "GroundTruth": [
            "java.util.Arrays.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1598": {
        "Query": "Compare Two char Arrays",
        "GroundTruth": [
            "java.util.Arrays.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1599": {
        "Query": "Compare Two double Arrays",
        "GroundTruth": [
            "java.util.Arrays.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1600": {
        "Query": "Compare Two float Arrays",
        "GroundTruth": [
            "java.util.Arrays.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1601": {
        "Query": "Compare date time using before method of Calendar",
        "GroundTruth": [
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "1602": {
        "Query": "Compare float type value",
        "GroundTruth": [
            "java.lang.Float.valueOf()",
            "java.lang.String.compareTo()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Float",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1603": {
        "Query": "Compare int Array and int Array Copy for equality",
        "GroundTruth": [
            "java.lang.System.arraycopy()",
            "java.util.Arrays.equals()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1604": {
        "Query": "Compare method for more then one Comparable object.",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1605": {
        "Query": "Compare paths by using the compareTo() method, which compares two abstract paths lexicographically.",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1606": {
        "Query": "Compare the BigDecimal first to the int second.",
        "GroundTruth": [
            "java.math.BigInteger.compareTo()",
            "java.math.BigDecimal.compareTo()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "1607": {
        "Query": "Compare the modifier of two elements",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1608": {
        "Query": "Compare two Date objects using after method",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "1609": {
        "Query": "Compare two Date objects using compareTo method",
        "GroundTruth": [
            "java.lang.Thread.sleep()",
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1610": {
        "Query": "Compare two arrays of classes and return true if they are identical.",
        "GroundTruth": [
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "1611": {
        "Query": "Compare two double arrays and return true if both not null, and are of equal length and contain equal values.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1612": {
        "Query": "Compare two file paths",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1613": {
        "Query": "Compares the two String for equality while ignoring the case.",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1614": {
        "Query": "Compares to double values and returns true if they should be treated as being equal.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Double.isNaN()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "1615": {
        "Query": "Compares two AnnotatedElement instances to see if they basically define the same data.",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.annotation.Annotation.equals()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "1616": {
        "Query": "Compares two Strings, returning true if they are equal ignoring the case.",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1617": {
        "Query": "Comparing Strings with equals and compareTo methods",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1618": {
        "Query": "Compile a pattern that can will match a string if the string contains any of the given terms.",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.lang.String.toString()",
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1619": {
        "Query": "Compile a pattern that can will match a string if the string equals any of the given terms.",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.lang.String.toString()",
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1620": {
        "Query": "Compile a pattern that can will match a string if the string starts with any of the given terms.",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.lang.String.toString()",
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1621": {
        "Query": "Compiling a Pattern with Multiple Flags",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "1622": {
        "Query": "Compound-interest calculations with for.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1623": {
        "Query": "Compute -log of a binomial of form p^n*(1-p)^(N-n)binomial(N,n).",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Double.isInfinite()",
            "java.lang.Double.isNaN()",
            "java.lang.Double.doubleToRawLongBits()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "1624": {
        "Query": "Compute a brighter color",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1625": {
        "Query": "Compute a darker color",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1626": {
        "Query": "Compute an approximation to the natural logarithm.",
        "GroundTruth": [
            "java.lang.Double.isInfinite()",
            "java.lang.Double.isNaN()",
            "java.lang.Double.doubleToRawLongBits()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "1627": {
        "Query": "Compute angle into image system basis where positive angle are defined in a ClockWise orientation",
        "GroundTruth": [
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1628": {
        "Query": "Compute determinant(A), where A = L*L^T via Cholesky decomposition is a symmetric, positive definite matrix.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1629": {
        "Query": "Compute hash code for two integers, a char, and a string with Objects.hash",
        "GroundTruth": [
            "java.util.Objects.hash()"
        ],
        "APIClasses": [
            "java.util.Objects"
        ],
        "Source": "Tutorial Websites"
    },
    "1630": {
        "Query": "Compute how much dialog can be put into the screen and returns a list with the coordinates from the dialog positions as Point objects.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "1631": {
        "Query": "Compute hyperbolic sine of a double.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Double.isNaN()",
            "java.lang.Double.isInfinite()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "1632": {
        "Query": "Compute matrix inversion of a symmetric, positive definite matrix by using the Cholesky Decomposition L of the matrix A.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1633": {
        "Query": "Compute network address from IP and mask",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1634": {
        "Query": "Compute the angle between the vector (1,0) and the given vector.",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()",
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1635": {
        "Query": "Compute the intersection of 2 lines described by a point and a vector.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1636": {
        "Query": "Compute the length of a vector",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1637": {
        "Query": "Compute the maximum (double) value of applying the given function to the given values using Lambda.",
        "GroundTruth": [
            "java.util.function.Function.apply()",
            "java.lang.Double.isNaN()",
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.util.function.Function",
            "java.lang.Double",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1638": {
        "Query": "Compute the md5 hash of a File.",
        "GroundTruth": [
            "java.security.MessageDigest.digest()",
            "java.security.MessageDigest.getInstance()"
        ],
        "APIClasses": [
            "java.security.MessageDigest"
        ],
        "Source": "Tutorial Websites"
    },
    "1639": {
        "Query": "Compute the md5 hash of a InputStream.",
        "GroundTruth": [
            "java.security.MessageDigest.getInstance()"
        ],
        "APIClasses": [
            "java.security.MessageDigest"
        ],
        "Source": "Tutorial Websites"
    },
    "1640": {
        "Query": "Compute the multi-exponent base^exponent (modulo modulus) .",
        "GroundTruth": [
            "java.math.BigInteger.mod()",
            "java.math.BigInteger.modPow()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "1641": {
        "Query": "Compute the standard deviations along each column",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1642": {
        "Query": "Compute the standard deviations along each row",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1643": {
        "Query": "Compute the weighted geometric mean.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1644": {
        "Query": "Compute the x and y configured norms of all other points from the data points at time step t.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1645": {
        "Query": "Compute two arbitrary vectors perpendicular to the given normalized vector (x, y, z), and store them in dest1 and dest2, respectively.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1646": {
        "Query": "Computes a HMAC-SHA1 message digest of a given message, appends it to the message, returns the output.",
        "GroundTruth": [
            "javax.crypto.Mac.getInstance()",
            "javax.crypto.Mac.init()",
            "javax.crypto.Mac.doFinal()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "javax.crypto.Mac",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1647": {
        "Query": "Computes a fast approximation to Math.pow(a, b).",
        "GroundTruth": [
            "java.lang.Float.floatToRawIntBits()",
            "java.lang.Float.intBitsToFloat()"
        ],
        "APIClasses": [
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "1648": {
        "Query": "Computes a logarithmic interpolation between two values.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1649": {
        "Query": "Computes an appropriate foreground color (either white or black) for the given background color.",
        "GroundTruth": [
            "java.awt.Color.getRGBColorComponents()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1650": {
        "Query": "Computes an approximation of the distance of two points on the earth in meters using the mean radius of the earth.",
        "GroundTruth": [
            "java.lang.Math.toRadians()",
            "java.lang.Math.sin()",
            "java.lang.Math.cos()",
            "java.lang.Math.atan2()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1651": {
        "Query": "Computes an inverse logarithmic interpolation, returning an interpolation fraction.",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1652": {
        "Query": "Computes and returns intervals a quadratic equation a*x^2+b*x+c=0 is positive.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1653": {
        "Query": "Computes arccosine for some cos(x).",
        "GroundTruth": [
            "java.lang.Math.toDegrees()",
            "java.lang.Math.acos()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1654": {
        "Query": "Computes cosine for some angle represented in degrees [0, 360].",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.toRadians()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1655": {
        "Query": "Computes minimum distance from line to point",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1656": {
        "Query": "Computes several visually distinct colors such that they are equally spaced apart in the HSB color space.",
        "GroundTruth": [
            "java.awt.Color.getHSBColor()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1657": {
        "Query": "Computes the (bias-corrected sample) standard deviation of an array.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1658": {
        "Query": "Computes the (linear) correlation between two arrays.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1659": {
        "Query": "Computes the Age from the birthday till the compute Date object.",
        "GroundTruth": [
            "java.util.Calendar.getTime()",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "1660": {
        "Query": "Computes the L2 norm of an array (Euclidean norm or \"length\").",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1661": {
        "Query": "Computes the N-D unit vector in the direction of the vector supplied.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1662": {
        "Query": "Computes the angle between two straight lines defined by three points Line 1: p1-p2 and line 2: p2-p3.",
        "GroundTruth": [
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1663": {
        "Query": "Computes the binary logarithm of an integer.",
        "GroundTruth": [
            "java.lang.Integer.numberOfLeadingZeros()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1664": {
        "Query": "Computes the correlation between two arrays of the same length, p and q.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1665": {
        "Query": "Computes the distance in kilometers between two points on Earth.",
        "GroundTruth": [
            "java.lang.Math.toRadians()",
            "java.lang.Math.acos()",
            "java.lang.Math.sin()",
            "java.lang.Math.cos()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1666": {
        "Query": "Computes the distance of two points on a sphere.",
        "GroundTruth": [
            "java.lang.Math.toRadians()",
            "java.lang.Math.sin()",
            "java.lang.Math.cos()",
            "java.lang.Math.atan2()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1667": {
        "Query": "Computes the euclidean distance between 2 double value lists",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1668": {
        "Query": "Computes the factorial of some integer value.",
        "GroundTruth": [
            "java.math.BigInteger.valueOf()"
        ],
        "APIClasses": [
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "1669": {
        "Query": "Computes the logarithm of the given value to the base of 2, rounded down.",
        "GroundTruth": [
            "java.lang.Integer.numberOfLeadingZeros()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1670": {
        "Query": "Computes the logarithm of the given value to the base of 2.",
        "GroundTruth": [
            "java.lang.Integer.numberOfLeadingZeros()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1671": {
        "Query": "Computes the luminance difference of two colors (a value in range 0-255).",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1672": {
        "Query": "Computes the luminance value of a color (a value in range 0-255).",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1673": {
        "Query": "Computes the magnitude of an N-D vector.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1674": {
        "Query": "Computes the maximum bounds of the current screen device.",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getMaximumWindowBounds()",
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "1675": {
        "Query": "Computes the median of an array.",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1676": {
        "Query": "Computes the normalized confusion matrix for two vectors.",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1677": {
        "Query": "Computes the percent difference between two non-negative numbers.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1678": {
        "Query": "Computes the point nearest to the specified point p3 on the line defined by the two points p1 and p2.",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1679": {
        "Query": "Computes the standard deviation of a set, given the average value.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1680": {
        "Query": "Computes the standard deviation of the values in the matrix.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1681": {
        "Query": "Computes the weighted average of scores: -> log( w0 * exp(score[0]) + w1 exp(score[1]) + w1 * exp(score[2]) + ..",
        "GroundTruth": [
            "java.lang.Math.max()",
            "java.lang.Math.exp()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1682": {
        "Query": "Computing the norm as the Euclidean norm.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1683": {
        "Query": "Computing the norm as the Euclidean norm; if it becomes clear that norm will be larger than limit, then return Double.POSITIVE_INFINITY immediately.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1684": {
        "Query": "Concatenate 2 arrays into 1.",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.lang.Object.getClass()",
            "java.lang.Class.getComponentType()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.Object",
            "java.lang.Class",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1685": {
        "Query": "Concatenate the given String arrays into one, with overlapping array elements included twice.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1686": {
        "Query": "Concatenate two arrays to one",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1687": {
        "Query": "Concatenates and returns the given byte arrays.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1688": {
        "Query": "Concatenates two byte arrays.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1689": {
        "Query": "Connect to Mysql database",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "1690": {
        "Query": "Connecting to an Oracle Database",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "1691": {
        "Query": "Constructing a Path Between Two Locations",
        "GroundTruth": [
            "java.nio.file.Paths.get()"
        ],
        "APIClasses": [
            "java.nio.file.Paths"
        ],
        "Source": "Tutorial Websites"
    },
    "1692": {
        "Query": "Constructor will create a connection to the MySQL Database.",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "1693": {
        "Query": "Constructs a AES_KEY_LEN byte AES key from a given seed",
        "GroundTruth": [
            "java.security.MessageDigest.getInstance()",
            "java.security.MessageDigest.digest()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.security.MessageDigest",
            "java.security.MessageDigest",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1694": {
        "Query": "Constructs a new BitSet of given size whose set bits are specified by indices .",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.util.BitSet.get()",
            "java.util.BitSet.set()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.BitSet"
        ],
        "Source": "Tutorial Websites"
    },
    "1695": {
        "Query": "Constructs a new synchronized List based on a LinkedList .",
        "GroundTruth": [
            "java.util.Collections.synchronizedList()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "1696": {
        "Query": "Constructs a new synchronized Set based on a HashSet .",
        "GroundTruth": [
            "java.util.Collections.synchronizedSet()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "1697": {
        "Query": "Constructs an InetAddress object for the IP address specified in the network-byte-order array.",
        "GroundTruth": [
            "java.net.InetAddress.getByName()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.net.InetAddress",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "1698": {
        "Query": "Consume each element in List",
        "GroundTruth": [
            "java.util.function.Consumer.accept()"
        ],
        "APIClasses": [
            "java.util.function.Consumer"
        ],
        "Source": "Tutorial Websites"
    },
    "1699": {
        "Query": "Continue With Label Demo",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1700": {
        "Query": "Continue to next for iteration",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1701": {
        "Query": "Controlling how a file is copied",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.createFile()",
            "java.nio.file.Files.copy()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "1702": {
        "Query": "Controlling the print dialog box type",
        "GroundTruth": [
            "javax.swing.SwingUtilities.invokeLater()",
            "java.awt.Window.setVisible()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "1703": {
        "Query": "Convenience function for determining Component Orientation.",
        "GroundTruth": [
            "java.awt.Component.getComponentOrientation()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "1704": {
        "Query": "Convenience method returning if the provided method returns boolean.",
        "GroundTruth": [
            "java.lang.reflect.Method.getReturnType()",
            "java.lang.String.equals()",
            "javax.sound.sampled.AudioFileFormat.Type.toString()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method",
            "java.lang.String",
            "javax.sound.sampled.AudioFileFormat.Type"
        ],
        "Source": "Tutorial Websites"
    },
    "1705": {
        "Query": "Convenience method returning if the provided method returns void.",
        "GroundTruth": [
            "java.lang.reflect.Method.getReturnType()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method"
        ],
        "Source": "Tutorial Websites"
    },
    "1706": {
        "Query": "Convenience method to generate the HMAC-SHA1 signatures we are using in this application.",
        "GroundTruth": [
            "javax.crypto.Mac.getInstance()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "javax.crypto.Mac",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1707": {
        "Query": "Convenience method to return if the provided element represents a method (otherwise a field).",
        "GroundTruth": [
            "java.lang.Class.isInstance()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "1708": {
        "Query": "Convenience wrapper for System.arraycopy().",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1709": {
        "Query": "Convenient call to load a properties file from the provided file",
        "GroundTruth": [
            "java.io.Reader.close()",
            "java.util.Properties.load()"
        ],
        "APIClasses": [
            "java.io.Reader",
            "java.util.Properties"
        ],
        "Source": "Tutorial Websites"
    },
    "1710": {
        "Query": "Convert AWT color to CSS color.",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.awt.Color",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1711": {
        "Query": "Convert Array To Map",
        "GroundTruth": [
            "java.util.Map.put()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "1712": {
        "Query": "Convert Array as List",
        "GroundTruth": [
            "java.util.Collections.emptyList()",
            "java.util.Collections.addAll()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1713": {
        "Query": "Convert Array as Set via List",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1714": {
        "Query": "Convert Array of string as Immutable Set",
        "GroundTruth": [
            "java.util.Collections.singleton()",
            "java.util.Arrays.asList()",
            "java.util.Collections.unmodifiableSet()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1715": {
        "Query": "Convert ArrayList to String Array",
        "GroundTruth": [
            "java.util.Arrays.copyOf()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1716": {
        "Query": "Convert BitSet to Int",
        "GroundTruth": [
            "java.util.BitSet.length()",
            "java.util.BitSet.get()"
        ],
        "APIClasses": [
            "java.util.BitSet"
        ],
        "Source": "Tutorial Websites"
    },
    "1717": {
        "Query": "Convert Boolean object to String object",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1718": {
        "Query": "Convert Boolean object to boolean primitive",
        "GroundTruth": [
            "java.lang.Boolean.booleanValue()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "1719": {
        "Query": "Convert BufferedImage to byte array",
        "GroundTruth": [
            "javax.imageio.ImageIO.write()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "1720": {
        "Query": "Convert Byte Array To InputStream",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1721": {
        "Query": "Convert Byte object to String object",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1722": {
        "Query": "Convert CSV TO weka ARFF",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.awt.FileDialog.setFile()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.awt.FileDialog"
        ],
        "Source": "Tutorial Websites"
    },
    "1723": {
        "Query": "Convert CSV to ARFF for weka",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.lang.String.toString()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1724": {
        "Query": "Convert Collection as List",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.ArrayList.addAll()",
            "java.util.Objects.isNull()",
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.ArrayList",
            "java.util.Objects",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "1725": {
        "Query": "Convert Collection as Set",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.ArrayList.addAll()",
            "java.util.Objects.isNull()",
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.ArrayList",
            "java.util.Objects",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "1726": {
        "Query": "Convert Collection to ArrayList",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1727": {
        "Query": "Convert Collection to HashSet",
        "GroundTruth": [
            "java.util.Set.add()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "1728": {
        "Query": "Convert Collection to String With Delimiter",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.isEmpty()",
            "java.util.Collection.size()",
            "java.lang.StringBuilder.append()",
            "java.lang.StringBuilder.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection",
            "java.lang.StringBuilder"
        ],
        "Source": "Tutorial Websites"
    },
    "1729": {
        "Query": "Convert Date To String in MM-dd-yyyy format",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.util.logging.SimpleFormatter.format()",
            "java.util.logging.XMLFormatter.format()",
            "java.util.logging.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.util.logging.SimpleFormatter",
            "java.util.logging.XMLFormatter",
            "java.util.logging.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "1730": {
        "Query": "Convert Date into XMLGregorianCalendar.",
        "GroundTruth": [
            "java.util.Calendar.setTimeInMillis()",
            "java.util.Date.getTime()",
            "javax.xml.datatype.DatatypeFactory.newInstance()",
            "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarDate()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Date",
            "javax.xml.datatype.DatatypeFactory",
            "javax.xml.datatype.DatatypeFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "1731": {
        "Query": "Convert Date into milliseconds",
        "GroundTruth": [
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "1732": {
        "Query": "Convert Double object to String object",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1733": {
        "Query": "Convert Float Object to String Object",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1734": {
        "Query": "Convert HSB To RGB Color",
        "GroundTruth": [
            "java.awt.Color.HSBtoRGB()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1735": {
        "Query": "Convert Integer to String",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1736": {
        "Query": "Convert Iterable as Set",
        "GroundTruth": [
            "java.util.Set.add()",
            "java.util.Collections.addAll()"
        ],
        "APIClasses": [
            "java.util.Set",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "1737": {
        "Query": "Convert LdapName to String",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1738": {
        "Query": "Convert List of Object to Set of Object",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1739": {
        "Query": "Convert List to Set",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Set.contains()",
            "java.util.Set.add()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "1740": {
        "Query": "Convert List<Integer> to Array int[]",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1741": {
        "Query": "Convert LocalDateTime to java.util.Date",
        "GroundTruth": [
            "java.util.Date.from()",
            "java.time.LocalDateTime.atZone()",
            "java.time.chrono.ChronoZonedDateTime.toInstant()",
            "java.time.chrono.ChronoLocalDateTime.toInstant()",
            "java.time.OffsetDateTime.toInstant()"
        ],
        "APIClasses": [
            "java.util.Date",
            "java.time.LocalDateTime",
            "java.time.chrono.ChronoZonedDateTime",
            "java.time.chrono.ChronoLocalDateTime",
            "java.time.OffsetDateTime"
        ],
        "Source": "Tutorial Websites"
    },
    "1742": {
        "Query": "Convert Long object to String",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1743": {
        "Query": "Convert MIDI ShortMessage into a hex-dump string.",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getStatus()",
            "javax.sound.midi.ShortMessage.getData1()",
            "javax.sound.midi.ShortMessage.getData2()",
            "java.lang.Integer.toHexString()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.ShortMessage",
            "javax.sound.midi.ShortMessage",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1744": {
        "Query": "Convert MIDI SysexMessage into a hex-dump string.",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getMessage()",
            "javax.sound.midi.MidiEvent.getMessage()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.MidiEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "1745": {
        "Query": "Convert Node to XML Element",
        "GroundTruth": [
            "org.w3c.dom.Node.getNodeType()",
            "org.w3c.dom.Node.getNodeName()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "1746": {
        "Query": "Convert Object Array to Set",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1747": {
        "Query": "Convert Object to Iterable",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.reflect.Array.getLength()",
            "java.lang.reflect.Array.get()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "1748": {
        "Query": "Convert RGB To HSB Color",
        "GroundTruth": [
            "java.awt.Color.RGBtoHSB()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1749": {
        "Query": "Convert RGB color model to a hexidecimal (represented as an integer) format",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1750": {
        "Query": "Convert Serialized byte array to Object",
        "GroundTruth": [
            "java.util.logging.Logger.getLogger()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "1751": {
        "Query": "Convert Short object to String object",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1752": {
        "Query": "Convert String Array To List",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.size()",
            "java.util.List.get()",
            "java.util.Collections.addAll()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "1753": {
        "Query": "Convert String As Enum Type",
        "GroundTruth": [
            "java.lang.String.isEmpty()",
            "java.lang.Enum.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Enum"
        ],
        "Source": "Tutorial Websites"
    },
    "1754": {
        "Query": "Convert String Object to Boolean Object",
        "GroundTruth": [
            "java.lang.Boolean.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "1755": {
        "Query": "Convert String as Bin byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.length()",
            "java.lang.Integer.parseInt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1756": {
        "Query": "Convert String in gb To Utf",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1757": {
        "Query": "Convert String to Alpha Number",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1758": {
        "Query": "Convert String to Ascii Bytes array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.nio.charset.Charset.forName()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.nio.charset.Charset"
        ],
        "Source": "Tutorial Websites"
    },
    "1759": {
        "Query": "Convert String to Boolean value",
        "GroundTruth": [
            "java.lang.Boolean.parseBoolean()",
            "java.lang.Throwable.printStackTrace()"
        ],
        "APIClasses": [
            "java.lang.Boolean",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "1760": {
        "Query": "Convert String to Byte",
        "GroundTruth": [
            "java.lang.Byte.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Byte"
        ],
        "Source": "Tutorial Websites"
    },
    "1761": {
        "Query": "Convert String to CRC32",
        "GroundTruth": [
            "java.lang.String.getBytes()",
            "java.lang.Long.toHexString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "1762": {
        "Query": "Convert String to Character",
        "GroundTruth": [
            "java.lang.Character.valueOf()",
            "java.lang.StringBuilder.charAt()",
            "java.lang.StringBuffer.charAt()",
            "java.lang.CharSequence.charAt()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.Character",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1763": {
        "Query": "Convert String to Character Array",
        "GroundTruth": [
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1764": {
        "Query": "Convert String to Float",
        "GroundTruth": [
            "java.lang.Float.valueOf()",
            "java.lang.Float.parseFloat()"
        ],
        "APIClasses": [
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "1765": {
        "Query": "Convert String to Integer object",
        "GroundTruth": [
            "java.lang.Integer.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1766": {
        "Query": "Convert String to Long Type",
        "GroundTruth": [
            "java.lang.Long.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "1767": {
        "Query": "Convert String to Lower Case",
        "GroundTruth": [
            "java.lang.String.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1768": {
        "Query": "Convert String to Short",
        "GroundTruth": [
            "java.lang.Short.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Short"
        ],
        "Source": "Tutorial Websites"
    },
    "1769": {
        "Query": "Convert String to String Array with split method",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1770": {
        "Query": "Convert String to int",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1771": {
        "Query": "Convert String to java.sql.Date",
        "GroundTruth": [
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "1772": {
        "Query": "Convert String to long",
        "GroundTruth": [
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "1773": {
        "Query": "Convert String to primitive byte",
        "GroundTruth": [
            "java.lang.Byte.parseByte()"
        ],
        "APIClasses": [
            "java.lang.Byte"
        ],
        "Source": "Tutorial Websites"
    },
    "1774": {
        "Query": "Convert String to short primitive",
        "GroundTruth": [
            "java.lang.Short.parseShort()"
        ],
        "APIClasses": [
            "java.lang.Short"
        ],
        "Source": "Tutorial Websites"
    },
    "1775": {
        "Query": "Convert UTF8 bytes into UTF16 characters.",
        "GroundTruth": [
            "java.awt.Rectangle.grow()"
        ],
        "APIClasses": [
            "java.awt.Rectangle"
        ],
        "Source": "Tutorial Websites"
    },
    "1776": {
        "Query": "Convert XML dom To Text",
        "GroundTruth": [
            "javax.xml.transform.Transformer.transform()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.transform.Transformer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1777": {
        "Query": "Convert XML to Object using JAXB",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext"
        ],
        "Source": "Tutorial Websites"
    },
    "1778": {
        "Query": "Convert a BufferedImage of any type, to BufferedImage of a specified type.",
        "GroundTruth": [
            "java.awt.Image.getGraphics()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "1779": {
        "Query": "Convert a Collection of T to a sorted List of T.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "1780": {
        "Query": "Convert a FASTQ string to a byte array of phred scores.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1781": {
        "Query": "Convert a Java int to a 4-byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.nio.ByteBuffer.allocate()",
            "java.nio.ByteBuffer.putInt()",
            "java.nio.ByteBuffer.array()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1782": {
        "Query": "Convert a Java long to a 8-byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.nio.ByteBuffer.allocate()",
            "java.nio.ByteBuffer.putLong()",
            "java.nio.ByteBuffer.array()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1783": {
        "Query": "Convert a Java short to a 2-byte array.",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocate()",
            "java.nio.ByteBuffer.putShort()",
            "java.nio.ByteBuffer.array()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1784": {
        "Query": "Convert a List into an Object array with null check.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.util.Vector.toArray()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Vector"
        ],
        "Source": "Tutorial Websites"
    },
    "1785": {
        "Query": "Convert a String to a char array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.length()",
            "java.lang.String.getChars()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1786": {
        "Query": "Convert a byte array into a BigInteger .",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1787": {
        "Query": "Convert a byte array to a Java int.",
        "GroundTruth": [
            "java.nio.ByteBuffer.wrap()",
            "java.nio.ByteBuffer.getInt()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1788": {
        "Query": "Convert a byte array to a Java long.",
        "GroundTruth": [
            "java.nio.ByteBuffer.wrap()",
            "java.nio.ByteBuffer.getLong()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1789": {
        "Query": "Convert a byte array to a Java short.",
        "GroundTruth": [
            "java.nio.ByteBuffer.wrap()",
            "java.nio.ByteBuffer.getShort()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1790": {
        "Query": "Convert a byte array to a concise, readable string suitable for use in toString methods of the *Stat classes.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1791": {
        "Query": "Convert a byte array to hexadecimal",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1792": {
        "Query": "Convert a calendar to a java.sql.Date.",
        "GroundTruth": [
            "java.util.Calendar.getTimeInMillis()",
            "java.sql.Date.valueOf()",
            "java.time.LocalDateTime.toLocalDate()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.sql.Date",
            "java.time.LocalDateTime",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "1793": {
        "Query": "Convert a camel-case string to underscores",
        "GroundTruth": [
            "java.lang.String.replaceAll()",
            "java.lang.String.toLowerCase()",
            "java.lang.Character.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1794": {
        "Query": "Convert a color to an RGB value.",
        "GroundTruth": [
            "java.lang.Math.round()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1795": {
        "Query": "Convert a color to an RGBA value.",
        "GroundTruth": [
            "java.lang.Math.round()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.awt.Color.getAlpha()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1796": {
        "Query": "Convert a double to a byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1797": {
        "Query": "Convert a double value into a string with the maximal allowed length",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence"
        ],
        "Source": "Tutorial Websites"
    },
    "1798": {
        "Query": "Convert a hex representation to a Java int.",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1799": {
        "Query": "Convert a hex representation to a Java long.",
        "GroundTruth": [
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "1800": {
        "Query": "Convert a hex representation to a Java short.",
        "GroundTruth": [
            "java.lang.Short.parseShort()"
        ],
        "APIClasses": [
            "java.lang.Short"
        ],
        "Source": "Tutorial Websites"
    },
    "1801": {
        "Query": "Convert a long to a hex representation.",
        "GroundTruth": [
            "java.lang.Long.toHexString()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "1802": {
        "Query": "Convert a number into a string of nucleotide codes.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1803": {
        "Query": "Convert a short to a hex representation.",
        "GroundTruth": [
            "java.lang.Integer.toHexString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1804": {
        "Query": "Convert a space-separated string into an array of strings.",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1805": {
        "Query": "Convert a string into a Color object",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.substring()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1806": {
        "Query": "Convert a string to html content, Same as the xml version except that spaces and tabs are converted.",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1807": {
        "Query": "Convert a vararg list of items into a List.",
        "GroundTruth": [
            "java.util.List.add()",
            "java.util.List.addAll()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "1808": {
        "Query": "Convert a varargs list of items into a Set while preserving order.",
        "GroundTruth": [
            "java.util.Set.add()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "1809": {
        "Query": "Convert an IP address stored in an int to its string representation.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1810": {
        "Query": "Convert an Image into a TYPE_INT_ARGB BufferedImage.",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "1811": {
        "Query": "Convert an RDN to its String representation and vice-versa",
        "GroundTruth": [
            "javax.naming.ldap.Rdn.toString()",
            "javax.naming.ldap.Rdn.equals()"
        ],
        "APIClasses": [
            "javax.naming.ldap.Rdn"
        ],
        "Source": "Tutorial Websites"
    },
    "1812": {
        "Query": "Convert an array of MIDI SysexMessage to a byte array.",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getLength()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1813": {
        "Query": "Convert an array of bytes into an array of ints.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1814": {
        "Query": "Convert an awt-color into an html-color-string.",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1815": {
        "Query": "Convert an html-color-code to an AWT-color.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1816": {
        "Query": "Convert an int to a hex representation.",
        "GroundTruth": [
            "java.lang.Integer.toHexString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1817": {
        "Query": "Convert an integer into a hex-string.",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1818": {
        "Query": "Convert an integer into a six bit binary string.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1819": {
        "Query": "Convert an integer into an IPv4 INET address.",
        "GroundTruth": [
            "java.net.InetAddress.getByAddress()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "1820": {
        "Query": "Convert an integer to a byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1821": {
        "Query": "Convert an object array to a string, suitable for use in toString methods of the *Stat classes.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1822": {
        "Query": "Convert an xml Document object to a String",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1823": {
        "Query": "Convert any array To List",
        "GroundTruth": [
            "java.lang.reflect.Array.getLength()",
            "java.lang.reflect.Array.get()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "1824": {
        "Query": "Convert array and Iterator as List",
        "GroundTruth": [
            "java.util.List.add()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.util.Iterator"
        ],
        "Source": "Tutorial Websites"
    },
    "1825": {
        "Query": "Convert array as Collection",
        "GroundTruth": [
            "java.util.Collection.size()",
            "java.util.ArrayList.addAll()",
            "java.util.Arrays.asList()",
            "java.util.Objects.isNull()",
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Collection",
            "java.util.ArrayList",
            "java.util.Arrays",
            "java.util.Objects"
        ],
        "Source": "Tutorial Websites"
    },
    "1826": {
        "Query": "Convert binary number to decimal number",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1827": {
        "Query": "Convert boolean Primitive to Boolean object",
        "GroundTruth": [
            "java.lang.Boolean.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "1828": {
        "Query": "Convert byte array to BufferedImage",
        "GroundTruth": [
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "1829": {
        "Query": "Convert byte array to HEX format.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1830": {
        "Query": "Convert byte array to double",
        "GroundTruth": [
            "java.lang.Double.longBitsToDouble()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "1831": {
        "Query": "Convert byte array to double value.",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocate()",
            "java.lang.reflect.Array.getDouble()",
            "java.lang.reflect.Field.getDouble()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer",
            "java.lang.reflect.Array",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "1832": {
        "Query": "Convert byte array to float",
        "GroundTruth": [
            "java.lang.Float.intBitsToFloat()"
        ],
        "APIClasses": [
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "1833": {
        "Query": "Convert byte array to reversed double value.",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocate()",
            "java.lang.reflect.Array.getDouble()",
            "java.lang.reflect.Field.getDouble()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer",
            "java.lang.reflect.Array",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "1834": {
        "Query": "Convert char array to Byte Array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1835": {
        "Query": "Convert date string from one format to another format using SimpleDateFormat",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1836": {
        "Query": "Convert decimal integer to binary number",
        "GroundTruth": [
            "java.lang.Integer.toBinaryString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1837": {
        "Query": "Convert decimal integer to hexadecimal number",
        "GroundTruth": [
            "java.lang.Integer.toHexString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1838": {
        "Query": "Convert double array to Float Array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1839": {
        "Query": "Convert double value to String",
        "GroundTruth": [
            "java.lang.Double.toString()",
            "java.lang.String.indexOf()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1840": {
        "Query": "Convert double value to byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.nio.ByteBuffer.allocate()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1841": {
        "Query": "Convert double value to reversed byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.nio.ByteBuffer.allocate()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1842": {
        "Query": "Convert energy from db scale to linear scale.",
        "GroundTruth": [
            "java.lang.Double.isNaN()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1843": {
        "Query": "Convert float To Byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Float.floatToRawIntBits()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "1844": {
        "Query": "Convert hex String To Byte Array",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.StringBuilder.indexOf()",
            "java.lang.StringBuffer.indexOf()",
            "java.lang.String.indexOf()",
            "java.lang.Character.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1845": {
        "Query": "Convert hexadecimal number to decimal number",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1846": {
        "Query": "Convert int to BitSet",
        "GroundTruth": [
            "java.util.BitSet.set()"
        ],
        "APIClasses": [
            "java.util.BitSet"
        ],
        "Source": "Tutorial Websites"
    },
    "1847": {
        "Query": "Convert int to String",
        "GroundTruth": [
            "java.lang.Integer.toString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1848": {
        "Query": "Convert int to byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Float.floatToRawIntBits()",
            "java.lang.Double.doubleToRawLongBits()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Float",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "1849": {
        "Query": "Convert integer to Binary String by length",
        "GroundTruth": [
            "java.lang.Integer.toBinaryString()",
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1850": {
        "Query": "Convert list of arrays of objects to array of arrays of objects.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Arrays.toString()",
            "java.lang.reflect.Array.newInstance()",
            "java.util.List.size()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.reflect.Array",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "1851": {
        "Query": "Convert list to Array",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1852": {
        "Query": "Convert method name to field name",
        "GroundTruth": [
            "java.lang.String.startsWith()",
            "java.lang.String.substring()",
            "java.lang.String.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1853": {
        "Query": "Convert number of seconds to hour:minute:second format.",
        "GroundTruth": [
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1854": {
        "Query": "Convert object List To Object ArrayList",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1855": {
        "Query": "Convert object To XML by JAXB",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()",
            "javax.xml.bind.JAXBContext.createMarshaller()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext",
            "javax.xml.bind.JAXBContext",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1856": {
        "Query": "Convert octal number to decimal number",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "1857": {
        "Query": "Convert pressure as inch to millibar.",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1858": {
        "Query": "Convert pressure as millibar to inch Hg.",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1859": {
        "Query": "Convert provided hex string representation in format AA:FF:47:11 byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "javax.xml.bind.DatatypeConverter.parseHexBinary()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "javax.xml.bind.DatatypeConverter",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1860": {
        "Query": "Convert set to list",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "1861": {
        "Query": "Convert string as format \"yyyy-MM-dd HH:mm:ss\" or \"yyyy-MM-dd HH:mm\" or \"yyyy-MM-dd\" to java.util.Date.",
        "GroundTruth": [
            "java.util.Locale.LanguageRange.parse()",
            "java.util.Date.parse()",
            "java.util.logging.Level.parse()"
        ],
        "APIClasses": [
            "java.util.Locale.LanguageRange",
            "java.util.Date",
            "java.util.logging.Level"
        ],
        "Source": "Tutorial Websites"
    },
    "1862": {
        "Query": "Convert string to byte array by encoding",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1863": {
        "Query": "Convert the given number of bytes to human-readable String format.",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.String.charAt()",
            "java.lang.Math.pow()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1864": {
        "Query": "Convert the given time duration into a human-readable string format.",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1865": {
        "Query": "Convert the supplied array into a List.",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1866": {
        "Query": "Convert the unbuffered stream to a buffered stream",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.newInputStream()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "1867": {
        "Query": "Convert to XMLGregorianCalendar with date and time.",
        "GroundTruth": [
            "java.util.Calendar.setTime()",
            "java.text.DateFormat.setCalendar()",
            "javax.xml.datatype.DatatypeFactory.newInstance()",
            "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.text.DateFormat",
            "javax.xml.datatype.DatatypeFactory",
            "javax.xml.datatype.DatatypeFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "1868": {
        "Query": "Convert to XMLGregorianCalendar with date only (time set to zero).",
        "GroundTruth": [
            "java.util.Calendar.setTime()",
            "java.text.DateFormat.setCalendar()",
            "javax.xml.datatype.DatatypeFactory.newInstance()",
            "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.text.DateFormat",
            "javax.xml.datatype.DatatypeFactory",
            "javax.xml.datatype.DatatypeFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "1869": {
        "Query": "Convert to base 64 code using apache common codec",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1870": {
        "Query": "Convert value array to Double array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toString()",
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1871": {
        "Query": "Convert value to String with Objects.toString",
        "GroundTruth": [
            "java.util.Objects.toString()"
        ],
        "APIClasses": [
            "java.util.Objects"
        ],
        "Source": "Tutorial Websites"
    },
    "1872": {
        "Query": "Convert variable length array to Vector",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1873": {
        "Query": "Convert variable length array to list",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1874": {
        "Query": "Convert velocity meter/second to miles/hour.",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1875": {
        "Query": "Convert xml String To Object using JAXB",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext"
        ],
        "Source": "Tutorial Websites"
    },
    "1876": {
        "Query": "Convert youtube corresponding default image video url",
        "GroundTruth": [
            "java.lang.String.startsWith()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1877": {
        "Query": "Converting Between RGB and HSB Colors",
        "GroundTruth": [
            "java.awt.Color.RGBtoHSB()",
            "java.awt.Color.HSBtoRGB()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1878": {
        "Query": "Converting Between a BitSet and a Byte Array",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1879": {
        "Query": "Converting Between a ByteBuffer an a Byte Array",
        "GroundTruth": [
            "java.nio.ByteBuffer.wrap()",
            "java.nio.Buffer.remaining()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer",
            "java.nio.Buffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1880": {
        "Query": "Converting Between a Filename Path and a URL",
        "GroundTruth": [
            "java.io.File.toURL()",
            "java.net.URL.getFile()",
            "java.net.URL.openStream()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "1881": {
        "Query": "Converting Between a URL and a URI",
        "GroundTruth": [
            "java.net.URI.toURL()",
            "java.net.URL.toString()"
        ],
        "APIClasses": [
            "java.net.URI",
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "1882": {
        "Query": "Converting Between javax and java X509Certificates",
        "GroundTruth": [
            "java.security.cert.CertificateFactory.getInstance()",
            "java.security.cert.CertificateFactory.generateCertificate()",
            "javax.security.cert.X509Certificate.getInstance()"
        ],
        "APIClasses": [
            "java.security.cert.CertificateFactory",
            "java.security.cert.CertificateFactory",
            "javax.security.cert.X509Certificate"
        ],
        "Source": "Tutorial Websites"
    },
    "1883": {
        "Query": "Converting String into BigDecimal",
        "GroundTruth": [
            "java.text.DecimalFormat.setParseBigDecimal()",
            "java.text.DecimalFormat.isParseBigDecimal()",
            "java.math.BigInteger.toString()",
            "java.math.BigDecimal.toString()",
            "java.math.MathContext.toString()"
        ],
        "APIClasses": [
            "java.text.DecimalFormat",
            "java.text.DecimalFormat",
            "java.math.BigInteger",
            "java.math.BigDecimal",
            "java.math.MathContext"
        ],
        "Source": "Tutorial Websites"
    },
    "1884": {
        "Query": "Converting Unicode Characters to Digits",
        "GroundTruth": [
            "java.lang.Character.isDigit()",
            "java.lang.Character.digit()",
            "java.lang.Character.getName()"
        ],
        "APIClasses": [
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1885": {
        "Query": "Converting a 56-bit Value to a DES Key",
        "GroundTruth": [
            "javax.crypto.spec.DESKeySpec.isParityAdjusted()"
        ],
        "APIClasses": [
            "javax.crypto.spec.DESKeySpec"
        ],
        "Source": "Tutorial Websites"
    },
    "1886": {
        "Query": "Converting a Buffered Image to an Image",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.image.BufferedImage.getSource()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "1887": {
        "Query": "Converting a Colored Buffered Image to Gray",
        "GroundTruth": [
            "java.awt.color.ColorSpace.getInstance()"
        ],
        "APIClasses": [
            "java.awt.color.ColorSpace"
        ],
        "Source": "Tutorial Websites"
    },
    "1888": {
        "Query": "Converting a Date to an Instant and Vice Versa",
        "GroundTruth": [
            "java.util.Date.from()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "1889": {
        "Query": "Converting a Datetime in a Time Zone to Another Time Zone",
        "GroundTruth": [
            "java.time.LocalDateTime.of()",
            "java.time.ZoneId.of()",
            "java.time.ZonedDateTime.of()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime",
            "java.time.ZoneId",
            "java.time.ZonedDateTime"
        ],
        "Source": "Tutorial Websites"
    },
    "1890": {
        "Query": "Converting a Node in a JTree Component to a TreePath",
        "GroundTruth": [
            "java.util.List.add()",
            "java.util.Collections.reverse()",
            "java.util.List.toArray()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "1891": {
        "Query": "Converting an Array to a Collection",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1892": {
        "Query": "Converting arrays to strings",
        "GroundTruth": [
            "java.lang.Math.random()",
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1893": {
        "Query": "Converting between path types",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Path.toUri()",
            "java.nio.file.Path.toAbsolutePath()",
            "java.nio.file.Path.toRealPath()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "1894": {
        "Query": "Converting to and from a String",
        "GroundTruth": [
            "java.lang.Double.parseDouble()",
            "java.lang.String.valueOf()",
            "java.lang.Double.toString()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1895": {
        "Query": "Converts (re samples and mono to/from stereo) audio data.",
        "GroundTruth": [
            "java.lang.System.arraycopy()",
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1896": {
        "Query": "Converts SAC HSLA (or HSL) LexicalUnit value to RGBA",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1897": {
        "Query": "Converts a 4x4 2D byte array to a concatenated linear byte array",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1898": {
        "Query": "Converts a BigInteger array into an integer array",
        "GroundTruth": [
            "java.math.BigInteger.intValue()",
            "java.math.BigDecimal.intValue()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "1899": {
        "Query": "Converts a BigInteger array into an integer array, reducing all BigIntegers mod q.",
        "GroundTruth": [
            "java.math.BigInteger.valueOf()",
            "java.math.BigInteger.mod()",
            "java.math.BigInteger.intValue()",
            "java.math.BigDecimal.intValue()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "1900": {
        "Query": "Converts a BigInteger into a hex string.",
        "GroundTruth": [
            "java.math.BigInteger.toByteArray()"
        ],
        "APIClasses": [
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "1901": {
        "Query": "Converts a BigInteger, e.g.",
        "GroundTruth": [
            "java.math.BigInteger.toByteArray()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1902": {
        "Query": "Converts a Boolean to a String returning 'on', 'off', or null.",
        "GroundTruth": [
            "java.lang.Boolean.booleanValue()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "1903": {
        "Query": "Converts a Boolean to a String returning 'true', 'false', or null.",
        "GroundTruth": [
            "java.lang.Boolean.booleanValue()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "1904": {
        "Query": "Converts a Boolean to a String returning 'yes', 'no', or null.",
        "GroundTruth": [
            "java.lang.Boolean.booleanValue()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "1905": {
        "Query": "Converts a Boolean to a String returning one of the input Strings.",
        "GroundTruth": [
            "java.lang.Boolean.booleanValue()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "1906": {
        "Query": "Converts a Boolean to a boolean handling null.",
        "GroundTruth": [
            "java.lang.Boolean.booleanValue()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "1907": {
        "Query": "Converts a ByteBuffer to a BufferedImage.",
        "GroundTruth": [
            "java.awt.image.Raster.getDataBuffer()"
        ],
        "APIClasses": [
            "java.awt.image.Raster"
        ],
        "Source": "Tutorial Websites"
    },
    "1908": {
        "Query": "Converts a CSV(comma-separated value) list into a vector, containing all values as strings.",
        "GroundTruth": [
            "java.util.StringTokenizer.hasMoreTokens()",
            "java.util.StringTokenizer.nextToken()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.StringTokenizer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1909": {
        "Query": "Converts a Color to a hex color string.",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.awt.Color.getRGB()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1910": {
        "Query": "Converts a HSV array back to an RGB array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1911": {
        "Query": "Converts a MIDI number into a note name in scientific pitch notation",
        "GroundTruth": [
            "javax.sound.midi.Track.get()"
        ],
        "APIClasses": [
            "javax.sound.midi.Track"
        ],
        "Source": "Tutorial Websites"
    },
    "1912": {
        "Query": "Converts a Macintosh-style timestamp (seconds since January 1, 1904) into a Java date.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.sql.Timestamp.getTime()",
            "java.sql.CallableStatement.getTime()",
            "java.sql.ResultSet.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.sql.Timestamp",
            "java.sql.CallableStatement",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "1913": {
        "Query": "Converts a SQL timestamp into a Calendar .",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTimeInMillis()",
            "java.sql.Timestamp.getTime()",
            "java.sql.CallableStatement.getTime()",
            "java.sql.ResultSet.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Calendar",
            "java.sql.Timestamp",
            "java.sql.CallableStatement",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "1914": {
        "Query": "Converts a String to lower case as per String#toLowerCase()",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.lang.Character.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1915": {
        "Query": "Converts a String to upper case as per String#toUpperCase()",
        "GroundTruth": [
            "java.lang.String.toUpperCase()",
            "java.lang.Character.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1916": {
        "Query": "Converts a boolean array into a BitSet",
        "GroundTruth": [
            "java.util.BitSet.set()"
        ],
        "APIClasses": [
            "java.util.BitSet"
        ],
        "Source": "Tutorial Websites"
    },
    "1917": {
        "Query": "Converts a boolean to an Integer specifying the conversion values.",
        "GroundTruth": [
            "java.lang.Boolean.booleanValue()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "1918": {
        "Query": "Converts a boolean to an int using the convention that zero is false.",
        "GroundTruth": [
            "java.lang.Boolean.booleanValue()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "1919": {
        "Query": "Converts a byte Array to an BufferedImage",
        "GroundTruth": [
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "1920": {
        "Query": "Converts a byte array to a Base64 encoded string",
        "GroundTruth": [
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1921": {
        "Query": "Converts a byte array to a char array.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1922": {
        "Query": "Converts a byte array to a class.",
        "GroundTruth": [
            "java.lang.Class.getClassLoader()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "1923": {
        "Query": "Converts a byte array to a float via ByteBuffer.",
        "GroundTruth": [
            "java.nio.ByteBuffer.wrap()",
            "java.nio.ByteBuffer.getFloat()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1924": {
        "Query": "Converts a byte array to a long array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.nio.ByteBuffer.wrap()",
            "java.nio.ByteBuffer.getLong()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1925": {
        "Query": "Converts a byte array to an object.",
        "GroundTruth": [
            "java.lang.Class.getClassLoader()",
            "java.lang.reflect.Constructor.newInstance()",
            "java.lang.reflect.Array.newInstance()",
            "java.lang.Class.newInstance()",
            "java.lang.Throwable.printStackTrace()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.Constructor",
            "java.lang.reflect.Array",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "1926": {
        "Query": "Converts a byte into a String of length 8, consisting of 0s and 1s that corresponds to the binary representation of the byte",
        "GroundTruth": [
            "java.lang.Integer.toBinaryString()",
            "java.lang.String.replace()",
            "java.lang.String.length()",
            "java.lang.String.concat()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1927": {
        "Query": "Converts a collection to a primitive array of a given type.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Arrays.toString()",
            "java.lang.reflect.Array.newInstance()",
            "java.util.Collection.size()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.reflect.Array",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "1928": {
        "Query": "Converts a color into a String like \"255,0,0,255\" (red,green,blue,alpha).",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.awt.Color.getAlpha()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1929": {
        "Query": "Converts a color into a String like #RRGGBB.",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.awt.Color.getRGB()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.awt.Color",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1930": {
        "Query": "Converts a color into a String like 255,0,0.",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1931": {
        "Query": "Converts a color string.",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.lang.Double.parseDouble()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Double",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1932": {
        "Query": "Converts a color's RGB presentation to a textual hexadecimal representation.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1933": {
        "Query": "Converts a colour to hex rgb notation.",
        "GroundTruth": [
            "java.awt.Color.getRGB()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1934": {
        "Query": "Converts a float to a byte array with a length of 4.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.nio.ByteBuffer.allocate()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1935": {
        "Query": "Converts a given integer value to a byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1936": {
        "Query": "Converts a given long value to a byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1937": {
        "Query": "Converts a hex number into a decimal number.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1938": {
        "Query": "Converts a java.util.Date into an instance of XMLGregorianCalendar",
        "GroundTruth": [
            "java.util.Calendar.setTimeInMillis()",
            "java.util.Date.getTime()",
            "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Date",
            "javax.xml.datatype.DatatypeFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "1939": {
        "Query": "Converts a java.util.Date to java.time.ZonedDateTime.",
        "GroundTruth": [
            "java.util.Date.toInstant()",
            "java.time.chrono.ChronoLocalDateTime.atZone()",
            "java.time.Instant.atZone()",
            "java.time.LocalDateTime.atZone()",
            "java.time.ZoneId.systemDefault()"
        ],
        "APIClasses": [
            "java.util.Date",
            "java.time.chrono.ChronoLocalDateTime",
            "java.time.Instant",
            "java.time.LocalDateTime",
            "java.time.ZoneId"
        ],
        "Source": "Tutorial Websites"
    },
    "1940": {
        "Query": "Converts a list of boolean values into its corresponding bit string.",
        "GroundTruth": [
            "java.lang.String.concat()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1941": {
        "Query": "Converts a list of objects [a, 1, b, 2] into a map {a -> 1; b -> 2}",
        "GroundTruth": [
            "java.util.Map.put()",
            "java.util.Collections.unmodifiableMap()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "1942": {
        "Query": "Converts a list(separated with a space) to array",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.Character.toString()",
            "java.lang.String.equals()",
            "java.lang.String.charAt()",
            "java.lang.String.concat()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1943": {
        "Query": "Converts a long to a string representing this value in hexadecimal format.",
        "GroundTruth": [
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1944": {
        "Query": "Converts a map into a List of IKeyValuePair objects.",
        "GroundTruth": [
            "java.util.Map.entrySet()",
            "java.util.Map.Entry.getKey()",
            "java.util.Map.Entry.getValue()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.Map.Entry"
        ],
        "Source": "Tutorial Websites"
    },
    "1945": {
        "Query": "Converts a provided Julian Day Number (i.e.",
        "GroundTruth": [
            "java.lang.Math.floor()",
            "java.lang.Math.ceil()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1946": {
        "Query": "Converts a provided Persian date to the Julian Day Number (i.e.",
        "GroundTruth": [
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1947": {
        "Query": "Converts a scalar normalized to de range [0:1] into a long rainbow of rgba values.",
        "GroundTruth": [
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1948": {
        "Query": "Converts a scalar normalized to de range [0:1] into a short rainbow of rgba values.",
        "GroundTruth": [
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1949": {
        "Query": "Converts a sequence of Java characters to a sequence of unicode code points.",
        "GroundTruth": [
            "java.lang.Character.codePointAt()",
            "java.lang.Character.charCount()"
        ],
        "APIClasses": [
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1950": {
        "Query": "Converts a sequence of unicode code points to a sequence of Java characters.",
        "GroundTruth": [
            "java.lang.Character.toChars()"
        ],
        "APIClasses": [
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1951": {
        "Query": "Converts a single char into a valid XML character Output stream must convert stream to UTF-8 when saving to disk.",
        "GroundTruth": [
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1952": {
        "Query": "Converts a single code point into valid XML.",
        "GroundTruth": [
            "java.lang.String.valueOf()",
            "java.lang.Character.toChars()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1953": {
        "Query": "Converts a string containing hexadecimal characters to a byte-array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toUpperCase()",
            "java.lang.Character.toUpperCase()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1954": {
        "Query": "Converts a string in the form \"[01]*\" into bits and packs them into byte array",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1955": {
        "Query": "Converts a string into a Color object.",
        "GroundTruth": [
            "java.lang.Double.parseDouble()",
            "javax.swing.text.html.StyleSheet.stringToColor()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "javax.swing.text.html.StyleSheet"
        ],
        "Source": "Tutorial Websites"
    },
    "1956": {
        "Query": "Converts a string into something you can safely insert into a URL.",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.String.toString()",
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1957": {
        "Query": "Converts a typed Collection to a typed array.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Arrays.toString()",
            "java.util.Collection.toArray()",
            "java.lang.reflect.Array.newInstance()",
            "java.util.Collection.size()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection",
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "1958": {
        "Query": "Converts an HSL color value to RGB.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1959": {
        "Query": "Converts an RGB array to an HSV array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.max()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1960": {
        "Query": "Converts an RGB color value to HSL.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.max()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1961": {
        "Query": "Converts an XMLGregorianCalendar to an instance of java.util.Date",
        "GroundTruth": [
            "javax.xml.datatype.XMLGregorianCalendar.toGregorianCalendar()"
        ],
        "APIClasses": [
            "javax.xml.datatype.XMLGregorianCalendar"
        ],
        "Source": "Tutorial Websites"
    },
    "1962": {
        "Query": "Converts an angle (in degrees, assuming 0 degrees is straight up, and clockwise is an increase in angle, and positive X is right) to an X location point.",
        "GroundTruth": [
            "java.lang.Math.sin()",
            "java.lang.Math.toRadians()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1963": {
        "Query": "Converts an array of bytes to a double.",
        "GroundTruth": [
            "java.lang.Double.longBitsToDouble()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "1964": {
        "Query": "Converts an array of bytes to a float.",
        "GroundTruth": [
            "java.lang.Float.intBitsToFloat()"
        ],
        "APIClasses": [
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "1965": {
        "Query": "Converts an array of bytes to a long.",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1966": {
        "Query": "Converts an array of bytes to an integer.",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1967": {
        "Query": "Converts an array of integer values into a cumulative histogram.",
        "GroundTruth": [
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1968": {
        "Query": "Converts an array of short values to BufferedImage with type TYPE_USHORT_GRAY based on the histogram.",
        "GroundTruth": [
            "java.awt.image.Raster.getDataBuffer()"
        ],
        "APIClasses": [
            "java.awt.image.Raster"
        ],
        "Source": "Tutorial Websites"
    },
    "1969": {
        "Query": "Converts an array to an iterator of objects.",
        "GroundTruth": [
            "java.lang.reflect.Array.getLength()",
            "java.lang.reflect.Array.get()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "1970": {
        "Query": "Converts an int32 into a 4 byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1971": {
        "Query": "Converts an int64 into a byte array with a maximum size of 8.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "1972": {
        "Query": "Converts an int8 into a 1 byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1973": {
        "Query": "Converts an integer into a 4-byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1974": {
        "Query": "Converts an integer to an HTML color representation.",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1975": {
        "Query": "Converts an org.w3c.dom.Node to an XML string using an identity transform.",
        "GroundTruth": [
            "java.lang.String.toString()",
            "javax.xml.transform.TransformerFactory.newInstance()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.xml.transform.TransformerFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "1976": {
        "Query": "Converts an uint16 into a 2 byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1977": {
        "Query": "Converts an uint32 into a 4 byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1978": {
        "Query": "Converts byte array to string using UTF8 Encoding",
        "GroundTruth": [
            "java.lang.String.getBytes()",
            "java.nio.charset.Charset.forName()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.nio.charset.Charset"
        ],
        "Source": "Tutorial Websites"
    },
    "1979": {
        "Query": "Converts byte[] to long[], assuming big-endian byte order.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "1980": {
        "Query": "Converts bytes to doubles (from -1.0 to 1.0) according to audio format",
        "GroundTruth": [
            "javax.sound.sampled.AudioFormat.getSampleSizeInBits()",
            "java.nio.ByteBuffer.wrap()",
            "javax.sound.sampled.AudioFormat.isBigEndian()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFormat",
            "java.nio.ByteBuffer",
            "javax.sound.sampled.AudioFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "1981": {
        "Query": "Converts collection to a string array by calling toString on each member.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Arrays.toString()",
            "java.util.Collection.size()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1982": {
        "Query": "Converts collection to array of strings",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Arrays.toString()",
            "java.util.Collection.isEmpty()",
            "java.util.Collection.size()",
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1983": {
        "Query": "Converts color components from the CIE L*u*v* to the sRGB color space.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1984": {
        "Query": "Converts color components from the CIE XYZ to the CIE L*u*v* color space.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1985": {
        "Query": "Converts color components from the sRGB to the CIE XYZ color space.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1986": {
        "Query": "Converts doubles (from -1.0 to 1.0) to bytes according to audio format",
        "GroundTruth": [
            "javax.sound.sampled.AudioFormat.getSampleSizeInBits()",
            "java.nio.ByteBuffer.wrap()",
            "javax.sound.sampled.AudioFormat.isBigEndian()",
            "java.nio.ByteBuffer.putShort()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFormat",
            "java.nio.ByteBuffer",
            "javax.sound.sampled.AudioFormat",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1987": {
        "Query": "Converts each unicode codepoint to UpperCase via Character#toUpperCase(int) starting at the given offset.",
        "GroundTruth": [
            "java.lang.Character.toChars()",
            "java.lang.Character.toUpperCase()",
            "java.lang.Character.codePointAt()"
        ],
        "APIClasses": [
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1988": {
        "Query": "Converts each unicode codepoint to lowerCase via Character#toLowerCase(int) starting at the given offset.",
        "GroundTruth": [
            "java.lang.Character.toChars()",
            "java.lang.Character.toLowerCase()",
            "java.lang.Character.codePointAt()"
        ],
        "APIClasses": [
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "1989": {
        "Query": "Converts floats (from -1.0 to 1.0) to bytes according to audio format",
        "GroundTruth": [
            "javax.sound.sampled.AudioFormat.getSampleSizeInBits()",
            "java.nio.ByteBuffer.wrap()",
            "javax.sound.sampled.AudioFormat.isBigEndian()",
            "java.nio.ByteBuffer.putShort()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFormat",
            "java.nio.ByteBuffer",
            "javax.sound.sampled.AudioFormat",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "1990": {
        "Query": "Converts from normal RGB color scheme to Java HSB.",
        "GroundTruth": [
            "java.awt.Color.RGBtoHSB()",
            "java.awt.Color.getHSBColor()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "1991": {
        "Query": "Converts java.util.Date to java.sql.Timestamp",
        "GroundTruth": [
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "1992": {
        "Query": "Converts java.util.GregorianCalendar into javax.xml.datatype.XMLGregorianCalendar",
        "GroundTruth": [
            "javax.xml.datatype.DatatypeFactory.newInstance()",
            "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar()"
        ],
        "APIClasses": [
            "javax.xml.datatype.DatatypeFactory",
            "javax.xml.datatype.DatatypeFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "1993": {
        "Query": "Converts our own relative time format to a LocalDateTime object.",
        "GroundTruth": [
            "java.time.LocalDateTime.of()",
            "java.time.LocalDate.now()",
            "java.time.LocalTime.ofSecondOfDay()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime",
            "java.time.LocalDate",
            "java.time.LocalTime"
        ],
        "Source": "Tutorial Websites"
    },
    "1994": {
        "Query": "Converts the byte into string using UTF8 Encoding",
        "GroundTruth": [
            "java.nio.charset.Charset.forName()"
        ],
        "APIClasses": [
            "java.nio.charset.Charset"
        ],
        "Source": "Tutorial Websites"
    },
    "1995": {
        "Query": "Converts the color index B-V to RGB model.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.pow()",
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1996": {
        "Query": "Converts the color into a Hex representation suitable for HTML color attributes.",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.awt.Color.getRGB()",
            "java.lang.String.substring()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.awt.Color",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "1997": {
        "Query": "Converts the given FX color to awt color.",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.awt.Window.getOpacity()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "1998": {
        "Query": "Converts the input array to dB (10*log10())",
        "GroundTruth": [
            "java.lang.Math.log10()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "1999": {
        "Query": "Converts the length value from feet to meter.",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2000": {
        "Query": "Converts the length value from kilometers to miles.",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2001": {
        "Query": "Converts the length value from meter to feet.",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2002": {
        "Query": "Converts the length value from miles to kilometers.",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2003": {
        "Query": "Converts the selected view indexes to model indexes.",
        "GroundTruth": [
            "javax.swing.JTable.getSelectedRows()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "2004": {
        "Query": "Converts the specified Date object to LocalDateTime.",
        "GroundTruth": [
            "java.time.Instant.ofEpochMilli()",
            "java.util.Date.getTime()",
            "java.time.LocalDateTime.ofInstant()",
            "java.time.ZoneId.systemDefault()"
        ],
        "APIClasses": [
            "java.time.Instant",
            "java.util.Date",
            "java.time.LocalDateTime",
            "java.time.ZoneId"
        ],
        "Source": "Tutorial Websites"
    },
    "2005": {
        "Query": "Converts the specified byte array to int.",
        "GroundTruth": [
            "java.lang.Integer.decode()",
            "java.nio.charset.Charset.forName()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.nio.charset.Charset"
        ],
        "Source": "Tutorial Websites"
    },
    "2006": {
        "Query": "Converts the specified character (Unicode code point) to its UTF-16 representation.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2007": {
        "Query": "Converts the specified integer (in the range 0-255) into a hex string.",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2008": {
        "Query": "Converts the specified rgb values to a hexadecimal representation.",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2009": {
        "Query": "Copies a vector of length 2",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2010": {
        "Query": "Copies a vector of length 3",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2011": {
        "Query": "Copies a vector of length 4",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2012": {
        "Query": "Copies all rows and columns between two double arrays",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2013": {
        "Query": "Copies entries from one map to another and deletes those entries in the target map for which the value in the source map is null.",
        "GroundTruth": [
            "java.util.Map.Entry.getKey()",
            "java.util.Map.Entry.getValue()"
        ],
        "APIClasses": [
            "java.util.Map.Entry"
        ],
        "Source": "Tutorial Websites"
    },
    "2014": {
        "Query": "Copies entries from the Set provided until reaching a barrier item.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2015": {
        "Query": "Copies string to system clipboard.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()",
            "java.awt.datatransfer.Clipboard.setContents()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.awt.datatransfer.Clipboard"
        ],
        "Source": "Tutorial Websites"
    },
    "2016": {
        "Query": "Copies the bytes from the specified array to the specified List as Byte objects starting at the specified index.",
        "GroundTruth": [
            "java.util.List.size()",
            "java.util.List.add()",
            "java.util.List.set()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2017": {
        "Query": "Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.reflect.Array.newInstance()",
            "java.lang.System.arraycopy()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.reflect.Array",
            "java.lang.System",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2018": {
        "Query": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2019": {
        "Query": "Copies the specified range of the specified array into a new array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2020": {
        "Query": "Copy Array with Arrays.copyOfRange() method",
        "GroundTruth": [
            "java.util.Arrays.copyOfRange()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2021": {
        "Query": "Copy Array with System.arraycopy() method",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2022": {
        "Query": "Copy Elements of ArrayList to Vector",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.copy()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2023": {
        "Query": "Copy Elements of One ArrayList to Another ArrayList",
        "GroundTruth": [
            "java.util.Collections.copy()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2024": {
        "Query": "Copy Elements of One Vector to Another Vector",
        "GroundTruth": [
            "java.util.Collections.copy()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2025": {
        "Query": "Copy Elements of Vector to ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.copy()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2026": {
        "Query": "Copy a BigInteger into a byte array.",
        "GroundTruth": [
            "java.math.BigInteger.toByteArray()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2027": {
        "Query": "Copy a text file using InputStream and OutputStream",
        "GroundTruth": [
            "org.omg.CORBA.portable.InputStream.read()",
            "org.omg.CORBA.portable.OutputStream.write()",
            "java.io.OutputStream.close()",
            "java.io.InputStream.close()"
        ],
        "APIClasses": [
            "org.omg.CORBA.portable.InputStream",
            "org.omg.CORBA.portable.OutputStream",
            "java.io.OutputStream",
            "java.io.InputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "2028": {
        "Query": "Copy all elements of ArrayList to an Object Array",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.ArrayList.toArray()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Tutorial Websites"
    },
    "2029": {
        "Query": "Copy an array of signed values in int, into an array of double. Sign extension is performed.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2030": {
        "Query": "Copy an array of signed values in int, into an array of float. Sign extension is performed.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2031": {
        "Query": "Copy an array of signed values in int, into an array of long. Sign extension is performed.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2032": {
        "Query": "Copy an array of signed values in int, into an array of short. The value is truncated as necessary.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2033": {
        "Query": "Copy array intArray into array intArrayCopy",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2034": {
        "Query": "Copy bytes from a large (over 2GB) InputStream to an OutputStream.",
        "GroundTruth": [
            "java.nio.file.attribute.UserDefinedFileAttributeView.read()",
            "java.nio.file.attribute.UserDefinedFileAttributeView.write()",
            "java.nio.file.Files.write()"
        ],
        "APIClasses": [
            "java.nio.file.attribute.UserDefinedFileAttributeView",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2035": {
        "Query": "Copy char array to another char array",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2036": {
        "Query": "Copy file character by character using FileReader and FileWriter",
        "GroundTruth": [
            "org.omg.CORBA.portable.InputStream.read()",
            "org.omg.CORBA.portable.OutputStream.write()",
            "java.io.InputStream.close()",
            "java.io.OutputStream.close()"
        ],
        "APIClasses": [
            "org.omg.CORBA.portable.InputStream",
            "org.omg.CORBA.portable.OutputStream",
            "java.io.InputStream",
            "java.io.OutputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "2037": {
        "Query": "Copy file line by line with BufferedReader and PrintWriter",
        "GroundTruth": [
            "java.io.InputStream.close()",
            "java.io.OutputStream.close()"
        ],
        "APIClasses": [
            "java.io.InputStream",
            "java.io.OutputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "2038": {
        "Query": "Copy first \"count\" bytes from byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2039": {
        "Query": "Copy from an Internet URL to local file",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.net.URI.create()",
            "java.net.URL.openStream()",
            "java.nio.file.Files.copy()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.net.URI",
            "java.net.URL",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2040": {
        "Query": "Copy portion of the Swing document into target character array.",
        "GroundTruth": [
            "java.lang.System.arraycopy()",
            "javax.swing.text.GapContent.getGapStart()"
        ],
        "APIClasses": [
            "java.lang.System",
            "javax.swing.text.GapContent"
        ],
        "Source": "Tutorial Websites"
    },
    "2041": {
        "Query": "Copy the chars out of a CharBuffer from 0 to the current position, resets the position to 0",
        "GroundTruth": [
            "java.nio.Buffer.position()",
            "java.lang.System.arraycopy()",
            "java.nio.Buffer.array()"
        ],
        "APIClasses": [
            "java.nio.Buffer",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2042": {
        "Query": "Copy the given Collection into a String array.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Arrays.toString()",
            "java.util.Collection.toArray()",
            "java.util.Collection.size()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "2043": {
        "Query": "Copying Files with FileChannel.transferFrom()",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.channels.FileChannel.open()",
            "java.util.EnumSet.of()",
            "java.nio.channels.FileChannel.transferFrom()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.channels.FileChannel",
            "java.util.EnumSet",
            "java.nio.channels.FileChannel"
        ],
        "Source": "Tutorial Websites"
    },
    "2044": {
        "Query": "Copying One File to Another with FileChannel",
        "GroundTruth": [
            "java.nio.channels.FileChannel.transferFrom()"
        ],
        "APIClasses": [
            "java.nio.channels.FileChannel"
        ],
        "Source": "Tutorial Websites"
    },
    "2045": {
        "Query": "Copying a Subtree of Nodes from One DOM Document to Another",
        "GroundTruth": [
            "org.w3c.dom.Document.importNode()",
            "org.w3c.dom.Document.getDocumentElement()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document",
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "2046": {
        "Query": "Copying a directory using Files.copy() method",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.copy()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2047": {
        "Query": "Copying an Array Using a for Loop and the System.arraycopy() Method",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2048": {
        "Query": "Copying from a File to an Output Stream",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Path.toFile()",
            "java.nio.file.Files.copy()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Path",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2049": {
        "Query": "Copying from an Input Stream to a File",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Path.toFile()",
            "java.nio.file.Files.copy()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Path",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2050": {
        "Query": "Count All Words using regex",
        "GroundTruth": [
            "java.util.Scanner.nextLine()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2051": {
        "Query": "Count Bits One via Integer.toBinaryString(n) method",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.String.replace()",
            "java.lang.Integer.toBinaryString()",
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "2052": {
        "Query": "Count XML Elements in Document by Tag Name",
        "GroundTruth": [
            "org.w3c.dom.Document.getElementsByTagName()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "2053": {
        "Query": "Count the DOM element nodes before the supplied node, having the specified tag name, not including the node itself.",
        "GroundTruth": [
            "org.w3c.dom.Node.getParentNode()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "2054": {
        "Query": "Count the DOM nodes of the supplied type (nodeType) before the supplied node, not including the node itself.",
        "GroundTruth": [
            "org.w3c.dom.Node.getParentNode()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "2055": {
        "Query": "Counterpart to java.util.Collection.contains for array.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2056": {
        "Query": "Counterpart to java.util.Collection.indexOf for array.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2057": {
        "Query": "Counts how many times the regexp appears in the larger String.",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2058": {
        "Query": "Counts the number of divisors for a number",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2059": {
        "Query": "Counts the number of elements in the given Iterable which are selected by the given IFilter .",
        "GroundTruth": [
            "java.util.function.LongPredicate.test()",
            "java.util.function.BiPredicate.test()",
            "java.util.function.DoublePredicate.test()",
            "java.util.function.Predicate.test()",
            "java.util.function.IntPredicate.test()"
        ],
        "APIClasses": [
            "java.util.function.LongPredicate",
            "java.util.function.BiPredicate",
            "java.util.function.DoublePredicate",
            "java.util.function.Predicate",
            "java.util.function.IntPredicate"
        ],
        "Source": "Tutorial Websites"
    },
    "2060": {
        "Query": "Counts the number of items in the iterator by looping through it.",
        "GroundTruth": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.lang.Iterable.iterator()"
        ],
        "APIClasses": [
            "java.util.Iterator",
            "java.lang.Iterable"
        ],
        "Source": "Tutorial Websites"
    },
    "2061": {
        "Query": "Create BufferedImage from Graphics2D",
        "GroundTruth": [
            "java.awt.Graphics2D.getDeviceConfiguration()",
            "java.awt.GraphicsConfiguration.createCompatibleImage()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D",
            "java.awt.GraphicsConfiguration"
        ],
        "Source": "Tutorial Websites"
    },
    "2062": {
        "Query": "Create BufferedImage from component",
        "GroundTruth": [
            "java.awt.Component.createImage()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "2063": {
        "Query": "Create BufferedReader from InputStreamReader to read text file",
        "GroundTruth": [
            "java.io.Reader.close()",
            "java.io.InputStream.close()"
        ],
        "APIClasses": [
            "java.io.Reader",
            "java.io.InputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "2064": {
        "Query": "Create BufferedWriter from FileWriter",
        "GroundTruth": [
            "java.io.BufferedWriter.write()",
            "java.io.BufferedWriter.close()"
        ],
        "APIClasses": [
            "java.io.BufferedWriter"
        ],
        "Source": "Tutorial Websites"
    },
    "2065": {
        "Query": "Create Collection of one element",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2066": {
        "Query": "Create Comparator via method reference",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Comparator.comparing()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Comparator"
        ],
        "Source": "Tutorial Websites"
    },
    "2067": {
        "Query": "Create Consumer Lambda with method reference",
        "GroundTruth": [
            "java.util.function.Consumer.accept()"
        ],
        "APIClasses": [
            "java.util.function.Consumer"
        ],
        "Source": "Tutorial Websites"
    },
    "2068": {
        "Query": "Create Custom Color Using HSB",
        "GroundTruth": [
            "java.awt.Color.getHSBColor()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2069": {
        "Query": "Create Dom Document and root element",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilder.newDocument()",
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilder",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "2070": {
        "Query": "Create Ellipse in JavaFX",
        "GroundTruth": [
            "java.awt.Graphics2D.setStroke()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "2071": {
        "Query": "Create FileWriter from path String and write string value to a text file",
        "GroundTruth": [
            "java.io.Writer.append()",
            "java.io.Writer.close()"
        ],
        "APIClasses": [
            "java.io.Writer"
        ],
        "Source": "Tutorial Websites"
    },
    "2072": {
        "Query": "Create Generic Box class",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.lang.Integer.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "2073": {
        "Query": "Create JMS Message Producer",
        "GroundTruth": [
            "javax.naming.InitialContext.lookup()",
            "javax.xml.soap.SOAPConnectionFactory.createConnection()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "javax.naming.InitialContext",
            "javax.xml.soap.SOAPConnectionFactory",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2074": {
        "Query": "Create JTable from DefaultTableModel",
        "GroundTruth": [
            "javax.swing.table.DefaultTableModel.addRow()"
        ],
        "APIClasses": [
            "javax.swing.table.DefaultTableModel"
        ],
        "Source": "Tutorial Websites"
    },
    "2075": {
        "Query": "Create Java ArrayList From Enumeration",
        "GroundTruth": [
            "java.util.Collections.list()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2076": {
        "Query": "Create JavaSparkContext in apache spark",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2077": {
        "Query": "Create LinkedHashMap and loop through it",
        "GroundTruth": [
            "java.util.Map.put()",
            "java.util.Map.entrySet()",
            "java.util.Map.Entry.getKey()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.Map.Entry"
        ],
        "Source": "Tutorial Websites"
    },
    "2078": {
        "Query": "Create LinkedList from array",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2079": {
        "Query": "Create List containing n Copies of Specified Object",
        "GroundTruth": [
            "java.util.Collections.nCopies()",
            "java.util.List.iterator()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2080": {
        "Query": "Create List from Object Array",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.iterator()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2081": {
        "Query": "Create Local class within static method",
        "GroundTruth": [
            "java.lang.String.replaceAll()",
            "java.lang.String.length()",
            "javax.swing.SpinnerNumberModel.getNumber()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.swing.SpinnerNumberModel",
            "javax.swing.SpinnerNumberModel"
        ],
        "Source": "Tutorial Websites"
    },
    "2082": {
        "Query": "Create Multicast Receiver using MulticastSocket",
        "GroundTruth": [
            "java.net.InetAddress.getByName()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "2083": {
        "Query": "Create Multicast Sender using DatagramSocket",
        "GroundTruth": [
            "java.lang.String.getBytes()",
            "java.net.InetAddress.getByName()",
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.net.InetAddress",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2084": {
        "Query": "Create New Thread Using Runnable",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2085": {
        "Query": "Create Path from path string",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.createLink()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2086": {
        "Query": "Create QuadCurve in JavaFX",
        "GroundTruth": [
            "java.awt.Graphics2D.setStroke()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "2087": {
        "Query": "Create Recursive method to calculate fibonacci",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.math.BigInteger.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "2088": {
        "Query": "Create SHA 256 Digest",
        "GroundTruth": [
            "java.security.Security.addProvider()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.security.Security",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2089": {
        "Query": "Create SparkConf for apache spark",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2090": {
        "Query": "Create Stream from Array and do forEach action",
        "GroundTruth": [
            "java.util.stream.Stream.of()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.util.stream.Stream",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2091": {
        "Query": "Create Stream from String array",
        "GroundTruth": [
            "java.util.stream.Stream.of()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.util.stream.Stream",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2092": {
        "Query": "Create UTF8 text by Converting String text",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.lang.String.getBytes()",
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2093": {
        "Query": "Create XML Document object from a File",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "2094": {
        "Query": "Create XML StAX reader from data string",
        "GroundTruth": [
            "javax.xml.stream.XMLInputFactory.newInstance()",
            "javax.xml.stream.XMLInputFactory.createXMLEventReader()"
        ],
        "APIClasses": [
            "javax.xml.stream.XMLInputFactory",
            "javax.xml.stream.XMLInputFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "2095": {
        "Query": "Create XML StAX reader from file",
        "GroundTruth": [
            "java.io.BufferedReader.readLine()",
            "java.lang.String.toString()",
            "javax.xml.stream.XMLInputFactory.newInstance()",
            "javax.xml.stream.XMLInputFactory.createXMLEventReader()"
        ],
        "APIClasses": [
            "java.io.BufferedReader",
            "java.lang.String",
            "javax.xml.stream.XMLInputFactory",
            "javax.xml.stream.XMLInputFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "2096": {
        "Query": "Create Xml Document from XML String",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2097": {
        "Query": "Create a Collection containing the given size of the given strings.",
        "GroundTruth": [
            "java.util.List.add()",
            "java.util.List.size()",
            "java.util.Collections.shuffle()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2098": {
        "Query": "Create a JComboBox from an array of Objects.",
        "GroundTruth": [
            "javax.swing.JComboBox.insertItemAt()"
        ],
        "APIClasses": [
            "javax.swing.JComboBox"
        ],
        "Source": "Tutorial Websites"
    },
    "2099": {
        "Query": "Create a JTree object and handle tree node selection event",
        "GroundTruth": [
            "javax.swing.JTree.getLastSelectedPathComponent()"
        ],
        "APIClasses": [
            "javax.swing.JTree"
        ],
        "Source": "Tutorial Websites"
    },
    "2100": {
        "Query": "Create a Set Tempo meta event for MIDI.",
        "GroundTruth": [
            "javax.sound.midi.MetaMessage.setMessage()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "javax.sound.midi.MetaMessage",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2101": {
        "Query": "Create a buffered image from an RGB array",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "2102": {
        "Query": "Create a class to represent File Name and Path",
        "GroundTruth": [
            "java.lang.String.lastIndexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2103": {
        "Query": "Create a collection containing the given number of random integers.",
        "GroundTruth": [
            "java.util.Random.nextInt()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "2104": {
        "Query": "Create a colored image icon.",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "2105": {
        "Query": "Create a directory; all non-existent ancestor directories are automatically created",
        "GroundTruth": [
            "java.io.File.mkdir()",
            "java.io.File.mkdirs()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2106": {
        "Query": "Create a document which is used to append XML nodes",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "javax.xml.parsers.DocumentBuilder.newDocument()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilder"
        ],
        "Source": "Tutorial Websites"
    },
    "2107": {
        "Query": "Create a function named myfunc which returns a VARCHAR value; the function has no parameter",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2108": {
        "Query": "Create a function named myfuncin which returns a VARCHAR value",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2109": {
        "Query": "Create a function named myfuncin which returns a VARCHAR value; the function has an IN parameter named x",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2110": {
        "Query": "Create a hard link",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.createLink()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2111": {
        "Query": "Create a histogram over the ARGB component distribution.",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "2112": {
        "Query": "Create a method that deletes a non-empty directory",
        "GroundTruth": [
            "java.io.File.listFiles()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2113": {
        "Query": "Create a new XML element in the parent node with the given local name and namespace.",
        "GroundTruth": [
            "org.w3c.dom.Document.createElementNS()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "2114": {
        "Query": "Create a new int[] by concatenating prefix and postfix",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2115": {
        "Query": "Create a new spring by adding two springs using the sum() method",
        "GroundTruth": [
            "javax.swing.Spring.height()",
            "javax.swing.Spring.sum()"
        ],
        "APIClasses": [
            "javax.swing.Spring"
        ],
        "Source": "Tutorial Websites"
    },
    "2116": {
        "Query": "Create a note off event for MIDI.",
        "GroundTruth": [
            "javax.sound.midi.ShortMessage.setMessage()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "javax.sound.midi.ShortMessage",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2117": {
        "Query": "Create a note on event for MIDI.",
        "GroundTruth": [
            "javax.sound.midi.ShortMessage.setMessage()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "javax.sound.midi.ShortMessage",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2118": {
        "Query": "Create a padding byte array buffer.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2119": {
        "Query": "Create a path relative to current folder",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.FileSystems.getDefault()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.FileSystems"
        ],
        "Source": "Tutorial Websites"
    },
    "2120": {
        "Query": "Create a path relative to root, C:/, D:/ etc",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.FileSystems.getDefault()",
            "java.net.URI.create()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.FileSystems",
            "java.net.URI"
        ],
        "Source": "Tutorial Websites"
    },
    "2121": {
        "Query": "Create a sequence of Int and return a Collection",
        "GroundTruth": [
            "java.lang.Integer.valueOf()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2122": {
        "Query": "Create a sequence of hierarchical directories",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.createDirectories()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2123": {
        "Query": "Create a set from an array.",
        "GroundTruth": [
            "java.util.Collections.addAll()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2124": {
        "Query": "Create a simple thread",
        "GroundTruth": [
            "java.lang.Thread.start()",
            "java.lang.Thread.interrupt()",
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2125": {
        "Query": "Create a spring by subtracting one spring from another.",
        "GroundTruth": [
            "javax.swing.Spring.height()",
            "javax.swing.Spring.sum()",
            "javax.swing.Spring.minus()"
        ],
        "APIClasses": [
            "javax.swing.Spring"
        ],
        "Source": "Tutorial Websites"
    },
    "2126": {
        "Query": "Create a spring from the height of a component named c1",
        "GroundTruth": [
            "javax.swing.Spring.height()"
        ],
        "APIClasses": [
            "javax.swing.Spring"
        ],
        "Source": "Tutorial Websites"
    },
    "2127": {
        "Query": "Create a spring from the width of a component named c1",
        "GroundTruth": [
            "javax.swing.Spring.width()"
        ],
        "APIClasses": [
            "javax.swing.Spring"
        ],
        "Source": "Tutorial Websites"
    },
    "2128": {
        "Query": "Create a spring having 10, 25 and 50 as its minimum, preferred, and maximum value respectively.",
        "GroundTruth": [
            "javax.swing.Spring.constant()"
        ],
        "APIClasses": [
            "javax.swing.Spring"
        ],
        "Source": "Tutorial Websites"
    },
    "2129": {
        "Query": "Create a strut of 10 pixels for SpringLayout",
        "GroundTruth": [
            "javax.swing.Spring.constant()"
        ],
        "APIClasses": [
            "javax.swing.Spring"
        ],
        "Source": "Tutorial Websites"
    },
    "2130": {
        "Query": "Create a symbolic link with the same lastModifiedTime and lastAccessTime as the target",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.createSymbolicLink()",
            "java.nio.file.Files.getAttribute()",
            "java.nio.file.Files.setAttribute()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2131": {
        "Query": "Create a temporary directory",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.createTempDirectory()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2132": {
        "Query": "Create a thread that extending the Thread class.",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2133": {
        "Query": "Create abstract class and extend it to create another class",
        "GroundTruth": [
            "java.util.Scanner.nextLine()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "2134": {
        "Query": "Create an absolute path",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.lang.System.getProperty()",
            "java.net.URI.create()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.lang.System",
            "java.net.URI"
        ],
        "Source": "Tutorial Websites"
    },
    "2135": {
        "Query": "Create an anonymous class within a method",
        "GroundTruth": [
            "javax.swing.JOptionPane.showMessageDialog()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2136": {
        "Query": "Create an gaussian blur filter",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2137": {
        "Query": "Create an image compatible with the graphic environment.",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.isHeadless()",
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getDefaultScreenDevice()",
            "java.awt.GraphicsDevice.getDefaultConfiguration()",
            "java.awt.GraphicsConfiguration.createCompatibleImage()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice",
            "java.awt.GraphicsConfiguration"
        ],
        "Source": "Tutorial Websites"
    },
    "2138": {
        "Query": "Create an unmodifiable Map",
        "GroundTruth": [
            "java.util.Collections.unmodifiableMap()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2139": {
        "Query": "Create an unmodifiable Set",
        "GroundTruth": [
            "java.util.Collections.unmodifiableSet()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2140": {
        "Query": "Create and Declare array of String",
        "GroundTruth": [
            "java.lang.String.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2141": {
        "Query": "Create and answer a collection that is the same type, or the closest equivalent of another collection.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2142": {
        "Query": "Create and delete twitter block",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2143": {
        "Query": "Create and send email",
        "GroundTruth": [
            "javax.imageio.spi.IIORegistry.getDefaultInstance()",
            "java.security.cert.X509CertSelector.setSubject()"
        ],
        "APIClasses": [
            "javax.imageio.spi.IIORegistry",
            "java.security.cert.X509CertSelector"
        ],
        "Source": "Tutorial Websites"
    },
    "2144": {
        "Query": "Create and use Card class and Deck class",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2145": {
        "Query": "Create and use custom PlainDocument for JTextField",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2146": {
        "Query": "Create apache hadoop hbase Table",
        "GroundTruth": [
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2147": {
        "Query": "Create apache hadoop util ProgramDriver",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2148": {
        "Query": "Create array and assign to another array",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2149": {
        "Query": "Create byte[] from microedition Image",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "2150": {
        "Query": "Create cdata Content Tag",
        "GroundTruth": [
            "org.w3c.dom.Document.createCDATASection()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "2151": {
        "Query": "Create classes for the first and last characters so they too can be upper- or lowercase:",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "2152": {
        "Query": "Create custom stack to hold Integer",
        "GroundTruth": [
            "java.util.Iterator.hasNext()",
            "javax.swing.text.html.parser.AttributeList.getNext()"
        ],
        "APIClasses": [
            "java.util.Iterator",
            "javax.swing.text.html.parser.AttributeList"
        ],
        "Source": "Tutorial Websites"
    },
    "2153": {
        "Query": "Create directory along with required nonexistent parent directories",
        "GroundTruth": [
            "java.io.File.mkdirs()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2154": {
        "Query": "Create enum with custom method and constructor",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Double.parseDouble()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "2155": {
        "Query": "Create geometry of a star.",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()",
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2156": {
        "Query": "Create jar file with specified files.",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.nio.channels.FileChannel.transferTo()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.nio.channels.FileChannel"
        ],
        "Source": "Tutorial Websites"
    },
    "2157": {
        "Query": "Create map from key value pair",
        "GroundTruth": [
            "java.util.Map.put()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "2158": {
        "Query": "Create multi dimensional array using reflection",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.lang.reflect.Array.get()",
            "java.lang.reflect.Array.setInt()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2159": {
        "Query": "Create new Array by size",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "2160": {
        "Query": "Create new Collection from class Type and length",
        "GroundTruth": [
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "2161": {
        "Query": "Create new Context for JAXB",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext"
        ],
        "Source": "Tutorial Websites"
    },
    "2162": {
        "Query": "Create new Hash Set from Iterable<? extends T>",
        "GroundTruth": [
            "java.util.Set.add()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "2163": {
        "Query": "Create new HashSet by variable length parameter",
        "GroundTruth": [
            "java.util.Set.add()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "2164": {
        "Query": "Create new LinkedHashSet from Array",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2165": {
        "Query": "Create new empty file",
        "GroundTruth": [
            "java.io.File.createNewFile()",
            "java.io.File.getPath()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2166": {
        "Query": "Create new file and add whole json object to file",
        "GroundTruth": [
            "java.io.File.getAbsolutePath()",
            "java.io.Writer.close()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.Writer"
        ],
        "Source": "Tutorial Websites"
    },
    "2167": {
        "Query": "Create path from String using Paths",
        "GroundTruth": [
            "java.nio.file.Paths.get()"
        ],
        "APIClasses": [
            "java.nio.file.Paths"
        ],
        "Source": "Tutorial Websites"
    },
    "2168": {
        "Query": "Create path from URI",
        "GroundTruth": [
            "java.nio.file.Paths.get()"
        ],
        "APIClasses": [
            "java.nio.file.Paths"
        ],
        "Source": "Tutorial Websites"
    },
    "2169": {
        "Query": "Create paths using \".\" and \"..\" notations",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Paths.get()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Paths"
        ],
        "Source": "Tutorial Websites"
    },
    "2170": {
        "Query": "Create procedure myproc with no parameters",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2171": {
        "Query": "Create procedure myprocin with an IN parameter named x. IN is the default mode for parameter",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2172": {
        "Query": "Create procedure myprocinout with an IN/OUT parameter named x",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2173": {
        "Query": "Create procedure myprocout with an OUT parameter named x",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2174": {
        "Query": "Create protected inner class",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2175": {
        "Query": "Create regular expression for U.S. phone numbers with an optional area code",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "2176": {
        "Query": "Create selenium Remote Web Driver",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2177": {
        "Query": "Create stack for int value",
        "GroundTruth": [
            "java.sql.ResultSet.isLast()",
            "java.util.concurrent.atomic.LongAdder.increment()"
        ],
        "APIClasses": [
            "java.sql.ResultSet",
            "java.util.concurrent.atomic.LongAdder"
        ],
        "Source": "Tutorial Websites"
    },
    "2178": {
        "Query": "Create temporary file in specified directory",
        "GroundTruth": [
            "java.io.File.createTempFile()",
            "java.io.File.getPath()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2179": {
        "Query": "Create the XML input factory.",
        "GroundTruth": [
            "javax.xml.stream.XMLInputFactory.newInstance()",
            "javax.xml.stream.XMLInputFactory.setProperty()"
        ],
        "APIClasses": [
            "javax.xml.stream.XMLInputFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "2180": {
        "Query": "Create the geometry of a sector of an ellipse.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Math.max()",
            "java.lang.Math.round()",
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2181": {
        "Query": "Create thread pool from ExecutorService",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.util.concurrent.Executors.newFixedThreadPool()",
            "java.util.concurrent.ExecutorService.submit()",
            "java.util.concurrent.ExecutorService.shutdown()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.util.concurrent.Executors",
            "java.util.concurrent.ExecutorService"
        ],
        "Source": "Tutorial Websites"
    },
    "2182": {
        "Query": "Create unmodifiable List from Array",
        "GroundTruth": [
            "java.util.Collections.unmodifiableList()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2183": {
        "Query": "Create unmodifiable Map from Map",
        "GroundTruth": [
            "java.util.Map.put()",
            "java.util.Map.Entry.getKey()",
            "java.util.Map.Entry.getValue()",
            "java.util.Collections.unmodifiableMap()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.Map.Entry",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2184": {
        "Query": "Create unmodifiable Set from Array",
        "GroundTruth": [
            "java.util.Collections.unmodifiableSet()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2185": {
        "Query": "Create unmodifiable set from Set",
        "GroundTruth": [
            "java.util.Collections.addAll()",
            "java.util.Collections.unmodifiableSet()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2186": {
        "Query": "Create xml Document Builder",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "2187": {
        "Query": "Create your own stack",
        "GroundTruth": [
            "java.util.Stack.push()",
            "java.util.Stack.pop()"
        ],
        "APIClasses": [
            "java.util.Stack"
        ],
        "Source": "Tutorial Websites"
    },
    "2188": {
        "Query": "CreateLink method creates a hard link to an existing file",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.createLink()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2189": {
        "Query": "CreateSymbolicLink method creates a symbolic link to a target file that may not exist",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.createSymbolicLink()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2190": {
        "Query": "Creates a DOM from a file representation of an xml record",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "2191": {
        "Query": "Creates a DOM from a string representation of an xml record",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "2192": {
        "Query": "Creates a FileFilter for a specified description and an array of allowed extensions.",
        "GroundTruth": [
            "java.io.File.isDirectory()",
            "java.io.File.getName()",
            "java.lang.String.toLowerCase()",
            "javax.naming.Name.endsWith()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.lang.String",
            "javax.naming.Name"
        ],
        "Source": "Tutorial Websites"
    },
    "2193": {
        "Query": "Creates a GregorianCalendar from the specified Date .",
        "GroundTruth": [
            "java.util.Calendar.setTime()",
            "java.util.zip.ZipEntry.setTime()",
            "java.util.Date.setTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "2194": {
        "Query": "Creates a ISO-8859-1 version of an UTF-8 encoded string.",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2195": {
        "Query": "Creates a JavaFX Alert dialog of given alert type.",
        "GroundTruth": [
            "java.awt.event.WindowEvent.getWindow()"
        ],
        "APIClasses": [
            "java.awt.event.WindowEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "2196": {
        "Query": "Creates a JavaFX binding, giving the angle from the gradient given",
        "GroundTruth": [
            "java.lang.Math.atan()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2197": {
        "Query": "Creates a JavaFX button with the given label and action handler.",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMaxWidth()",
            "javax.swing.table.TableColumn.setMinWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "2198": {
        "Query": "Creates a List of JavaFX CssMetaData instances that is merged by the given parameters",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.unmodifiableList()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2199": {
        "Query": "Creates a String that represents the supplied color as a hex-value RGB triplet, including the \"#\".",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.substring()",
            "java.awt.Color.getRGB()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2200": {
        "Query": "Creates a Swing label with the given properties already preset.",
        "GroundTruth": [
            "javax.swing.JComponent.setOpaque()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "2201": {
        "Query": "Creates a beveled border with a title.",
        "GroundTruth": [
            "javax.swing.BorderFactory.createRaisedBevelBorder()",
            "javax.swing.BorderFactory.createLoweredBevelBorder()",
            "javax.swing.BorderFactory.createTitledBorder()",
            "javax.swing.BorderFactory.createCompoundBorder()"
        ],
        "APIClasses": [
            "javax.swing.BorderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "2202": {
        "Query": "Creates a beveled border.",
        "GroundTruth": [
            "javax.swing.BorderFactory.createRaisedBevelBorder()",
            "javax.swing.BorderFactory.createLoweredBevelBorder()",
            "javax.swing.BorderFactory.createCompoundBorder()"
        ],
        "APIClasses": [
            "javax.swing.BorderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "2203": {
        "Query": "Creates a buffered image from an icon.",
        "GroundTruth": [
            "javax.swing.Icon.getIconWidth()",
            "javax.swing.Icon.getIconHeight()",
            "javax.swing.Icon.paintIcon()"
        ],
        "APIClasses": [
            "javax.swing.Icon"
        ],
        "Source": "Tutorial Websites"
    },
    "2204": {
        "Query": "Creates a calendar that represents the date offset seconds from now.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.add()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2205": {
        "Query": "Creates a collection from an iterable.",
        "GroundTruth": [
            "java.util.Iterator.hasNext()",
            "java.util.Collection.add()",
            "java.util.Iterator.next()",
            "java.lang.Iterable.iterator()"
        ],
        "APIClasses": [
            "java.util.Iterator",
            "java.util.Collection",
            "java.lang.Iterable"
        ],
        "Source": "Tutorial Websites"
    },
    "2206": {
        "Query": "Creates a compatible image given the parameters.",
        "GroundTruth": [
            "java.awt.GraphicsConfiguration.createCompatibleImage()",
            "java.awt.image.Raster.getDataBuffer()"
        ],
        "APIClasses": [
            "java.awt.GraphicsConfiguration",
            "java.awt.image.Raster"
        ],
        "Source": "Tutorial Websites"
    },
    "2207": {
        "Query": "Creates a copy of the given color with the specified transparency",
        "GroundTruth": [
            "java.lang.Math.min()",
            "java.lang.Math.max()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2208": {
        "Query": "Creates a decryption stream.",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "2209": {
        "Query": "Creates a diagonal cross shape.",
        "GroundTruth": [
            "java.awt.geom.Path2D.closePath()"
        ],
        "APIClasses": [
            "java.awt.geom.Path2D"
        ],
        "Source": "Tutorial Websites"
    },
    "2210": {
        "Query": "Creates a diamond shape.",
        "GroundTruth": [
            "java.awt.geom.Path2D.closePath()"
        ],
        "APIClasses": [
            "java.awt.geom.Path2D"
        ],
        "Source": "Tutorial Websites"
    },
    "2211": {
        "Query": "Creates a directed graph based on URL objects that represents link structure using jgrapht",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2212": {
        "Query": "Creates a encryption stream.",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "2213": {
        "Query": "Creates a fixed thread pool with named daemon threads that will expire after 60 seconds of inactivity.",
        "GroundTruth": [
            "java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut()"
        ],
        "APIClasses": [
            "java.util.concurrent.ThreadPoolExecutor"
        ],
        "Source": "Tutorial Websites"
    },
    "2214": {
        "Query": "Creates a list by taking an input list and adding elements to the list.",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2215": {
        "Query": "Creates a list from the vararg specified items in the order they were specified.",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2216": {
        "Query": "Creates a list that contains all elements of argument elements repeated amount times.",
        "GroundTruth": [
            "java.util.List.addAll()",
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2217": {
        "Query": "Creates a listener to restore the dismiss delay value for the the JTable tooltip.",
        "GroundTruth": [
            "javax.swing.ToolTipManager.sharedInstance()",
            "javax.swing.ToolTipManager.getDismissDelay()",
            "javax.swing.ToolTipManager.setDismissDelay()",
            "javax.swing.JComponent.setToolTipText()"
        ],
        "APIClasses": [
            "javax.swing.ToolTipManager",
            "javax.swing.ToolTipManager",
            "javax.swing.ToolTipManager",
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "2218": {
        "Query": "Creates a mapping from two arrays, one with keys, one with values.",
        "GroundTruth": [
            "java.util.Map.put()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "2219": {
        "Query": "Creates a new Color that is a brighter version of this Color.",
        "GroundTruth": [
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2220": {
        "Query": "Creates a new Color that is a darker version of this Color.",
        "GroundTruth": [
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2221": {
        "Query": "Creates a new Color with RGB from color and the alpha value of alpha",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2222": {
        "Query": "Creates a new DOM document.",
        "GroundTruth": [
            "org.w3c.dom.DOMImplementation.createDocument()",
            "org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance()"
        ],
        "APIClasses": [
            "org.w3c.dom.DOMImplementation",
            "org.w3c.dom.bootstrap.DOMImplementationRegistry"
        ],
        "Source": "Tutorial Websites"
    },
    "2223": {
        "Query": "Creates a new DecimalFormat using dot as a separator so local decimal separators do not matter",
        "GroundTruth": [
            "java.text.DecimalFormatSymbols.setDecimalSeparator()",
            "java.text.DecimalFormat.setDecimalFormatSymbols()"
        ],
        "APIClasses": [
            "java.text.DecimalFormatSymbols",
            "java.text.DecimalFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "2224": {
        "Query": "Creates a new JToggleButton with the flat appearance.",
        "GroundTruth": [
            "javax.swing.AbstractButton.setRolloverEnabled()",
            "javax.swing.UIManager.getLookAndFeelDefaults()"
        ],
        "APIClasses": [
            "javax.swing.AbstractButton",
            "javax.swing.UIManager"
        ],
        "Source": "Tutorial Websites"
    },
    "2225": {
        "Query": "Creates a new URI from a string.",
        "GroundTruth": [
            "java.net.URI.create()",
            "java.net.URI.isAbsolute()",
            "java.net.URI.getRawPath()",
            "java.net.URI.getQuery()",
            "java.net.URI.getRawQuery()"
        ],
        "APIClasses": [
            "java.net.URI"
        ],
        "Source": "Tutorial Websites"
    },
    "2226": {
        "Query": "Creates a new UTC LocalDateTime instance based on the given millis value",
        "GroundTruth": [
            "java.time.LocalDateTime.ofInstant()",
            "java.time.Instant.ofEpochMilli()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime",
            "java.time.Instant"
        ],
        "Source": "Tutorial Websites"
    },
    "2227": {
        "Query": "Creates a new XML document with the given namespace and document element.",
        "GroundTruth": [
            "org.w3c.dom.DOMImplementation.createDocument()",
            "org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance()"
        ],
        "APIClasses": [
            "org.w3c.dom.DOMImplementation",
            "org.w3c.dom.bootstrap.DOMImplementationRegistry"
        ],
        "Source": "Tutorial Websites"
    },
    "2228": {
        "Query": "Creates a new color definition based on hue (0-360), saturation (0-100), and relative value (0-100; usually 75-100).",
        "GroundTruth": [
            "java.lang.Math.min()",
            "java.lang.Math.round()",
            "java.lang.Integer.toHexString()",
            "java.awt.Color.HSBtoRGB()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Integer",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2229": {
        "Query": "Creates a new color with the hue taken from color c, but adjusted in brightness to match the desired perceived brightness.",
        "GroundTruth": [
            "java.awt.Color.getRGBComponents()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2230": {
        "Query": "Creates a new color with the same color components but a different alpha value.",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2231": {
        "Query": "Creates a new file on a POSIX file system that has specific permissions.",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.attribute.PosixFilePermissions.fromString()",
            "java.nio.file.attribute.PosixFilePermissions.asFileAttribute()",
            "java.nio.file.Files.createFile()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.attribute.PosixFilePermissions",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2232": {
        "Query": "Creates a new instance of a JPanel and sets the opacity of the panel to 0.",
        "GroundTruth": [
            "javax.swing.JComponent.setOpaque()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "2233": {
        "Query": "Creates a new instance of the DOM registry and get an implementation of DOM 3 with Load Save objects.",
        "GroundTruth": [
            "org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance()"
        ],
        "APIClasses": [
            "org.w3c.dom.bootstrap.DOMImplementationRegistry"
        ],
        "Source": "Tutorial Websites"
    },
    "2234": {
        "Query": "Creates a new list from the iterable elements.",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2235": {
        "Query": "Creates a panel that contains a JTable that can be sorted can be sorted.",
        "GroundTruth": [
            "javax.swing.JTable.setCellSelectionEnabled()",
            "javax.swing.table.TableColumn.setHeaderRenderer()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "2236": {
        "Query": "Creates a polygon for from the specified x and y coordinates.",
        "GroundTruth": [
            "java.awt.geom.Path2D.closePath()"
        ],
        "APIClasses": [
            "java.awt.geom.Path2D"
        ],
        "Source": "Tutorial Websites"
    },
    "2237": {
        "Query": "Creates a random matrix.",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2238": {
        "Query": "Creates a random string whose length is the number of characters specified. Characters will be chosen from the set of numeric characters.",
        "GroundTruth": [
            "java.util.Random.nextInt()",
            "java.lang.Character.isLetter()",
            "java.lang.Character.isDigit()"
        ],
        "APIClasses": [
            "java.util.Random",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "2239": {
        "Query": "Creates a short integer from a bitset",
        "GroundTruth": [
            "java.util.BitSet.nextSetBit()"
        ],
        "APIClasses": [
            "java.util.BitSet"
        ],
        "Source": "Tutorial Websites"
    },
    "2240": {
        "Query": "Creates a single normalized impulse signal with its peak at t=1/k.",
        "GroundTruth": [
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2241": {
        "Query": "Creates a temporary file that contains the given string.",
        "GroundTruth": [
            "java.io.File.createTempFile()",
            "java.io.File.deleteOnExit()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.File",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2242": {
        "Query": "Creates a text field that prefers the supplied width.",
        "GroundTruth": [
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2243": {
        "Query": "Creates a triangle shape that points downwards.",
        "GroundTruth": [
            "java.awt.geom.Path2D.closePath()"
        ],
        "APIClasses": [
            "java.awt.geom.Path2D"
        ],
        "Source": "Tutorial Websites"
    },
    "2244": {
        "Query": "Creates a triangle shape that points upwards.",
        "GroundTruth": [
            "java.awt.geom.Path2D.closePath()"
        ],
        "APIClasses": [
            "java.awt.geom.Path2D"
        ],
        "Source": "Tutorial Websites"
    },
    "2245": {
        "Query": "Creates an InputStream that reads from the audio input stream provided, and first provides WAVE header information Note, the passed in stream should have length information associated with it",
        "GroundTruth": [
            "javax.sound.sampled.AudioSystem.write()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "2246": {
        "Query": "Creates an Instant from java.util.Date or it's subclasses.",
        "GroundTruth": [
            "java.time.Instant.ofEpochMilli()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.time.Instant",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "2247": {
        "Query": "Creates an UTF-8 string from a byte array.",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2248": {
        "Query": "Creates an XMLInputFactory with unsafe features disabled.",
        "GroundTruth": [
            "javax.xml.stream.XMLInputFactory.newInstance()"
        ],
        "APIClasses": [
            "javax.xml.stream.XMLInputFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "2249": {
        "Query": "Creates an array of the specified class and populate it with items of the specified Iterable .",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.util.List.size()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.util.List",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2250": {
        "Query": "Creates an array with a single object as component.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.reflect.Array.newInstance()",
            "java.lang.reflect.Array.set()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "2251": {
        "Query": "Creates an audio input stream using the passed in byte array and the given format.",
        "GroundTruth": [
            "javax.sound.sampled.AudioFormat.getFrameSize()",
            "java.lang.Math.ceil()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFormat",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2252": {
        "Query": "Creates an element in the specified namespace, with the specified tag and namespace prefix.",
        "GroundTruth": [
            "org.w3c.dom.Document.createElementNS()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2253": {
        "Query": "Creates an invisible cursor",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.createCustomCursor()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "2254": {
        "Query": "Creates an long out of a bitset",
        "GroundTruth": [
            "java.util.BitSet.nextSetBit()"
        ],
        "APIClasses": [
            "java.util.BitSet"
        ],
        "Source": "Tutorial Websites"
    },
    "2255": {
        "Query": "Creates an object name using the scheme for MBean.",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2256": {
        "Query": "Creates and returns a map populated with the keyValuesSets where the value held by the tuples are they key and value in that order.",
        "GroundTruth": [
            "java.util.Map.put()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "2257": {
        "Query": "Creates and returns a translated shape.",
        "GroundTruth": [
            "java.awt.geom.AffineTransform.getTranslateInstance()",
            "java.awt.Shape.getBounds2D()"
        ],
        "APIClasses": [
            "java.awt.geom.AffineTransform",
            "java.awt.Shape"
        ],
        "Source": "Tutorial Websites"
    },
    "2258": {
        "Query": "Creates defensive copy of list if",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.size()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2259": {
        "Query": "Creates proxy (implementation) for given annotation type with given parameters.",
        "GroundTruth": [
            "java.lang.reflect.Proxy.newProxyInstance()"
        ],
        "APIClasses": [
            "java.lang.reflect.Proxy"
        ],
        "Source": "Tutorial Websites"
    },
    "2260": {
        "Query": "Creates random string of characters and digits.",
        "GroundTruth": [
            "java.util.Scanner.nextInt()",
            "java.util.PrimitiveIterator.OfInt.nextInt()",
            "java.util.Random.nextInt()",
            "java.util.concurrent.ThreadLocalRandom.nextInt()",
            "java.util.SplittableRandom.nextInt()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.PrimitiveIterator.OfInt",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "2261": {
        "Query": "Creates random string of characters.",
        "GroundTruth": [
            "java.util.Scanner.nextInt()",
            "java.util.PrimitiveIterator.OfInt.nextInt()",
            "java.util.Random.nextInt()",
            "java.util.concurrent.ThreadLocalRandom.nextInt()",
            "java.util.SplittableRandom.nextInt()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.PrimitiveIterator.OfInt",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "2262": {
        "Query": "Creates random string that consist only of numbers.",
        "GroundTruth": [
            "java.util.Scanner.nextInt()",
            "java.util.PrimitiveIterator.OfInt.nextInt()",
            "java.util.Random.nextInt()",
            "java.util.concurrent.ThreadLocalRandom.nextInt()",
            "java.util.SplittableRandom.nextInt()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.PrimitiveIterator.OfInt",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "2263": {
        "Query": "Creates random string whose length is the number of characters specified.",
        "GroundTruth": [
            "java.util.Scanner.nextInt()",
            "java.util.PrimitiveIterator.OfInt.nextInt()",
            "java.util.Random.nextInt()",
            "java.util.concurrent.ThreadLocalRandom.nextInt()",
            "java.util.SplittableRandom.nextInt()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.PrimitiveIterator.OfInt",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "2264": {
        "Query": "Creates row header for JTable with row number (starting with 1) displayed",
        "GroundTruth": [
            "javax.swing.JScrollPane.setRowHeader()",
            "javax.swing.JScrollPane.setRowHeaderView()"
        ],
        "APIClasses": [
            "javax.swing.JScrollPane",
            "javax.swing.JScrollPane"
        ],
        "Source": "Tutorial Websites"
    },
    "2265": {
        "Query": "Creating Instances of the ZoneOffset Class",
        "GroundTruth": [
            "java.time.ZoneOffset.ofHours()",
            "java.time.ZoneOffset.ofHoursMinutes()",
            "java.time.ZoneOffset.ofHoursMinutesSeconds()",
            "java.time.ZoneOffset.of()"
        ],
        "APIClasses": [
            "java.time.ZoneOffset"
        ],
        "Source": "Tutorial Websites"
    },
    "2266": {
        "Query": "Creating MySQL database programmatically in Java",
        "GroundTruth": [
            "java.sql.DriverManager.getConnection()",
            "javax.sql.RowSet.execute()"
        ],
        "APIClasses": [
            "java.sql.DriverManager",
            "javax.sql.RowSet"
        ],
        "Source": "Tutorial Websites"
    },
    "2267": {
        "Query": "Creating Temporary Files with the createTempFile() method",
        "GroundTruth": [
            "java.nio.file.Files.createTempFile()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2268": {
        "Query": "Creating Threads That Work Together",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2269": {
        "Query": "Creating a Borderless Window",
        "GroundTruth": [
            "java.awt.Window.setSize()",
            "java.awt.Window.setVisible()"
        ],
        "APIClasses": [
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "2270": {
        "Query": "Creating a Certification Path",
        "GroundTruth": [
            "java.security.cert.CertificateFactory.getInstance()",
            "java.security.cert.CertificateFactory.generateCertPath()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.security.cert.CertificateFactory",
            "java.security.cert.CertificateFactory",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2271": {
        "Query": "Creating a Client Socket",
        "GroundTruth": [
            "java.net.InetAddress.getByName()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "2272": {
        "Query": "Creating a Color Chooser Dialog",
        "GroundTruth": [
            "javax.swing.JColorChooser.showDialog()"
        ],
        "APIClasses": [
            "javax.swing.JColorChooser"
        ],
        "Source": "Tutorial Websites"
    },
    "2273": {
        "Query": "Creating a Custom Event",
        "GroundTruth": [
            "javax.swing.event.EventListenerList.getListenerList()"
        ],
        "APIClasses": [
            "javax.swing.event.EventListenerList"
        ],
        "Source": "Tutorial Websites"
    },
    "2274": {
        "Query": "Creating a Directory By using the default FileSystem",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.FileSystem.getPath()",
            "java.nio.file.Files.createDirectory()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.FileSystem",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2275": {
        "Query": "Creating a File Chooser Dialog",
        "GroundTruth": [
            "javax.swing.JFileChooser.showOpenDialog()",
            "javax.swing.JFileChooser.showSaveDialog()"
        ],
        "APIClasses": [
            "javax.swing.JFileChooser",
            "javax.swing.JFileChooser"
        ],
        "Source": "Tutorial Websites"
    },
    "2276": {
        "Query": "Creating a File Lock on a File",
        "GroundTruth": [
            "java.nio.channels.Channel.close()"
        ],
        "APIClasses": [
            "java.nio.channels.Channel"
        ],
        "Source": "Tutorial Websites"
    },
    "2277": {
        "Query": "Creating a Gray Version of an Icon",
        "GroundTruth": [
            "javax.swing.GrayFilter.createDisabledImage()"
        ],
        "APIClasses": [
            "javax.swing.GrayFilter"
        ],
        "Source": "Tutorial Websites"
    },
    "2278": {
        "Query": "Creating a HDF5 file input",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()",
            "java.lang.System.getProperties()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2279": {
        "Query": "Creating a JColorChooser Dialog",
        "GroundTruth": [
            "javax.swing.JColorChooser.showDialog()",
            "java.awt.Dialog.setVisible()"
        ],
        "APIClasses": [
            "javax.swing.JColorChooser",
            "java.awt.Dialog"
        ],
        "Source": "Tutorial Websites"
    },
    "2280": {
        "Query": "Creating a JTable Component",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2281": {
        "Query": "Creating a JTextField Component",
        "GroundTruth": [
            "java.awt.TextField.addActionListener()"
        ],
        "APIClasses": [
            "java.awt.TextField"
        ],
        "Source": "Tutorial Websites"
    },
    "2282": {
        "Query": "Creating a KeyStroke and Binding It to an Action",
        "GroundTruth": [
            "javax.swing.JComponent.getInputMap()",
            "javax.swing.KeyStroke.getKeyStroke()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "javax.swing.KeyStroke"
        ],
        "Source": "Tutorial Websites"
    },
    "2283": {
        "Query": "Creating a Keyed Digest Using MD5",
        "GroundTruth": [
            "java.security.MessageDigest.getInstance()",
            "java.security.MessageDigest.digest()"
        ],
        "APIClasses": [
            "java.security.MessageDigest",
            "java.security.MessageDigest"
        ],
        "Source": "Tutorial Websites"
    },
    "2284": {
        "Query": "Creating a MySQL Table to Store Java Types",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2285": {
        "Query": "Creating a New Directory",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.createDirectory()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2286": {
        "Query": "Creating a New File",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.createFile()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2287": {
        "Query": "Creating a Non-Blocking Server Socket",
        "GroundTruth": [
            "java.nio.channels.ServerSocketChannel.open()"
        ],
        "APIClasses": [
            "java.nio.channels.ServerSocketChannel"
        ],
        "Source": "Tutorial Websites"
    },
    "2288": {
        "Query": "Creating a Non-Blocking Socket",
        "GroundTruth": [
            "java.nio.channels.SocketChannel.finishConnect()",
            "java.nio.channels.SocketChannel.open()"
        ],
        "APIClasses": [
            "java.nio.channels.SocketChannel"
        ],
        "Source": "Tutorial Websites"
    },
    "2289": {
        "Query": "Creating a Proxy Object",
        "GroundTruth": [
            "java.lang.reflect.Proxy.newProxyInstance()"
        ],
        "APIClasses": [
            "java.lang.reflect.Proxy"
        ],
        "Source": "Tutorial Websites"
    },
    "2290": {
        "Query": "Creating a SQLServer Table to Store Java Types",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2291": {
        "Query": "Creating a Scrollable Result Set",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2292": {
        "Query": "Creating a Shape Using Lines and Curves",
        "GroundTruth": [
            "java.awt.geom.Path2D.closePath()"
        ],
        "APIClasses": [
            "java.awt.geom.Path2D"
        ],
        "Source": "Tutorial Websites"
    },
    "2293": {
        "Query": "Creating a Shape from a Stroked Shape",
        "GroundTruth": [
            "java.awt.Stroke.createStrokedShape()"
        ],
        "APIClasses": [
            "java.awt.Stroke"
        ],
        "Source": "Tutorial Websites"
    },
    "2294": {
        "Query": "Creating a Stream from a Channel",
        "GroundTruth": [
            "java.nio.channels.Channels.newOutputStream()",
            "java.nio.channels.Channels.newInputStream()"
        ],
        "APIClasses": [
            "java.nio.channels.Channels"
        ],
        "Source": "Tutorial Websites"
    },
    "2295": {
        "Query": "Creating a Symbolic Link",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.createSymbolicLink()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2296": {
        "Query": "Creating a Temporary Directory",
        "GroundTruth": [
            "java.nio.file.Files.createTempDirectory()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2297": {
        "Query": "Creating a Temporary File",
        "GroundTruth": [
            "java.io.File.createTempFile()",
            "java.io.File.deleteOnExit()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2298": {
        "Query": "Creating a Text Field to Display and Edit a Phone Number",
        "GroundTruth": [
            "javax.swing.text.MaskFormatter.setPlaceholderCharacter()"
        ],
        "APIClasses": [
            "javax.swing.text.MaskFormatter"
        ],
        "Source": "Tutorial Websites"
    },
    "2299": {
        "Query": "Creating a Type-Specific Map [5.0]",
        "GroundTruth": [
            "java.util.Map.put()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "2300": {
        "Query": "Creating a VARRAY Type in an Oracle Database",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2301": {
        "Query": "Creating a class that implements Runnable",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2302": {
        "Query": "Creating a compound HDF5 data type",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2303": {
        "Query": "Creating a file and use if statement to check if the creation is successful",
        "GroundTruth": [
            "java.io.File.createNewFile()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2304": {
        "Query": "Creating a path between two locations",
        "GroundTruth": [
            "java.nio.file.Paths.get()"
        ],
        "APIClasses": [
            "java.nio.file.Paths"
        ],
        "Source": "Tutorial Websites"
    },
    "2305": {
        "Query": "Creating a resource that can be used with the try-with-resources technique",
        "GroundTruth": [
            "java.lang.Throwable.getSuppressed()"
        ],
        "APIClasses": [
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "2306": {
        "Query": "Creating a symbolic link to a directory",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.createSymbolicLink()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2307": {
        "Query": "Creating an Oracle Table to Store Java Types",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2308": {
        "Query": "Creating an Updatable Result Set",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2309": {
        "Query": "Creating and Using a Class",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2310": {
        "Query": "Cumulative Sum Of Power in double array",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2311": {
        "Query": "Custom ResourceBundle by extending ListResourceBundle",
        "GroundTruth": [
            "java.util.ResourceBundle.getBundle()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.util.ResourceBundle",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2312": {
        "Query": "Custom ResourceBundle.Control to get Locale",
        "GroundTruth": [
            "java.util.ResourceBundle.getBundle()",
            "java.util.Locale.equals()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.ResourceBundle",
            "java.util.Locale",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2313": {
        "Query": "Custom creation method for JEditorPane .",
        "GroundTruth": [
            "javax.swing.JEditorPane.setContentType()"
        ],
        "APIClasses": [
            "javax.swing.JEditorPane"
        ],
        "Source": "Tutorial Websites"
    },
    "2314": {
        "Query": "Custom creation method for JFormattedTextField .",
        "GroundTruth": [
            "java.text.NumberFormat.getIntegerInstance()"
        ],
        "APIClasses": [
            "java.text.NumberFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "2315": {
        "Query": "Customizing Tab Stops in a JTextPane Component",
        "GroundTruth": [
            "java.util.List.add()",
            "java.util.List.toArray()",
            "javax.swing.text.StyleConstants.setTabSet()"
        ],
        "APIClasses": [
            "java.util.List",
            "javax.swing.text.StyleConstants"
        ],
        "Source": "Tutorial Websites"
    },
    "2316": {
        "Query": "Cut the arrays from position pos.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2317": {
        "Query": "Cuts the decimals of a number to a specified amount.",
        "GroundTruth": [
            "java.text.DecimalFormat.format()"
        ],
        "APIClasses": [
            "java.text.DecimalFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "2318": {
        "Query": "Data Binding with Low-level binding API in JavaFX",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2319": {
        "Query": "Date after By Day",
        "GroundTruth": [
            "java.util.Calendar.getTime()",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "2320": {
        "Query": "Date before By Day",
        "GroundTruth": [
            "java.util.Calendar.getTime()",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "2321": {
        "Query": "Date equals By Day",
        "GroundTruth": [
            "java.util.Calendar.getTime()",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "2322": {
        "Query": "Date format with custom format string and Locale",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2323": {
        "Query": "Declare a node class as a node of a binary search tree",
        "GroundTruth": [
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2324": {
        "Query": "Declaring an array of an interface type",
        "GroundTruth": [
            "java.nio.file.Files.walk()"
        ],
        "APIClasses": [
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2325": {
        "Query": "Decode an HTML color string like '#F567BA;' into a Color",
        "GroundTruth": [
            "java.lang.String.startsWith()",
            "java.lang.String.substring()",
            "java.lang.String.endsWith()",
            "java.lang.String.length()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "2326": {
        "Query": "Decode given  URL Query String to map.",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.net.URLDecoder.decode()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.net.URLDecoder"
        ],
        "Source": "Tutorial Websites"
    },
    "2327": {
        "Query": "Decode specials chars for XML representation",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2328": {
        "Query": "Decodes Base64 data into octets",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toCharArray()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2329": {
        "Query": "Decodes a String to Base64",
        "GroundTruth": [
            "java.util.Base64.getDecoder()"
        ],
        "APIClasses": [
            "java.util.Base64"
        ],
        "Source": "Tutorial Websites"
    },
    "2330": {
        "Query": "Decodes a byte array from Base64 format.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2331": {
        "Query": "Decodes a string from Base64 format.",
        "GroundTruth": [
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2332": {
        "Query": "Decodes a urlencoded string into a byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toCharArray()",
            "java.lang.Character.digit()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "2333": {
        "Query": "Decodes the supplied base 64 encoded string into its original byte array, using the standard base 64 decoding algorithm.",
        "GroundTruth": [
            "java.lang.String.replace()",
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2334": {
        "Query": "Decompress String and return a String",
        "GroundTruth": [
            "java.lang.AutoCloseable.close()",
            "java.lang.Throwable.printStackTrace()"
        ],
        "APIClasses": [
            "java.lang.AutoCloseable",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "2335": {
        "Query": "Decorates a JavaFX dialog with window icons.",
        "GroundTruth": [
            "java.awt.event.WindowEvent.getWindow()"
        ],
        "APIClasses": [
            "java.awt.event.WindowEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "2336": {
        "Query": "Decorates the given dialog with a action which will be executed when the ESC key is hit while the dialog or one of its subcomponents has the focus.",
        "GroundTruth": [
            "javax.swing.JComponent.registerKeyboardAction()",
            "javax.swing.KeyStroke.getKeyStroke()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "javax.swing.KeyStroke"
        ],
        "Source": "Tutorial Websites"
    },
    "2337": {
        "Query": "Decorates the given dialog with a keyboard action which calls JDialog#dispose() when the ESC key is hit while the dialog or one of its subcomponents has the focus.",
        "GroundTruth": [
            "javax.swing.JComponent.registerKeyboardAction()",
            "javax.swing.KeyStroke.getKeyStroke()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "javax.swing.KeyStroke"
        ],
        "Source": "Tutorial Websites"
    },
    "2338": {
        "Query": "Decrements the given number down to the closest power of two.",
        "GroundTruth": [
            "java.lang.Integer.highestOneBit()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "2339": {
        "Query": "Decrypt a byte array given the same secret key spec used to encrypt the message",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()",
            "javax.crypto.Cipher.doFinal()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "2340": {
        "Query": "Decrypt byte array using AES algorithm",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "javax.crypto.Cipher.getInstance()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "2341": {
        "Query": "Decrypt text using RSA private key.",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()",
            "javax.crypto.Cipher.doFinal()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "2342": {
        "Query": "DefaultListModel move Item Up",
        "GroundTruth": [
            "java.awt.List.getSelectedIndex()"
        ],
        "APIClasses": [
            "java.awt.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2343": {
        "Query": "Defaults BufferedImage to INT_ARGB",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getDefaultScreenDevice()",
            "java.awt.GraphicsDevice.getDefaultConfiguration()",
            "java.awt.GraphicsConfiguration.createCompatibleImage()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice",
            "java.awt.GraphicsConfiguration"
        ],
        "Source": "Tutorial Websites"
    },
    "2344": {
        "Query": "Define a Path from a URI",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.net.URI.create()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.net.URI"
        ],
        "Source": "Tutorial Websites"
    },
    "2345": {
        "Query": "Define a User Attribute",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.getFileAttributeView()",
            "java.nio.charset.Charset.defaultCharset()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.nio.charset.Charset"
        ],
        "Source": "Tutorial Websites"
    },
    "2346": {
        "Query": "Deletes a LDAP record.",
        "GroundTruth": [
            "java.util.logging.Logger.info()",
            "java.util.logging.Logger.log()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "2347": {
        "Query": "Deleting All Rows from a Database Table",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2348": {
        "Query": "Deleting Files and Directories",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.delete()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2349": {
        "Query": "Deleting a Database Table",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2350": {
        "Query": "Deleting a Row from a Database Table",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.Connection.prepareStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2351": {
        "Query": "Deleting a Row from a Database Table Using an Updatable Result Set",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.ResultSet.first()",
            "java.sql.ResultSet.deleteRow()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "2352": {
        "Query": "Deleting a Temporary File with DELETE_ON_CLOSE",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.createTempFile()",
            "java.nio.file.Files.newOutputStream()",
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2353": {
        "Query": "Deleting an OBJECT Type from an Oracle Table",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2354": {
        "Query": "Deleting files or directories",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.delete()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2355": {
        "Query": "Demonstrate asynchronous connection of a SocketChannel.",
        "GroundTruth": [
            "java.nio.channels.SocketChannel.open()",
            "java.nio.channels.SocketChannel.finishConnect()"
        ],
        "APIClasses": [
            "java.nio.channels.SocketChannel",
            "java.nio.channels.SocketChannel"
        ],
        "Source": "Tutorial Websites"
    },
    "2356": {
        "Query": "Demonstrates RDN comparison in LADP",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2357": {
        "Query": "Demonstrates reading of a file from Distributed HDFS.",
        "GroundTruth": [
            "java.lang.System.setProperty()",
            "java.util.Scanner.hasNextLine()",
            "java.util.Scanner.nextLine()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "2358": {
        "Query": "Demonstrates the length, charAt and getChars methods of the String class.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.getChars()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2359": {
        "Query": "Depending on the size, return a size formatted in bytes, K, M, G or T bytes.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2360": {
        "Query": "Destroy the given ByteBuffer if possible",
        "GroundTruth": [
            "java.nio.Buffer.isDirect()"
        ],
        "APIClasses": [
            "java.nio.Buffer"
        ],
        "Source": "Tutorial Websites"
    },
    "2361": {
        "Query": "Destroys specified status in twitter",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "2362": {
        "Query": "Detect whether or not there is anything MIDI playing.",
        "GroundTruth": [
            "javax.sound.midi.MidiDevice.isOpen()",
            "javax.sound.midi.Sequencer.isRunning()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiDevice",
            "javax.sound.midi.Sequencer",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2363": {
        "Query": "Detecting Changes in an ObservableList",
        "GroundTruth": [
            "java.util.List.addAll()",
            "java.util.List.remove()",
            "java.util.List.retainAll()",
            "java.util.List.set()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2364": {
        "Query": "Detecting Double and Triple Clicks",
        "GroundTruth": [
            "java.awt.Component.addMouseListener()",
            "java.awt.event.MouseEvent.getClickCount()"
        ],
        "APIClasses": [
            "java.awt.Component",
            "java.awt.event.MouseEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "2365": {
        "Query": "Determine File or Directory",
        "GroundTruth": [
            "java.io.File.isFile()",
            "java.io.File.getPath()",
            "java.io.File.isDirectory()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2366": {
        "Query": "Determine if File or Directory is hidden",
        "GroundTruth": [
            "java.io.File.isHidden()",
            "java.io.File.getPath()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2367": {
        "Query": "Determine if a String contains any XML special characters, return true if it does.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2368": {
        "Query": "Determine if a file can be read",
        "GroundTruth": [
            "java.io.File.canRead()",
            "java.io.File.getPath()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2369": {
        "Query": "Determine if a file can be written",
        "GroundTruth": [
            "java.io.File.canWrite()",
            "java.io.File.getPath()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2370": {
        "Query": "Determine if classes can be assigned from",
        "GroundTruth": [
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "2371": {
        "Query": "Determine if file or directory exists",
        "GroundTruth": [
            "java.io.File.exists()",
            "java.io.File.getPath()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2372": {
        "Query": "Determine if the given address is a valid email address using regex",
        "GroundTruth": [
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "2373": {
        "Query": "Determine if the given address is a valid email short code using regex",
        "GroundTruth": [
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "2374": {
        "Query": "Determine if the given address is a valid phone number using regex",
        "GroundTruth": [
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "2375": {
        "Query": "Determine if the transfer encoding looks like it might be valid ascii text, and thus transferable as 7bit code.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2376": {
        "Query": "Determine operating system using System class",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2377": {
        "Query": "Determine the index position of the first occurrence of the given object instance in the given collection.",
        "GroundTruth": [
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "2378": {
        "Query": "Determine the size of a specified collection.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.size()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "2379": {
        "Query": "Determine whether an annotation for the specified annotation Type is present on the supplied clazz and is java.lang.annotation.Inherited inherited i.e., not declared locally for the class).",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.annotation.Annotation.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "2380": {
        "Query": "Determine whether the given Collection only contains a single unique object.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.isEmpty()",
            "java.util.Map.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection",
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "2381": {
        "Query": "Determine whether the given MIDI event is a Lyric (a syllable of the song text).",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getMessage()",
            "javax.sound.midi.MidiEvent.getMessage()",
            "javax.sound.midi.MetaMessage.getType()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.MidiEvent",
            "javax.sound.midi.MetaMessage"
        ],
        "Source": "Tutorial Websites"
    },
    "2382": {
        "Query": "Determine whether the given MIDI event is a Program change event",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getMessage()",
            "javax.sound.midi.MidiEvent.getMessage()",
            "javax.sound.midi.ShortMessage.getCommand()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.MidiEvent",
            "javax.sound.midi.ShortMessage"
        ],
        "Source": "Tutorial Websites"
    },
    "2383": {
        "Query": "Determine whether the given MIDI event is a track name event.",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getMessage()",
            "javax.sound.midi.MidiEvent.getMessage()",
            "javax.sound.midi.MetaMessage.getType()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.MidiEvent",
            "javax.sound.midi.MetaMessage"
        ],
        "Source": "Tutorial Websites"
    },
    "2384": {
        "Query": "Determine whether the given MIDI event is a track name message.",
        "GroundTruth": [
            "javax.sound.midi.MetaMessage.getType()"
        ],
        "APIClasses": [
            "javax.sound.midi.MetaMessage"
        ],
        "Source": "Tutorial Websites"
    },
    "2385": {
        "Query": "Determine whether the given MIDI message is a Lyric.",
        "GroundTruth": [
            "javax.sound.midi.MetaMessage.getType()"
        ],
        "APIClasses": [
            "javax.sound.midi.MetaMessage"
        ],
        "Source": "Tutorial Websites"
    },
    "2386": {
        "Query": "Determine whether the given MIDI message is a Program change message (change of the instrument sound).",
        "GroundTruth": [
            "javax.sound.midi.ShortMessage.getCommand()"
        ],
        "APIClasses": [
            "javax.sound.midi.ShortMessage"
        ],
        "Source": "Tutorial Websites"
    },
    "2387": {
        "Query": "Determine whether the given image is grayscale",
        "GroundTruth": [
            "javax.swing.Icon.getIconWidth()",
            "javax.swing.Icon.getIconHeight()",
            "java.awt.image.PixelGrabber.grabPixels()"
        ],
        "APIClasses": [
            "javax.swing.Icon",
            "java.awt.image.PixelGrabber"
        ],
        "Source": "Tutorial Websites"
    },
    "2388": {
        "Query": "Determines if a string is in a list of phrases",
        "GroundTruth": [
            "java.util.regex.Pattern.quote()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "2389": {
        "Query": "Determines if any string in a list are in a given phrase",
        "GroundTruth": [
            "java.util.regex.Pattern.quote()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "2390": {
        "Query": "Determines if any strings in a list are in a list of phrases",
        "GroundTruth": [
            "java.util.regex.Pattern.quote()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "2391": {
        "Query": "Determines if any words in a list are in a given phrase.",
        "GroundTruth": [
            "java.util.regex.Pattern.quote()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2392": {
        "Query": "Determines if the String has any UTF-8 Type Characters in it's Data.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2393": {
        "Query": "Determines if the event is originated from a left mouse button",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isLeftMouseButton()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "2394": {
        "Query": "Determines if the event is originated from the right mouse button",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isRightMouseButton()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "2395": {
        "Query": "Determines if the given ShortMessage is a MIDI NOTE OFF message.",
        "GroundTruth": [
            "javax.sound.midi.ShortMessage.getCommand()",
            "javax.sound.midi.ShortMessage.getData2()"
        ],
        "APIClasses": [
            "javax.sound.midi.ShortMessage",
            "javax.sound.midi.ShortMessage"
        ],
        "Source": "Tutorial Websites"
    },
    "2396": {
        "Query": "Determines if the given ShortMessage is a MIDI NOTE ON message.",
        "GroundTruth": [
            "javax.sound.midi.ShortMessage.getCommand()",
            "javax.sound.midi.ShortMessage.getData2()"
        ],
        "APIClasses": [
            "javax.sound.midi.ShortMessage",
            "javax.sound.midi.ShortMessage"
        ],
        "Source": "Tutorial Websites"
    },
    "2397": {
        "Query": "Determines if the given ShortMessage is a MIDI Pitch Bend message",
        "GroundTruth": [
            "javax.sound.midi.ShortMessage.getCommand()"
        ],
        "APIClasses": [
            "javax.sound.midi.ShortMessage"
        ],
        "Source": "Tutorial Websites"
    },
    "2398": {
        "Query": "Determines if the given double value is zero (according to the precision) or not",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2399": {
        "Query": "Determines if the given year is a leap year.",
        "GroundTruth": [
            "java.util.GregorianCalendar.isLeapYear()"
        ],
        "APIClasses": [
            "java.util.GregorianCalendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2400": {
        "Query": "Determines if two double values are equivalents according to the precision.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2401": {
        "Query": "Determines that all of the items returned in the given iterator evaluate to true against the given predicate.",
        "GroundTruth": [
            "java.util.function.Predicate.test()"
        ],
        "APIClasses": [
            "java.util.function.Predicate"
        ],
        "Source": "Tutorial Websites"
    },
    "2402": {
        "Query": "Determines that any of the items returned in the given iterator evaluate to true against the given predicate.",
        "GroundTruth": [
            "java.util.function.Predicate.test()"
        ],
        "APIClasses": [
            "java.util.function.Predicate"
        ],
        "Source": "Tutorial Websites"
    },
    "2403": {
        "Query": "Determines that at least the given number of the items evaluate to true against the given predicate.",
        "GroundTruth": [
            "java.util.function.Predicate.test()"
        ],
        "APIClasses": [
            "java.util.function.Predicate"
        ],
        "Source": "Tutorial Websites"
    },
    "2404": {
        "Query": "Determines that at most the given number of the items evaluate to true against the given predicate.",
        "GroundTruth": [
            "java.util.function.Predicate.test()"
        ],
        "APIClasses": [
            "java.util.function.Predicate"
        ],
        "Source": "Tutorial Websites"
    },
    "2405": {
        "Query": "Determines that none of the items returned in the given iterator evaluate to true against the given predicate.",
        "GroundTruth": [
            "java.util.function.Predicate.test()"
        ],
        "APIClasses": [
            "java.util.function.Predicate"
        ],
        "Source": "Tutorial Websites"
    },
    "2406": {
        "Query": "Determines the distance of the given object to the given class in the inheritance tree.",
        "GroundTruth": [
            "java.lang.Class.isInstance()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2407": {
        "Query": "Determines the end of a word for the given model location in Swing Text Component.",
        "GroundTruth": [
            "javax.swing.text.Utilities.getWordEnd()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "javax.swing.text.Utilities",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2408": {
        "Query": "Determines the intersection of two line segments, if one exists.",
        "GroundTruth": [
            "java.lang.Math.max()",
            "java.lang.Math.min()",
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2409": {
        "Query": "Determines the intersection of two lines, if one exists.",
        "GroundTruth": [
            "java.lang.Math.max()",
            "java.lang.Math.min()",
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2410": {
        "Query": "Determines the maximum numerical value in an array of values.",
        "GroundTruth": [
            "java.lang.Double.isNaN()",
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2411": {
        "Query": "Determines the start of a word for the given model location in Swing text Component.",
        "GroundTruth": [
            "javax.swing.text.Utilities.getWordStart()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "javax.swing.text.Utilities",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2412": {
        "Query": "Determines whether a floating point value is close enough to zero to be considered \"equal\" to zero (i.e., the difference may be attributed to rounding errors).",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2413": {
        "Query": "Determines whether a specific boolean flag is set on XML element.",
        "GroundTruth": [
            "org.w3c.dom.Element.getAttribute()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2414": {
        "Query": "Determines whether a specified word has already been added to the array.",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2415": {
        "Query": "Determines whether the given Color is more dark than light.",
        "GroundTruth": [
            "java.awt.Color.getRGBColorComponents()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.awt.Color",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2416": {
        "Query": "Determines whether the values in the given array of doubles are all equal within a tolerance of #EPSILON",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2417": {
        "Query": "Determines whether two floating point values are close enough to be considered \"equal\" (i.e., the difference may be attributed to rounding errors).",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2418": {
        "Query": "Determining If Two Filename Paths Refer to the Same File",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.io.File.getCanonicalFile()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.io.File",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2419": {
        "Query": "Determining If a ByteBuffer Is Direct",
        "GroundTruth": [
            "java.nio.ByteBuffer.wrap()",
            "java.nio.ByteBuffer.allocate()",
            "java.nio.ByteBuffer.allocateDirect()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "2420": {
        "Query": "Determining If a Database Supports Batching",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.supportsBatchUpdates()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData"
        ],
        "Source": "Tutorial Websites"
    },
    "2421": {
        "Query": "Determining If a Database Supports Scrollable Result Sets",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.supportsResultSetType()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData"
        ],
        "Source": "Tutorial Websites"
    },
    "2422": {
        "Query": "Determining If a Database Supports Transactions",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.supportsTransactions()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData"
        ],
        "Source": "Tutorial Websites"
    },
    "2423": {
        "Query": "Determining If a Database Supports Updatable Result Sets",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.supportsResultSetConcurrency()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData"
        ],
        "Source": "Tutorial Websites"
    },
    "2424": {
        "Query": "Determining If a Message Will Be Logged",
        "GroundTruth": [
            "java.util.logging.Logger.getLogger()",
            "java.util.logging.Logger.isLoggable()",
            "java.util.logging.Logger.finest()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "2425": {
        "Query": "Determining If a Preference Node Contains a Specific Value",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2426": {
        "Query": "Determining If a Preference Node Exists",
        "GroundTruth": [
            "java.util.prefs.Preferences.userRoot()"
        ],
        "APIClasses": [
            "java.util.prefs.Preferences"
        ],
        "Source": "Tutorial Websites"
    },
    "2427": {
        "Query": "Determining If a Result Set Is Scrollable",
        "GroundTruth": [
            "java.sql.ResultSet.getType()"
        ],
        "APIClasses": [
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "2428": {
        "Query": "Determining If a Result Set Is Updatable",
        "GroundTruth": [
            "java.sql.ResultSet.getConcurrency()"
        ],
        "APIClasses": [
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "2429": {
        "Query": "Determining If a String Matches a Pattern Exactly",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Matcher.reset()",
            "java.util.regex.Matcher.lookingAt()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "2430": {
        "Query": "Determining If an Attribute Was Supplied in a DOM Element",
        "GroundTruth": [
            "javax.swing.text.Element.getAttributes()"
        ],
        "APIClasses": [
            "javax.swing.text.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "2431": {
        "Query": "Determining If an Object Is an Array",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2432": {
        "Query": "Determining If the Approve or Cancel Button Was Clicked in a JFileChooser Dialog",
        "GroundTruth": [
            "javax.swing.JFileChooser.showOpenDialog()"
        ],
        "APIClasses": [
            "javax.swing.JFileChooser"
        ],
        "Source": "Tutorial Websites"
    },
    "2433": {
        "Query": "Determining If the Current Thread Is Holding a Synchronized Lock",
        "GroundTruth": [
            "java.lang.Thread.holdsLock()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2434": {
        "Query": "Determining Views Supported by a Particular File System",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.FileSystem.supportedFileAttributeViews()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.FileSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "2435": {
        "Query": "Determining When a Midi Audio Player Has Finished Playing",
        "GroundTruth": [
            "javax.sound.midi.MidiSystem.getSequencer()",
            "javax.sound.midi.Sequencer.addMetaEventListener()",
            "org.w3c.dom.events.Event.getType()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiSystem",
            "javax.sound.midi.Sequencer",
            "org.w3c.dom.events.Event"
        ],
        "Source": "Tutorial Websites"
    },
    "2436": {
        "Query": "Determining When a Print Job Has Finished",
        "GroundTruth": [
            "javax.print.PrintService.createPrintJob()",
            "java.lang.Object.notify()",
            "java.lang.Object.wait()"
        ],
        "APIClasses": [
            "javax.print.PrintService",
            "java.lang.Object",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2437": {
        "Query": "Determining When a Thread Has Finished",
        "GroundTruth": [
            "java.lang.Thread.start()",
            "java.lang.Thread.isAlive()",
            "java.lang.Thread.join()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2438": {
        "Query": "Determining When an Item Is No Longer on the System Clipboard",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()",
            "java.awt.datatransfer.Clipboard.setContents()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.awt.datatransfer.Clipboard"
        ],
        "Source": "Tutorial Websites"
    },
    "2439": {
        "Query": "Determining When the Application Is About to Exit",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.addShutdownHook()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "2440": {
        "Query": "Determining operating system support for attribute views",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Path.getFileSystem()",
            "java.nio.file.FileSystem.supportedFileAttributeViews()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Path",
            "java.nio.file.FileSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "2441": {
        "Query": "Determining the Capabilities of a Print Service",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2442": {
        "Query": "Determining the Encoding of a Sampled Audio File",
        "GroundTruth": [
            "javax.sound.sampled.AudioSystem.getAudioInputStream()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "2443": {
        "Query": "Determining the File Format of a Midi Audio File",
        "GroundTruth": [
            "javax.sound.midi.MidiSystem.getMidiFileFormat()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "2444": {
        "Query": "Determining the File Format of a Sampled Audio File",
        "GroundTruth": [
            "javax.sound.sampled.AudioSystem.getAudioFileFormat()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "2445": {
        "Query": "Determining the Type of a Character",
        "GroundTruth": [
            "java.lang.Character.isLetter()",
            "java.lang.Character.isDigit()",
            "java.lang.Character.isLowerCase()",
            "java.lang.Character.isUpperCase()"
        ],
        "APIClasses": [
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "2446": {
        "Query": "Determining the file content type",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.probeContentType()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2447": {
        "Query": "Determining the target of a link file",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.readSymbolicLink()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2448": {
        "Query": "Developing a Concise HTTP Client",
        "GroundTruth": [
            "java.util.logging.Logger.getLogger()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "2449": {
        "Query": "Developing an MDI Application Using Swing",
        "GroundTruth": [
            "java.awt.Frame.setExtendedState()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Tutorial Websites"
    },
    "2450": {
        "Query": "Difference Between Using Constructors and valueOf( ) Method to Create Integer Objects",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.lang.Integer.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "2451": {
        "Query": "Disable popup blocking for Remote Web Driver",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2452": {
        "Query": "Disables the forward and backward focus traversal keys on the given component.",
        "GroundTruth": [
            "java.util.Collections.emptySet()",
            "java.awt.Component.setFocusTraversalKeys()",
            "java.awt.Container.setFocusTraversalKeys()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.awt.Component",
            "java.awt.Container"
        ],
        "Source": "Tutorial Websites"
    },
    "2453": {
        "Query": "Disabling Certificate Validation in an HTTPS Connection",
        "GroundTruth": [
            "javax.net.ssl.SSLContext.getInstance()",
            "javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory()"
        ],
        "APIClasses": [
            "javax.net.ssl.SSLContext",
            "javax.net.ssl.HttpsURLConnection"
        ],
        "Source": "Tutorial Websites"
    },
    "2454": {
        "Query": "Discovering Available Print Services",
        "GroundTruth": [
            "javax.print.PrintServiceLookup.lookupPrintServices()",
            "javax.print.PrintServiceLookup.lookupDefaultPrintService()"
        ],
        "APIClasses": [
            "javax.print.PrintServiceLookup"
        ],
        "Source": "Tutorial Websites"
    },
    "2455": {
        "Query": "Discovering Available Streaming Print Services",
        "GroundTruth": [
            "javax.print.StreamPrintServiceFactory.lookupStreamPrintServiceFactories()"
        ],
        "APIClasses": [
            "javax.print.StreamPrintServiceFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "2456": {
        "Query": "Discretizes using a maximum entropy partitioning",
        "GroundTruth": [
            "java.lang.System.arraycopy()",
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2457": {
        "Query": "Discretizes using even bin sizes",
        "GroundTruth": [
            "java.lang.Double.isNaN()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "2458": {
        "Query": "Display Day of Week using Calendar",
        "GroundTruth": [
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2459": {
        "Query": "Display JFrame In Center",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "2460": {
        "Query": "Display Month of year using Calendar",
        "GroundTruth": [
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2461": {
        "Query": "Display a JavaFX Scene object.",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMinWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "2462": {
        "Query": "Display a String message one JavaFX window.",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMinWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "2463": {
        "Query": "Display a wizard-style JavaFX dialog.",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMinWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "2464": {
        "Query": "Display hadoop file system recursively",
        "GroundTruth": [
            "java.net.URI.create()"
        ],
        "APIClasses": [
            "java.net.URI"
        ],
        "Source": "Tutorial Websites"
    },
    "2465": {
        "Query": "Display progress value in JProgressBar to a text field",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2466": {
        "Query": "Displaying Only Directories in a File Chooser Dialog",
        "GroundTruth": [
            "javax.swing.JFileChooser.setFileSelectionMode()"
        ],
        "APIClasses": [
            "javax.swing.JFileChooser"
        ],
        "Source": "Tutorial Websites"
    },
    "2467": {
        "Query": "Displaying Text in a Swing Dialog Box",
        "GroundTruth": [
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "2468": {
        "Query": "Displaying the Page Format Dialog",
        "GroundTruth": [
            "java.awt.print.PrinterJob.getPrinterJob()",
            "java.awt.print.PrinterJob.defaultPage()",
            "java.awt.print.PrinterJob.pageDialog()"
        ],
        "APIClasses": [
            "java.awt.print.PrinterJob",
            "java.awt.print.PrinterJob",
            "java.awt.print.PrinterJob"
        ],
        "Source": "Tutorial Websites"
    },
    "2469": {
        "Query": "Displaying the Print Dialog",
        "GroundTruth": [
            "java.awt.print.PrinterJob.getPrinterJob()",
            "java.awt.print.PrinterJob.defaultPage()",
            "java.awt.print.PrinterJob.setPrintable()"
        ],
        "APIClasses": [
            "java.awt.print.PrinterJob",
            "java.awt.print.PrinterJob",
            "java.awt.print.PrinterJob"
        ],
        "Source": "Tutorial Websites"
    },
    "2470": {
        "Query": "Displays a shaped JFrame",
        "GroundTruth": [
            "java.awt.Window.setLocationRelativeTo()"
        ],
        "APIClasses": [
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "2471": {
        "Query": "Displays the custom resizable dialog box",
        "GroundTruth": [
            "java.awt.Dialog.setResizable()",
            "java.awt.Dialog.setVisible()"
        ],
        "APIClasses": [
            "java.awt.Dialog"
        ],
        "Source": "Tutorial Websites"
    },
    "2472": {
        "Query": "Divides given array on sub arrays",
        "GroundTruth": [
            "java.lang.Math.ceil()",
            "java.util.Arrays.copyOfRange()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2473": {
        "Query": "Divides the values in the two arrays of integers element-wise.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2474": {
        "Query": "Do a simple conversion of an array of 8 bit characters into a string.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2475": {
        "Query": "Does string have duplicate characters next to each other",
        "GroundTruth": [
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2476": {
        "Query": "Does the StringBuffer start with prefix?",
        "GroundTruth": [
            "java.lang.StringBuilder.indexOf()",
            "java.lang.StringBuffer.indexOf()",
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2477": {
        "Query": "Does the StringBuilder start with prefix?",
        "GroundTruth": [
            "java.lang.StringBuilder.indexOf()",
            "java.lang.StringBuffer.indexOf()",
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2478": {
        "Query": "Does the string contain XML special characters",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.equals()",
            "java.lang.Character.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "2479": {
        "Query": "Double.NaN is not equal to itself, which can have some strange consequences.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2480": {
        "Query": "Down sample an image",
        "GroundTruth": [
            "java.lang.System.arraycopy()",
            "java.lang.Math.sqrt()",
            "java.lang.System.exit()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2481": {
        "Query": "Download file using selenium ChromeDriver",
        "GroundTruth": [
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2482": {
        "Query": "Download from HTTP return InputStream",
        "GroundTruth": [
            "java.net.URLConnection.setConnectTimeout()",
            "java.net.URLConnection.setReadTimeout()"
        ],
        "APIClasses": [
            "java.net.URLConnection",
            "java.net.URLConnection"
        ],
        "Source": "Tutorial Websites"
    },
    "2483": {
        "Query": "Draw A Torus With Normal opengl",
        "GroundTruth": [
            "java.lang.Math.sin()",
            "java.lang.Math.cos()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2484": {
        "Query": "Draw SVG using apache batik",
        "GroundTruth": [
            "java.awt.Graphics2D.setPaint()",
            "org.w3c.dom.DOMImplementation.createDocument()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D",
            "org.w3c.dom.DOMImplementation"
        ],
        "Source": "Tutorial Websites"
    },
    "2485": {
        "Query": "Draw a focus rectangle on a graphics context.",
        "GroundTruth": [
            "java.awt.Graphics2D.setStroke()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "2486": {
        "Query": "Draw a string of text centered in the given Graphics object.",
        "GroundTruth": [
            "java.awt.FontMetrics.stringWidth()"
        ],
        "APIClasses": [
            "java.awt.FontMetrics"
        ],
        "Source": "Tutorial Websites"
    },
    "2487": {
        "Query": "Draw coordinate and curves",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2488": {
        "Query": "Draw curve using GeneralPath",
        "GroundTruth": [
            "java.awt.geom.AffineTransform.setToScale()"
        ],
        "APIClasses": [
            "java.awt.geom.AffineTransform"
        ],
        "Source": "Tutorial Websites"
    },
    "2489": {
        "Query": "Draw shape with Antialiasing",
        "GroundTruth": [
            "java.awt.Graphics2D.setRenderingHint()",
            "java.awt.Graphics2D.setPaint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D",
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "2490": {
        "Query": "Drawing on a Buffered Image",
        "GroundTruth": [
            "java.awt.Graphics2D.setComposite()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "2491": {
        "Query": "Drawing with a cyclic and non-cyclic Gradient Color",
        "GroundTruth": [
            "java.awt.Graphics2D.setPaint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "2492": {
        "Query": "Draws a line with a specified thickness",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2493": {
        "Query": "Draws a shape with the specified rotation about (x, y).",
        "GroundTruth": [
            "java.awt.geom.AffineTransform.getRotateInstance()"
        ],
        "APIClasses": [
            "java.awt.geom.AffineTransform"
        ],
        "Source": "Tutorial Websites"
    },
    "2494": {
        "Query": "Draws a string centered at a certain x-coordinate",
        "GroundTruth": [
            "java.awt.FontMetrics.stringWidth()"
        ],
        "APIClasses": [
            "java.awt.FontMetrics"
        ],
        "Source": "Tutorial Websites"
    },
    "2495": {
        "Query": "Draws an entire image (full size) at the specified coordinates.",
        "GroundTruth": [
            "java.awt.Graphics.drawImage()",
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.awt.Graphics",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2496": {
        "Query": "Dumps a single byte into a hex string.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2497": {
        "Query": "Duplicating elements rather than using a quantifier \\d\\d is \\d{2}",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "2498": {
        "Query": "Enables anti-aliasing for both text and other elements for the supplied 'g' Graphics object.",
        "GroundTruth": [
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "2499": {
        "Query": "Enabling Word-Wrapping and Line-Wrapping in a JTextArea Component",
        "GroundTruth": [
            "javax.swing.JTextArea.setLineWrap()",
            "javax.swing.JTextArea.setWrapStyleWord()"
        ],
        "APIClasses": [
            "javax.swing.JTextArea",
            "javax.swing.JTextArea"
        ],
        "Source": "Tutorial Websites"
    },
    "2500": {
        "Query": "Encloses a string into a CDATA construct as defined in its XML documentation",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2501": {
        "Query": "Encode XML attribute value.",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2502": {
        "Query": "Encode a String for XML output, displaying it to a PrintWriter.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2503": {
        "Query": "Encode characters from a char[] source, starting at offset and stopping when the character 0xffff is seen.",
        "GroundTruth": [
            "java.awt.Rectangle.grow()",
            "java.lang.StringBuilder.charAt()",
            "java.lang.StringBuffer.charAt()",
            "java.lang.CharSequence.charAt()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.awt.Rectangle",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2504": {
        "Query": "Encode image to string",
        "GroundTruth": [
            "javax.imageio.ImageIO.write()",
            "java.util.Base64.Encoder.encode()",
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO",
            "java.util.Base64.Encoder"
        ],
        "Source": "Tutorial Websites"
    },
    "2505": {
        "Query": "Encode specials chars for XML representation",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2506": {
        "Query": "Encode using apache codec Base64",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2507": {
        "Query": "Encodes a String to Base64",
        "GroundTruth": [
            "java.util.Base64.getEncoder()",
            "java.util.Base64.Encoder.encodeToString()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.util.Base64",
            "java.util.Base64.Encoder",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2508": {
        "Query": "Encodes a byte array into Base64 format.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2509": {
        "Query": "Encodes a byte array into a hexidecimal String.",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.substring()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2510": {
        "Query": "Encodes a string in JTF16",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toCharArray()",
            "java.lang.String.length()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2511": {
        "Query": "Encodes a string into Base64 format.",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2512": {
        "Query": "Encodes an array of plain bytes into a hex encoded string",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2513": {
        "Query": "Encodes an array of plain bytes into a urlencoded string",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2514": {
        "Query": "Encodes an integer into up to 4 bytes in network byte order.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2515": {
        "Query": "Encodes the given value to a CSV acceptable value.",
        "GroundTruth": [
            "java.lang.String.valueOf()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2516": {
        "Query": "Encrypt a byte array given the secret key spec",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()",
            "javax.crypto.Cipher.doFinal()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "2517": {
        "Query": "Encrypt byte array using AES algorithm",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "javax.crypto.Cipher.getInstance()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "2518": {
        "Query": "Encrypt the plain text using RSA public key.",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()",
            "javax.crypto.Cipher.doFinal()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2519": {
        "Query": "Encrypting a File or Stream with DES",
        "GroundTruth": [
            "javax.crypto.KeyGenerator.getInstance()",
            "javax.crypto.KeyGenerator.generateKey()"
        ],
        "APIClasses": [
            "javax.crypto.KeyGenerator",
            "javax.crypto.KeyGenerator"
        ],
        "Source": "Tutorial Websites"
    },
    "2520": {
        "Query": "Encrypting with DES Using a Pass Phrase",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2521": {
        "Query": "Ensure the byte buffer's capacity.",
        "GroundTruth": [
            "java.nio.Buffer.capacity()",
            "java.nio.ByteBuffer.allocate()",
            "java.nio.CharBuffer.allocate()"
        ],
        "APIClasses": [
            "java.nio.Buffer",
            "java.nio.ByteBuffer",
            "java.nio.CharBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "2522": {
        "Query": "Ensures that all elements of the given collection can be cast to a desired type.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.Class.cast()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "2523": {
        "Query": "Ensures that all elements of the given list can be cast to a desired type.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.Class.cast()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "2524": {
        "Query": "Ensures that all elements of the given set can be cast to a desired type.",
        "GroundTruth": [
            "java.lang.Class.cast()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "2525": {
        "Query": "Ensures that the given value is within the range [-|maxValue|, |maxValue|].",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2526": {
        "Query": "Enum type with constructor and explicit instance fields and accessors for these fields",
        "GroundTruth": [
            "java.util.EnumSet.range()"
        ],
        "APIClasses": [
            "java.util.EnumSet"
        ],
        "Source": "Tutorial Websites"
    },
    "2527": {
        "Query": "Enumerating All the Views in a JTextComponent",
        "GroundTruth": [
            "javax.swing.text.View.getViewCount()",
            "javax.swing.text.View.getView()"
        ],
        "APIClasses": [
            "javax.swing.text.View"
        ],
        "Source": "Tutorial Websites"
    },
    "2528": {
        "Query": "Equalizes the sizes of the given components.",
        "GroundTruth": [
            "java.awt.Component.setPreferredSize()",
            "java.awt.Component.setMinimumSize()",
            "java.awt.Component.getPreferredSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "2529": {
        "Query": "Equivalent to getTextContent(getFirstChildByName(e, n)), with a null check for XML Element",
        "GroundTruth": [
            "org.w3c.dom.Node.getTextContent()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2530": {
        "Query": "Escape JSON special characters in string by adding backslash (\\) before",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2531": {
        "Query": "Escape JavaScript literal strings (assumes they are surrounded by double quotes, not single quotes).",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2532": {
        "Query": "Escape XML or HTML string.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2533": {
        "Query": "Escape XML reserved characters in attribute values.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2534": {
        "Query": "Escape XML special characters for attribute values.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2535": {
        "Query": "Escape XML special characters for text content.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2536": {
        "Query": "Escape characters that should not be included in a variable in a URL.",
        "GroundTruth": [
            "java.lang.StringBuilder.replace()",
            "java.lang.StringBuffer.replace()",
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2537": {
        "Query": "Escapes a XML string.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2538": {
        "Query": "Escapes a string with the appropriated XML codes.",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.String.toString()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "2539": {
        "Query": "Escapes all characters in a string per JSON specification",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2540": {
        "Query": "Escapes an XML string by replacing the characters shown below with their equivalent entity references as defined by the XML specification",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2541": {
        "Query": "Escapes quotes in a string for use in a double quoted CSV string",
        "GroundTruth": [
            "java.lang.String.contains()",
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2542": {
        "Query": "Escaping Special Characters in a Pattern",
        "GroundTruth": [
            "java.util.regex.Pattern.matches()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2543": {
        "Query": "Essentially number mod modulus, but with the ability to specify the output range.",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2544": {
        "Query": "Estimates the Digamma value of a real positive number.",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2545": {
        "Query": "Evaluate XML by XPath and return bool",
        "GroundTruth": [
            "java.lang.String.equals()",
            "javax.xml.xpath.XPath.evaluate()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.xml.xpath.XPath"
        ],
        "Source": "Tutorial Websites"
    },
    "2546": {
        "Query": "Evaluate if a given number is a prime number",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2547": {
        "Query": "Evaluate xPath and return Node",
        "GroundTruth": [
            "javax.xml.xpath.XPathFactory.newInstance()",
            "javax.xml.xpath.XPathFactory.newXPath()",
            "javax.xml.xpath.XPath.evaluate()"
        ],
        "APIClasses": [
            "javax.xml.xpath.XPathFactory",
            "javax.xml.xpath.XPathFactory",
            "javax.xml.xpath.XPath"
        ],
        "Source": "Tutorial Websites"
    },
    "2548": {
        "Query": "Examine a stream of text and make a judgement on what encoding type should be used for the text.",
        "GroundTruth": [
            "javax.swing.text.AbstractDocument.Content.length()",
            "java.lang.String.charAt()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "javax.swing.text.AbstractDocument.Content",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2549": {
        "Query": "Execute LATER the given runnable code dedicated to Swing using the Event Dispatcher Thread (EDT)",
        "GroundTruth": [
            "javax.swing.SwingUtilities.invokeLater()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "2550": {
        "Query": "Execute SQL via Statement",
        "GroundTruth": [
            "java.sql.Statement.execute()",
            "java.sql.PreparedStatement.execute()",
            "java.sql.Statement.getResultSet()",
            "java.sql.Array.getResultSet()"
        ],
        "APIClasses": [
            "java.sql.Statement",
            "java.sql.PreparedStatement",
            "java.sql.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "2551": {
        "Query": "Execute an xpath query on a specific node.",
        "GroundTruth": [
            "javax.xml.xpath.XPathFactory.newInstance()",
            "javax.xml.xpath.XPathFactory.newXPath()",
            "javax.xml.xpath.XPath.compile()"
        ],
        "APIClasses": [
            "javax.xml.xpath.XPathFactory",
            "javax.xml.xpath.XPath"
        ],
        "Source": "Tutorial Websites"
    },
    "2552": {
        "Query": "Execute the given runnable code dedicated to Swing using the Event Dispatcher Thread (EDT)",
        "GroundTruth": [
            "java.lang.Runnable.run()",
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "javax.swing.SwingUtilities.invokeLater()"
        ],
        "APIClasses": [
            "java.lang.Runnable",
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "2553": {
        "Query": "Executes a transformation on XML document",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()",
            "javax.xml.transform.Transformer.transform()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "2554": {
        "Query": "Executes callable not parallel secured by semaphore",
        "GroundTruth": [
            "java.util.concurrent.Semaphore.acquire()",
            "java.util.concurrent.Semaphore.tryAcquire()",
            "java.util.concurrent.Callable.call()",
            "java.util.concurrent.Semaphore.release()"
        ],
        "APIClasses": [
            "java.util.concurrent.Semaphore",
            "java.util.concurrent.Callable"
        ],
        "Source": "Tutorial Websites"
    },
    "2555": {
        "Query": "Expand or shrink a shape in all directions by a defined offset.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.awt.Stroke.createStrokedShape()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.Stroke"
        ],
        "Source": "Tutorial Websites"
    },
    "2556": {
        "Query": "Expands all nodes in the specified tree.",
        "GroundTruth": [
            "javax.swing.JTree.expandRow()"
        ],
        "APIClasses": [
            "javax.swing.JTree"
        ],
        "Source": "Tutorial Websites"
    },
    "2557": {
        "Query": "Expecting strings like \"1/2\" or \"2/3\" etc. this method provides a double type representing the input string as a number",
        "GroundTruth": [
            "java.lang.String.contains()",
            "java.lang.String.split()",
            "java.lang.Double.parseDouble()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "2558": {
        "Query": "Expecting strings like \"2 1/2\". compute to total amount compounding all the components (splitting the original string on the blank space)",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.lang.String.contains()",
            "java.lang.Double.parseDouble()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "2559": {
        "Query": "Exporting a MySQL Table to a Flat File",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "2560": {
        "Query": "Extend a given line segment to a specified length.",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2561": {
        "Query": "Extract All Unique Words using regex",
        "GroundTruth": [
            "java.util.Scanner.nextLine()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.split()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.lang.String",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2562": {
        "Query": "Extract a map from a URL query string.",
        "GroundTruth": [
            "java.util.Map.put()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2563": {
        "Query": "Extract a partition of a byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2564": {
        "Query": "Extract rotation Angle from a given AffineTransform Matrix. This function handle cases of mirror image flip about some axis.",
        "GroundTruth": [
            "java.awt.geom.AffineTransform.getShearY()",
            "java.awt.geom.AffineTransform.getScaleX()",
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.awt.geom.AffineTransform",
            "java.awt.geom.AffineTransform",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2565": {
        "Query": "Extract scaling from AffineTransform Let assume that the AffineTransform is a composite of scales, translates, and rotates.",
        "GroundTruth": [
            "java.awt.geom.AffineTransform.getScaleX()",
            "java.awt.geom.AffineTransform.getShearX()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.awt.geom.AffineTransform",
            "java.awt.geom.AffineTransform",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2566": {
        "Query": "Extract the XML namespace prefix from the qualified element name passed in.",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2567": {
        "Query": "Extract the hue component (HSL color space) from a RGB color",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.lang.Math.max()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2568": {
        "Query": "Extract the set of java interfaces from the class hierarchy of the bean provided that match the annotation provided.",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2569": {
        "Query": "Extract top level class name cutting \".java\" from the end.",
        "GroundTruth": [
            "java.lang.String.substring()",
            "java.lang.String.length()",
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2570": {
        "Query": "Extract value from given annotation method, if anything goes wrong throws InnerReflectiveOperationException with real reason as cause.",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2571": {
        "Query": "Extracting matched expressions, Email Address Finder",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.reset()",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.group()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "2572": {
        "Query": "Extracting substrings from a string",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2573": {
        "Query": "Extracts a HMAC-SHA1 message digest form the end of the given message and determines whether it is valid.",
        "GroundTruth": [
            "java.lang.System.arraycopy()",
            "javax.crypto.Mac.getInstance()",
            "javax.crypto.Mac.init()",
            "javax.crypto.Mac.doFinal()",
            "java.util.Arrays.equals()"
        ],
        "APIClasses": [
            "java.lang.System",
            "javax.crypto.Mac",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2574": {
        "Query": "Extracts class name from a fully qualified class name",
        "GroundTruth": [
            "java.lang.String.lastIndexOf()",
            "java.lang.String.substring()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2575": {
        "Query": "Extracts only the mime-type from a Content-Type HTTP header.",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2576": {
        "Query": "Extracts package name from a fully qualified class name",
        "GroundTruth": [
            "java.lang.String.lastIndexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2577": {
        "Query": "Extracts the least significant bits from a byte array and creates a byte[] with values",
        "GroundTruth": [
            "java.lang.Integer.lowestOneBit()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "2578": {
        "Query": "Extracts the library namespace from the given qualified reference value.",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()",
            "java.lang.String.trim()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2579": {
        "Query": "Extracts the name from the given qualified reference value.",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()",
            "java.lang.String.trim()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2580": {
        "Query": "Fall Through without break",
        "GroundTruth": [
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2581": {
        "Query": "Fall through switch case",
        "GroundTruth": [
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2582": {
        "Query": "Fast Trigonometry functions for x86.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2583": {
        "Query": "Fast scalar multiplication for sparse arrays.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toString()",
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2584": {
        "Query": "Favorites the specified status in twitter",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "2585": {
        "Query": "Field of enum get using reflection",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.reflect.AccessibleObject.setAccessible()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class",
            "java.lang.reflect.AccessibleObject"
        ],
        "Source": "Tutorial Websites"
    },
    "2586": {
        "Query": "File Delete With FileVisitor",
        "GroundTruth": [
            "java.nio.file.Files.deleteIfExists()",
            "java.nio.file.Paths.get()",
            "java.util.EnumSet.of()",
            "java.nio.file.Files.walkFileTree()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.nio.file.Paths",
            "java.util.EnumSet"
        ],
        "Source": "Tutorial Websites"
    },
    "2587": {
        "Query": "File read via mongodb GridFS",
        "GroundTruth": [
            "java.lang.System.nanoTime()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2588": {
        "Query": "FileVisitor to print the number of files with a given extension on a given directory.",
        "GroundTruth": [
            "java.nio.file.Files.walkFileTree()",
            "java.nio.file.Paths.get()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.nio.file.Paths",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "2589": {
        "Query": "FileVisitor to print the size of all directories and files contained on the directory",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.walkFileTree()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2590": {
        "Query": "Filer List with Lambda",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2591": {
        "Query": "Fill 10-element array with 7s",
        "GroundTruth": [
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2592": {
        "Query": "Fill List with a String value",
        "GroundTruth": [
            "java.util.List.add()",
            "java.util.Collections.fill()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.util.Collections",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2593": {
        "Query": "Fill form and click button using selenium web driver",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2594": {
        "Query": "Filling Elements in an Array",
        "GroundTruth": [
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2595": {
        "Query": "Fills MIDI output Names and input Names, with the names of devices made from their descriptions and names",
        "GroundTruth": [
            "javax.sound.midi.Soundbank.getDescription()",
            "javax.sound.midi.MidiDevice.Info.getDescription()",
            "javax.sound.midi.SoundbankResource.getName()",
            "javax.sound.midi.Soundbank.getName()",
            "javax.sound.midi.MidiDevice.Info.getName()"
        ],
        "APIClasses": [
            "javax.sound.midi.Soundbank",
            "javax.sound.midi.MidiDevice.Info",
            "javax.sound.midi.SoundbankResource"
        ],
        "Source": "Tutorial Websites"
    },
    "2596": {
        "Query": "Fills a List with null by calling #fillList(List,int,Object) with a null object.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.size()",
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2597": {
        "Query": "Fills in with zero to get to the desired length; original array with be at the specified position.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()",
            "java.lang.String.toString()",
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2598": {
        "Query": "Fills the CharacterBuffer with characters read from the given reader Reader .",
        "GroundTruth": [
            "java.lang.Character.isHighSurrogate()",
            "java.io.Reader.read()"
        ],
        "APIClasses": [
            "java.lang.Character",
            "java.io.Reader"
        ],
        "Source": "Tutorial Websites"
    },
    "2599": {
        "Query": "Filter that accepts only files/directories larger than 200KB:",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.size()",
            "java.nio.file.Files.newDirectoryStream()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2600": {
        "Query": "Filter that accepts only hidden files/directories:",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.isHidden()",
            "java.nio.file.Files.newDirectoryStream()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2601": {
        "Query": "Filtering Data Before and After a Condition with Streams",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.stream.Stream.of()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.stream.Stream",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2602": {
        "Query": "Filtering the RGB Values in an Image",
        "GroundTruth": [
            "java.awt.Image.getSource()",
            "java.awt.Toolkit.getDefaultToolkit()"
        ],
        "APIClasses": [
            "java.awt.Image",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "2603": {
        "Query": "Find Minimum element of ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.min()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2604": {
        "Query": "Find Minimum element of HashSet",
        "GroundTruth": [
            "java.util.HashSet.add()",
            "java.util.Collections.min()"
        ],
        "APIClasses": [
            "java.util.HashSet",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2605": {
        "Query": "Find Minimum element of Vector",
        "GroundTruth": [
            "java.util.Collections.min()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2606": {
        "Query": "Find a JavaFX Node within a Parent by it's ID.",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.awt.List.getItems()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2607": {
        "Query": "Find a javafx.scene.Node within a javafx.scene.Parent by it's ID.",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.awt.List.getItems()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2608": {
        "Query": "Find absolute value of float, int, double and long using Math.abs",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2609": {
        "Query": "Find all none from rabbitmq using stanford nlp",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2610": {
        "Query": "Find all of the extensibility wsdl elements with the specified name.",
        "GroundTruth": [
            "javax.xml.namespace.QName.getLocalPart()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "javax.xml.namespace.QName",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2611": {
        "Query": "Find and return the parent form for the given JSF component.",
        "GroundTruth": [
            "java.awt.Component.getParent()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "2612": {
        "Query": "Find android element to testing using appium",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2613": {
        "Query": "Find element from selenium firefox browser",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2614": {
        "Query": "Find exponential value of a number using Math.exp",
        "GroundTruth": [
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2615": {
        "Query": "Find maximum element of HashSet",
        "GroundTruth": [
            "java.util.HashSet.add()",
            "java.util.Collections.max()"
        ],
        "APIClasses": [
            "java.util.HashSet",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2616": {
        "Query": "Find maximum element of Java ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.max()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2617": {
        "Query": "Find maximum element of Vector",
        "GroundTruth": [
            "java.util.Collections.max()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2618": {
        "Query": "Find maximum of two numbers using Math.max",
        "GroundTruth": [
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2619": {
        "Query": "Find minimum of two numbers using Math.min",
        "GroundTruth": [
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2620": {
        "Query": "Find one parameter constructor which parameter is assignable from parameter class",
        "GroundTruth": [
            "java.lang.Class.getDeclaredConstructors()",
            "java.lang.reflect.Constructor.getParameterTypes()",
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.Constructor",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "2621": {
        "Query": "Find out the group by calling the  Files.getAttribute() method",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.getAttribute()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2622": {
        "Query": "Find package names starting with.",
        "GroundTruth": [
            "java.lang.Package.getPackages()",
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.lang.Package",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2623": {
        "Query": "Find power using Math.pow",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2624": {
        "Query": "Find square root of a number using Math.sqrt",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2625": {
        "Query": "Find the IP address of localhost.",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.net.InetAddress",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2626": {
        "Query": "Find the common element type of the given Collection, if any.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.Object.getClass()",
            "java.util.Collection.isEmpty()",
            "java.util.Map.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Object",
            "java.util.Collection",
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "2627": {
        "Query": "Find the first element in the array that matches the predicate.",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2628": {
        "Query": "Find the hostname of localhost.",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "2629": {
        "Query": "Find the index of a value inside an array.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2630": {
        "Query": "Find the maximum of the absolute values of all elements in the array, ignoring elements that are NaN.",
        "GroundTruth": [
            "java.lang.Double.isNaN()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2631": {
        "Query": "Find the most specialized class from group compatible with clazz.",
        "GroundTruth": [
            "java.lang.String.contains()",
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Class",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "2632": {
        "Query": "Find the smallest Comparable in a subarray determined by indices first and last.",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2633": {
        "Query": "Find the specified (meta-) annotation of given class.",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "2634": {
        "Query": "Find the specified extensibility wsdl element, if more than one with the specified name exists in the list, return the first one found.",
        "GroundTruth": [
            "javax.xml.namespace.QName.getLocalPart()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "javax.xml.namespace.QName",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2635": {
        "Query": "Find the square of the distance between the point and a point on the curve (u).",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2636": {
        "Query": "Find the standard deviation of an array.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2637": {
        "Query": "Find the sum of all the primes below two million.",
        "GroundTruth": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2638": {
        "Query": "Find the xml element metadata for a specified JAXB property.",
        "GroundTruth": [
            "java.beans.PropertyDescriptor.getReadMethod()",
            "java.beans.PropertyDescriptor.getWriteMethod()"
        ],
        "APIClasses": [
            "java.beans.PropertyDescriptor",
            "java.beans.PropertyDescriptor"
        ],
        "Source": "Tutorial Websites"
    },
    "2639": {
        "Query": "Find years and days between two dates",
        "GroundTruth": [
            "java.time.LocalDate.of()",
            "java.time.LocalDate.now()"
        ],
        "APIClasses": [
            "java.time.LocalDate"
        ],
        "Source": "Tutorial Websites"
    },
    "2640": {
        "Query": "Finding Text Matches with regular expressions and the String matches() helper method to determine how many matches exist.",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2641": {
        "Query": "Finding a Preference in a Preference Tree",
        "GroundTruth": [
            "java.util.prefs.Preferences.userRoot()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.util.prefs.Preferences",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2642": {
        "Query": "Finding the length of a string",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2643": {
        "Query": "Finds a property descriptor for the class that matches the property name.",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.beans.Introspector.getBeanInfo()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.beans.Introspector"
        ],
        "Source": "Tutorial Websites"
    },
    "2644": {
        "Query": "Finds an event set descriptor for the class that matches the event set name.",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.beans.Introspector.getBeanInfo()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.beans.Introspector"
        ],
        "Source": "Tutorial Websites"
    },
    "2645": {
        "Query": "Finds frames with an icon",
        "GroundTruth": [
            "java.awt.Frame.getFrames()",
            "java.awt.Frame.getIconImage()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Tutorial Websites"
    },
    "2646": {
        "Query": "Finds opened frame by the class type.",
        "GroundTruth": [
            "java.awt.Frame.getFrames()",
            "java.lang.Object.getClass()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.awt.Frame",
            "java.lang.Object",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2647": {
        "Query": "Finds the angle obtained by moving a distance of delta_x from x in a clockwise direction if delta_x is positive and anticlockwise direction is delta_x is negative.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2648": {
        "Query": "Finds the appropriate the getter for an Object.",
        "GroundTruth": [
            "java.lang.String.substring()",
            "java.lang.String.toUpperCase()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2649": {
        "Query": "Finds the closest hue possible to given color.",
        "GroundTruth": [
            "java.awt.Color.RGBtoHSB()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2650": {
        "Query": "Finds the closest value in quad that is closest in distance to angle.",
        "GroundTruth": [
            "java.lang.Math.signum()",
            "java.lang.Math.abs()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2651": {
        "Query": "Finds the diametrically opposite angle to this angle. The diametrically opposite angle to 2.5 is -177.5",
        "GroundTruth": [
            "java.lang.Math.signum()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2652": {
        "Query": "Finds the first element in the given collection which matches the given predicate.",
        "GroundTruth": [
            "java.util.function.Predicate.test()"
        ],
        "APIClasses": [
            "java.util.function.Predicate"
        ],
        "Source": "Tutorial Websites"
    },
    "2653": {
        "Query": "Finds the first occurrence of an element in an array.",
        "GroundTruth": [
            "java.lang.Float.compare()",
            "java.lang.Double.compare()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Float",
            "java.lang.Double",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2654": {
        "Query": "Finds the generic type declared on a single interface implemented by the provided class.",
        "GroundTruth": [
            "java.lang.Class.getGenericInterfaces()",
            "java.lang.reflect.ParameterizedType.getRawType()",
            "java.lang.String.equals()",
            "java.lang.reflect.ParameterizedType.getActualTypeArguments()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.ParameterizedType",
            "java.lang.String",
            "java.lang.reflect.ParameterizedType"
        ],
        "Source": "Tutorial Websites"
    },
    "2655": {
        "Query": "Finds the minimum angular distance between two angles.",
        "GroundTruth": [
            "java.lang.Math.signum()",
            "java.lang.Math.abs()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2656": {
        "Query": "Finds the parent JPopupMenu of the given component, it it is contained in the component tree of one.",
        "GroundTruth": [
            "java.awt.Component.getParent()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "2657": {
        "Query": "Finds the plane equation of a plane given its normal and a point on the plane.",
        "GroundTruth": [
            "java.lang.System.arraycopy()",
            "java.lang.Math.sqrt()",
            "java.lang.StrictMath.sqrt()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "2658": {
        "Query": "Finds the top level parent JPopupMenu of the given component, it it is contained in the component tree of one.",
        "GroundTruth": [
            "javax.swing.JPopupMenu.getInvoker()",
            "java.awt.Component.getParent()"
        ],
        "APIClasses": [
            "javax.swing.JPopupMenu",
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "2659": {
        "Query": "Firing Item Events and implement ItemSelectable",
        "GroundTruth": [
            "javax.swing.event.EventListenerList.getListenerList()"
        ],
        "APIClasses": [
            "javax.swing.event.EventListenerList"
        ],
        "Source": "Tutorial Websites"
    },
    "2660": {
        "Query": "Fixes button opacity issues.",
        "GroundTruth": [
            "javax.swing.UIManager.getLookAndFeel()",
            "javax.swing.JComponent.setOpaque()"
        ],
        "APIClasses": [
            "javax.swing.UIManager",
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "2661": {
        "Query": "Fixes the orientation of the renderer of a combo box.",
        "GroundTruth": [
            "javax.swing.JComboBox.getRenderer()",
            "java.awt.ComponentOrientation.getOrientation()",
            "java.util.Locale.getDefault()"
        ],
        "APIClasses": [
            "javax.swing.JComboBox",
            "java.awt.ComponentOrientation",
            "java.util.Locale"
        ],
        "Source": "Tutorial Websites"
    },
    "2662": {
        "Query": "Flipping a Buffered Image horizontally, vertically",
        "GroundTruth": [
            "java.awt.geom.AffineTransform.getScaleInstance()",
            "java.awt.Image.getHeight()",
            "java.awt.Image.getWidth()"
        ],
        "APIClasses": [
            "java.awt.geom.AffineTransform",
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "2663": {
        "Query": "Flips the supplied BufferedImage vertically.",
        "GroundTruth": [
            "java.awt.Image.getHeight()",
            "java.awt.image.Raster.getDataElements()",
            "java.awt.Image.getWidth()"
        ],
        "APIClasses": [
            "java.awt.Image",
            "java.awt.image.Raster"
        ],
        "Source": "Tutorial Websites"
    },
    "2664": {
        "Query": "Follow and unfollow friends",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2665": {
        "Query": "Follows the specified user in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2666": {
        "Query": "For the given Class get a collection of the the AnnotatedElement s that match the given annotations or if no annotations are specified then return all of the annotated elements of the given Class.",
        "GroundTruth": [
            "java.lang.Class.getMethods()",
            "java.lang.reflect.AnnotatedElement.isAnnotationPresent()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.AnnotatedElement"
        ],
        "Source": "Tutorial Websites"
    },
    "2667": {
        "Query": "Format Calendar type value",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2668": {
        "Query": "Format DNs with special characters by escaping the values",
        "GroundTruth": [
            "javax.naming.ldap.Rdn.escapeValue()"
        ],
        "APIClasses": [
            "javax.naming.ldap.Rdn"
        ],
        "Source": "Tutorial Websites"
    },
    "2669": {
        "Query": "Format Date to String in yyyy-MM-dd HH-mm-ss format",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.util.logging.SimpleFormatter.format()",
            "java.util.logging.XMLFormatter.format()",
            "java.util.logging.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.util.logging.SimpleFormatter",
            "java.util.logging.XMLFormatter",
            "java.util.logging.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "2670": {
        "Query": "Format a date to String as yyyy-MM-dd'T'HH:mm:ss.SSSZ format",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.util.logging.SimpleFormatter.format()",
            "java.util.logging.XMLFormatter.format()",
            "java.util.logging.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.util.logging.SimpleFormatter",
            "java.util.logging.XMLFormatter",
            "java.util.logging.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "2671": {
        "Query": "Format an amount of money in double.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2672": {
        "Query": "Format date To String in yyyy-MM-dd HH:mm format",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.util.logging.SimpleFormatter.format()",
            "java.util.logging.XMLFormatter.format()",
            "java.util.logging.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.util.logging.SimpleFormatter",
            "java.util.logging.XMLFormatter",
            "java.util.logging.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "2673": {
        "Query": "Format date and time with DateTimeFormatter",
        "GroundTruth": [
            "java.time.format.DateTimeFormatter.ofPattern()",
            "java.time.LocalDateTime.now()",
            "java.lang.String.format()",
            "java.time.ZonedDateTime.now()"
        ],
        "APIClasses": [
            "java.time.format.DateTimeFormatter",
            "java.time.LocalDateTime",
            "java.lang.String",
            "java.time.ZonedDateTime"
        ],
        "Source": "Tutorial Websites"
    },
    "2674": {
        "Query": "Format double to percentage",
        "GroundTruth": [
            "java.text.NumberFormat.getPercentInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.text.NumberFormat",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2675": {
        "Query": "Format double type value",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2676": {
        "Query": "Format double value with custom format $###,###.###",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2677": {
        "Query": "Format float point value with System.out.format method",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2678": {
        "Query": "Format month using Java SimpleDateFormat class. Month can be formatted in M, MM, MMM and MMMM formats.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2679": {
        "Query": "Format more than one value in System.out.format",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2680": {
        "Query": "Format number to given decimal places (from)",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2681": {
        "Query": "Format number to given decimal places (from-to)",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2682": {
        "Query": "Format number to given decimal places (to)",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2683": {
        "Query": "Format number with Thai Locale",
        "GroundTruth": [
            "javax.swing.SwingUtilities.invokeLater()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "2684": {
        "Query": "Format number with custom format ###,###.##",
        "GroundTruth": [
            "java.lang.Double.valueOf()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2685": {
        "Query": "Format the given double with four digits precision, but leave it without a decimal point.",
        "GroundTruth": [
            "java.lang.Math.round()",
            "java.lang.Long.toString()",
            "java.lang.Double.toString()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Long",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "2686": {
        "Query": "Format the provided integer parameter in units of bytes as a human-readable string.",
        "GroundTruth": [
            "java.lang.Long.signum()",
            "java.lang.String.format()",
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.Long",
            "java.lang.String",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2687": {
        "Query": "Format to Double Decimal",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2688": {
        "Query": "Format to Double Digit",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2689": {
        "Query": "Format with String.format method",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2690": {
        "Query": "Formats Time to show as seconds",
        "GroundTruth": [
            "java.util.concurrent.TimeUnit.toSeconds()"
        ],
        "APIClasses": [
            "java.util.concurrent.TimeUnit"
        ],
        "Source": "Tutorial Websites"
    },
    "2691": {
        "Query": "Formats a Date into a XEP-0082 - XMPP Date and Time Profiles string.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2692": {
        "Query": "Formats a boolean into common words.",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2693": {
        "Query": "Formats a coordinate for pretty output.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2694": {
        "Query": "Formats a given duration in seconds (e.g.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2695": {
        "Query": "Formats a number in a specified pattern.",
        "GroundTruth": [
            "java.text.DecimalFormat.format()"
        ],
        "APIClasses": [
            "java.text.DecimalFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "2696": {
        "Query": "Formats a number using the general number format with exactly three decimal places:",
        "GroundTruth": [
            "java.text.NumberFormat.getNumberInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.text.NumberFormat",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2697": {
        "Query": "Formats a string for CSV escaping it as a double quoted CSV string if necessary",
        "GroundTruth": [
            "java.lang.String.contains()",
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2698": {
        "Query": "Formats our own relative time format to hh:ss.",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.sql.Timestamp.valueOf()",
            "java.time.LocalDateTime.of()",
            "java.time.LocalDate.now()",
            "java.time.LocalTime.ofSecondOfDay()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.sql.Timestamp",
            "java.time.LocalDateTime",
            "java.time.LocalDate",
            "java.time.LocalTime"
        ],
        "Source": "Tutorial Websites"
    },
    "2699": {
        "Query": "Formatting Dates for Display using Calendar and SimpleDateFormat",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2700": {
        "Query": "Formatting Minutes using SimpleDateFormat",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2701": {
        "Query": "Formatting Numbers Using Default Formats",
        "GroundTruth": [
            "java.util.Locale.getDefault()",
            "java.text.NumberFormat.getInstance()",
            "java.text.NumberFormat.getCurrencyInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.util.Locale",
            "java.text.NumberFormat",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2702": {
        "Query": "Formatting TimeZone using SimpleDateFormat",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2703": {
        "Query": "Formatting a Date Using a Custom Format",
        "GroundTruth": [
            "java.util.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "2704": {
        "Query": "Formatting and Parsing Numbers",
        "GroundTruth": [
            "java.util.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "2705": {
        "Query": "Formatting and Parsing a Date Using Default Formats",
        "GroundTruth": [
            "java.text.DateFormat.getDateInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.text.DateFormat",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2706": {
        "Query": "Formatting and Parsing a Date for a Locale",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.text.DateFormat.getDateInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.text.DateFormat",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2707": {
        "Query": "Formatting and Parsing a Time for a Locale",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.text.DateFormat.getTimeInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.text.DateFormat",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2708": {
        "Query": "Formatting and Parsing a Time for a Locale Using Default Formats",
        "GroundTruth": [
            "java.text.DateFormat.getTimeInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.text.DateFormat",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2709": {
        "Query": "Formatting date in custom formats using SimpleDateFormat",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2710": {
        "Query": "Formatting date in default formats using DateFormat",
        "GroundTruth": [
            "java.text.DateFormat.getDateInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.text.DateFormat",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2711": {
        "Query": "Formatting dates and times with conversion characters t and T.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2712": {
        "Query": "Formatting day of week using SimpleDateFormat",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2713": {
        "Query": "Formatting output with class Formatter.",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "javax.swing.JOptionPane.showMessageDialog()",
            "java.util.Formatter.toString()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "2714": {
        "Query": "Formatting seconds using SimpleDateFormat",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2715": {
        "Query": "Formatting the Time Using a Custom Format",
        "GroundTruth": [
            "java.util.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "2716": {
        "Query": "Formatting year using SimpleDateFormat",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2717": {
        "Query": "Freezes the size of the given component, preventing it from expanding to fill any additional space.",
        "GroundTruth": [
            "java.awt.Component.getPreferredSize()",
            "java.awt.Component.setMinimumSize()",
            "java.awt.Component.setPreferredSize()",
            "java.awt.Component.setMaximumSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "2718": {
        "Query": "Function implementing Kadane's Algorithm (array contains at least one positive number)",
        "GroundTruth": [
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2719": {
        "Query": "Function to convert clob to string",
        "GroundTruth": [
            "java.sql.Clob.getCharacterStream()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.sql.Clob",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2720": {
        "Query": "Function with branching structures",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2721": {
        "Query": "GZip compress byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.AutoCloseable.close()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.AutoCloseable"
        ],
        "Source": "Tutorial Websites"
    },
    "2722": {
        "Query": "Game music that plays in the background",
        "GroundTruth": [
            "javax.sound.sampled.Clip.loop()"
        ],
        "APIClasses": [
            "javax.sound.sampled.Clip"
        ],
        "Source": "Tutorial Websites"
    },
    "2723": {
        "Query": "General hmac method - can pass in any string recognized by Mac.getInstance .",
        "GroundTruth": [
            "javax.crypto.Mac.getInstance()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "javax.crypto.Mac",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2724": {
        "Query": "Generate AES random Key",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "javax.crypto.KeyGenerator.getInstance()",
            "javax.crypto.KeyGenerator.generateKey()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "javax.crypto.KeyGenerator",
            "javax.crypto.KeyGenerator"
        ],
        "Source": "Tutorial Websites"
    },
    "2725": {
        "Query": "Generate Adler32 Checksum For Byte Array",
        "GroundTruth": [
            "java.lang.String.getBytes()",
            "java.util.zip.Checksum.update()",
            "java.util.zip.Checksum.getValue()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.zip.Checksum"
        ],
        "Source": "Tutorial Websites"
    },
    "2726": {
        "Query": "Generate CRC32 Checksum For Byte Array",
        "GroundTruth": [
            "java.lang.String.getBytes()",
            "java.util.zip.Checksum.update()",
            "java.util.zip.Checksum.getValue()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.zip.Checksum"
        ],
        "Source": "Tutorial Websites"
    },
    "2727": {
        "Query": "Generate Pyramid For a Given Number",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "2728": {
        "Query": "Generate Unique prime Factors",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2729": {
        "Query": "Generate a random String suitable for use as a temporary password.",
        "GroundTruth": [
            "java.util.Random.nextDouble()",
            "java.lang.String.length()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.util.Random",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2730": {
        "Query": "Generate a random ipv4 address in the 10.0.0.0/8 range.",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2731": {
        "Query": "Generate new non zero random number.",
        "GroundTruth": [
            "java.util.Scanner.nextInt()",
            "java.util.PrimitiveIterator.OfInt.nextInt()",
            "java.util.Random.nextInt()",
            "java.util.concurrent.ThreadLocalRandom.nextInt()",
            "java.util.SplittableRandom.nextInt()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.PrimitiveIterator.OfInt",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "2732": {
        "Query": "Generate random numbers using Math.random",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2733": {
        "Query": "Generate range of integers",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2734": {
        "Query": "Generates a char array composed of just n consecutive occurrences of char c.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2735": {
        "Query": "Generates a pseudo-random boolean.",
        "GroundTruth": [
            "java.util.Scanner.nextBoolean()",
            "java.util.Random.nextBoolean()",
            "java.util.concurrent.ThreadLocalRandom.nextBoolean()",
            "java.util.SplittableRandom.nextBoolean()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "2736": {
        "Query": "Generates a subarray of a given BigInteger array.",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2737": {
        "Query": "Generates a subarray of a given byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2738": {
        "Query": "Generates an array going for a to b with steps of size step.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2739": {
        "Query": "Generates pseudo-random integer from specific range.",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2740": {
        "Query": "Generates pseudo-random long from specific range.",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2741": {
        "Query": "Generates random integer from a range",
        "GroundTruth": [
            "java.util.Scanner.nextInt()",
            "java.util.PrimitiveIterator.OfInt.nextInt()",
            "java.util.Random.nextInt()",
            "java.util.concurrent.ThreadLocalRandom.nextInt()",
            "java.util.SplittableRandom.nextInt()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.PrimitiveIterator.OfInt",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "2742": {
        "Query": "Generating a Message Authentication Code (MAC) Key",
        "GroundTruth": [
            "javax.crypto.KeyGenerator.getInstance()",
            "javax.crypto.KeyGenerator.generateKey()"
        ],
        "APIClasses": [
            "javax.crypto.KeyGenerator",
            "javax.crypto.KeyGenerator"
        ],
        "Source": "Tutorial Websites"
    },
    "2743": {
        "Query": "Generating a Secure Random Number",
        "GroundTruth": [
            "java.security.SecureRandom.getInstance()",
            "java.security.SecureRandom.generateSeed()"
        ],
        "APIClasses": [
            "java.security.SecureRandom",
            "java.security.SecureRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "2744": {
        "Query": "Generating a Symmetric Key",
        "GroundTruth": [
            "javax.crypto.KeyGenerator.getInstance()",
            "javax.crypto.KeyGenerator.generateKey()"
        ],
        "APIClasses": [
            "javax.crypto.KeyGenerator",
            "javax.crypto.KeyGenerator"
        ],
        "Source": "Tutorial Websites"
    },
    "2745": {
        "Query": "Generic Queue Array Resize",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.Integer.parseInt()",
            "java.lang.Double.parseDouble()",
            "java.lang.ref.Reference.enqueue()",
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer",
            "java.lang.Double",
            "java.lang.ref.Reference",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2746": {
        "Query": "Generic method inside generic class using reflection",
        "GroundTruth": [
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2747": {
        "Query": "Generic method maximum returns the largest of three objects.",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2748": {
        "Query": "Generic method to check if an Item in Array",
        "GroundTruth": [
            "java.lang.Object.equals()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2749": {
        "Query": "Generic method to check if an Item in ArrayList",
        "GroundTruth": [
            "java.lang.Object.equals()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2750": {
        "Query": "Generic method to check if an array contains an element",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2751": {
        "Query": "Generic method to check if an element is contained in an array",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2752": {
        "Query": "Generic method to clone array",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "2753": {
        "Query": "Generic method to concatenate two array",
        "GroundTruth": [
            "java.util.Arrays.copyOf()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2754": {
        "Query": "Generic method to convert array to List",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2755": {
        "Query": "Generic method to do array Clone",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.lang.Object.getClass()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.Object",
            "java.lang.Object",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2756": {
        "Query": "Generic method to do array Merge",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.lang.Object.getClass()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.Object",
            "java.lang.Object",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2757": {
        "Query": "Generic method to set Last Element of List to an element",
        "GroundTruth": [
            "java.util.List.size()",
            "java.util.List.set()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2758": {
        "Query": "Generic to Unmarshall XML to an Object",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()",
            "javax.xml.bind.Unmarshaller.unmarshal()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext",
            "javax.xml.bind.Unmarshaller"
        ],
        "Source": "Tutorial Websites"
    },
    "2759": {
        "Query": "Get 10001st prime number",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2760": {
        "Query": "Get Absolute Working Dir Path",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Path.toAbsolutePath()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Path",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2761": {
        "Query": "Get Absolute path of the file",
        "GroundTruth": [
            "java.io.File.getPath()",
            "java.io.File.getAbsolutePath()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2762": {
        "Query": "Get All Entries From Zip File",
        "GroundTruth": [
            "java.util.zip.ZipFile.entries()",
            "java.util.zip.ZipFile.close()"
        ],
        "APIClasses": [
            "java.util.zip.ZipFile"
        ],
        "Source": "Tutorial Websites"
    },
    "2763": {
        "Query": "Get Available Font Family Names",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getAvailableFontFamilyNames()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "2764": {
        "Query": "Get Available Font Objects",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getAllFonts()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "2765": {
        "Query": "Get Available date format Locale",
        "GroundTruth": [
            "java.text.DateFormat.getAvailableLocales()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.text.DateFormat",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2766": {
        "Query": "Get Brighter Version Of Current Color",
        "GroundTruth": [
            "java.awt.Color.brighter()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2767": {
        "Query": "Get CPU time in nanoseconds via Management bean",
        "GroundTruth": [
            "java.lang.management.ManagementFactory.getThreadMXBean()",
            "java.lang.management.ThreadMXBean.isCurrentThreadCpuTimeSupported()",
            "java.lang.management.ThreadMXBean.getCurrentThreadCpuTime()"
        ],
        "APIClasses": [
            "java.lang.management.ManagementFactory",
            "java.lang.management.ThreadMXBean",
            "java.lang.management.ThreadMXBean"
        ],
        "Source": "Tutorial Websites"
    },
    "2768": {
        "Query": "Get Chinese String in GB2312 from another String",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.lang.String.trim()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2769": {
        "Query": "Get Collation Key from Collator",
        "GroundTruth": [
            "java.lang.String.compareTo()",
            "java.text.CollationKey.getSourceString()",
            "java.text.RuleBasedCollator.getCollationKey()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.text.CollationKey",
            "java.text.RuleBasedCollator"
        ],
        "Source": "Tutorial Websites"
    },
    "2770": {
        "Query": "Get Constructor by HashMap type using reflection",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.Class.getDeclaredConstructor()",
            "java.lang.reflect.AccessibleObject.setAccessible()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Class",
            "java.lang.reflect.AccessibleObject"
        ],
        "Source": "Tutorial Websites"
    },
    "2771": {
        "Query": "Get Current Caret Position in JTextField",
        "GroundTruth": [
            "javax.swing.text.JTextComponent.addCaretListener()"
        ],
        "APIClasses": [
            "javax.swing.text.JTextComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "2772": {
        "Query": "Get Darker Version Of Current Color",
        "GroundTruth": [
            "java.awt.Color.darker()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2773": {
        "Query": "Get Enumeration over ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.enumeration()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2774": {
        "Query": "Get Enumeration over HashSet",
        "GroundTruth": [
            "java.util.HashSet.add()",
            "java.util.Collections.enumeration()"
        ],
        "APIClasses": [
            "java.util.HashSet",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2775": {
        "Query": "Get File size in bytes",
        "GroundTruth": [
            "java.io.File.length()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2776": {
        "Query": "Get File type from Files.probeContentType",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.isDirectory()",
            "java.nio.file.Files.probeContentType()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2777": {
        "Query": "Get First Expression XML Child",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2778": {
        "Query": "Get First XML Child With Name",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2779": {
        "Query": "Get Free Memory of Java Virtual Machine(JVM)",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.freeMemory()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "2780": {
        "Query": "Get HSB Color from RGB",
        "GroundTruth": [
            "java.awt.Color.HSBtoRGB()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2781": {
        "Query": "Get Head Map from TreeMap",
        "GroundTruth": [
            "java.util.TreeMap.put()",
            "java.util.TreeMap.headMap()"
        ],
        "APIClasses": [
            "java.util.TreeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "2782": {
        "Query": "Get Hoeffding probability number",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2783": {
        "Query": "Get Integer method that uses a while loop to avoid the exception.",
        "GroundTruth": [
            "java.util.Scanner.hasNextInt()",
            "java.util.Scanner.nextLine()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "2784": {
        "Query": "Get Java specification version using System",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2785": {
        "Query": "Get LDAP attribute value.",
        "GroundTruth": [
            "javax.naming.directory.BasicAttribute.get()",
            "javax.naming.directory.Attributes.get()",
            "javax.naming.directory.BasicAttributes.get()",
            "javax.naming.directory.Attribute.get()",
            "java.util.logging.Logger.log()"
        ],
        "APIClasses": [
            "javax.naming.directory.BasicAttribute",
            "javax.naming.directory.Attributes",
            "javax.naming.directory.BasicAttributes",
            "javax.naming.directory.Attribute",
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "2786": {
        "Query": "Get LDAP directory context.",
        "GroundTruth": [
            "javax.naming.directory.Attributes.put()",
            "javax.naming.directory.BasicAttributes.put()",
            "javax.naming.directory.BasicAttribute.equals()",
            "javax.naming.directory.BasicAttributes.equals()",
            "java.util.logging.Logger.info()"
        ],
        "APIClasses": [
            "javax.naming.directory.Attributes",
            "javax.naming.directory.BasicAttributes",
            "javax.naming.directory.BasicAttribute",
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "2787": {
        "Query": "Get Last modification time of a file or directory",
        "GroundTruth": [
            "java.io.File.lastModified()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2788": {
        "Query": "Get Length of array from reflection",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.lang.String.format()",
            "java.lang.reflect.Array.getInt()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2789": {
        "Query": "Get List of elements from XML Node by XPath expression",
        "GroundTruth": [
            "javax.xml.xpath.XPath.evaluate()",
            "org.w3c.dom.NodeList.getLength()",
            "org.w3c.dom.NodeList.item()"
        ],
        "APIClasses": [
            "javax.xml.xpath.XPath",
            "org.w3c.dom.NodeList"
        ],
        "Source": "Tutorial Websites"
    },
    "2790": {
        "Query": "Get Maximum Memory Available to Java Virtual Machine(JVM)",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.maxMemory()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "2791": {
        "Query": "Get Min value between two double type value",
        "GroundTruth": [
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2792": {
        "Query": "Get Number Of Entries In Zip File",
        "GroundTruth": [
            "java.util.zip.ZipFile.size()",
            "java.util.zip.ZipFile.getName()",
            "java.util.zip.ZipFile.close()"
        ],
        "APIClasses": [
            "java.util.zip.ZipFile"
        ],
        "Source": "Tutorial Websites"
    },
    "2793": {
        "Query": "Get Object Feature using openimaj",
        "GroundTruth": [
            "java.io.BufferedWriter.newLine()"
        ],
        "APIClasses": [
            "java.io.BufferedWriter"
        ],
        "Source": "Tutorial Websites"
    },
    "2794": {
        "Query": "Get Previous and next index using ListIterator",
        "GroundTruth": [
            "java.util.ListIterator.previousIndex()",
            "java.util.ListIterator.nextIndex()",
            "java.util.ListIterator.next()"
        ],
        "APIClasses": [
            "java.util.ListIterator"
        ],
        "Source": "Tutorial Websites"
    },
    "2795": {
        "Query": "Get Random 5 Cards",
        "GroundTruth": [
            "java.util.Collections.shuffle()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2796": {
        "Query": "Get Red, Green, and Blue (RGB) Components From Color",
        "GroundTruth": [
            "java.awt.Color.getHSBColor()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2797": {
        "Query": "Get Screen Working Height",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getMaximumWindowBounds()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "2798": {
        "Query": "Get Screen Working Width",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getMaximumWindowBounds()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "2799": {
        "Query": "Get Size of ArrayList and loop through elements",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.ArrayList.size()",
            "java.util.ArrayList.get()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Tutorial Websites"
    },
    "2800": {
        "Query": "Get Size of TreeMap",
        "GroundTruth": [
            "java.util.TreeMap.size()",
            "java.util.TreeMap.put()",
            "java.util.TreeMap.remove()"
        ],
        "APIClasses": [
            "java.util.TreeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "2801": {
        "Query": "Get Specified Entry From Zip File",
        "GroundTruth": [
            "java.util.zip.ZipFile.getEntry()",
            "java.util.zip.ZipFile.close()"
        ],
        "APIClasses": [
            "java.util.zip.ZipFile"
        ],
        "Source": "Tutorial Websites"
    },
    "2802": {
        "Query": "Get String encode for text file",
        "GroundTruth": [
            "java.io.BufferedInputStream.read()",
            "java.io.BufferedInputStream.close()",
            "java.io.FileInputStream.close()"
        ],
        "APIClasses": [
            "java.io.BufferedInputStream",
            "java.io.FileInputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "2803": {
        "Query": "Get Sub Map from TreeMap",
        "GroundTruth": [
            "java.util.TreeMap.put()",
            "java.util.TreeMap.subMap()"
        ],
        "APIClasses": [
            "java.util.TreeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "2804": {
        "Query": "Get Sub string from whole string",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2805": {
        "Query": "Get Synchronized List from ArrayList",
        "GroundTruth": [
            "java.util.Collections.synchronizedList()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2806": {
        "Query": "Get Synchronized Map from HashMap",
        "GroundTruth": [
            "java.util.Collections.synchronizedMap()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2807": {
        "Query": "Get Synchronized Map from TreeMap",
        "GroundTruth": [
            "java.util.Collections.synchronizedMap()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2808": {
        "Query": "Get Synchronized Set from TreeSet",
        "GroundTruth": [
            "java.util.Collections.synchronizedSet()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2809": {
        "Query": "Get Total Memory of Java Virtual Machine(JVM)",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.totalMemory()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "2810": {
        "Query": "Get Twitter User List Subscribers",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "2811": {
        "Query": "Get Twitter username from twitter url",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2812": {
        "Query": "Get Week of month and year using Java Calendar",
        "GroundTruth": [
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2813": {
        "Query": "Get XML Element that has attribute id=\"xyz\".",
        "GroundTruth": [
            "org.w3c.dom.Document.getDocumentElement()",
            "org.w3c.dom.NodeList.getLength()",
            "org.w3c.dom.NodeList.item()",
            "org.w3c.dom.Node.getNodeType()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document",
            "org.w3c.dom.NodeList",
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "2814": {
        "Query": "Get a File Owner Using FileOwnerAttributeView.getOwner()",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.getFileAttributeView()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2815": {
        "Query": "Get a File Owner Using Files.getAttribute()",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.getAttribute()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "2816": {
        "Query": "Get a boolean init parameter from a servlet FilterConfig",
        "GroundTruth": [
            "java.lang.Boolean.booleanValue()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "2817": {
        "Query": "Get a byte array from a double.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Double.doubleToLongBits()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "2818": {
        "Query": "Get a byte array from a float.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Float.floatToIntBits()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "2819": {
        "Query": "Get a byte array in a printable binary form.",
        "GroundTruth": [
            "java.lang.StringBuffer.append()",
            "java.lang.StringBuffer.toString()"
        ],
        "APIClasses": [
            "java.lang.StringBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "2820": {
        "Query": "Get a byte in a printable binary form.",
        "GroundTruth": [
            "java.lang.StringBuffer.append()",
            "java.lang.StringBuffer.toString()"
        ],
        "APIClasses": [
            "java.lang.StringBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "2821": {
        "Query": "Get a double from 8 bytes of the given array.",
        "GroundTruth": [
            "java.lang.Double.longBitsToDouble()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "2822": {
        "Query": "Get a float from 4 bytes of the given array.",
        "GroundTruth": [
            "java.lang.Float.intBitsToFloat()"
        ],
        "APIClasses": [
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "2823": {
        "Query": "Get a fraction of another spring using the  scale() method.",
        "GroundTruth": [
            "javax.swing.Spring.height()",
            "javax.swing.Spring.scale()"
        ],
        "APIClasses": [
            "javax.swing.Spring"
        ],
        "Source": "Tutorial Websites"
    },
    "2824": {
        "Query": "Get a list of all primes from 2 to max Check",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2825": {
        "Query": "Get a localized message from a bundle.",
        "GroundTruth": [
            "java.util.Locale.getDefault()",
            "java.util.ResourceBundle.getBundle()",
            "java.util.ResourceBundle.getString()",
            "java.text.MessageFormat.format()"
        ],
        "APIClasses": [
            "java.util.Locale",
            "java.util.ResourceBundle",
            "java.text.MessageFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "2826": {
        "Query": "Get a loopback NIF.",
        "GroundTruth": [
            "java.net.NetworkInterface.getNetworkInterfaces()",
            "java.net.NetworkInterface.isUp()",
            "java.net.NetworkInterface.isLoopback()"
        ],
        "APIClasses": [
            "java.net.NetworkInterface",
            "java.net.NetworkInterface",
            "java.net.NetworkInterface"
        ],
        "Source": "Tutorial Websites"
    },
    "2827": {
        "Query": "Get a part on an array, sub array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2828": {
        "Query": "Get a phred-scaled quality value corresponding to the supplied error rate.",
        "GroundTruth": [
            "java.lang.Math.log10()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2829": {
        "Query": "Get a random number that lies between min and max.",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2830": {
        "Query": "Get a string from a bundle, using the default locale.",
        "GroundTruth": [
            "java.util.Locale.getDefault()",
            "java.util.ResourceBundle.getBundle()",
            "java.util.ResourceBundle.getString()",
            "java.text.MessageFormat.format()"
        ],
        "APIClasses": [
            "java.util.Locale",
            "java.util.ResourceBundle",
            "java.text.MessageFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "2831": {
        "Query": "Get a valid xPath string to enable retrieval of an Element by AND ing attributes name and their corresponding value.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2832": {
        "Query": "Get a valid xPath string to enable retrieval of an Element by OR ing attributes name and their corresponding value.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2833": {
        "Query": "Get all declared fields from Class Note : getDeclaredFields() may return private attributes, but does not return Parents fields",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.Class.getDeclaredFields()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "2834": {
        "Query": "Get all of the XML element nodes from a NodeList",
        "GroundTruth": [
            "org.w3c.dom.NodeList.getLength()",
            "org.w3c.dom.NodeList.item()",
            "org.w3c.dom.Node.getNodeType()"
        ],
        "APIClasses": [
            "org.w3c.dom.NodeList",
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "2835": {
        "Query": "Get all prime numbers below n",
        "GroundTruth": [
            "java.lang.Math.ceil()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2836": {
        "Query": "Get an array of bytes from an input stream.",
        "GroundTruth": [
            "org.omg.CORBA.portable.InputStream.read()"
        ],
        "APIClasses": [
            "org.omg.CORBA.portable.InputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "2837": {
        "Query": "Get attribute from page context of the given name in the given scope for JSP Page.",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2838": {
        "Query": "Get binary length of string",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2839": {
        "Query": "Get bytes out of a ByteBuffer, moves the buffer position to where the bytes finished",
        "GroundTruth": [
            "java.nio.Buffer.position()",
            "java.lang.System.arraycopy()",
            "java.nio.Buffer.array()"
        ],
        "APIClasses": [
            "java.nio.Buffer",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2840": {
        "Query": "Get chars out of a CharBuffer, moves the buffer position to where the chars finished",
        "GroundTruth": [
            "java.nio.Buffer.position()",
            "java.lang.System.arraycopy()",
            "java.nio.Buffer.array()"
        ],
        "APIClasses": [
            "java.nio.Buffer",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2841": {
        "Query": "Get class from Object",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2842": {
        "Query": "Get classpath using System class",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2843": {
        "Query": "Get coefficients for Least Square Regression Line",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.Math.pow()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2844": {
        "Query": "Get cookie value by name from Servlet.",
        "GroundTruth": [
            "java.net.CookieStore.getCookies()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.net.CookieStore",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2845": {
        "Query": "Get current TimeZone using Calendar",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.TimeZone.getDisplayName()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.TimeZone"
        ],
        "Source": "Tutorial Websites"
    },
    "2846": {
        "Query": "Get current date and time using java.util.Date class",
        "GroundTruth": [
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "2847": {
        "Query": "Get current date time values using Calendar",
        "GroundTruth": [
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2848": {
        "Query": "Get date of last number of day",
        "GroundTruth": [
            "java.util.Calendar.set()",
            "java.util.Calendar.add()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2849": {
        "Query": "Get date value from Calendar class",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.text.DateFormatSymbols.getWeekdays()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.text.DateFormatSymbols"
        ],
        "Source": "Tutorial Websites"
    },
    "2850": {
        "Query": "Get element from a web page via selenium ChromeDriver",
        "GroundTruth": [
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2851": {
        "Query": "Get exp( x ) - 1.",
        "GroundTruth": [
            "java.lang.Math.exp()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2852": {
        "Query": "Get file separator using System class",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2853": {
        "Query": "Get file system Default Separator",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.FileSystem.getSeparator()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.FileSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "2854": {
        "Query": "Get first Child Element from XML Element",
        "GroundTruth": [
            "java.lang.String.isEmpty()",
            "org.w3c.dom.Element.getElementsByTagName()",
            "org.w3c.dom.Element.getElementsByTagNameNS()"
        ],
        "APIClasses": [
            "java.lang.String",
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "2855": {
        "Query": "Get from Iterable Path into an array of Path",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.FileSystem.getRootDirectories()",
            "java.util.List.add()",
            "java.util.List.size()",
            "java.util.List.toArray()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.FileSystem",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2856": {
        "Query": "Get image form system clip board.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "2857": {
        "Query": "Get int-type parameter from Servlet.",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "2858": {
        "Query": "Get length of UTF8 String Length",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2859": {
        "Query": "Get log base 10 of a double.",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2860": {
        "Query": "Get log base 2 of a double.",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2861": {
        "Query": "Get log of a double + 1.",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2862": {
        "Query": "Get lowest and highest key stored in Java TreeMap",
        "GroundTruth": [
            "java.util.TreeMap.put()",
            "java.util.TreeMap.firstKey()"
        ],
        "APIClasses": [
            "java.util.TreeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "2863": {
        "Query": "Get name of parent directory",
        "GroundTruth": [
            "java.io.File.getParent()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2864": {
        "Query": "Get name of specified file or directory",
        "GroundTruth": [
            "java.io.File.getName()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2865": {
        "Query": "Get number from XML Element by XPath expression",
        "GroundTruth": [
            "java.lang.Double.parseDouble()",
            "javax.xml.xpath.XPath.evaluate()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "javax.xml.xpath.XPath",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2866": {
        "Query": "Get object from redis",
        "GroundTruth": [
            "java.util.logging.Logger.info()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "2867": {
        "Query": "Get parent directory as a File object",
        "GroundTruth": [
            "java.io.File.getParentFile()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "2868": {
        "Query": "Get random color using Golden Ratio",
        "GroundTruth": [
            "java.awt.Color.HSBtoRGB()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2869": {
        "Query": "Get relative path from one path",
        "GroundTruth": [
            "java.nio.file.Paths.get()"
        ],
        "APIClasses": [
            "java.nio.file.Paths"
        ],
        "Source": "Tutorial Websites"
    },
    "2870": {
        "Query": "Get resource as stream in privileged mode.",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()",
            "java.security.AccessController.doPrivileged()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Thread",
            "java.security.AccessController"
        ],
        "Source": "Tutorial Websites"
    },
    "2871": {
        "Query": "Get resource in privileged mode.",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()",
            "java.security.AccessController.doPrivileged()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Thread",
            "java.security.AccessController"
        ],
        "Source": "Tutorial Websites"
    },
    "2872": {
        "Query": "Get return value from Loading and Executing internal JavaScript from Java",
        "GroundTruth": [
            "javax.script.ScriptEngineManager.getEngineByName()",
            "java.util.logging.Logger.getLogger()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngineManager",
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "2873": {
        "Query": "Get root thread group",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getThreadGroup()",
            "java.lang.SecurityManager.getThreadGroup()",
            "java.lang.ClassLoader.getParent()",
            "java.lang.ThreadGroup.getParent()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.SecurityManager",
            "java.lang.ClassLoader",
            "java.lang.ThreadGroup"
        ],
        "Source": "Tutorial Websites"
    },
    "2874": {
        "Query": "Get screen area of all monitors.",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getScreenDevices()",
            "java.awt.GraphicsDevice.getDefaultConfiguration()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice"
        ],
        "Source": "Tutorial Websites"
    },
    "2875": {
        "Query": "Get size of Collection and NullPointerException safe",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.size()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "2876": {
        "Query": "Get size of nullable Collection",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.size()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "2877": {
        "Query": "Get string from XML Node using XPath expression",
        "GroundTruth": [
            "javax.xml.xpath.XPath.evaluate()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "javax.xml.xpath.XPath",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2878": {
        "Query": "Get string value of specified XML attribute.",
        "GroundTruth": [
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "2879": {
        "Query": "Get string with @ in between using regex for email",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.group()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "2880": {
        "Query": "Get sub list by offset",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.isEmpty()",
            "java.util.List.size()",
            "java.util.List.subList()",
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "2881": {
        "Query": "Get system environment variables",
        "GroundTruth": [
            "java.lang.System.getenv()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2882": {
        "Query": "Get system environment variables to a Map",
        "GroundTruth": [
            "java.lang.System.getenv()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2883": {
        "Query": "Get system properties using System class",
        "GroundTruth": [
            "java.lang.System.getProperties()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2884": {
        "Query": "Get system time in nanoseconds via Management bean",
        "GroundTruth": [
            "java.lang.management.ManagementFactory.getThreadMXBean()",
            "java.lang.management.ThreadMXBean.isCurrentThreadCpuTimeSupported()",
            "java.lang.management.ThreadMXBean.getCurrentThreadCpuTime()",
            "java.lang.management.ThreadMXBean.getCurrentThreadUserTime()"
        ],
        "APIClasses": [
            "java.lang.management.ManagementFactory",
            "java.lang.management.ThreadMXBean",
            "java.lang.management.ThreadMXBean",
            "java.lang.management.ThreadMXBean"
        ],
        "Source": "Tutorial Websites"
    },
    "2885": {
        "Query": "Get system time using System class",
        "GroundTruth": [
            "java.lang.System.currentTimeMillis()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2886": {
        "Query": "Get the Class from the class name.",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.security.AccessController.doPrivileged()",
            "java.lang.Thread.currentThread()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.security.AccessController",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2887": {
        "Query": "Get the Google+ ID from a plus.google.com url https://plus.google.com/118064008740771173119",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2888": {
        "Query": "Get the Path File/Directory Name",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Path.getFileName()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "2889": {
        "Query": "Get the Path Parent",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Path.getParent()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "2890": {
        "Query": "Get the Path Root",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Path.getRoot()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "2891": {
        "Query": "Get the RGB colors from a RGB color value and store into an array (ignores alpha)",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2892": {
        "Query": "Get the SOAP Binding style for the specified WSDL Port.",
        "GroundTruth": [
            "javax.xml.namespace.QName.getLocalPart()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "javax.xml.namespace.QName",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2893": {
        "Query": "Get the SOAP Use type for the specified operation.",
        "GroundTruth": [
            "javax.xml.namespace.QName.getLocalPart()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "javax.xml.namespace.QName",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2894": {
        "Query": "Get the SOAP address location for the specified port.",
        "GroundTruth": [
            "javax.xml.namespace.QName.getLocalPart()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "javax.xml.namespace.QName",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2895": {
        "Query": "Get the Soap Action URI from the operation's soap:operation extensibility element.",
        "GroundTruth": [
            "javax.xml.namespace.QName.getLocalPart()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "javax.xml.namespace.QName",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2896": {
        "Query": "Get the absolute position of the top left corner of the passed in JavaFX control",
        "GroundTruth": [
            "java.awt.event.WindowEvent.getWindow()"
        ],
        "APIClasses": [
            "java.awt.event.WindowEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "2897": {
        "Query": "Get the attribute value under the specified name from the given XML element.",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "2898": {
        "Query": "Get the bounds of the parent of the dragged component.",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getMaximumWindowBounds()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "2899": {
        "Query": "Get the brightness of a color.",
        "GroundTruth": [
            "java.awt.Color.RGBtoHSB()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2900": {
        "Query": "Get the class represented by the reflected type.",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.lang.Object.getClass()",
            "java.lang.reflect.WildcardType.getLowerBounds()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.Object",
            "java.lang.reflect.WildcardType",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2901": {
        "Query": "Get the current timestamp in a rfc-399 format.",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.util.logging.SimpleFormatter.format()",
            "java.util.logging.XMLFormatter.format()",
            "java.util.logging.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.util.logging.SimpleFormatter",
            "java.util.logging.XMLFormatter",
            "java.util.logging.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "2902": {
        "Query": "Get the default location for temporary directories",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2903": {
        "Query": "Get the defining target namespace of this XML element",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2904": {
        "Query": "Get the field label for JSF.",
        "GroundTruth": [
            "java.util.ResourceBundle.getBundle()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()"
        ],
        "APIClasses": [
            "java.util.ResourceBundle",
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "2905": {
        "Query": "Get the first XML element with the given name as a child of the given element.",
        "GroundTruth": [
            "org.w3c.dom.Element.getElementsByTagName()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "2906": {
        "Query": "Get the first child XML element with the specified name from the given parent node.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2907": {
        "Query": "Get the first child node that is XML element node.",
        "GroundTruth": [
            "org.w3c.dom.Node.getChildNodes()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "2908": {
        "Query": "Get the full path to the first JAR in classpath that contains pattern as a substring.",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.lang.String.split()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2909": {
        "Query": "Get the index of the array item which is maximum.",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2910": {
        "Query": "Get the input encoding of the XML document.",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2911": {
        "Query": "Get the last value from a List",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.isEmpty()",
            "java.util.List.get()",
            "java.util.List.size()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2912": {
        "Query": "Get the lightness associated to the given Color .",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.lang.Math.max()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2913": {
        "Query": "Get the local name from a qualified name for namespace",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2914": {
        "Query": "Get the log( exp( logX ) - exp( logY ) ).",
        "GroundTruth": [
            "java.lang.Math.exp()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2915": {
        "Query": "Get the meta annotation from given annotation.",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "2916": {
        "Query": "Get the name from the supplied XML element.",
        "GroundTruth": [
            "org.w3c.dom.Element.getTagName()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "2917": {
        "Query": "Get the network mac address associated with a particular IP address",
        "GroundTruth": [
            "java.net.InetAddress.getByName()",
            "java.net.NetworkInterface.getByInetAddress()",
            "java.net.NetworkInterface.getHardwareAddress()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.net.InetAddress",
            "java.net.NetworkInterface",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2918": {
        "Query": "Get the next sibling XML element.",
        "GroundTruth": [
            "org.w3c.dom.Node.getNextSibling()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "2919": {
        "Query": "Get the parent logger for the driver",
        "GroundTruth": [
            "java.sql.DriverManager.getDriver()",
            "java.sql.Driver.getParentLogger()"
        ],
        "APIClasses": [
            "java.sql.DriverManager",
            "java.sql.Driver"
        ],
        "Source": "Tutorial Websites"
    },
    "2920": {
        "Query": "Get the prefix from a qualified name in namespace",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2921": {
        "Query": "Get the previous sibling XML element.",
        "GroundTruth": [
            "org.w3c.dom.Node.getPreviousSibling()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "2922": {
        "Query": "Get the prime number above n",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2923": {
        "Query": "Get the prime number below n",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2924": {
        "Query": "Get the root cause of an exception",
        "GroundTruth": [
            "java.lang.reflect.UndeclaredThrowableException.getCause()",
            "java.lang.reflect.InvocationTargetException.getCause()",
            "java.lang.ClassNotFoundException.getCause()",
            "java.lang.Throwable.getCause()",
            "java.lang.ExceptionInInitializerError.getCause()"
        ],
        "APIClasses": [
            "java.lang.reflect.UndeclaredThrowableException",
            "java.lang.reflect.InvocationTargetException",
            "java.lang.ClassNotFoundException",
            "java.lang.Throwable",
            "java.lang.ExceptionInInitializerError"
        ],
        "Source": "Tutorial Websites"
    },
    "2925": {
        "Query": "Get the screen bounds of each screen",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getScreenDevices()",
            "java.awt.GraphicsDevice.getDefaultConfiguration()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice"
        ],
        "Source": "Tutorial Websites"
    },
    "2926": {
        "Query": "Get the sine of an angle",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Math.sin()",
            "java.lang.Math.cos()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2927": {
        "Query": "Get the sort order for a column given a RowSorter for the TableModel containing the column.",
        "GroundTruth": [
            "javax.swing.RowSorter.getSortKeys()",
            "javax.swing.RowSorter.SortKey.getSortOrder()"
        ],
        "APIClasses": [
            "javax.swing.RowSorter",
            "javax.swing.RowSorter.SortKey"
        ],
        "Source": "Tutorial Websites"
    },
    "2928": {
        "Query": "Get the specified resource as a URL.",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()",
            "java.lang.ClassLoader.getSystemResource()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Thread",
            "java.lang.ClassLoader"
        ],
        "Source": "Tutorial Websites"
    },
    "2929": {
        "Query": "Get the type of the field.",
        "GroundTruth": [
            "java.lang.reflect.Field.getType()",
            "java.lang.Class.isAssignableFrom()",
            "java.lang.reflect.Field.getGenericType()"
        ],
        "APIClasses": [
            "java.lang.reflect.Field",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "2930": {
        "Query": "Get the underlying class for a type, or null if the type is a variable type.",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "2931": {
        "Query": "Get the value of the field in the given object.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.get()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "2932": {
        "Query": "Get the value of the key set from the ThreadLocal instance",
        "GroundTruth": [
            "java.lang.ThreadLocal.get()"
        ],
        "APIClasses": [
            "java.lang.ThreadLocal"
        ],
        "Source": "Tutorial Websites"
    },
    "2933": {
        "Query": "Get the xml encoding of the document.",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2934": {
        "Query": "Get time in milliseconds using Calendar",
        "GroundTruth": [
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2935": {
        "Query": "Get to know the Floating-point weirdness",
        "GroundTruth": [
            "java.text.NumberFormat.getNumberInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.text.NumberFormat",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2936": {
        "Query": "Get to the base exception (if any)",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getMethod()",
            "java.lang.invoke.MethodHandle.invoke()",
            "java.lang.reflect.InvocationHandler.invoke()",
            "java.lang.reflect.Method.invoke()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class",
            "java.lang.invoke.MethodHandle",
            "java.lang.reflect.InvocationHandler",
            "java.lang.reflect.Method"
        ],
        "Source": "Tutorial Websites"
    },
    "2937": {
        "Query": "Get today without time fields",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTime()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2938": {
        "Query": "Get twitter Privacy Policy",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2939": {
        "Query": "Get twitter Terms Of Service",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2940": {
        "Query": "Get twitter User Timeline",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "2941": {
        "Query": "Get user time in nanoseconds via Management bean",
        "GroundTruth": [
            "java.lang.management.ManagementFactory.getThreadMXBean()",
            "java.lang.management.ThreadMXBean.isCurrentThreadCpuTimeSupported()",
            "java.lang.management.ThreadMXBean.getCurrentThreadUserTime()"
        ],
        "APIClasses": [
            "java.lang.management.ManagementFactory",
            "java.lang.management.ThreadMXBean",
            "java.lang.management.ThreadMXBean"
        ],
        "Source": "Tutorial Websites"
    },
    "2942": {
        "Query": "Get value from ResourceBundle by Locale",
        "GroundTruth": [
            "java.util.ResourceBundle.getBundle()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.util.ResourceBundle",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2943": {
        "Query": "Get value of specified XML attribute as boolean.",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "java.lang.String",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "2944": {
        "Query": "Get value of specified XML attribute as color.",
        "GroundTruth": [
            "java.lang.Integer.parseInt()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "2945": {
        "Query": "Get value of specified XML attribute as double.",
        "GroundTruth": [
            "java.lang.Double.parseDouble()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "2946": {
        "Query": "Get value of specified XML attribute as integer.",
        "GroundTruth": [
            "java.lang.Integer.parseInt()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "2947": {
        "Query": "Gets (creates) a postgresql JDBC Connection class for the logical database name",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2948": {
        "Query": "Gets S3 Private ACL",
        "GroundTruth": [
            "java.security.acl.Acl.toString()"
        ],
        "APIClasses": [
            "java.security.acl.Acl"
        ],
        "Source": "Tutorial Websites"
    },
    "2949": {
        "Query": "Gets S3 Public-Read ACL",
        "GroundTruth": [
            "java.security.acl.Acl.toString()"
        ],
        "APIClasses": [
            "java.security.acl.Acl"
        ],
        "Source": "Tutorial Websites"
    },
    "2950": {
        "Query": "Gets S3 Public-Read-Write ACL",
        "GroundTruth": [
            "java.security.acl.Acl.toString()"
        ],
        "APIClasses": [
            "java.security.acl.Acl"
        ],
        "Source": "Tutorial Websites"
    },
    "2951": {
        "Query": "Gets a Map having a null value for each of the keys provided in keySet .",
        "GroundTruth": [
            "java.util.Collections.singletonList()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "2952": {
        "Query": "Gets a String's length or 0 if the String is null.",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2953": {
        "Query": "Gets a color that \"highlights\" a given color.",
        "GroundTruth": [
            "java.awt.Color.darker()",
            "java.awt.Color.brighter()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2954": {
        "Query": "Gets a list based on an iterator.",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "2955": {
        "Query": "Gets a list of available currencies from the JDK from all locales.",
        "GroundTruth": [
            "java.util.Locale.getAvailableLocales()",
            "java.lang.String.isEmpty()",
            "java.util.Locale.getCountry()",
            "java.util.Currency.getInstance()"
        ],
        "APIClasses": [
            "java.util.Locale",
            "java.lang.String",
            "java.util.Currency"
        ],
        "Source": "Tutorial Websites"
    },
    "2956": {
        "Query": "Gets a list of divisors of a number",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2957": {
        "Query": "Gets a method and forces it to be accessible, even if it is not.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.isAccessible()",
            "java.lang.reflect.AccessibleObject.setAccessible()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.AccessibleObject"
        ],
        "Source": "Tutorial Websites"
    },
    "2958": {
        "Query": "Gets a new Set that is the interleaved union of the Set s provided.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2959": {
        "Query": "Gets a private field value.",
        "GroundTruth": [
            "java.lang.Class.getDeclaredField()",
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.get()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "2960": {
        "Query": "Gets a unit vector which bisects (p1 - p2) and (p3 - p2).",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2961": {
        "Query": "Gets a value from the Future .",
        "GroundTruth": [
            "java.util.concurrent.Future.get()"
        ],
        "APIClasses": [
            "java.util.concurrent.Future"
        ],
        "Source": "Tutorial Websites"
    },
    "2962": {
        "Query": "Gets a vector perpendicular to the vector p2-p1, pointing to the right with respect to the direction of p2-p1.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2963": {
        "Query": "Gets all child XML elements.",
        "GroundTruth": [
            "org.w3c.dom.Node.getFirstChild()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "2964": {
        "Query": "Gets all prime numbers below max using the sieve of sundaram method",
        "GroundTruth": [
            "java.util.Arrays.fill()",
            "java.util.Arrays.copyOf()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2965": {
        "Query": "Gets an RSAPublicKey from the provided PEM encoding.",
        "GroundTruth": [
            "java.security.cert.CertificateFactory.getInstance()",
            "java.lang.String.getBytes()",
            "java.security.cert.CertificateFactory.generateCertificate()",
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.security.cert.CertificateFactory",
            "java.lang.String",
            "java.security.cert.CertificateFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "2966": {
        "Query": "Gets an array of primes up until a num using the sieve Of Atkin method",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "2967": {
        "Query": "Gets an image from Clipboard.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()",
            "java.awt.datatransfer.Clipboard.getData()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.awt.datatransfer.Clipboard"
        ],
        "Source": "Tutorial Websites"
    },
    "2968": {
        "Query": "Gets class by full name.",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "2969": {
        "Query": "Gets day, month and year out of the calendar and converts it into a String.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.get()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2970": {
        "Query": "Gets either the value in the map for a key or the default value if there is no value.",
        "GroundTruth": [
            "java.util.Map.containsKey()",
            "java.util.Map.get()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "2971": {
        "Query": "Gets get field method name",
        "GroundTruth": [
            "java.lang.String.substring()",
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2972": {
        "Query": "Gets hour and minute out of the calendar and converts it into a String.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.get()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2973": {
        "Query": "Gets if a number is amicable A number is amicable iff a!=b and the sum of the divisors of a == b and then sum of the divisors of b == a",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2974": {
        "Query": "Gets if a number is an abundant number.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2975": {
        "Query": "Gets if the number passed in is prime",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "2976": {
        "Query": "Gets one element from the provided Collection.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection",
            "java.util.Iterator"
        ],
        "Source": "Tutorial Websites"
    },
    "2977": {
        "Query": "Gets property name from getter name by cutting leading \"get\" or \"is\" and lowering the first letter of the rest via regex",
        "GroundTruth": [
            "java.lang.String.replaceFirst()",
            "java.lang.String.substring()",
            "java.lang.String.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2978": {
        "Query": "Gets rgba() string from SAC rgba LexicalUnit value",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2979": {
        "Query": "Gets set field method name",
        "GroundTruth": [
            "java.lang.String.substring()",
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2980": {
        "Query": "Gets static boolean Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.getBoolean()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2981": {
        "Query": "Gets static byte Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.getByte()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2982": {
        "Query": "Gets static char Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.getChar()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2983": {
        "Query": "Gets static double Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.getDouble()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2984": {
        "Query": "Gets static float Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.getFloat()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2985": {
        "Query": "Gets static int Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.getInt()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2986": {
        "Query": "Gets static long Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.getLong()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "2987": {
        "Query": "Gets static object Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.get()",
            "java.lang.Class.getDeclaredField()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "2988": {
        "Query": "Gets system properties in privileged mode.",
        "GroundTruth": [
            "java.lang.System.getProperties()",
            "java.security.AccessController.doPrivileged()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.security.AccessController"
        ],
        "Source": "Tutorial Websites"
    },
    "2989": {
        "Query": "Gets system property in privileged mode.",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.security.AccessController.doPrivileged()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.security.AccessController"
        ],
        "Source": "Tutorial Websites"
    },
    "2990": {
        "Query": "Gets the \"distance\" between two colors, their components assumed to be points in 3D space ranging from 0.0 to 1.0.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.awt.Color.getColorComponents()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.Color",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "2991": {
        "Query": "Gets the BufferedImage as a 2D array of RGB pixel values",
        "GroundTruth": [
            "java.awt.image.PixelGrabber.grabPixels()"
        ],
        "APIClasses": [
            "java.awt.image.PixelGrabber"
        ],
        "Source": "Tutorial Websites"
    },
    "2992": {
        "Query": "Gets the IEEE value from the byte array passed in",
        "GroundTruth": [
            "java.lang.reflect.Array.getInt()",
            "java.lang.reflect.Field.getInt()",
            "java.lang.Double.longBitsToDouble()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.reflect.Field",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "2993": {
        "Query": "Gets the Screensize and returns it as a Point object.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "2994": {
        "Query": "Gets the ThreadLocalRandom for the current Thread .",
        "GroundTruth": [
            "java.util.concurrent.ThreadLocalRandom.current()"
        ],
        "APIClasses": [
            "java.util.concurrent.ThreadLocalRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "2995": {
        "Query": "Gets the XML Gregorian calendar from date.",
        "GroundTruth": [
            "javax.xml.datatype.DatatypeFactory.newInstance()",
            "java.util.Calendar.setTimeInMillis()",
            "java.util.Date.getTime()",
            "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar()"
        ],
        "APIClasses": [
            "javax.xml.datatype.DatatypeFactory",
            "java.util.Calendar",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "2996": {
        "Query": "Gets the array of all colors of the given image.",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "2997": {
        "Query": "Gets the calendar field of the given calendar by amount.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.get()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "2998": {
        "Query": "Gets the character data corresponding to the given DOM element as a Boolean, or null if the value is not a boolean.",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "2999": {
        "Query": "Gets the child XML Element with the indicated name.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3000": {
        "Query": "Gets the complementary color to a given rgb set.",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "3001": {
        "Query": "Gets the date from the XML Gregorian calendar.",
        "GroundTruth": [
            "javax.xml.datatype.XMLGregorianCalendar.toGregorianCalendar()"
        ],
        "APIClasses": [
            "javax.xml.datatype.XMLGregorianCalendar"
        ],
        "Source": "Tutorial Websites"
    },
    "3002": {
        "Query": "Gets the destination image type.",
        "GroundTruth": [
            "javax.imageio.IIOParam.getDestinationType()",
            "javax.sound.sampled.AudioFileFormat.Type.equals()"
        ],
        "APIClasses": [
            "javax.imageio.IIOParam",
            "javax.sound.sampled.AudioFileFormat.Type"
        ],
        "Source": "Tutorial Websites"
    },
    "3003": {
        "Query": "Gets the difference in time formatted to be easy to read",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.util.logging.SimpleFormatter.format()",
            "java.util.logging.XMLFormatter.format()",
            "java.util.logging.Formatter.format()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.util.logging.SimpleFormatter",
            "java.util.logging.XMLFormatter",
            "java.util.logging.Formatter",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3004": {
        "Query": "Gets the gaussian pdf value constant term log.",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3005": {
        "Query": "Gets the gaussian pdf value constant term.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3006": {
        "Query": "Gets the gaussian pdf value log.",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3007": {
        "Query": "Gets the gaussian pdf value.",
        "GroundTruth": [
            "java.lang.Math.exp()",
            "java.lang.Math.pow()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3008": {
        "Query": "Gets the great circle distance in kilometers between two geographical points, using the haversine formula.",
        "GroundTruth": [
            "java.lang.Math.toRadians()",
            "java.lang.Math.sin()",
            "java.lang.Math.cos()",
            "java.lang.Math.atan2()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3009": {
        "Query": "Gets the greatest common divisor of the absolute value of two numbers, using the \"binary gcd\" method which avoids division and modulo operations.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3010": {
        "Query": "Gets the height from the current screen.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "3011": {
        "Query": "Gets the host name of this system.",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "3012": {
        "Query": "Gets the individual path elements building up the canonical path to the given file.",
        "GroundTruth": [
            "java.io.File.getCanonicalFile()",
            "java.io.File.isDirectory()",
            "java.io.File.getParentFile()",
            "java.io.File.getPath()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3013": {
        "Query": "Gets the instances of Class c in iterable",
        "GroundTruth": [
            "java.lang.Class.isInstance()",
            "java.lang.Class.cast()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3014": {
        "Query": "Gets the java color corresponding to the given CSS color name.",
        "GroundTruth": [
            "java.lang.String.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3015": {
        "Query": "Gets the local (sans namespace) name of the given XML node.",
        "GroundTruth": [
            "org.w3c.dom.Node.getNodeName()",
            "java.lang.String.lastIndexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3016": {
        "Query": "Gets the local monitor's screen bounds.",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getMaximumWindowBounds()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "3017": {
        "Query": "Gets the maximum preferred size from a group of components.",
        "GroundTruth": [
            "java.awt.Component.getPreferredSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "3018": {
        "Query": "Gets the name minus the path from a full filename.",
        "GroundTruth": [
            "java.lang.String.substring()",
            "java.lang.String.lastIndexOf()",
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3019": {
        "Query": "Gets the namespace of the given XML node.",
        "GroundTruth": [
            "org.w3c.dom.Node.getNodeName()",
            "java.lang.String.lastIndexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3020": {
        "Query": "Gets the next twin prime that is near a power of 2 and greater than or equal to the given value",
        "GroundTruth": [
            "java.util.Arrays.binarySearch()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3021": {
        "Query": "Gets the prefix from the given qualified name in XML namespace.",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.length()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3022": {
        "Query": "Gets the prime numbers for the given quantity.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3023": {
        "Query": "Gets the property descriptor for the property name from given class.",
        "GroundTruth": [
            "java.beans.Introspector.getBeanInfo()",
            "java.beans.BeanInfo.getPropertyDescriptors()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.beans.Introspector",
            "java.beans.BeanInfo",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3024": {
        "Query": "Gets the return type of property.",
        "GroundTruth": [
            "java.beans.PropertyDescriptor.getPropertyType()",
            "java.beans.Introspector.getBeanInfo()",
            "java.beans.BeanInfo.getPropertyDescriptors()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.beans.PropertyDescriptor",
            "java.beans.Introspector",
            "java.beans.BeanInfo",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3025": {
        "Query": "Gets the root pane of the given component.",
        "GroundTruth": [
            "java.awt.Component.getParent()",
            "javax.swing.SwingUtilities.windowForComponent()"
        ],
        "APIClasses": [
            "java.awt.Component",
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "3026": {
        "Query": "Gets the screen bounds that contains the rect.",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3027": {
        "Query": "Gets the sibling XML Element with the indicated name.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3028": {
        "Query": "Gets the straight line distance between the pair of points {(x,y),(x1,y1)}.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3029": {
        "Query": "Gets the subarray from array that starts at offset.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3030": {
        "Query": "Gets the sum of the divisors of a number",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3031": {
        "Query": "Gets the time in millis from XMLGregorianCalendar",
        "GroundTruth": [
            "javax.xml.datatype.XMLGregorianCalendar.toGregorianCalendar()"
        ],
        "APIClasses": [
            "javax.xml.datatype.XMLGregorianCalendar"
        ],
        "Source": "Tutorial Websites"
    },
    "3032": {
        "Query": "Gets the transparency of an image.",
        "GroundTruth": [
            "java.awt.image.PixelGrabber.grabPixels()"
        ],
        "APIClasses": [
            "java.awt.image.PixelGrabber"
        ],
        "Source": "Tutorial Websites"
    },
    "3033": {
        "Query": "Gets the value for the sibling XML Element with the indicated name.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3034": {
        "Query": "Gets the value of field on the given instance via reflection",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.get()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "3035": {
        "Query": "Gets the width from the current screen.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "3036": {
        "Query": "Gets twitter account settings",
        "GroundTruth": [
            "javax.tools.JavaFileManager.Location.getName()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "javax.tools.JavaFileManager.Location",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3037": {
        "Query": "Getting Data from a Result Set",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "3038": {
        "Query": "Getting Input with the JOptionPane Class",
        "GroundTruth": [
            "javax.swing.JOptionPane.showInputDialog()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3039": {
        "Query": "Getting LDAP Response Controls",
        "GroundTruth": [
            "javax.naming.NamingEnumeration.hasMore()"
        ],
        "APIClasses": [
            "javax.naming.NamingEnumeration"
        ],
        "Source": "Tutorial Websites"
    },
    "3040": {
        "Query": "Getting Rows from a Database Table",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "3041": {
        "Query": "Getting Text from a URL",
        "GroundTruth": [
            "java.net.URL.openStream()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "3042": {
        "Query": "Getting a Constructor of a Class Object",
        "GroundTruth": [
            "java.lang.Class.getDeclaredConstructors()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3043": {
        "Query": "Getting a Jar File Using a URL",
        "GroundTruth": [
            "java.net.URL.openConnection()",
            "java.net.JarURLConnection.getJarFile()",
            "java.net.JarURLConnection.getEntryName()"
        ],
        "APIClasses": [
            "java.net.URL",
            "java.net.JarURLConnection",
            "java.net.JarURLConnection"
        ],
        "Source": "Tutorial Websites"
    },
    "3044": {
        "Query": "Getting a Sub-Image of an Image",
        "GroundTruth": [
            "java.awt.image.BufferedImage.getSubimage()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "3045": {
        "Query": "Getting a VARRAY Value from an Oracle Table",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.ResultSet.next()",
            "java.sql.Array.getArray()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.ResultSet",
            "java.sql.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "3046": {
        "Query": "Getting an Absolute Filename Path from a Relative Filename Path",
        "GroundTruth": [
            "java.io.File.getAbsoluteFile()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3047": {
        "Query": "Getting an Image from a URL",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "3048": {
        "Query": "Getting and Setting Pixels in a Buffered Image",
        "GroundTruth": [
            "java.awt.image.BufferedImage.getRGB()",
            "java.awt.image.BufferedImage.getWidth()",
            "java.awt.image.BufferedImage.getHeight()",
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "3049": {
        "Query": "Getting and Setting an Attribute in a DOM Element",
        "GroundTruth": [
            "org.w3c.dom.Element.hasAttribute()",
            "org.w3c.dom.Element.getAttribute()",
            "org.w3c.dom.Element.setAttribute()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "3050": {
        "Query": "Getting and Setting the Current Directory of a JFileChooser Dialog",
        "GroundTruth": [
            "java.io.File.getCanonicalPath()",
            "javax.swing.JFileChooser.setCurrentDirectory()",
            "javax.swing.JFileChooser.showOpenDialog()",
            "javax.swing.JFileChooser.getCurrentDirectory()"
        ],
        "APIClasses": [
            "java.io.File",
            "javax.swing.JFileChooser",
            "javax.swing.JFileChooser",
            "javax.swing.JFileChooser"
        ],
        "Source": "Tutorial Websites"
    },
    "3051": {
        "Query": "Getting and Setting the Modification Time of a File or Directory",
        "GroundTruth": [
            "java.io.File.lastModified()",
            "java.lang.System.currentTimeMillis()",
            "java.io.File.setLastModified()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3052": {
        "Query": "Getting and Setting the Selected File of a JFileChooser Dialog",
        "GroundTruth": [
            "java.io.File.getCanonicalPath()",
            "javax.swing.JFileChooser.setSelectedFile()",
            "javax.swing.JFileChooser.showOpenDialog()",
            "javax.swing.JFileChooser.getSelectedFile()"
        ],
        "APIClasses": [
            "java.io.File",
            "javax.swing.JFileChooser",
            "javax.swing.JFileChooser",
            "javax.swing.JFileChooser"
        ],
        "Source": "Tutorial Websites"
    },
    "3053": {
        "Query": "Getting the Bytes of a Generated Symmetric Key",
        "GroundTruth": [
            "javax.crypto.KeyGenerator.getInstance()",
            "javax.crypto.KeyGenerator.generateKey()",
            "java.security.Key.getEncoded()",
            "java.awt.RenderingHints.Key.equals()"
        ],
        "APIClasses": [
            "javax.crypto.KeyGenerator",
            "javax.crypto.KeyGenerator",
            "java.security.Key",
            "java.awt.RenderingHints.Key"
        ],
        "Source": "Tutorial Websites"
    },
    "3054": {
        "Query": "Getting the Color Model of an Image",
        "GroundTruth": [
            "java.awt.image.PixelGrabber.grabPixels()"
        ],
        "APIClasses": [
            "java.awt.image.PixelGrabber"
        ],
        "Source": "Tutorial Websites"
    },
    "3055": {
        "Query": "Getting the Current Working Directory",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3056": {
        "Query": "Getting the Dimensions of Text From within the paint() method",
        "GroundTruth": [
            "java.awt.FontMetrics.stringWidth()",
            "java.awt.FontMetrics.getHeight()"
        ],
        "APIClasses": [
            "java.awt.FontMetrics"
        ],
        "Source": "Tutorial Websites"
    },
    "3057": {
        "Query": "Getting the Driver of a Connection",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.getDriverName()",
            "java.sql.DriverManager.getConnection()",
            "java.sql.DriverManager.getDriver()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "3058": {
        "Query": "Getting the Hostname of an IP Address",
        "GroundTruth": [
            "java.net.InetAddress.getByName()",
            "java.net.InetAddress.getByAddress()",
            "java.net.InetAddress.getCanonicalHostName()"
        ],
        "APIClasses": [
            "java.net.InetAddress",
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "3059": {
        "Query": "Getting the IP Address and Hostname of the Local Machine",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "3060": {
        "Query": "Getting the IP Address of a Hostname",
        "GroundTruth": [
            "java.net.InetAddress.getByName()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "3061": {
        "Query": "Getting the Length and Dimensions of an Array Object",
        "GroundTruth": [
            "java.lang.reflect.Array.getLength()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "3062": {
        "Query": "Getting the Maximum Table Name Length in a Database",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.getMaxTableNameLength()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData"
        ],
        "Source": "Tutorial Websites"
    },
    "3063": {
        "Query": "Getting the Name of a JDBC Type",
        "GroundTruth": [
            "java.util.Map.put()",
            "java.util.Map.get()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3064": {
        "Query": "Getting the Number of Rows in a Database Table",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.ResultSet.next()",
            "java.sql.ResultSet.getInt()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3065": {
        "Query": "Getting the Number of Rows in a Table Using a Scrollable Result Set",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.ResultSet.last()",
            "java.sql.ResultSet.getRow()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3066": {
        "Query": "Getting the Parents of a Filename Path",
        "GroundTruth": [
            "java.io.File.getParent()",
            "java.io.File.getParentFile()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3067": {
        "Query": "Getting the Response Headers from an HTTP Connection",
        "GroundTruth": [
            "java.net.URL.openConnection()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "3068": {
        "Query": "Getting the Roots of the Preference Trees",
        "GroundTruth": [
            "java.util.prefs.Preferences.systemRoot()",
            "java.util.prefs.Preferences.userRoot()"
        ],
        "APIClasses": [
            "java.util.prefs.Preferences"
        ],
        "Source": "Tutorial Websites"
    },
    "3069": {
        "Query": "Getting the Size of a File",
        "GroundTruth": [
            "java.io.File.length()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3070": {
        "Query": "Getting the Size of the Java Memory Heap",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.totalMemory()",
            "java.lang.Runtime.maxMemory()",
            "java.lang.Runtime.freeMemory()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime",
            "java.lang.Runtime",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "3071": {
        "Query": "Getting the Size of the Screen",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "3072": {
        "Query": "Getting the Stored Procedure Names in a Database",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.getProcedures()",
            "java.sql.ResultSet.next()",
            "java.sql.ResultSet.getString()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3073": {
        "Query": "Given a binary tree, print out the nodes in order without using recursion.",
        "GroundTruth": [
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3074": {
        "Query": "Given a character and its font, calculate the center point offset for that character.",
        "GroundTruth": [
            "java.awt.FontMetrics.charWidth()"
        ],
        "APIClasses": [
            "java.awt.FontMetrics"
        ],
        "Source": "Tutorial Websites"
    },
    "3075": {
        "Query": "Given a line formed by points Point1 and Point2, returns the length of the line.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3076": {
        "Query": "Given a line segment the rotation (from a pointing straight up position) in radians of that line.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.asin()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3077": {
        "Query": "Given a list of elements of type , remove the duplicates from the list in place",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.clear()",
            "java.util.List.addAll()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "3078": {
        "Query": "Given a midi pitch value (0-127), give back the musical note.",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3079": {
        "Query": "Given a number, round up to the nearest power of ten times 1, 2, or 5.",
        "GroundTruth": [
            "java.lang.Math.floor()",
            "java.lang.Math.log10()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3080": {
        "Query": "Given a point O(oriX,oriY) and a vector V(oriDX,oriDY), with V origin in O and V unit vector, tells how much we need to rotate V around O so that V points to Target.",
        "GroundTruth": [
            "java.lang.Math.acos()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3081": {
        "Query": "Given a stating InetAddress and an ending InetAddress compute an InetAddress instance that will be used as the network for the isOnNetwork() method.",
        "GroundTruth": [
            "java.net.InetAddress.getByAddress()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "3082": {
        "Query": "Given a string containing a shell command argument, escape the string so that it may be entered on the shell command line.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3083": {
        "Query": "Given a string, replace all the instances of XML entities with their corresponding XML special characters.",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3084": {
        "Query": "Given an ip in a numeric, string format, return the InetAddress.",
        "GroundTruth": [
            "java.lang.Long.parseLong()",
            "java.net.InetAddress.getByAddress()"
        ],
        "APIClasses": [
            "java.lang.Long",
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "3085": {
        "Query": "Given an ip in numeric format, return a byte array that can be fed to InetAddress.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3086": {
        "Query": "Given an org.w3c.dom.Node which is a XML element containing text, returns the text.",
        "GroundTruth": [
            "org.w3c.dom.Node.getFirstChild()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "3087": {
        "Query": "Given array indices that define a sorted subarray, place the element just above the subarray at the end of the subarray if it is smaller than the largest element and recurse on a 1-smaller subarray.",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3088": {
        "Query": "Given log(a) and log(b) calculate log(a + b) boils down to log( exp(log_a) + exp(log_b) ) but this might overflow, so we turn this into log([exp(log_a - log_c) + exp(log_b - log_c)]exp(log_c)) and we set log_c == max(log_a,log_b) and so it becomes: LARGE + log(1 + exp(SMALL - LARGE)) == LARGE + log(1 + SMALL) ~= large the whole idea being to avoid an overflow (exp(LARGE) == VERY LARGE == overflow)",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3089": {
        "Query": "Given the Color, get the red, green and blue components.",
        "GroundTruth": [
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3090": {
        "Query": "Given the coordinates of the start and end of a line, returns the angle in radians of the line",
        "GroundTruth": [
            "java.lang.Math.atan()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3091": {
        "Query": "Given the name of a TLS/SSL cipher suite, return an int representing it effective stream cipher key strength.",
        "GroundTruth": [
            "java.lang.String.contains()",
            "javax.net.ssl.SSLEngine.getSession()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.net.ssl.SSLEngine"
        ],
        "Source": "Tutorial Websites"
    },
    "3092": {
        "Query": "Given the name of a scope as a string (page, request, session or application), return the corresponding numeric code as defined in the PageContext class.",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3093": {
        "Query": "Given the path to a file in the specified encoding, returns a single string with the contents of that file.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3094": {
        "Query": "Given two points {(x1,y1),(x2,y2)} returns {m,b} from the equation y = mx + b for a line which passes through both points.",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3095": {
        "Query": "Gives a string containing the stack trace of a Throwable exception.",
        "GroundTruth": [
            "java.lang.Throwable.printStackTrace()",
            "java.io.StringWriter.toString()"
        ],
        "APIClasses": [
            "java.lang.Throwable",
            "java.io.StringWriter"
        ],
        "Source": "Tutorial Websites"
    },
    "3096": {
        "Query": "Gives the percentile of an array",
        "GroundTruth": [
            "java.lang.Math.floor()",
            "java.lang.System.arraycopy()",
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3097": {
        "Query": "Goes recursively into the interface and gets all defined propertyDescriptors",
        "GroundTruth": [
            "java.beans.Introspector.getBeanInfo()",
            "java.beans.BeanInfo.getPropertyDescriptors()"
        ],
        "APIClasses": [
            "java.beans.Introspector",
            "java.beans.BeanInfo"
        ],
        "Source": "Tutorial Websites"
    },
    "3098": {
        "Query": "Grabs a RGB values of the given image icon",
        "GroundTruth": [
            "javax.swing.Icon.getIconWidth()",
            "javax.swing.Icon.getIconHeight()",
            "java.awt.image.PixelGrabber.grabPixels()"
        ],
        "APIClasses": [
            "javax.swing.Icon",
            "java.awt.image.PixelGrabber"
        ],
        "Source": "Tutorial Websites"
    },
    "3099": {
        "Query": "Graphics draw Thick Line",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3100": {
        "Query": "Greedy and Nongreedy Matching in a Regular Expression",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.group()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "3101": {
        "Query": "GridLayout containing six buttons.",
        "GroundTruth": [
            "java.awt.Container.setLayout()",
            "java.awt.Container.validate()"
        ],
        "APIClasses": [
            "java.awt.Container"
        ],
        "Source": "Tutorial Websites"
    },
    "3102": {
        "Query": "Guaranteeing a Block of Code Is Executed by Placing the code into the finally clause.",
        "GroundTruth": [
            "java.util.Random.nextInt()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "3103": {
        "Query": "Guide to Send Emails in Java",
        "GroundTruth": [
            "javax.crypto.Mac.getInstance()",
            "java.net.Socket.connect()"
        ],
        "APIClasses": [
            "javax.crypto.Mac",
            "java.net.Socket"
        ],
        "Source": "Tutorial Websites"
    },
    "3104": {
        "Query": "HSB Color to RGB",
        "GroundTruth": [
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3105": {
        "Query": "HSL stands for hue, saturation, and lightness, and is a cylindrical representation of RGB values.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3106": {
        "Query": "HSV color value to RGB color value",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3107": {
        "Query": "Handling ArithmeticExceptions and InputMismatchExceptions.",
        "GroundTruth": [
            "java.util.Scanner.nextInt()",
            "java.util.Scanner.nextLine()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "3108": {
        "Query": "Handling multiple file selection in the FileDialog class",
        "GroundTruth": [
            "javax.swing.SwingUtilities.invokeLater()",
            "java.awt.Window.setVisible()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "3109": {
        "Query": "Handling spurious thread wakeups",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemEventQueue()",
            "java.awt.EventQueue.isDispatchThread()",
            "java.lang.Object.wait()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.EventQueue",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "3110": {
        "Query": "Hard-Crash the JVM by accessing memory at location 0x00000000 (or as in 64-Bit: 0x0000000000000000), also called the null-address.",
        "GroundTruth": [
            "java.lang.Class.getDeclaredField()",
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.get()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "3111": {
        "Query": "Has user disable gzip (e.g., for benchmarking) in HttpServletRequest",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3112": {
        "Query": "HashSet used to remove duplicate values from array of strings.",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3113": {
        "Query": "HelloWorld Servlet that randomly displays one of six different greetings",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3114": {
        "Query": "Helper function to append an Object to an array and return the new array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3115": {
        "Query": "Helper function to prepend an Object to an array and return the new array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3116": {
        "Query": "Helper function to write UTF-8 files",
        "GroundTruth": [
            "java.io.Writer.close()"
        ],
        "APIClasses": [
            "java.io.Writer"
        ],
        "Source": "Tutorial Websites"
    },
    "3117": {
        "Query": "Helper method for printing the content from an Iterator.",
        "GroundTruth": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()"
        ],
        "APIClasses": [
            "java.util.Iterator"
        ],
        "Source": "Tutorial Websites"
    },
    "3118": {
        "Query": "Helper method that creates a singleton map.",
        "GroundTruth": [
            "java.util.Map.put()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3119": {
        "Query": "Helper method to instantiate new BufferedImages; if the graphics environment is actually connected to real screen devices (e.g.",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.isHeadlessInstance()",
            "java.awt.GraphicsEnvironment.getDefaultScreenDevice()",
            "java.awt.GraphicsDevice.getDefaultConfiguration()",
            "java.awt.GraphicsConfiguration.createCompatibleImage()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice",
            "java.awt.GraphicsConfiguration"
        ],
        "Source": "Tutorial Websites"
    },
    "3120": {
        "Query": "Helper method to replace camel casing with spaces between words using regex.",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3121": {
        "Query": "Helper to turn on indentation for a XML Transformer that works correctly for both Saxon and Xalan.",
        "GroundTruth": [
            "java.lang.String.valueOf()",
            "javax.xml.transform.Transformer.setOutputProperty()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "3122": {
        "Query": "Hex Decode Encode using apache commons code",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.String.format()",
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3123": {
        "Query": "Hides a specific column of a JTable.",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMinWidth()",
            "javax.swing.table.TableColumn.setMaxWidth()",
            "javax.swing.table.TableColumn.setPreferredWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "3124": {
        "Query": "Host IP Lookup Application",
        "GroundTruth": [
            "java.util.Scanner.nextLine()",
            "java.net.InetAddress.getAllByName()",
            "java.lang.String.toString()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.net.InetAddress",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3125": {
        "Query": "How Java String object is created and used.",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3126": {
        "Query": "How can I change file attribute to read only?",
        "GroundTruth": [
            "java.io.File.setReadOnly()",
            "java.io.File.canWrite()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3127": {
        "Query": "How can I change file attribute to writable?",
        "GroundTruth": [
            "java.io.File.setWritable()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3128": {
        "Query": "How can I insert an element in array at a given position?",
        "GroundTruth": [
            "java.util.List.addAll()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3129": {
        "Query": "How do I add a delay in my program?",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3130": {
        "Query": "How do I add a title to a border?",
        "GroundTruth": [
            "javax.swing.border.TitledBorder.setTitleJustification()"
        ],
        "APIClasses": [
            "javax.swing.border.TitledBorder"
        ],
        "Source": "Tutorial Websites"
    },
    "3131": {
        "Query": "How do I add an action listener to JComboBox?",
        "GroundTruth": [
            "java.awt.List.addActionListener()"
        ],
        "APIClasses": [
            "java.awt.List"
        ],
        "Source": "Tutorial Websites"
    },
    "3132": {
        "Query": "How do I add elements into a Deque?",
        "GroundTruth": [
            "java.util.Set.add()",
            "java.util.Deque.addFirst()",
            "java.util.Deque.addLast()"
        ],
        "APIClasses": [
            "java.util.Set",
            "java.util.Deque",
            "java.util.Deque"
        ],
        "Source": "Tutorial Websites"
    },
    "3133": {
        "Query": "How do I add icon to JTabbedPane tabs?",
        "GroundTruth": [
            "java.lang.Class.getResource()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3134": {
        "Query": "How do I add item at the beginning or the end of LinkedList?",
        "GroundTruth": [
            "java.util.LinkedList.addLast()"
        ],
        "APIClasses": [
            "java.util.LinkedList"
        ],
        "Source": "Tutorial Websites"
    },
    "3135": {
        "Query": "How do I add items and remove items from JComboBox?",
        "GroundTruth": [
            "javax.swing.JComboBox.removeAllItems()"
        ],
        "APIClasses": [
            "javax.swing.JComboBox"
        ],
        "Source": "Tutorial Websites"
    },
    "3136": {
        "Query": "How do I add leading zeros to a number?",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.text.Format.format()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.text.Format"
        ],
        "Source": "Tutorial Websites"
    },
    "3137": {
        "Query": "How do I add or subtract  date in Java 8?",
        "GroundTruth": [
            "java.time.Year.plus()",
            "java.time.Year.minus()",
            "java.time.Year.of()",
            "java.time.Period.ofDays()",
            "java.time.Period.ofWeeks()",
            "java.time.Period.ofMonths()",
            "java.time.Period.ofYears()"
        ],
        "APIClasses": [
            "java.time.Year",
            "java.time.Year",
            "java.time.Year",
            "java.time.Period",
            "java.time.Period",
            "java.time.Period",
            "java.time.Period"
        ],
        "Source": "Tutorial Websites"
    },
    "3138": {
        "Query": "How do I align string print out in left, right, center alignment?",
        "GroundTruth": [
            "java.awt.GridBagConstraints.CENTER"
        ],
        "APIClasses": [
            "java.awt.GridBagConstraints"
        ],
        "Source": "Tutorial Websites"
    },
    "3139": {
        "Query": "How do I allow row or column selection in JTable?",
        "GroundTruth": [
            "javax.swing.JTable.setRowSelectionAllowed()",
            "javax.swing.JTable.setColumnSelectionAllowed()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "3140": {
        "Query": "How do I assign tool tips for JTabbedPane tabs?",
        "GroundTruth": [
            "javax.swing.JTabbedPane.addTab()"
        ],
        "APIClasses": [
            "javax.swing.JTabbedPane"
        ],
        "Source": "Tutorial Websites"
    },
    "3141": {
        "Query": "How do I associate JLabel component with a JTextField?",
        "GroundTruth": [
            "javax.swing.JLabel.setLabelFor()"
        ],
        "APIClasses": [
            "javax.swing.JLabel"
        ],
        "Source": "Tutorial Websites"
    },
    "3142": {
        "Query": "How do I breaks a paragraph into sentences?",
        "GroundTruth": [
            "java.text.BreakIterator.getSentenceInstance()"
        ],
        "APIClasses": [
            "java.text.BreakIterator"
        ],
        "Source": "Tutorial Websites"
    },
    "3143": {
        "Query": "How do I breaks a text or sentence into words?",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.text.BreakIterator.getWordInstance()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.text.BreakIterator"
        ],
        "Source": "Tutorial Websites"
    },
    "3144": {
        "Query": "How do I calculate difference between two dates?",
        "GroundTruth": [
            "java.time.Period.between()"
        ],
        "APIClasses": [
            "java.time.Period"
        ],
        "Source": "Tutorial Websites"
    },
    "3145": {
        "Query": "How do I calculate logarithm?",
        "GroundTruth": [
            "java.lang.Math.log10()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3146": {
        "Query": "How do I calculate process elapsed time?",
        "GroundTruth": [
            "java.lang.System.nanoTime()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3147": {
        "Query": "How do I calculate process execution time in higher resolution?",
        "GroundTruth": [
            "java.lang.System.nanoTime()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3148": {
        "Query": "How do I call a specific function of a script?",
        "GroundTruth": [
            "javax.script.Invocable.invokeFunction()"
        ],
        "APIClasses": [
            "javax.script.Invocable"
        ],
        "Source": "Tutorial Websites"
    },
    "3149": {
        "Query": "How do I change DecimalFormat pattern?",
        "GroundTruth": [
            "java.text.DecimalFormat.applyPattern()"
        ],
        "APIClasses": [
            "java.text.DecimalFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "3150": {
        "Query": "How do I change JFrame image icon?",
        "GroundTruth": [
            "java.awt.Frame.setIconImage()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Tutorial Websites"
    },
    "3151": {
        "Query": "How do I change JFrame state programmatically?",
        "GroundTruth": [
            "java.awt.Frame.setExtendedState()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Tutorial Websites"
    },
    "3152": {
        "Query": "How do I change an applet background color?",
        "GroundTruth": [
            "java.awt.Frame.setBackground()",
            "javax.crypto.Mac.init()"
        ],
        "APIClasses": [
            "java.awt.Frame",
            "javax.crypto.Mac"
        ],
        "Source": "Tutorial Websites"
    },
    "3153": {
        "Query": "How do I change number format symbols?",
        "GroundTruth": [
            "java.text.DecimalFormatSymbols.setDecimalSeparator()",
            "java.text.DecimalFormatSymbols.setGroupingSeparator()"
        ],
        "APIClasses": [
            "java.text.DecimalFormatSymbols",
            "java.text.DecimalFormatSymbols"
        ],
        "Source": "Tutorial Websites"
    },
    "3154": {
        "Query": "How do I change the buffer mode between write and read?",
        "GroundTruth": [
            "java.nio.Buffer.flip()"
        ],
        "APIClasses": [
            "java.nio.Buffer"
        ],
        "Source": "Tutorial Websites"
    },
    "3155": {
        "Query": "How do I change the currency symbol?",
        "GroundTruth": [
            "java.text.DecimalFormatSymbols.setCurrencySymbol()"
        ],
        "APIClasses": [
            "java.text.DecimalFormatSymbols"
        ],
        "Source": "Tutorial Websites"
    },
    "3156": {
        "Query": "How do I change the cursor shape in Swing?",
        "GroundTruth": [
            "java.awt.Frame.setCursor()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Tutorial Websites"
    },
    "3157": {
        "Query": "How do I check a string ends with a specific word?",
        "GroundTruth": [
            "java.lang.String.endsWith()",
            "javax.print.attribute.standard.MediaTray.MAIN"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.print.attribute.standard.MediaTray"
        ],
        "Source": "Tutorial Websites"
    },
    "3158": {
        "Query": "How do I check a string starts with a specific word?",
        "GroundTruth": [
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3159": {
        "Query": "How do I check if a character representing a number?",
        "GroundTruth": [
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3160": {
        "Query": "How do I check if a character representing an alphabet?",
        "GroundTruth": [
            "java.lang.Character.isDigit()",
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.Character",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3161": {
        "Query": "How do I check if a class represent a primitive type?",
        "GroundTruth": [
            "java.lang.Class.isPrimitive()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3162": {
        "Query": "How do I check if a class represent an interface type?",
        "GroundTruth": [
            "java.lang.Class.isInterface()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3163": {
        "Query": "How do I check if a file exists?",
        "GroundTruth": [
            "java.io.File.exists()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3164": {
        "Query": "How do I check if a file is hidden?",
        "GroundTruth": [
            "java.io.File.isHidden()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3165": {
        "Query": "How do I check if a message is loggable?",
        "GroundTruth": [
            "java.util.zip.Deflater.setLevel()"
        ],
        "APIClasses": [
            "java.util.zip.Deflater"
        ],
        "Source": "Tutorial Websites"
    },
    "3166": {
        "Query": "How do I check if a string contains a specific word?",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.util.List.indexOf()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.List",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3167": {
        "Query": "How do I check if a string is a valid number?",
        "GroundTruth": [
            "java.lang.Integer.parseInt()",
            "java.lang.Float.parseFloat()",
            "java.lang.Double.parseDouble()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.Float",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3168": {
        "Query": "How do I check if a string starts with a pattern?",
        "GroundTruth": [
            "java.util.regex.Matcher.lookingAt()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "3169": {
        "Query": "How do I check if a thread is a daemon thread?",
        "GroundTruth": [
            "java.lang.Thread.isDaemon()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3170": {
        "Query": "How do I check if a thread is alive?",
        "GroundTruth": [
            "java.lang.Thread.isAlive()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3171": {
        "Query": "How do I check if a year is a leap year?",
        "GroundTruth": [
            "java.util.GregorianCalendar.isLeapYear()"
        ],
        "APIClasses": [
            "java.util.GregorianCalendar"
        ],
        "Source": "Tutorial Websites"
    },
    "3172": {
        "Query": "How do I check if cursor is in the last row?",
        "GroundTruth": [
            "java.sql.ResultSet.isAfterLast()"
        ],
        "APIClasses": [
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3173": {
        "Query": "How do I check if the OUT parameter value is null?",
        "GroundTruth": [
            "java.sql.CallableStatement.wasNull()"
        ],
        "APIClasses": [
            "java.sql.CallableStatement"
        ],
        "Source": "Tutorial Websites"
    },
    "3174": {
        "Query": "How do I check string for equality?",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3175": {
        "Query": "How do I check whether a thread group has been destroyed?",
        "GroundTruth": [
            "java.lang.ThreadGroup.isDestroyed()"
        ],
        "APIClasses": [
            "java.lang.ThreadGroup"
        ],
        "Source": "Tutorial Websites"
    },
    "3176": {
        "Query": "How do I clear a buffer using clear method?",
        "GroundTruth": [
            "java.util.Map.clear()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3177": {
        "Query": "How do I clear a buffer using compact method?",
        "GroundTruth": [
            "java.nio.IntBuffer.compact()"
        ],
        "APIClasses": [
            "java.nio.IntBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "3178": {
        "Query": "How do I clear the content of an array?",
        "GroundTruth": [
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3179": {
        "Query": "How do I clone an object?",
        "GroundTruth": [
            "java.util.Date.clone()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "3180": {
        "Query": "How do I close a JFrame application?",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3181": {
        "Query": "How do I compare Logger Level severity?",
        "GroundTruth": [
            "java.lang.Byte.intValue()"
        ],
        "APIClasses": [
            "java.lang.Byte"
        ],
        "Source": "Tutorial Websites"
    },
    "3182": {
        "Query": "How do I compare if two arrays are equal?",
        "GroundTruth": [
            "java.util.Arrays.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3183": {
        "Query": "How do I compare string regardless of their case?",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3184": {
        "Query": "How do I compare two dates?",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3185": {
        "Query": "How do I convert a collection object into an array?",
        "GroundTruth": [
            "java.util.Set.toArray()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "3186": {
        "Query": "How do I convert angle from radians to degrees?",
        "GroundTruth": [
            "java.lang.Math.toDegrees()",
            "java.lang.Math.toRadians()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3187": {
        "Query": "How do I convert between old Date and Calendar object with the new Java 8 Date Time?",
        "GroundTruth": [
            "java.sql.Time.toInstant()",
            "java.time.Instant.atZone()",
            "java.sql.Date.toLocalDate()",
            "java.sql.Time.toLocalTime()",
            "java.sql.Timestamp.toLocalDateTime()",
            "java.util.Date.from()",
            "java.time.LocalDateTime.ofInstant()",
            "java.util.GregorianCalendar.from()",
            "java.time.LocalDateTime.atZone()"
        ],
        "APIClasses": [
            "java.sql.Time",
            "java.time.Instant",
            "java.sql.Date",
            "java.sql.Time",
            "java.sql.Timestamp",
            "java.util.Date",
            "java.time.LocalDateTime",
            "java.util.GregorianCalendar",
            "java.time.LocalDateTime"
        ],
        "Source": "Tutorial Websites"
    },
    "3188": {
        "Query": "How do I convert day-of-the-year to date?",
        "GroundTruth": [
            "java.util.List.set()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "3189": {
        "Query": "How do I convert decimal to binary?",
        "GroundTruth": [
            "java.lang.Integer.toBinaryString()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3190": {
        "Query": "How do I convert decimal to hexadecimal?",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3191": {
        "Query": "How do I convert decimal to octal?",
        "GroundTruth": [
            "java.lang.Integer.toOctalString()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3192": {
        "Query": "How do I convert double value into int value?",
        "GroundTruth": [
            "java.lang.Double.intValue()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3193": {
        "Query": "How do I convert java.util.TimeZone to java.time.ZoneId?",
        "GroundTruth": [
            "javax.print.attribute.standard.MediaTray.MAIN",
            "java.util.TimeZone.getDefault()",
            "java.util.TimeZone.toZoneId()",
            "java.util.Calendar.getTimeZone()",
            "java.util.TimeZone.getTimeZone()",
            "java.time.ZoneId.systemDefault()",
            "java.time.ZoneId.of()"
        ],
        "APIClasses": [
            "javax.print.attribute.standard.MediaTray",
            "java.util.TimeZone",
            "java.util.TimeZone",
            "java.util.Calendar",
            "java.util.TimeZone",
            "java.time.ZoneId",
            "java.time.ZoneId"
        ],
        "Source": "Tutorial Websites"
    },
    "3194": {
        "Query": "How do I convert number into Roman Numerals?",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3195": {
        "Query": "How do I convert primitive boolean type into Boolean object?",
        "GroundTruth": [
            "java.lang.Boolean.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "3196": {
        "Query": "How do I convert primitive data types into String?",
        "GroundTruth": [
            "java.lang.String.valueOf()",
            "java.lang.Integer.toString()",
            "java.lang.Long.toString()",
            "java.lang.Float.toString()",
            "java.lang.Double.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Float",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3197": {
        "Query": "How do I convert raw IP address to String?",
        "GroundTruth": [
            "java.net.InetAddress.getAddress()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "3198": {
        "Query": "How do I convert string to char array?",
        "GroundTruth": [
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3199": {
        "Query": "How do I copy a file in JDK 7?",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.copy()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3200": {
        "Query": "How do I copy some items of an array into another array?",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3201": {
        "Query": "How do I count the number of capturing groups?",
        "GroundTruth": [
            "java.util.regex.Matcher.groupCount()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "3202": {
        "Query": "How do I create JLabel with an image icon?",
        "GroundTruth": [
            "javax.swing.JLabel.setIcon()"
        ],
        "APIClasses": [
            "javax.swing.JLabel"
        ],
        "Source": "Tutorial Websites"
    },
    "3203": {
        "Query": "How do I create a JSlider that snap to the closest tick mark?",
        "GroundTruth": [
            "javax.swing.JSlider.setSnapToTicks()"
        ],
        "APIClasses": [
            "javax.swing.JSlider"
        ],
        "Source": "Tutorial Websites"
    },
    "3204": {
        "Query": "How do I create a JSlider with custom labels?",
        "GroundTruth": [
            "javax.swing.JSlider.setLabelTable()"
        ],
        "APIClasses": [
            "javax.swing.JSlider"
        ],
        "Source": "Tutorial Websites"
    },
    "3205": {
        "Query": "How do I create a Last-In-First-Out Deque?",
        "GroundTruth": [
            "java.util.Deque.peekLast()"
        ],
        "APIClasses": [
            "java.util.Deque"
        ],
        "Source": "Tutorial Websites"
    },
    "3206": {
        "Query": "How do I create a connection to database?",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3207": {
        "Query": "How do I create a console progress bar?",
        "GroundTruth": [
            "java.awt.Component.print()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "3208": {
        "Query": "How do I create a custom TemporalAdjuster?",
        "GroundTruth": [
            "java.time.Year.adjustInto()"
        ],
        "APIClasses": [
            "java.time.Year"
        ],
        "Source": "Tutorial Websites"
    },
    "3209": {
        "Query": "How do I create a custom logger Formatter?",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.util.logging.Formatter.getHead()",
            "java.util.logging.Formatter.getTail()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.util.logging.Formatter",
            "java.util.logging.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "3210": {
        "Query": "How do I create a daemon thread?",
        "GroundTruth": [
            "java.lang.Thread.setDaemon()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3211": {
        "Query": "How do I create a directories recursively?",
        "GroundTruth": [
            "java.io.File.mkdirs()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3212": {
        "Query": "How do I create a generic Map object?",
        "GroundTruth": [
            "java.util.Map.put()",
            "java.util.Map.get()",
            "java.util.Scanner.hasNext()",
            "java.util.Random.next()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.Map",
            "java.util.Scanner",
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "3213": {
        "Query": "How do I create a generic Set?",
        "GroundTruth": [
            "java.util.Iterator.next()"
        ],
        "APIClasses": [
            "java.util.Iterator"
        ],
        "Source": "Tutorial Websites"
    },
    "3214": {
        "Query": "How do I create a gradient paint in Java 2D?",
        "GroundTruth": [
            "java.awt.Graphics2D.setPaint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "3215": {
        "Query": "How do I create a message dialog box?",
        "GroundTruth": [
            "javax.swing.JOptionPane.showMessageDialog()",
            "javax.swing.JOptionPane.showInputDialog()",
            "javax.swing.JOptionPane.showConfirmDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane",
            "javax.swing.JOptionPane",
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "3216": {
        "Query": "How do I create a multithread program?",
        "GroundTruth": [
            "java.lang.Thread.run()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3217": {
        "Query": "How do I create a new directory in Java?",
        "GroundTruth": [
            "java.io.File.mkdir()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3218": {
        "Query": "How do I create a repeated sequence of character?",
        "GroundTruth": [
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3219": {
        "Query": "How do I create a simple JTabbedPane?",
        "GroundTruth": [
            "javax.swing.JTabbedPane.addTab()"
        ],
        "APIClasses": [
            "javax.swing.JTabbedPane"
        ],
        "Source": "Tutorial Websites"
    },
    "3220": {
        "Query": "How do I create a simple annotation?",
        "GroundTruth": [
            "org.omg.CORBA.TCKind.value()"
        ],
        "APIClasses": [
            "org.omg.CORBA.TCKind"
        ],
        "Source": "Tutorial Websites"
    },
    "3221": {
        "Query": "How do I create a table model for JTable component?",
        "GroundTruth": [
            "javax.swing.JTree.getRowCount()",
            "javax.swing.JTable.getColumnCount()"
        ],
        "APIClasses": [
            "javax.swing.JTree",
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "3222": {
        "Query": "How do I create a thread by extending Thread class?",
        "GroundTruth": [
            "java.lang.Thread.run()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3223": {
        "Query": "How do I create a vertical JSlider?",
        "GroundTruth": [
            "java.awt.Scrollbar.setOrientation()"
        ],
        "APIClasses": [
            "java.awt.Scrollbar"
        ],
        "Source": "Tutorial Websites"
    },
    "3224": {
        "Query": "How do I create an interface in Java?",
        "GroundTruth": [
            "javax.tools.Diagnostic.getPosition()"
        ],
        "APIClasses": [
            "javax.tools.Diagnostic"
        ],
        "Source": "Tutorial Websites"
    },
    "3225": {
        "Query": "How do I create an uneditable JTextArea?",
        "GroundTruth": [
            "javax.swing.JTree.setEditable()"
        ],
        "APIClasses": [
            "javax.swing.JTree"
        ],
        "Source": "Tutorial Websites"
    },
    "3226": {
        "Query": "How do I create and delete a file in JDK 7?",
        "GroundTruth": [
            "java.nio.file.Files.createFile()",
            "java.io.File.delete()",
            "java.io.File.exists()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.io.File",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3227": {
        "Query": "How do I create object using Constructor object?",
        "GroundTruth": [
            "java.lang.String.String()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3228": {
        "Query": "How do I create random number?",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3229": {
        "Query": "How do I create temporary file?",
        "GroundTruth": [
            "java.io.File.createTempFile()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3230": {
        "Query": "How do I decode string to integer?",
        "GroundTruth": [
            "java.lang.Integer.decode()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3231": {
        "Query": "How do I define an integer constant in binary format?",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3232": {
        "Query": "How do I define constructor in enum type?",
        "GroundTruth": [
            "java.awt.Color.RED",
            "java.awt.Color.ORANGE"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "3233": {
        "Query": "How do I delete a file in Java?",
        "GroundTruth": [
            "java.io.File.exists()",
            "java.io.File.delete()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3234": {
        "Query": "How do I destroy a thread group?",
        "GroundTruth": [
            "java.lang.Thread.destroy()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3235": {
        "Query": "How do I detect tab selection changes in JTabbedPane?",
        "GroundTruth": [
            "javax.swing.JSlider.addChangeListener()",
            "javax.swing.event.ChangeListener.stateChanged()",
            "java.awt.List.getSelectedIndex()"
        ],
        "APIClasses": [
            "javax.swing.JSlider",
            "javax.swing.event.ChangeListener",
            "java.awt.List"
        ],
        "Source": "Tutorial Websites"
    },
    "3236": {
        "Query": "How do I determine if a class object represents an array class?",
        "GroundTruth": [
            "java.lang.Class.isArray()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3237": {
        "Query": "How do I determine if a pathname is a directory?",
        "GroundTruth": [
            "java.io.File.isDirectory()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3238": {
        "Query": "How do I determine if a string match a pattern exactly?",
        "GroundTruth": [
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Matcher.lookingAt()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "3239": {
        "Query": "How do I display negative number in parentheses?",
        "GroundTruth": [
            "javax.crypto.Mac.getInstance()",
            "java.text.ChoiceFormat.applyPattern()",
            "java.time.Year.format()"
        ],
        "APIClasses": [
            "javax.crypto.Mac",
            "java.text.ChoiceFormat",
            "java.time.Year"
        ],
        "Source": "Tutorial Websites"
    },
    "3240": {
        "Query": "How do I draw a line in Java 2D?",
        "GroundTruth": [
            "java.awt.Graphics2D.draw()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "3241": {
        "Query": "How do I draw a string in Java 2D?",
        "GroundTruth": [
            "java.awt.Graphics.drawString()",
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics",
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "3242": {
        "Query": "How do I draw a vertical text in Java 2D?",
        "GroundTruth": [
            "java.awt.geom.AffineTransform.setToRotation()",
            "java.awt.Graphics2D.setTransform()"
        ],
        "APIClasses": [
            "java.awt.geom.AffineTransform",
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "3243": {
        "Query": "How do I edit a file using the default registered application?",
        "GroundTruth": [
            "java.awt.Desktop.edit()"
        ],
        "APIClasses": [
            "java.awt.Desktop"
        ],
        "Source": "Tutorial Websites"
    },
    "3244": {
        "Query": "How do I escape / display percent sign in printf statement?",
        "GroundTruth": [
            "java.io.Console.printf()"
        ],
        "APIClasses": [
            "java.io.Console"
        ],
        "Source": "Tutorial Websites"
    },
    "3245": {
        "Query": "How do I evaluate a simple script?",
        "GroundTruth": [
            "javax.script.ScriptEngine.eval()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngine"
        ],
        "Source": "Tutorial Websites"
    },
    "3246": {
        "Query": "How do I evaluate or execute a script file?",
        "GroundTruth": [
            "javax.script.ScriptEngine.eval()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngine"
        ],
        "Source": "Tutorial Websites"
    },
    "3247": {
        "Query": "How do I execute other applications from Java?",
        "GroundTruth": [
            "java.lang.Runtime.exec()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "3248": {
        "Query": "How do I fill array with non-default value?",
        "GroundTruth": [
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3249": {
        "Query": "How do I find and replace string?",
        "GroundTruth": [
            "java.util.regex.Matcher.appendReplacement()",
            "java.util.regex.Matcher.appendTail()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "3250": {
        "Query": "How do I find files in a directory using DirectoryStream?",
        "GroundTruth": [
            "java.nio.file.Files.newDirectoryStream()",
            "java.nio.file.Path.getFileName()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "3251": {
        "Query": "How do I find the difference between two times?",
        "GroundTruth": [
            "java.time.Duration.between()",
            "java.sql.Date.getSeconds()"
        ],
        "APIClasses": [
            "java.time.Duration",
            "java.sql.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "3252": {
        "Query": "How do I format JTextField text to uppercase?",
        "GroundTruth": [
            "javax.swing.text.AbstractDocument.setDocumentFilter()"
        ],
        "APIClasses": [
            "javax.swing.text.AbstractDocument"
        ],
        "Source": "Tutorial Websites"
    },
    "3253": {
        "Query": "How do I format a number as currency string?",
        "GroundTruth": [
            "java.text.NumberFormat.getCurrencyInstance()"
        ],
        "APIClasses": [
            "java.text.NumberFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "3254": {
        "Query": "How do I format a number?",
        "GroundTruth": [
            "java.net.URL.toString()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "3255": {
        "Query": "How do I format number as percentage string?",
        "GroundTruth": [
            "java.text.NumberFormat.getPercentInstance()"
        ],
        "APIClasses": [
            "java.text.NumberFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "3256": {
        "Query": "How do I generate UUID / GUID in Java?",
        "GroundTruth": [
            "java.util.UUID.randomUUID()",
            "java.util.UUID.toString()",
            "java.util.UUID.version()",
            "java.util.UUID.variant()"
        ],
        "APIClasses": [
            "java.util.UUID",
            "java.util.UUID",
            "java.util.UUID",
            "java.util.UUID"
        ],
        "Source": "Tutorial Websites"
    },
    "3257": {
        "Query": "How do I generate a random array of numbers?",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3258": {
        "Query": "How do I generate public and private keys?",
        "GroundTruth": [
            "javax.crypto.Mac.getInstance()",
            "javax.swing.LookAndFeel.initialize()",
            "java.security.KeyPairGenerator.generateKeyPair()",
            "java.security.KeyPair.getPrivate()",
            "java.security.KeyPair.getPublic()"
        ],
        "APIClasses": [
            "javax.crypto.Mac",
            "javax.swing.LookAndFeel",
            "java.security.KeyPairGenerator",
            "java.security.KeyPair",
            "java.security.KeyPair"
        ],
        "Source": "Tutorial Websites"
    },
    "3259": {
        "Query": "How do I get Applet\u2019s document URL?",
        "GroundTruth": [
            "java.applet.Applet.getDocumentBase()",
            "java.awt.Window.paint()"
        ],
        "APIClasses": [
            "java.applet.Applet",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "3260": {
        "Query": "How do I get HTTP headers using HttpClient HEAD request?",
        "GroundTruth": [
            "org.omg.PortableServer.POAManagerPackage.State.DISCARDING",
            "java.nio.file.attribute.AclEntry.newBuilder()",
            "java.net.HttpURLConnection.method",
            "javax.jws.soap.SOAPMessageHandler.headers",
            "java.util.Optional.map()"
        ],
        "APIClasses": [
            "org.omg.PortableServer.POAManagerPackage.State",
            "java.nio.file.attribute.AclEntry",
            "java.net.HttpURLConnection",
            "javax.jws.soap.SOAPMessageHandler",
            "java.util.Optional"
        ],
        "Source": "Tutorial Websites"
    },
    "3261": {
        "Query": "How do I get IP address of localhost?",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()",
            "java.net.InetAddress.getHostAddress()"
        ],
        "APIClasses": [
            "java.net.InetAddress",
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "3262": {
        "Query": "How do I get MAC address of a host?",
        "GroundTruth": [
            "java.net.NetworkInterface.getHardwareAddress()"
        ],
        "APIClasses": [
            "java.net.NetworkInterface"
        ],
        "Source": "Tutorial Websites"
    },
    "3263": {
        "Query": "How do I get a list of all TimeZones Ids using Java 8?",
        "GroundTruth": [
            "java.time.ZoneId.getAvailableZoneIds()",
            "java.time.ZoneId.of()"
        ],
        "APIClasses": [
            "java.time.ZoneId",
            "java.time.ZoneId"
        ],
        "Source": "Tutorial Websites"
    },
    "3264": {
        "Query": "How do I get a list of month names?",
        "GroundTruth": [
            "java.time.Period.getMonths()",
            "java.text.DateFormatSymbols.getShortMonths()"
        ],
        "APIClasses": [
            "java.time.Period",
            "java.text.DateFormatSymbols"
        ],
        "Source": "Tutorial Websites"
    },
    "3265": {
        "Query": "How do I get a list of weekday names?",
        "GroundTruth": [
            "java.text.DateFormatSymbols.getWeekdays()",
            "java.text.DateFormatSymbols.getShortWeekdays()"
        ],
        "APIClasses": [
            "java.text.DateFormatSymbols",
            "java.text.DateFormatSymbols"
        ],
        "Source": "Tutorial Websites"
    },
    "3266": {
        "Query": "How do I get a part or a substring of a string?",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3267": {
        "Query": "How do I get all Sundays of the year in Java?",
        "GroundTruth": [
            "javax.print.attribute.standard.MediaTray.MAIN",
            "java.time.Period.ofDays()"
        ],
        "APIClasses": [
            "javax.print.attribute.standard.MediaTray",
            "java.time.Period"
        ],
        "Source": "Tutorial Websites"
    },
    "3268": {
        "Query": "How do I get all annotations?",
        "GroundTruth": [
            "java.lang.Class.getAnnotations()",
            "java.lang.Class.getMethod()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3269": {
        "Query": "How do I get and display an image in Applet?",
        "GroundTruth": [
            "java.awt.Window.paint()",
            "java.awt.Graphics.drawImage()"
        ],
        "APIClasses": [
            "java.awt.Window",
            "java.awt.Graphics"
        ],
        "Source": "Tutorial Websites"
    },
    "3270": {
        "Query": "How do I get char value of a string at a specified position?",
        "GroundTruth": [
            "java.io.File.length()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3271": {
        "Query": "How do I get constants name of an enum?",
        "GroundTruth": [
            "java.util.Map.values()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3272": {
        "Query": "How do I get constructors of a class object?",
        "GroundTruth": [
            "java.lang.Class.getDeclaredConstructors()",
            "java.lang.Class.getConstructor()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3273": {
        "Query": "How do I get default date and time format for a defined country?",
        "GroundTruth": [
            "java.text.DateFormat.getDateInstance()",
            "java.text.DateFormat.getTimeInstance()",
            "java.text.DateFormat.getDateTimeInstance()"
        ],
        "APIClasses": [
            "java.text.DateFormat",
            "java.text.DateFormat",
            "java.text.DateFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "3274": {
        "Query": "How do I get direct superclass and interfaces of a class?",
        "GroundTruth": [
            "java.lang.Class.getInterfaces()",
            "java.lang.Class.getSuperclass()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3275": {
        "Query": "How do I get enum constant value corresponds to a string?",
        "GroundTruth": [
            "java.sql.Time.valueOf()"
        ],
        "APIClasses": [
            "java.sql.Time"
        ],
        "Source": "Tutorial Websites"
    },
    "3276": {
        "Query": "How do I get file size in Java?",
        "GroundTruth": [
            "java.io.File.length()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3277": {
        "Query": "How do I get file\u2019s last modification date?",
        "GroundTruth": [
            "java.io.File.lastModified()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3278": {
        "Query": "How do I get interfaces implemented by a class?",
        "GroundTruth": [
            "java.lang.Class.getInterfaces()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3279": {
        "Query": "How do I get items of JComboBox?",
        "GroundTruth": [
            "java.awt.List.getItemCount()"
        ],
        "APIClasses": [
            "java.awt.List"
        ],
        "Source": "Tutorial Websites"
    },
    "3280": {
        "Query": "How do I get name of enum constant?",
        "GroundTruth": [
            "java.lang.Enum.name()"
        ],
        "APIClasses": [
            "java.lang.Enum"
        ],
        "Source": "Tutorial Websites"
    },
    "3281": {
        "Query": "How do I get number of active thread group?",
        "GroundTruth": [
            "java.lang.ThreadGroup.activeGroupCount()",
            "java.lang.Thread.activeCount()"
        ],
        "APIClasses": [
            "java.lang.ThreadGroup",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3282": {
        "Query": "How do I get number of active thread in current thread?",
        "GroundTruth": [
            "java.lang.Thread.activeCount()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3283": {
        "Query": "How do I get number of available screens?",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getScreenDevices()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "3284": {
        "Query": "How do I get operating system temporary directory / folder?",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3285": {
        "Query": "How do I get or set the state of JCheckBox?",
        "GroundTruth": [
            "javax.swing.JMenuBar.setSelected()",
            "javax.swing.JMenuBar.isSelected()"
        ],
        "APIClasses": [
            "javax.swing.JMenuBar",
            "javax.swing.JMenuBar"
        ],
        "Source": "Tutorial Websites"
    },
    "3286": {
        "Query": "How do I get ordinal value of enum constant?",
        "GroundTruth": [
            "java.lang.Enum.ordinal()"
        ],
        "APIClasses": [
            "java.lang.Enum"
        ],
        "Source": "Tutorial Websites"
    },
    "3287": {
        "Query": "How do I get package name of a class?",
        "GroundTruth": [
            "java.lang.Class.getPackage()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3288": {
        "Query": "How do I get pattern string of a SimpleDateFormat?",
        "GroundTruth": [
            "java.text.ChoiceFormat.toPattern()"
        ],
        "APIClasses": [
            "java.text.ChoiceFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "3289": {
        "Query": "How do I get print service attribute set?",
        "GroundTruth": [
            "java.awt.Font.getAttributes()",
            "java.util.Set.toArray()"
        ],
        "APIClasses": [
            "java.awt.Font",
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "3290": {
        "Query": "How do I get printer or print service name?",
        "GroundTruth": [
            "java.awt.print.PrinterJob.lookupPrintServices()",
            "javax.print.PrintService.getName()"
        ],
        "APIClasses": [
            "java.awt.print.PrinterJob",
            "javax.print.PrintService"
        ],
        "Source": "Tutorial Websites"
    },
    "3291": {
        "Query": "How do I get process id of a Java application?",
        "GroundTruth": [
            "java.lang.management.RuntimeMXBean.getName()"
        ],
        "APIClasses": [
            "java.lang.management.RuntimeMXBean"
        ],
        "Source": "Tutorial Websites"
    },
    "3292": {
        "Query": "How do I get screen\u2019s display mode information?",
        "GroundTruth": [
            "java.awt.GraphicsDevice.getDisplayMode()"
        ],
        "APIClasses": [
            "java.awt.GraphicsDevice"
        ],
        "Source": "Tutorial Websites"
    },
    "3293": {
        "Query": "How do I get signum function of a number?",
        "GroundTruth": [
            "java.lang.Math.signum()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3294": {
        "Query": "How do I get super class of an object?",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getSuperclass()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3295": {
        "Query": "How do I get the JFrame of a component?",
        "GroundTruth": [
            "javax.swing.SwingUtilities.getRoot()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "3296": {
        "Query": "How do I get the Java classpath?",
        "GroundTruth": [
            "java.lang.management.RuntimeMXBean.getClassPath()",
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.management.RuntimeMXBean",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3297": {
        "Query": "How do I get the absolute path of a file in Java?",
        "GroundTruth": [
            "java.io.File.getAbsolutePath()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3298": {
        "Query": "How do I get the absolute value of a number?",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3299": {
        "Query": "How do I get the command line arguments passed to the program?",
        "GroundTruth": [
            "javax.print.attribute.standard.MediaTray.MAIN"
        ],
        "APIClasses": [
            "javax.print.attribute.standard.MediaTray"
        ],
        "Source": "Tutorial Websites"
    },
    "3300": {
        "Query": "How do I get the component type of an array?",
        "GroundTruth": [
            "java.lang.Class.getComponentType()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3301": {
        "Query": "How do I get the content of a directory?",
        "GroundTruth": [
            "java.io.File.listFiles()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3302": {
        "Query": "How do I get the current month name?",
        "GroundTruth": [
            "java.util.Calendar.get()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "3303": {
        "Query": "How do I get the currently executing thread?",
        "GroundTruth": [
            "java.lang.Thread.currentThread()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3304": {
        "Query": "How do I get the date of the first particular day after a specific date?",
        "GroundTruth": [
            "java.time.LocalDate.of()",
            "java.time.temporal.TemporalAdjusters.next()",
            "java.time.Year.with()"
        ],
        "APIClasses": [
            "java.time.LocalDate",
            "java.time.temporal.TemporalAdjusters",
            "java.time.Year"
        ],
        "Source": "Tutorial Websites"
    },
    "3305": {
        "Query": "How do I get the default print service?",
        "GroundTruth": [
            "javax.print.PrintServiceLookup.lookupDefaultPrintService()"
        ],
        "APIClasses": [
            "javax.print.PrintServiceLookup"
        ],
        "Source": "Tutorial Websites"
    },
    "3306": {
        "Query": "How do I get the exponent of exponential function?",
        "GroundTruth": [
            "java.lang.Math.getExponent()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3307": {
        "Query": "How do I get the first Sunday of the year in Java?",
        "GroundTruth": [
            "java.time.Year.with()"
        ],
        "APIClasses": [
            "java.time.Year"
        ],
        "Source": "Tutorial Websites"
    },
    "3308": {
        "Query": "How do I get the first and the last element of a LinkedList?",
        "GroundTruth": [
            "java.util.LinkedList.getFirst()",
            "java.util.LinkedList.getLast()"
        ],
        "APIClasses": [
            "java.util.LinkedList",
            "java.util.LinkedList"
        ],
        "Source": "Tutorial Websites"
    },
    "3309": {
        "Query": "How do I get the items of a JList components?",
        "GroundTruth": [
            "javax.swing.JTree.getModel()"
        ],
        "APIClasses": [
            "javax.swing.JTree"
        ],
        "Source": "Tutorial Websites"
    },
    "3310": {
        "Query": "How do I get the length of month represented by a date object?",
        "GroundTruth": [
            "java.time.YearMonth.lengthOfMonth()",
            "javax.print.attribute.standard.MediaTray.MAIN",
            "java.time.LocalDate.now()",
            "java.time.YearMonth.of()"
        ],
        "APIClasses": [
            "java.time.YearMonth",
            "javax.print.attribute.standard.MediaTray",
            "java.time.LocalDate",
            "java.time.YearMonth"
        ],
        "Source": "Tutorial Websites"
    },
    "3311": {
        "Query": "How do I get the maximum number of concurrent connections?",
        "GroundTruth": [
            "java.sql.DatabaseMetaData.getMaxConnections()"
        ],
        "APIClasses": [
            "java.sql.DatabaseMetaData"
        ],
        "Source": "Tutorial Websites"
    },
    "3312": {
        "Query": "How do I get the minimum or maximum value between two numbers?",
        "GroundTruth": [
            "java.lang.Math.min()",
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3313": {
        "Query": "How do I get the selected cells in JTable component?",
        "GroundTruth": [
            "javax.swing.ListSelectionModel.addListSelectionListener()"
        ],
        "APIClasses": [
            "javax.swing.ListSelectionModel"
        ],
        "Source": "Tutorial Websites"
    },
    "3314": {
        "Query": "How do I get the selected color from JColorChooser?",
        "GroundTruth": [
            "javax.swing.colorchooser.ColorSelectionModel.addChangeListener()"
        ],
        "APIClasses": [
            "javax.swing.colorchooser.ColorSelectionModel"
        ],
        "Source": "Tutorial Websites"
    },
    "3315": {
        "Query": "How do I get the selected nodes of a JTree?",
        "GroundTruth": [
            "javax.swing.JTree.getSelectionPaths()",
            "javax.swing.tree.TreePath.getLastPathComponent()"
        ],
        "APIClasses": [
            "javax.swing.JTree",
            "javax.swing.tree.TreePath"
        ],
        "Source": "Tutorial Websites"
    },
    "3316": {
        "Query": "How do I get the state of a thread?",
        "GroundTruth": [
            "java.awt.Frame.getState()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Tutorial Websites"
    },
    "3317": {
        "Query": "How do I get the system look and feel?",
        "GroundTruth": [
            "javax.swing.UIManager.getSystemLookAndFeelClassName()",
            "javax.swing.SwingUtilities.updateComponentTreeUI()"
        ],
        "APIClasses": [
            "javax.swing.UIManager",
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "3318": {
        "Query": "How do I get thread group of a thread?",
        "GroundTruth": [
            "java.lang.Thread.getThreadGroup()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3319": {
        "Query": "How do I get today\u2019s date and time?",
        "GroundTruth": [
            "java.net.URL.toString()",
            "java.time.Year.now()"
        ],
        "APIClasses": [
            "java.net.URL",
            "java.time.Year"
        ],
        "Source": "Tutorial Websites"
    },
    "3320": {
        "Query": "How do I handle a window closing event in Swing?",
        "GroundTruth": [
            "java.awt.Window.addWindowListener()",
            "java.awt.AWTEventMulticaster.windowClosing()"
        ],
        "APIClasses": [
            "java.awt.Window",
            "java.awt.AWTEventMulticaster"
        ],
        "Source": "Tutorial Websites"
    },
    "3321": {
        "Query": "How do I handle error when parsing an XML file using SAX?",
        "GroundTruth": [
            "org.xml.sax.HandlerBase.warning()",
            "java.lang.Error.Error()",
            "org.xml.sax.HandlerBase.fatalError()"
        ],
        "APIClasses": [
            "org.xml.sax.HandlerBase",
            "java.lang.Error",
            "org.xml.sax.HandlerBase"
        ],
        "Source": "Tutorial Websites"
    },
    "3322": {
        "Query": "How do I implement equals() and hashCode() method using java.util.Objects?",
        "GroundTruth": [
            "java.net.URL.equals()",
            "java.net.URL.hashCode()",
            "java.util.Objects.hash()",
            "java.util.Objects.equals()"
        ],
        "APIClasses": [
            "java.net.URL",
            "java.net.URL",
            "java.util.Objects",
            "java.util.Objects"
        ],
        "Source": "Tutorial Websites"
    },
    "3323": {
        "Query": "How do I know if a character is lowercase?",
        "GroundTruth": [
            "java.lang.Character.isLowerCase()",
            "java.lang.Character.getType()"
        ],
        "APIClasses": [
            "java.lang.Character",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "3324": {
        "Query": "How do I know if a character is uppercase?",
        "GroundTruth": [
            "java.lang.Character.isLowerCase()",
            "java.lang.Character.isUpperCase()",
            "java.lang.Character.getType()"
        ],
        "APIClasses": [
            "java.lang.Character",
            "java.lang.Character",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "3325": {
        "Query": "How do I know if a date is after another date?",
        "GroundTruth": [
            "java.util.Date.after()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "3326": {
        "Query": "How do I know if a date is before another date?",
        "GroundTruth": [
            "java.util.Date.before()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "3327": {
        "Query": "How do I know if a given year is a leap year?",
        "GroundTruth": [
            "java.time.YearMonth.isLeapYear()",
            "java.time.Year.isLeap()"
        ],
        "APIClasses": [
            "java.time.YearMonth",
            "java.time.Year"
        ],
        "Source": "Tutorial Websites"
    },
    "3328": {
        "Query": "How do I know if a table column can have a null value or not?",
        "GroundTruth": [
            "java.sql.ResultSetMetaData.isNullable()"
        ],
        "APIClasses": [
            "java.sql.ResultSetMetaData"
        ],
        "Source": "Tutorial Websites"
    },
    "3329": {
        "Query": "How do I know if a table column value is auto-increment?",
        "GroundTruth": [
            "java.sql.ResultSetMetaData.isAutoIncrement()"
        ],
        "APIClasses": [
            "java.sql.ResultSetMetaData"
        ],
        "Source": "Tutorial Websites"
    },
    "3330": {
        "Query": "How do I know if an ArrayList contains a specified item?",
        "GroundTruth": [
            "java.util.Set.contains()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "3331": {
        "Query": "How do I know the current position of cursor?",
        "GroundTruth": [
            "java.sql.ResultSet.getRow()"
        ],
        "APIClasses": [
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3332": {
        "Query": "How do I know the length of a string?",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3333": {
        "Query": "How do I know the number of rows affected when updating data in database table?",
        "GroundTruth": [
            "java.sql.Statement.executeUpdate()"
        ],
        "APIClasses": [
            "java.sql.Statement"
        ],
        "Source": "Tutorial Websites"
    },
    "3334": {
        "Query": "How do I know the size of ArrayList?",
        "GroundTruth": [
            "java.util.Map.size()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3335": {
        "Query": "How do I launch user-default mail client application?",
        "GroundTruth": [
            "java.awt.Desktop.mail()"
        ],
        "APIClasses": [
            "java.awt.Desktop"
        ],
        "Source": "Tutorial Websites"
    },
    "3336": {
        "Query": "How do I load file from resource directory?",
        "GroundTruth": [
            "java.lang.Class.getResource()",
            "java.lang.Class.getResourceAsStream()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3337": {
        "Query": "How do I load properties from XML file?",
        "GroundTruth": [
            "java.util.Properties.loadFromXML()"
        ],
        "APIClasses": [
            "java.util.Properties"
        ],
        "Source": "Tutorial Websites"
    },
    "3338": {
        "Query": "How do I make a centered JFrame?",
        "GroundTruth": [
            "java.awt.Toolkit.getScreenSize()",
            "java.awt.Window.setLocationRelativeTo()",
            "javax.swing.JInternalFrame.pack()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Window",
            "javax.swing.JInternalFrame"
        ],
        "Source": "Tutorial Websites"
    },
    "3339": {
        "Query": "How do I manipulate LocalDate object using TemporalAdjuster?",
        "GroundTruth": [
            "java.time.Period.plusMonths()",
            "java.time.Period.minusDays()",
            "java.time.YearMonth.withYear()",
            "java.time.MonthDay.withMonth()",
            "java.time.Year.with()"
        ],
        "APIClasses": [
            "java.time.Period",
            "java.time.Period",
            "java.time.YearMonth",
            "java.time.MonthDay",
            "java.time.Year"
        ],
        "Source": "Tutorial Websites"
    },
    "3340": {
        "Query": "How do I manipulate the value of LocalDate object?",
        "GroundTruth": [
            "java.time.YearMonth.withYear()",
            "java.time.MonthDay.withDayOfMonth()",
            "java.time.Year.plusYears()",
            "java.time.Period.minusMonths()"
        ],
        "APIClasses": [
            "java.time.YearMonth",
            "java.time.MonthDay",
            "java.time.Year",
            "java.time.Period"
        ],
        "Source": "Tutorial Websites"
    },
    "3341": {
        "Query": "How do I modified the value of LocalDate and LocalTime object?",
        "GroundTruth": [
            "java.time.Year.with()",
            "java.time.YearMonth.withYear()",
            "java.time.MonthDay.withDayOfMonth()",
            "java.time.chrono.ChronoZonedDateTime.with()",
            "java.time.LocalTime.withHour()",
            "java.time.LocalTime.withMinute()",
            "java.time.LocalTime.withSecond()",
            "java.util.Map.get()",
            "java.time.Year.plus()",
            "java.time.Year.minus()"
        ],
        "APIClasses": [
            "java.time.Year",
            "java.time.YearMonth",
            "java.time.MonthDay",
            "java.time.chrono.ChronoZonedDateTime",
            "java.time.LocalTime",
            "java.time.LocalTime",
            "java.time.LocalTime",
            "java.util.Map",
            "java.time.Year",
            "java.time.Year"
        ],
        "Source": "Tutorial Websites"
    },
    "3342": {
        "Query": "How do I move a file in JDK 7?",
        "GroundTruth": [
            "java.nio.file.Files.move()"
        ],
        "APIClasses": [
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3343": {
        "Query": "How do I move cursor to the last record?",
        "GroundTruth": [
            "java.sql.ResultSet.afterLast()"
        ],
        "APIClasses": [
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3344": {
        "Query": "How do I move to absolute or relative row?",
        "GroundTruth": [
            "java.sql.ResultSet.absolute()",
            "java.sql.ResultSet.relative()"
        ],
        "APIClasses": [
            "java.sql.ResultSet",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3345": {
        "Query": "How do I obtain or create a Logger?",
        "GroundTruth": [
            "java.util.logging.Logger.getLogger()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "3346": {
        "Query": "How do I parse a text string into date and time?",
        "GroundTruth": [
            "java.util.Date.parse()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "3347": {
        "Query": "How do I pause the current thread?",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3348": {
        "Query": "How do I ping a host?",
        "GroundTruth": [
            "java.net.InetAddress.isReachable()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "3349": {
        "Query": "How do I place swing component using absolute coordinates?",
        "GroundTruth": [
            "java.awt.Window.setBounds()"
        ],
        "APIClasses": [
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "3350": {
        "Query": "How do I print a file using the default registered application?",
        "GroundTruth": [
            "java.awt.Desktop.print()"
        ],
        "APIClasses": [
            "java.awt.Desktop"
        ],
        "Source": "Tutorial Websites"
    },
    "3351": {
        "Query": "How do I programmatically compile Java class?",
        "GroundTruth": [
            "javax.tools.ToolProvider.getSystemJavaCompiler()",
            "java.lang.Thread.run()"
        ],
        "APIClasses": [
            "javax.tools.ToolProvider",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3352": {
        "Query": "How do I programmatically select JTable\u2019s columns?",
        "GroundTruth": [
            "javax.swing.JTable.setColumnSelectionInterval()",
            "javax.swing.JTable.removeColumnSelectionInterval()",
            "javax.swing.JTable.addColumnSelectionInterval()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "javax.swing.JTable",
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "3353": {
        "Query": "How do I programmatically select JTable\u2019s rows?",
        "GroundTruth": [
            "javax.swing.JTable.setRowSelectionInterval()",
            "javax.swing.JTable.removeRowSelectionInterval()",
            "javax.swing.JTable.addRowSelectionInterval()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "javax.swing.JTable",
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "3354": {
        "Query": "How do I read all lines from a file?",
        "GroundTruth": [
            "java.nio.file.Files.readAllLines()"
        ],
        "APIClasses": [
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3355": {
        "Query": "How do I read data from a buffer into channel?",
        "GroundTruth": [
            "java.nio.channels.FileChannel.write()"
        ],
        "APIClasses": [
            "java.nio.channels.FileChannel"
        ],
        "Source": "Tutorial Websites"
    },
    "3356": {
        "Query": "How do I read file using FileInputStream?",
        "GroundTruth": [
            "java.net.URL.toString()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "3357": {
        "Query": "How do I read or download web page content?",
        "GroundTruth": [
            "java.net.URL.openStream()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "3358": {
        "Query": "How do I read system property as an integer?",
        "GroundTruth": [
            "java.lang.Integer.getInteger()",
            "java.lang.System.getProperty()",
            "java.lang.Integer.decode()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.System",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3359": {
        "Query": "How do I read website content using HttpClient?",
        "GroundTruth": [
            "java.nio.file.attribute.AclEntry.newBuilder()",
            "java.util.Locale.Builder.build()",
            "java.awt.PrintJob.end()"
        ],
        "APIClasses": [
            "java.nio.file.attribute.AclEntry",
            "java.util.Locale.Builder",
            "java.awt.PrintJob"
        ],
        "Source": "Tutorial Websites"
    },
    "3360": {
        "Query": "How do I register out parameter in CallableStatement?",
        "GroundTruth": [
            "java.sql.CallableStatement.registerOutParameter()"
        ],
        "APIClasses": [
            "java.sql.CallableStatement"
        ],
        "Source": "Tutorial Websites"
    },
    "3361": {
        "Query": "How do I remove JTree default icons?",
        "GroundTruth": [
            "javax.swing.JTree.getCellRenderer()",
            "javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon()",
            "javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon()",
            "javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon()"
        ],
        "APIClasses": [
            "javax.swing.JTree",
            "javax.swing.tree.DefaultTreeCellRenderer",
            "javax.swing.tree.DefaultTreeCellRenderer",
            "javax.swing.tree.DefaultTreeCellRenderer"
        ],
        "Source": "Tutorial Websites"
    },
    "3362": {
        "Query": "How do I remove elements from Deque?",
        "GroundTruth": [
            "java.util.Map.remove()",
            "java.util.Deque.removeFirst()",
            "java.util.Deque.removeLast()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.Deque",
            "java.util.Deque"
        ],
        "Source": "Tutorial Websites"
    },
    "3363": {
        "Query": "How do I remove leading white space from a string?",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3364": {
        "Query": "How do I remove redundant elements from a Path?",
        "GroundTruth": [
            "java.net.URI.normalize()"
        ],
        "APIClasses": [
            "java.net.URI"
        ],
        "Source": "Tutorial Websites"
    },
    "3365": {
        "Query": "How do I remove the first and last item from LinkedList?",
        "GroundTruth": [
            "java.util.Deque.removeFirst()",
            "java.util.Deque.removeLast()"
        ],
        "APIClasses": [
            "java.util.Deque",
            "java.util.Deque"
        ],
        "Source": "Tutorial Websites"
    },
    "3366": {
        "Query": "How do I remove the first or the last found element from Deque?",
        "GroundTruth": [
            "java.util.Deque.removeFirstOccurrence()",
            "java.util.Deque.removeLastOccurrence()"
        ],
        "APIClasses": [
            "java.util.Deque",
            "java.util.Deque"
        ],
        "Source": "Tutorial Websites"
    },
    "3367": {
        "Query": "How do I remove trailing white space from a string?",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3368": {
        "Query": "How do I reread the content of a buffer?",
        "GroundTruth": [
            "java.nio.Buffer.rewind()"
        ],
        "APIClasses": [
            "java.nio.Buffer"
        ],
        "Source": "Tutorial Websites"
    },
    "3369": {
        "Query": "How do I retrieve available catalogs in database?",
        "GroundTruth": [
            "java.sql.DatabaseMetaData.getCatalogs()",
            "java.sql.SQLXML.getString()"
        ],
        "APIClasses": [
            "java.sql.DatabaseMetaData",
            "java.sql.SQLXML"
        ],
        "Source": "Tutorial Websites"
    },
    "3370": {
        "Query": "How do I retrieve particular object from LinkedList?",
        "GroundTruth": [
            "java.util.List.indexOf()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "3371": {
        "Query": "How do I retrieve values from ResultSet?",
        "GroundTruth": [
            "java.util.Random.next()",
            "java.sql.SQLXML.getString()",
            "java.sql.ResultSet.getInt()",
            "java.sql.ResultSet.getFloat()"
        ],
        "APIClasses": [
            "java.util.Random",
            "java.sql.SQLXML",
            "java.sql.ResultSet",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3372": {
        "Query": "How do I reverse JSlider\u2019s value-range?",
        "GroundTruth": [
            "javax.swing.JSlider.setInverted()"
        ],
        "APIClasses": [
            "javax.swing.JSlider"
        ],
        "Source": "Tutorial Websites"
    },
    "3373": {
        "Query": "How do I reverse a string?",
        "GroundTruth": [
            "java.lang.StringBuffer.reverse()",
            "java.lang.Long.reverse()"
        ],
        "APIClasses": [
            "java.lang.StringBuffer",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "3374": {
        "Query": "How do I reverse the order of array elements?",
        "GroundTruth": [
            "java.util.Collections.reverse()",
            "java.util.Arrays.asList()",
            "java.util.Collection.toArray()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "3375": {
        "Query": "How do I right justified JTextField contents?",
        "GroundTruth": [
            "javax.swing.JLabel.setHorizontalAlignment()"
        ],
        "APIClasses": [
            "javax.swing.JLabel"
        ],
        "Source": "Tutorial Websites"
    },
    "3376": {
        "Query": "How do I rotate elements of a collection?",
        "GroundTruth": [
            "java.awt.Graphics2D.rotate()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "3377": {
        "Query": "How do I round a number?",
        "GroundTruth": [
            "java.lang.Math.ceil()",
            "java.lang.Math.floor()",
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Math",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3378": {
        "Query": "How do I search collection elements?",
        "GroundTruth": [
            "java.util.Collections.binarySearch()",
            "java.util.Arrays.binarySearch()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3379": {
        "Query": "How do I select all text in JTextArea?",
        "GroundTruth": [
            "javax.swing.JTable.selectAll()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "3380": {
        "Query": "How do I set and get the contents of JTextArea?",
        "GroundTruth": [
            "java.awt.Label.getText()"
        ],
        "APIClasses": [
            "java.awt.Label"
        ],
        "Source": "Tutorial Websites"
    },
    "3381": {
        "Query": "How do I set and get the name of a thread?",
        "GroundTruth": [
            "java.lang.Thread.setName()",
            "java.io.File.getName()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3382": {
        "Query": "How do I set file last modified time?",
        "GroundTruth": [
            "java.nio.file.Files.setLastModifiedTime()"
        ],
        "APIClasses": [
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3383": {
        "Query": "How do I set or change JTable column width?",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMinWidth()",
            "javax.swing.table.TableColumn.setMaxWidth()",
            "javax.swing.table.TableColumn.setPreferredWidth()",
            "javax.swing.JTable.getColumnModel()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn",
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "3384": {
        "Query": "How do I set the JTable\u2019s selection mode?",
        "GroundTruth": [
            "javax.swing.JTable.setSelectionMode()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "3385": {
        "Query": "How do I set the font and color of JTextArea?",
        "GroundTruth": [
            "java.awt.Graphics.setFont()",
            "java.awt.Component.setForeground()"
        ],
        "APIClasses": [
            "java.awt.Graphics",
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "3386": {
        "Query": "How do I set the formatter of logger handlers?",
        "GroundTruth": [
            "java.util.logging.Handler.setFormatter()"
        ],
        "APIClasses": [
            "java.util.logging.Handler"
        ],
        "Source": "Tutorial Websites"
    },
    "3387": {
        "Query": "How do I set the priority of a thread?",
        "GroundTruth": [
            "java.lang.Thread.setPriority()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3388": {
        "Query": "How do I set the query timeout  limit?",
        "GroundTruth": [
            "java.sql.Statement.setQueryTimeout()"
        ],
        "APIClasses": [
            "java.sql.Statement"
        ],
        "Source": "Tutorial Websites"
    },
    "3389": {
        "Query": "How do I set the value of file attributes?",
        "GroundTruth": [
            "org.xml.sax.ext.Attributes2Impl.setAttributes()"
        ],
        "APIClasses": [
            "org.xml.sax.ext.Attributes2Impl"
        ],
        "Source": "Tutorial Websites"
    },
    "3390": {
        "Query": "How do I sort an array of objects?",
        "GroundTruth": [
            "java.util.Arrays.sort()",
            "java.net.URI.compareTo()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.net.URI"
        ],
        "Source": "Tutorial Websites"
    },
    "3391": {
        "Query": "How do I sort an java.util.Enumeration?",
        "GroundTruth": [
            "java.util.Vector.elements()",
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Vector",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "3392": {
        "Query": "How do I sort items of an ArrayList?",
        "GroundTruth": [
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "3393": {
        "Query": "How do I sort strings data using CollationKey class?",
        "GroundTruth": [
            "java.util.Comparator.compare()",
            "java.text.RuleBasedCollator.getCollationKey()"
        ],
        "APIClasses": [
            "java.util.Comparator",
            "java.text.RuleBasedCollator"
        ],
        "Source": "Tutorial Websites"
    },
    "3394": {
        "Query": "How do I split a string using Scanner class?",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3395": {
        "Query": "How do I split-up string using regular expression?",
        "GroundTruth": [
            "java.util.regex.Pattern.split()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "3396": {
        "Query": "How do I start a thread execution?",
        "GroundTruth": [
            "java.lang.Thread.start()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3397": {
        "Query": "How do I store BLOBs data into database?",
        "GroundTruth": [
            "java.sql.PreparedStatement.setBinaryStream()"
        ],
        "APIClasses": [
            "java.sql.PreparedStatement"
        ],
        "Source": "Tutorial Websites"
    },
    "3398": {
        "Query": "How do I store objects in file?",
        "GroundTruth": [
            "java.beans.Encoder.writeObject()",
            "java.sql.SQLInput.readObject()"
        ],
        "APIClasses": [
            "java.beans.Encoder",
            "java.sql.SQLInput"
        ],
        "Source": "Tutorial Websites"
    },
    "3399": {
        "Query": "How do I terminate a Java application?",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Runtime.getRuntime()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "3400": {
        "Query": "How do I throw exceptions in Java?",
        "GroundTruth": [
            "java.nio.charset.CoderResult.throwException()"
        ],
        "APIClasses": [
            "java.nio.charset.CoderResult"
        ],
        "Source": "Tutorial Websites"
    },
    "3401": {
        "Query": "How do I trim the capacity of an ArrayList?",
        "GroundTruth": [
            "java.util.ArrayList.trimToSize()",
            "java.util.Vector.trimToSize()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Vector"
        ],
        "Source": "Tutorial Websites"
    },
    "3402": {
        "Query": "How do I use ArrayList class?",
        "GroundTruth": [
            "java.util.Set.toArray()",
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Set",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3403": {
        "Query": "How do I use Console class to read user input?",
        "GroundTruth": [
            "java.io.Console.readLine()",
            "java.io.Console.readPassword()"
        ],
        "APIClasses": [
            "java.io.Console",
            "java.io.Console"
        ],
        "Source": "Tutorial Websites"
    },
    "3404": {
        "Query": "How do I use DatabaseMetaData to get table column names?",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "3405": {
        "Query": "How do I use Generics in Java programming?",
        "GroundTruth": [
            "java.util.Set.add()",
            "java.util.Map.get()"
        ],
        "APIClasses": [
            "java.util.Set",
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3406": {
        "Query": "How do I use LineNumberReader class to read file?",
        "GroundTruth": [
            "org.xml.sax.Locator.getLineNumber()"
        ],
        "APIClasses": [
            "org.xml.sax.Locator"
        ],
        "Source": "Tutorial Websites"
    },
    "3407": {
        "Query": "How do I use ResourceBundle for i18n?",
        "GroundTruth": [
            "java.util.ResourceBundle.getString()"
        ],
        "APIClasses": [
            "java.util.ResourceBundle"
        ],
        "Source": "Tutorial Websites"
    },
    "3408": {
        "Query": "How do I use StringTokenizer to split a string?",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3409": {
        "Query": "How do I use TemporalField to access date time value?",
        "GroundTruth": [
            "java.sql.Time.getYear()",
            "java.sql.Time.getMonth()",
            "java.time.MonthDay.getDayOfMonth()",
            "java.time.LocalTime.getHour()",
            "java.time.LocalTime.getMinute()",
            "java.time.LocalTime.getSecond()",
            "java.util.Map.get()"
        ],
        "APIClasses": [
            "java.sql.Time",
            "java.sql.Time",
            "java.time.MonthDay",
            "java.time.LocalTime",
            "java.time.LocalTime",
            "java.time.LocalTime",
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3410": {
        "Query": "How do I use a FileChannel to read data into a Buffer?",
        "GroundTruth": [
            "java.nio.channels.FileChannel.read()",
            "java.nio.Buffer.flip()",
            "java.util.Map.clear()"
        ],
        "APIClasses": [
            "java.nio.channels.FileChannel",
            "java.nio.Buffer",
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3411": {
        "Query": "How do I use a JSlider component?",
        "GroundTruth": [
            "javax.swing.JSlider.setMinorTickSpacing()",
            "javax.swing.JSlider.setMajorTickSpacing()",
            "javax.swing.JSlider.setPaintTicks()",
            "javax.swing.JSlider.setPaintLabels()",
            "javax.swing.event.ChangeListener.stateChanged()",
            "javax.swing.JSlider.addChangeListener()"
        ],
        "APIClasses": [
            "javax.swing.JSlider",
            "javax.swing.JSlider",
            "javax.swing.JSlider",
            "javax.swing.JSlider",
            "javax.swing.event.ChangeListener",
            "javax.swing.JSlider"
        ],
        "Source": "Tutorial Websites"
    },
    "3412": {
        "Query": "How do I use java.time.LocalDate class?",
        "GroundTruth": [
            "java.time.Year.of()",
            "java.sql.Time.getYear()",
            "java.sql.Time.getMonth()",
            "java.time.MonthDay.getDayOfMonth()",
            "java.util.Map.get()"
        ],
        "APIClasses": [
            "java.time.Year",
            "java.sql.Time",
            "java.sql.Time",
            "java.time.MonthDay",
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3413": {
        "Query": "How do I use java.time.LocalDateTime class?",
        "GroundTruth": [
            "java.time.Year.of()",
            "java.time.LocalDate.atTime()",
            "java.time.LocalTime.atDate()",
            "java.sql.Date.toLocalDate()",
            "java.sql.Time.toLocalTime()"
        ],
        "APIClasses": [
            "java.time.Year",
            "java.time.LocalDate",
            "java.time.LocalTime",
            "java.sql.Date",
            "java.sql.Time"
        ],
        "Source": "Tutorial Websites"
    },
    "3414": {
        "Query": "How do I use java.time.LocalTime class?",
        "GroundTruth": [
            "java.time.Year.of()",
            "java.time.LocalTime.getHour()",
            "java.time.LocalTime.getMinute()",
            "java.time.LocalTime.getSecond()",
            "java.util.Map.get()"
        ],
        "APIClasses": [
            "java.time.Year",
            "java.time.LocalTime",
            "java.time.LocalTime",
            "java.time.LocalTime",
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3415": {
        "Query": "How do I use join method to wait for threads to finish?",
        "GroundTruth": [
            "java.lang.String.join()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3416": {
        "Query": "How do I use logger ConsoleHandler?",
        "GroundTruth": [
            "java.util.logging.Logger.addHandler()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "3417": {
        "Query": "How do I use static import feature?",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3418": {
        "Query": "How do I use the BlockingQueue object?",
        "GroundTruth": [
            "java.util.Map.put()",
            "java.lang.Thread.sleep()",
            "java.nio.file.WatchService.take()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.lang.Thread",
            "java.nio.file.WatchService"
        ],
        "Source": "Tutorial Websites"
    },
    "3419": {
        "Query": "How do I use the DosFileAttributes class?",
        "GroundTruth": [
            "java.nio.file.attribute.DosFileAttributes.isArchive()",
            "java.io.File.isHidden()",
            "java.nio.Buffer.isReadOnly()",
            "java.nio.file.attribute.DosFileAttributes.isSystem()"
        ],
        "APIClasses": [
            "java.nio.file.attribute.DosFileAttributes",
            "java.io.File",
            "java.nio.Buffer",
            "java.nio.file.attribute.DosFileAttributes"
        ],
        "Source": "Tutorial Websites"
    },
    "3420": {
        "Query": "How do I use the HashMap class?",
        "GroundTruth": [
            "java.util.Map.get()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3421": {
        "Query": "How do I use the Stack class in Java?",
        "GroundTruth": [
            "java.util.Deque.push()",
            "java.util.Deque.pop()"
        ],
        "APIClasses": [
            "java.util.Deque",
            "java.util.Deque"
        ],
        "Source": "Tutorial Websites"
    },
    "3422": {
        "Query": "How do I use the java.time.DayOfWeek enum?",
        "GroundTruth": [
            "java.util.Map.values()",
            "java.time.Year.of()",
            "java.lang.String.valueOf()",
            "java.time.LocalDate.getDayOfWeek()",
            "java.time.Year.plus()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.time.Year",
            "java.lang.String",
            "java.time.LocalDate",
            "java.time.Year"
        ],
        "Source": "Tutorial Websites"
    },
    "3423": {
        "Query": "How do I use the sleep method of the Thread class?",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3424": {
        "Query": "How do I use the throws keyword to declare method exceptions?",
        "GroundTruth": [
            "java.sql.Statement.getConnection()",
            "javax.print.attribute.standard.MediaTray.MAIN"
        ],
        "APIClasses": [
            "java.sql.Statement",
            "javax.print.attribute.standard.MediaTray"
        ],
        "Source": "Tutorial Websites"
    },
    "3425": {
        "Query": "How do I use trigonometric calculation methods?",
        "GroundTruth": [
            "java.lang.Math.sin()",
            "java.lang.Math.cos()",
            "java.lang.Math.tan()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Math",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3426": {
        "Query": "How do I validate XML against  XSD in Java?",
        "GroundTruth": [
            "javax.print.attribute.standard.MediaTray.MAIN",
            "java.awt.Component.validate()",
            "javax.xml.validation.SchemaFactory.newInstance()",
            "javax.xml.validation.SchemaFactory.newSchema()",
            "javax.xml.validation.Schema.newValidator()",
            "javax.xml.bind.Validator.validate()"
        ],
        "APIClasses": [
            "javax.print.attribute.standard.MediaTray",
            "java.awt.Component",
            "javax.xml.validation.SchemaFactory",
            "javax.xml.validation.SchemaFactory",
            "javax.xml.validation.Schema",
            "javax.xml.bind.Validator"
        ],
        "Source": "Tutorial Websites"
    },
    "3427": {
        "Query": "How do I validate email address using Java Mail API?",
        "GroundTruth": [
            "java.awt.Component.validate()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "3428": {
        "Query": "How do I validate email address using regular expression?",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3429": {
        "Query": "How do I validate input when using Scanner?",
        "GroundTruth": [
            "java.util.Scanner.hasNextInt()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "3430": {
        "Query": "How do I write a text file in JDK 7?",
        "GroundTruth": [
            "java.nio.file.Files.write()"
        ],
        "APIClasses": [
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3431": {
        "Query": "How do I write data into Buffer using put method?",
        "GroundTruth": [
            "java.util.Map.put()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3432": {
        "Query": "How the Compiler Chooses the Most Specific Method from Several Versions of an Overloaded Method",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3433": {
        "Query": "How to Use the EnumSet Class",
        "GroundTruth": [
            "java.util.EnumSet.allOf()",
            "java.util.EnumSet.range()",
            "java.util.EnumSet.complementOf()"
        ],
        "APIClasses": [
            "java.util.EnumSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3434": {
        "Query": "How to add or subtract days in current date and time values using Calendar class.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "3435": {
        "Query": "How to add or subtract weeks in current date and time values using Calendar class.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "3436": {
        "Query": "How to check if an object reference is not null?",
        "GroundTruth": [
            "java.util.Objects.requireNonNull()"
        ],
        "APIClasses": [
            "java.util.Objects"
        ],
        "Source": "Tutorial Websites"
    },
    "3437": {
        "Query": "How to check whether the given string is empty",
        "GroundTruth": [
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3438": {
        "Query": "How to create ByteArrayInputStream from partial array of bytes",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3439": {
        "Query": "How to create a digital signature and sign data?",
        "GroundTruth": [
            "java.security.Signature.getInstance()",
            "java.security.Signature.initSign()",
            "java.nio.file.Files.readAllBytes()",
            "java.awt.Canvas.update()",
            "java.security.Signature.sign()"
        ],
        "APIClasses": [
            "java.security.Signature",
            "java.security.Signature",
            "java.nio.file.Files",
            "java.awt.Canvas",
            "java.security.Signature"
        ],
        "Source": "Tutorial Websites"
    },
    "3440": {
        "Query": "How to create an ArrayList and add elements to ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.ArrayList.get()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Tutorial Websites"
    },
    "3441": {
        "Query": "How to define JRadioButton label position?",
        "GroundTruth": [
            "javax.swing.JLabel.setHorizontalTextPosition()",
            "javax.swing.JLabel.setVerticalTextPosition()"
        ],
        "APIClasses": [
            "javax.swing.JLabel",
            "javax.swing.JLabel"
        ],
        "Source": "Tutorial Websites"
    },
    "3442": {
        "Query": "How to delete a particular file or directory when Java Virtual Machine terminates",
        "GroundTruth": [
            "java.io.File.deleteOnExit()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3443": {
        "Query": "How to generate an int randomly within given range using Math",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3444": {
        "Query": "How to get Enumeration over Java Vector using enumeration method of Collections class.",
        "GroundTruth": [
            "java.util.Collections.enumeration()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "3445": {
        "Query": "How to get a synchronized Set from HashSet using synchronizedSet method of Collections class",
        "GroundTruth": [
            "java.util.Collections.synchronizedSet()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "3446": {
        "Query": "How to get some information about Path object?",
        "GroundTruth": [
            "java.nio.file.Path.getFileName()",
            "java.io.File.getParent()",
            "java.nio.file.Path.getRoot()",
            "java.nio.file.Path.getNameCount()",
            "java.nio.file.Path.subpath()"
        ],
        "APIClasses": [
            "java.nio.file.Path",
            "java.io.File",
            "java.nio.file.Path",
            "java.nio.file.Path",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "3447": {
        "Query": "How to implement queue using the DelayQueue?",
        "GroundTruth": [
            "javax.swing.Timer.getDelay()",
            "java.net.URI.compareTo()"
        ],
        "APIClasses": [
            "javax.swing.Timer",
            "java.net.URI"
        ],
        "Source": "Tutorial Websites"
    },
    "3448": {
        "Query": "How to read file using Files.newBufferedReader?",
        "GroundTruth": [
            "java.nio.file.Files.newBufferedReader()"
        ],
        "APIClasses": [
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3449": {
        "Query": "How to recursively list all text files in a directory?",
        "GroundTruth": [
            "java.nio.file.Files.walkFileTree()",
            "java.nio.file.FileVisitor.visitFile()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.nio.file.FileVisitor"
        ],
        "Source": "Tutorial Websites"
    },
    "3450": {
        "Query": "How to remove all values from StringBuffer",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3451": {
        "Query": "How to remove leading and trailing space from string",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3452": {
        "Query": "How to reverse an array",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.reverse()",
            "java.util.List.toArray()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "3453": {
        "Query": "How to run the garbage collector by using gc method of System class.",
        "GroundTruth": [
            "java.lang.System.gc()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3454": {
        "Query": "How to split a string by a number of characters?",
        "GroundTruth": [
            "java.util.Set.toArray()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "3455": {
        "Query": "How to swap elements of Java Vector object using swap method of Collections class.",
        "GroundTruth": [
            "java.util.Collections.swap()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "3456": {
        "Query": "How to test for the scrollability property of a ResultSet object",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "3457": {
        "Query": "How to trim StringBuffer object using substring method.",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3458": {
        "Query": "How to use Java Calendar class to display current date and time.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "3459": {
        "Query": "How to use Preferences API to store program configurations?",
        "GroundTruth": [
            "java.util.Map.get()",
            "java.util.Map.put()",
            "java.util.Map.remove()",
            "java.util.Map.clear()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.Map",
            "java.util.Map",
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3460": {
        "Query": "How to use PushbackInputStream to read back and forth",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3461": {
        "Query": "How to use WEKA API in Java",
        "GroundTruth": [
            "java.awt.FileDialog.setFile()"
        ],
        "APIClasses": [
            "java.awt.FileDialog"
        ],
        "Source": "Tutorial Websites"
    },
    "3462": {
        "Query": "How to use isNaN() method of the Double class",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Double.isNaN()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3463": {
        "Query": "How to write file using Files.newBufferedWriter?",
        "GroundTruth": [
            "java.nio.file.Files.newBufferedWriter()"
        ],
        "APIClasses": [
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3464": {
        "Query": "ISO-8859-1 encoding and binary data preservation",
        "GroundTruth": [
            "java.lang.String.getBytes()",
            "java.util.Arrays.equals()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3465": {
        "Query": "If running on a Mac, this method will set the system property which tells the menu bar to display at the top of the screen.",
        "GroundTruth": [
            "java.lang.System.setProperty()",
            "java.lang.System.getProperty()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3466": {
        "Query": "If the specified querying string has a sub-querying",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.toUpperCase()",
            "java.lang.Character.toUpperCase()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "3467": {
        "Query": "Illustrating the function call stack",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3468": {
        "Query": "Image has Alpha Color Model",
        "GroundTruth": [
            "java.awt.image.PixelGrabber.grabPixels()",
            "java.awt.image.ColorModel.hasAlpha()"
        ],
        "APIClasses": [
            "java.awt.image.PixelGrabber",
            "java.awt.image.ColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "3469": {
        "Query": "Image has Alpha Component",
        "GroundTruth": [
            "java.awt.image.PixelGrabber.grabPixels()",
            "java.awt.image.ColorModel.hasAlpha()"
        ],
        "APIClasses": [
            "java.awt.image.PixelGrabber",
            "java.awt.image.ColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "3470": {
        "Query": "Implement Recursive Binary Search",
        "GroundTruth": [
            "java.util.Scanner.nextLine()",
            "java.lang.String.split()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3471": {
        "Query": "Implementing JavaFX with Nashorn",
        "GroundTruth": [
            "javax.script.ScriptEngineManager.getEngineByName()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngineManager"
        ],
        "Source": "Tutorial Websites"
    },
    "3472": {
        "Query": "Implementing a Custom Formatter Using the Formattable Interface",
        "GroundTruth": [
            "java.lang.String.toUpperCase()",
            "java.util.Formatter.format()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "3473": {
        "Query": "Implementing a Java Interface Using Top-Level Functions in Script",
        "GroundTruth": [
            "javax.script.ScriptEngineManager.getEngineByName()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngineManager"
        ],
        "Source": "Tutorial Websites"
    },
    "3474": {
        "Query": "Implementing a Simple Event Notifier",
        "GroundTruth": [
            "java.util.Observable.addObserver()",
            "java.util.Observable.setChanged()",
            "java.util.Observable.notifyObservers()"
        ],
        "APIClasses": [
            "java.util.Observable",
            "java.util.Observable",
            "java.util.Observable"
        ],
        "Source": "Tutorial Websites"
    },
    "3475": {
        "Query": "Implements a Bottom-up Mergesort, without recursion.",
        "GroundTruth": [
            "java.lang.String.compareTo()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3476": {
        "Query": "Implements a Insertion sort",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3477": {
        "Query": "Implements a Priority Queue ordered that iterates over the smallest key.",
        "GroundTruth": [
            "java.lang.String.compareTo()",
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3478": {
        "Query": "Implements a Priority Queue unordered that iterates over the largest key.",
        "GroundTruth": [
            "java.lang.String.compareTo()",
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3479": {
        "Query": "Implements a Priority Queue unordered that iterates over the smallest key.",
        "GroundTruth": [
            "java.lang.String.compareTo()",
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3480": {
        "Query": "Implements a Queue (FIFO) with linked-list.",
        "GroundTruth": [
            "java.lang.ref.Reference.enqueue()"
        ],
        "APIClasses": [
            "java.lang.ref.Reference"
        ],
        "Source": "Tutorial Websites"
    },
    "3481": {
        "Query": "Implements a Selection sort",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3482": {
        "Query": "Implements a Stack using array, with fixed size.",
        "GroundTruth": [
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3483": {
        "Query": "Implements a priority queue using a max heap. The heap is of fixed size and represented using an array.",
        "GroundTruth": [
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3484": {
        "Query": "Implements a simple a binary search in a array (sorted).",
        "GroundTruth": [
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3485": {
        "Query": "Importing a Certificate from a File",
        "GroundTruth": [
            "java.security.cert.CertificateFactory.getInstance()",
            "java.security.cert.CertificateFactory.generateCertificate()"
        ],
        "APIClasses": [
            "java.security.cert.CertificateFactory",
            "java.security.cert.CertificateFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "3486": {
        "Query": "In accordance with mysql function from_days",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.sql.Timestamp.getTime()",
            "java.sql.CallableStatement.getTime()",
            "java.sql.ResultSet.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.sql.Timestamp",
            "java.sql.CallableStatement",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3487": {
        "Query": "In addition to escaping certain XML characters, we need to replace a carriage return + a line feed, because when it's read back in, only the line feed is preserved.",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3488": {
        "Query": "In-place Gaussian smoothing of an image",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Math.sqrt()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3489": {
        "Query": "Increment subnet based on how subnets are to be divided e.g.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3490": {
        "Query": "Incrementing a Double by the Smallest Possible Amount",
        "GroundTruth": [
            "java.text.ChoiceFormat.previousDouble()",
            "java.text.ChoiceFormat.nextDouble()"
        ],
        "APIClasses": [
            "java.text.ChoiceFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "3491": {
        "Query": "Increments the calendar field of the given calendar by amount.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.add()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "3492": {
        "Query": "Indents every line of the String by 1 tab.",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3493": {
        "Query": "Indicates if the collection contains an entry which is an instance of the given type.",
        "GroundTruth": [
            "java.util.Collection.stream()",
            "java.lang.Class.isAssignableFrom()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.util.Collection",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "3494": {
        "Query": "Indicates if the collection contains any entry which matches the given predicate.",
        "GroundTruth": [
            "java.util.Collection.stream()"
        ],
        "APIClasses": [
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "3495": {
        "Query": "Indicates if the collection has been wrapped by Collections.unmodifiableCollection(...)",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.util.zip.ZipEntry.getName()",
            "java.util.zip.ZipFile.getName()",
            "java.util.logging.Logger.getName()",
            "java.util.logging.Level.getName()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.util.zip.ZipEntry",
            "java.util.zip.ZipFile",
            "java.util.logging.Logger",
            "java.util.logging.Level"
        ],
        "Source": "Tutorial Websites"
    },
    "3496": {
        "Query": "Indicates whether a character is classified as \"Alphabetic\" by the Unicode standard.",
        "GroundTruth": [
            "java.lang.Character.getType()"
        ],
        "APIClasses": [
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "3497": {
        "Query": "Indicates whether a mime-type represents an document containing html or xhtml.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3498": {
        "Query": "Indicates whether a zero bit indicates a black/dark pixel for a monochrome image RenderedImage.",
        "GroundTruth": [
            "java.awt.image.IndexColorModel.getMapSize()"
        ],
        "APIClasses": [
            "java.awt.image.IndexColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "3499": {
        "Query": "Indicates whether an image is a monochrome (1 bit black and white) image.",
        "GroundTruth": [
            "java.awt.image.IndexColorModel.getMapSize()"
        ],
        "APIClasses": [
            "java.awt.image.IndexColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "3500": {
        "Query": "Init the base hints for painting.",
        "GroundTruth": [
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "3501": {
        "Query": "Initializes a JTable and a table sorter",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setHeaderRenderer()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "3502": {
        "Query": "Initializes a default margin in provided directions.",
        "GroundTruth": [
            "javax.swing.BorderFactory.createEmptyBorder()"
        ],
        "APIClasses": [
            "javax.swing.BorderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "3503": {
        "Query": "Insert all elements of other Collection to Specified Index of ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.ArrayList.addAll()",
            "java.util.ArrayList.size()",
            "java.util.ArrayList.get()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Tutorial Websites"
    },
    "3504": {
        "Query": "Insert all elements of other Collection to Specified Index of Vector",
        "GroundTruth": [
            "java.util.ArrayList.add()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Tutorial Websites"
    },
    "3505": {
        "Query": "Inserting Rows into a Database Table Using a Prepared Statement and Batch Update",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.Connection.prepareStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "3506": {
        "Query": "Inserting a Component into a JTextPane Component",
        "GroundTruth": [
            "javax.swing.text.StyleConstants.setComponent()"
        ],
        "APIClasses": [
            "javax.swing.text.StyleConstants"
        ],
        "Source": "Tutorial Websites"
    },
    "3507": {
        "Query": "Inserting a Row into a Database Table",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "3508": {
        "Query": "Inserting a Row into a Database Table Using an Updatable Result Set",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.ResultSet.moveToInsertRow()",
            "java.sql.ResultSet.updateString()",
            "java.sql.ResultSet.insertRow()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3509": {
        "Query": "Inserting a VARRAY Value into an Oracle Table",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "3510": {
        "Query": "Inserting an Image into a JTextPane Component",
        "GroundTruth": [
            "javax.swing.text.StyleConstants.setIcon()"
        ],
        "APIClasses": [
            "javax.swing.text.StyleConstants"
        ],
        "Source": "Tutorial Websites"
    },
    "3511": {
        "Query": "Inserting an OBJECT Value into an Oracle Table",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "3512": {
        "Query": "Inserts one array into another array.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getComponentType()",
            "java.lang.reflect.Array.newInstance()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class",
            "java.lang.reflect.Array",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3513": {
        "Query": "Inserts one array into another at given offset.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getComponentType()",
            "java.lang.reflect.Array.newInstance()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class",
            "java.lang.reflect.Array",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3514": {
        "Query": "Install driver for selenium",
        "GroundTruth": [
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3515": {
        "Query": "Install the keystrokes for several actions on a single button JComponent.",
        "GroundTruth": [
            "javax.swing.Action.getValue()",
            "javax.swing.JComponent.getInputMap()",
            "javax.swing.ActionMap.put()"
        ],
        "APIClasses": [
            "javax.swing.Action",
            "javax.swing.JComponent",
            "javax.swing.ActionMap"
        ],
        "Source": "Tutorial Websites"
    },
    "3516": {
        "Query": "Instance field vs static field",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3517": {
        "Query": "Integer division without exception handling.",
        "GroundTruth": [
            "java.util.Scanner.nextInt()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "3518": {
        "Query": "Intelligently chops a String at a word boundary (whitespace) that occurs at the specified index in the argument or before.",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.String.length()",
            "java.lang.String.substring()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3519": {
        "Query": "Interface with a Nested Class and a Constant Field",
        "GroundTruth": [
            "java.nio.file.Files.walk()"
        ],
        "APIClasses": [
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3520": {
        "Query": "Interface with default method",
        "GroundTruth": [
            "javax.swing.SpringLayout.Constraints.setX()",
            "javax.swing.SpringLayout.Constraints.setY()"
        ],
        "APIClasses": [
            "javax.swing.SpringLayout.Constraints",
            "javax.swing.SpringLayout.Constraints"
        ],
        "Source": "Tutorial Websites"
    },
    "3521": {
        "Query": "Interoperability between java.io.File and java.nio.file.Files",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.io.File.toPath()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.io.File",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3522": {
        "Query": "Interpret a long as its binary form",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3523": {
        "Query": "Interpret a short as its binary form",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3524": {
        "Query": "Interpret an int as its binary form",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3525": {
        "Query": "Intersection between line, determined for two points, and a circle with radius x",
        "GroundTruth": [
            "java.util.Collections.emptyList()",
            "java.lang.Math.sqrt()",
            "java.util.Collections.singletonList()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.lang.Math",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3526": {
        "Query": "Invalidates, validates and repaint a component.",
        "GroundTruth": [
            "java.awt.Component.invalidate()",
            "java.awt.Component.validate()",
            "java.awt.Component.repaint()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "3527": {
        "Query": "Inverts a 4 x 4 matrix using Gaussian Elimination.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3528": {
        "Query": "Inverts a color (for each i in RGB, changes i to 255-i).",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.awt.Color.getAlpha()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "3529": {
        "Query": "Inverts an array from left to right.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toString()",
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3530": {
        "Query": "Invoke Constructor and provide parameter value using reflection",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.Class.getDeclaredConstructor()",
            "java.lang.reflect.AccessibleObject.setAccessible()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Class",
            "java.lang.reflect.AccessibleObject"
        ],
        "Source": "Tutorial Websites"
    },
    "3531": {
        "Query": "Invoke Constructor by parameter type using reflection",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3532": {
        "Query": "Invoke a method by name using reflection",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getDeclaredMethod()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3533": {
        "Query": "Invoke a method on an invoking object with the specified arguments.",
        "GroundTruth": [
            "java.lang.Class.getDeclaredMethods()",
            "java.lang.reflect.Method.getName()",
            "java.lang.String.equals()",
            "java.lang.reflect.Method.invoke()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.Method",
            "java.lang.String",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "3534": {
        "Query": "Invoke constructor without providing parameter using reflection",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3535": {
        "Query": "Invoke method by parameter type using reflection",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3536": {
        "Query": "Invoke on the JavaFx thread and wait for it to return.",
        "GroundTruth": [
            "java.util.concurrent.Future.get()"
        ],
        "APIClasses": [
            "java.util.concurrent.Future"
        ],
        "Source": "Tutorial Websites"
    },
    "3537": {
        "Query": "Invokes a getter method on a given bean",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.isAccessible()",
            "java.lang.reflect.AccessibleObject.setAccessible()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.AccessibleObject"
        ],
        "Source": "Tutorial Websites"
    },
    "3538": {
        "Query": "Invokes a method, masking with a runtime exception all the exceptions.",
        "GroundTruth": [
            "java.lang.reflect.Method.invoke()",
            "java.lang.reflect.Method.getName()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "3539": {
        "Query": "Invokes a setter method on a given bean",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.isAccessible()",
            "java.lang.reflect.AccessibleObject.setAccessible()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.AccessibleObject"
        ],
        "Source": "Tutorial Websites"
    },
    "3540": {
        "Query": "Invokes the Cipher to perform encryption or decryption (depending on the initialized mode).",
        "GroundTruth": [
            "javax.crypto.Cipher.doFinal()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "3541": {
        "Query": "Invokes the given Runnable in the AWT event dispatching thread, and waits for it to finish.",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "java.lang.Runnable.run()",
            "javax.swing.SwingUtilities.invokeAndWait()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.lang.Runnable"
        ],
        "Source": "Tutorial Websites"
    },
    "3542": {
        "Query": "Invokes the given Runnable in the AWT event dispatching thread, not necessarily right away.",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "java.lang.Runnable.run()",
            "javax.swing.SwingUtilities.invokeLater()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.lang.Runnable"
        ],
        "Source": "Tutorial Websites"
    },
    "3543": {
        "Query": "Invoking a Function Written in Nashorn JavaScript",
        "GroundTruth": [
            "javax.script.ScriptEngineManager.getEngineByName()",
            "javax.script.Invocable.invokeFunction()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngineManager",
            "javax.script.Invocable"
        ],
        "Source": "Tutorial Websites"
    },
    "3544": {
        "Query": "Invoking a Method on an Object Created in Nashorn JavaScript",
        "GroundTruth": [
            "javax.script.ScriptEngineManager.getEngineByName()",
            "javax.script.Invocable.invokeMethod()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngineManager",
            "javax.script.Invocable"
        ],
        "Source": "Tutorial Websites"
    },
    "3545": {
        "Query": "Is String a Number",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()",
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "3546": {
        "Query": "Is String a rotation",
        "GroundTruth": [
            "java.lang.String.contains()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3547": {
        "Query": "Is String containing unique letter",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3548": {
        "Query": "Is age by Regex",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "3549": {
        "Query": "Is array Consecutive Numbers",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3550": {
        "Query": "Is class assignable to another class",
        "GroundTruth": [
            "java.lang.Class.isAssignableFrom()",
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3551": {
        "Query": "Is one BigDecimal greater than another BigDecimal",
        "GroundTruth": [
            "java.math.BigInteger.compareTo()",
            "java.math.BigDecimal.compareTo()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "3552": {
        "Query": "Is one BigDecimal greater than or equals to another BigDecimal",
        "GroundTruth": [
            "java.math.BigInteger.compareTo()",
            "java.math.BigDecimal.compareTo()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "3553": {
        "Query": "Is one BigDecimal less than another BigDecimal",
        "GroundTruth": [
            "java.math.BigInteger.compareTo()",
            "java.math.BigDecimal.compareTo()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "3554": {
        "Query": "Is one BigDecimal less than or equals to another BigDecimal",
        "GroundTruth": [
            "java.math.BigInteger.compareTo()",
            "java.math.BigDecimal.compareTo()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "3555": {
        "Query": "Is one BigDecimal not equals to another BigDecimal",
        "GroundTruth": [
            "java.math.BigInteger.compareTo()",
            "java.math.BigDecimal.compareTo()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "3556": {
        "Query": "It takes an Array and add the specified element to the end of the it",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "3557": {
        "Query": "It takes an Array and inserts an element to the specified index",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "3558": {
        "Query": "It takes an Array and removes an element at the specified index",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "3559": {
        "Query": "It takes an Array removes all of its elements that equals with element parameter",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3560": {
        "Query": "Iterate through elements ArrayList using Iterator",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.ArrayList.iterator()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Tutorial Websites"
    },
    "3561": {
        "Query": "Iterate through the values of TreeMap",
        "GroundTruth": [
            "java.util.TreeMap.put()",
            "java.util.TreeMap.values()"
        ],
        "APIClasses": [
            "java.util.TreeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "3562": {
        "Query": "Iterates over the given acceptedContentTypes, looking for one of those values: text/html application/xhtml+xml application/xml",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3563": {
        "Query": "Iterating Through a Map of Environment Variables",
        "GroundTruth": [
            "java.lang.System.getenv()",
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3564": {
        "Query": "JComponent get Minimum Height",
        "GroundTruth": [
            "java.awt.Component.getMinimumSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "3565": {
        "Query": "JList ListModel to List",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "3566": {
        "Query": "JMS Create Text message",
        "GroundTruth": [
            "javax.naming.InitialContext.lookup()",
            "javax.xml.soap.SOAPConnectionFactory.createConnection()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "javax.naming.InitialContext",
            "javax.xml.soap.SOAPConnectionFactory",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3567": {
        "Query": "JMS Queue Receiver Auto Create",
        "GroundTruth": [
            "javax.naming.Context.lookup()",
            "javax.xml.soap.SOAPConnectionFactory.createConnection()"
        ],
        "APIClasses": [
            "javax.naming.Context",
            "javax.xml.soap.SOAPConnectionFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "3568": {
        "Query": "JOptionPane confirm Ok Cancel Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showConfirmDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "3569": {
        "Query": "JOptionPane confirm Yes No Cancel Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showConfirmDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "3570": {
        "Query": "JOptionPane yes No Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showConfirmDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "3571": {
        "Query": "JSF closest Naming Container",
        "GroundTruth": [
            "java.lang.Class.isAssignableFrom()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "3572": {
        "Query": "JTable scroll To Visible",
        "GroundTruth": [
            "javax.swing.JTable.getCellRect()",
            "javax.swing.JViewport.getViewPosition()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "javax.swing.JViewport"
        ],
        "Source": "Tutorial Websites"
    },
    "3573": {
        "Query": "Java 2D Load an image from URL",
        "GroundTruth": [
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "3574": {
        "Query": "Java 3D slightly off matrices cause NaNs",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3575": {
        "Query": "Java Helloworld Applet to add Label to Applet",
        "GroundTruth": [
            "javax.swing.SwingUtilities.invokeAndWait()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "3576": {
        "Query": "Java Parse expected format: a 3-character representation of the month, the day (one or two digits), and a 4-digit year",
        "GroundTruth": [
            "java.time.format.DateTimeFormatter.ofPattern()",
            "java.time.LocalDate.parse()"
        ],
        "APIClasses": [
            "java.time.format.DateTimeFormatter",
            "java.time.LocalDate"
        ],
        "Source": "Tutorial Websites"
    },
    "3577": {
        "Query": "Java Print out the elements in List using JDK 8 Streams",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.shuffle()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3578": {
        "Query": "Java Print out the elements in List using for-each",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.shuffle()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3579": {
        "Query": "Java Queue Stream in apache spark",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "3580": {
        "Query": "Java Shuffle a list with Collections.shuffle()",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.shuffle()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "3581": {
        "Query": "Java Sort String Array",
        "GroundTruth": [
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3582": {
        "Query": "Java Sort a list of String with Collections.sort() method",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "3583": {
        "Query": "Java bean to XML",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()",
            "java.lang.Object.getClass()",
            "javax.xml.bind.JAXBContext.createMarshaller()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext",
            "java.lang.Object",
            "javax.xml.bind.JAXBContext",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3584": {
        "Query": "Java micro edition system To String",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.totalMemory()",
            "java.lang.Runtime.freeMemory()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Runtime",
            "java.lang.Runtime",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "3585": {
        "Query": "Java shutdown hook is not guaranteed to execute.",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.addShutdownHook()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "3586": {
        "Query": "Java wrapper for Windows registry API RegDeleteKey()",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3587": {
        "Query": "Java wrapper for Windows registry API RegQueryValueEx()",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3588": {
        "Query": "Java wrapper for Windows registry API RegSetValueEx() Creates a value if it didn't exist or will overwrite existing value",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3589": {
        "Query": "Java's ImageIO can't process 4-component images and Java2D can't apply AffineTransformOp either, so convert raster data to RGB.",
        "GroundTruth": [
            "java.awt.image.Raster.getWidth()",
            "java.awt.image.Raster.getHeight()",
            "java.awt.image.Raster.getSamples()",
            "java.awt.image.Raster.createInterleavedRaster()",
            "java.awt.color.ColorSpace.getInstance()"
        ],
        "APIClasses": [
            "java.awt.image.Raster",
            "java.awt.color.ColorSpace"
        ],
        "Source": "Tutorial Websites"
    },
    "3590": {
        "Query": "JavaBean enhancements in Java 7",
        "GroundTruth": [
            "java.beans.Expression.execute()",
            "java.beans.Expression.getValue()"
        ],
        "APIClasses": [
            "java.beans.Expression"
        ],
        "Source": "Tutorial Websites"
    },
    "3591": {
        "Query": "JavaFX Color to Css Color",
        "GroundTruth": [
            "java.lang.Math.round()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.awt.Window.getOpacity()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.Color",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "3592": {
        "Query": "JavaFX Node Is Child Of Class",
        "GroundTruth": [
            "java.lang.Class.isInstance()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3593": {
        "Query": "JavaFX Node attach To Right",
        "GroundTruth": [
            "java.awt.geom.RectangularShape.getMaxX()"
        ],
        "APIClasses": [
            "java.awt.geom.RectangularShape"
        ],
        "Source": "Tutorial Websites"
    },
    "3594": {
        "Query": "JavaFX Node center X",
        "GroundTruth": [
            "java.awt.geom.AffineTransform.getTranslateX()",
            "java.awt.geom.RectangularShape.getMaxX()"
        ],
        "APIClasses": [
            "java.awt.geom.AffineTransform",
            "java.awt.geom.RectangularShape"
        ],
        "Source": "Tutorial Websites"
    },
    "3595": {
        "Query": "JavaFX Node middle X",
        "GroundTruth": [
            "java.awt.geom.RectangularShape.getMaxX()"
        ],
        "APIClasses": [
            "java.awt.geom.RectangularShape"
        ],
        "Source": "Tutorial Websites"
    },
    "3596": {
        "Query": "JavaFX Node middle Y",
        "GroundTruth": [
            "java.awt.geom.RectangularShape.getMaxY()"
        ],
        "APIClasses": [
            "java.awt.geom.RectangularShape"
        ],
        "Source": "Tutorial Websites"
    },
    "3597": {
        "Query": "JavaFX Node put On Top",
        "GroundTruth": [
            "java.awt.geom.AffineTransform.getTranslateY()",
            "java.awt.geom.RectangularShape.getMaxY()"
        ],
        "APIClasses": [
            "java.awt.geom.AffineTransform",
            "java.awt.geom.RectangularShape"
        ],
        "Source": "Tutorial Websites"
    },
    "3598": {
        "Query": "JavaFX ReadOnlyDoubleProperty nan Or Infinity",
        "GroundTruth": [
            "java.lang.Double.isInfinite()",
            "java.lang.Double.isNaN()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3599": {
        "Query": "JavaFX add Arc To Path",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "javax.swing.SpringLayout.Constraints.setX()",
            "javax.swing.SpringLayout.Constraints.setY()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "javax.swing.SpringLayout.Constraints",
            "javax.swing.SpringLayout.Constraints"
        ],
        "Source": "Tutorial Websites"
    },
    "3600": {
        "Query": "JavaFX add Horizontal Line To Path",
        "GroundTruth": [
            "javax.swing.SpringLayout.Constraints.setX()"
        ],
        "APIClasses": [
            "javax.swing.SpringLayout.Constraints"
        ],
        "Source": "Tutorial Websites"
    },
    "3601": {
        "Query": "JavaFX add Line To Path",
        "GroundTruth": [
            "javax.swing.SpringLayout.Constraints.setX()",
            "javax.swing.SpringLayout.Constraints.setY()"
        ],
        "APIClasses": [
            "javax.swing.SpringLayout.Constraints",
            "javax.swing.SpringLayout.Constraints"
        ],
        "Source": "Tutorial Websites"
    },
    "3602": {
        "Query": "JavaFX add Move To Line",
        "GroundTruth": [
            "javax.swing.SpringLayout.Constraints.setX()",
            "javax.swing.SpringLayout.Constraints.setY()"
        ],
        "APIClasses": [
            "javax.swing.SpringLayout.Constraints",
            "javax.swing.SpringLayout.Constraints"
        ],
        "Source": "Tutorial Websites"
    },
    "3603": {
        "Query": "JavaFX add Quad Curve To Path",
        "GroundTruth": [
            "javax.swing.SpringLayout.Constraints.setX()",
            "javax.swing.SpringLayout.Constraints.setY()"
        ],
        "APIClasses": [
            "javax.swing.SpringLayout.Constraints",
            "javax.swing.SpringLayout.Constraints"
        ],
        "Source": "Tutorial Websites"
    },
    "3604": {
        "Query": "JavaFX add Vertical Line To Path",
        "GroundTruth": [
            "javax.swing.SpringLayout.Constraints.setY()"
        ],
        "APIClasses": [
            "javax.swing.SpringLayout.Constraints"
        ],
        "Source": "Tutorial Websites"
    },
    "3605": {
        "Query": "JavaFX apply Number Only Filter to StringProperty",
        "GroundTruth": [
            "java.lang.String.matches()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3606": {
        "Query": "JavaFX build Arc To Path",
        "GroundTruth": [
            "javax.swing.SpringLayout.Constraints.setX()",
            "javax.swing.SpringLayout.Constraints.setY()"
        ],
        "APIClasses": [
            "javax.swing.SpringLayout.Constraints",
            "javax.swing.SpringLayout.Constraints"
        ],
        "Source": "Tutorial Websites"
    },
    "3607": {
        "Query": "JavaFX draw Line At Angle",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.toRadians()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3608": {
        "Query": "JavaFX node center X Z",
        "GroundTruth": [
            "java.awt.geom.AffineTransform.getTranslateX()",
            "java.awt.geom.RectangularShape.getMaxX()"
        ],
        "APIClasses": [
            "java.awt.geom.AffineTransform",
            "java.awt.geom.RectangularShape"
        ],
        "Source": "Tutorial Websites"
    },
    "3609": {
        "Query": "JavaFX rotate X Angle",
        "GroundTruth": [
            "java.awt.geom.Point2D.distance()",
            "java.lang.Math.toDegrees()",
            "java.lang.Math.asin()"
        ],
        "APIClasses": [
            "java.awt.geom.Point2D",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3610": {
        "Query": "JavaFX rotate Y Angle",
        "GroundTruth": [
            "java.lang.Math.toDegrees()",
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3611": {
        "Query": "Joins a string array based on the delimiter",
        "GroundTruth": [
            "java.lang.String.toUpperCase()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3612": {
        "Query": "Joins some Iterable s to a single one.",
        "GroundTruth": [
            "java.util.Collections.emptyList()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "3613": {
        "Query": "Joins the arraylist into a single string, combining them with commas.",
        "GroundTruth": [
            "java.util.List.size()",
            "java.util.List.get()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "3614": {
        "Query": "Judge if the specified querying string contain GROUP BY statement",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.toLowerCase()",
            "java.lang.Character.toLowerCase()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "3615": {
        "Query": "Keep two decimal in double format",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3616": {
        "Query": "Knowing the Class of an Array",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "3617": {
        "Query": "Knowing the Installed Look and Feel on Your Machine",
        "GroundTruth": [
            "javax.swing.UIManager.getInstalledLookAndFeels()"
        ],
        "APIClasses": [
            "javax.swing.UIManager"
        ],
        "Source": "Tutorial Websites"
    },
    "3618": {
        "Query": "Knowing the Length of a String",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3619": {
        "Query": "Knuth Morris Pratt string-searching algorithm",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3620": {
        "Query": "Largest Sequence Of Equal Strings",
        "GroundTruth": [
            "java.util.Scanner.nextLine()",
            "java.lang.String.split()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3621": {
        "Query": "Launch IOS App using appium",
        "GroundTruth": [
            "java.lang.Thread.sleep()",
            "java.lang.String.contains()",
            "java.nio.file.WatchEvent.context()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.String",
            "java.nio.file.WatchEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "3622": {
        "Query": "Let a user enter the area code for a phone number with or without parentheses.",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "3623": {
        "Query": "Let l be a subset of entries in an array L that are equally spaced, containing n of the N total entries in L.",
        "GroundTruth": [
            "java.util.ArrayList.get()",
            "java.lang.String.compareTo()",
            "java.util.ArrayList.set()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3624": {
        "Query": "Let the pattern include uppercase letters as well as lowercase letters",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "3625": {
        "Query": "Let's see what type of concurrency the JDBC driver returned",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "3626": {
        "Query": "Letting the user decide when to quit",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3627": {
        "Query": "Lighten up a color.",
        "GroundTruth": [
            "java.awt.Color.equals()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getBlue()",
            "java.awt.Color.getGreen()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3628": {
        "Query": "Limit the length of a string to a certain number of characters.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3629": {
        "Query": "Limit white space characters to actual spaces, just use a space in the regex.",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "3630": {
        "Query": "Limiting the Capacity of a JTextComponent using custom Document",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3631": {
        "Query": "Linux Shell remount System RO",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "3632": {
        "Query": "List Contents Of Zip File",
        "GroundTruth": [
            "java.util.zip.ZipFile.entries()"
        ],
        "APIClasses": [
            "java.util.zip.ZipFile"
        ],
        "Source": "Tutorial Websites"
    },
    "3633": {
        "Query": "List Max value for data type",
        "GroundTruth": [
            "java.lang.Character.isUpperCase()"
        ],
        "APIClasses": [
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "3634": {
        "Query": "List Merge Remove Duplicate Set",
        "GroundTruth": [
            "java.util.Set.addAll()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "3635": {
        "Query": "List Merge Remove Duplicates For Loop",
        "GroundTruth": [
            "java.lang.String.contains()",
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "3636": {
        "Query": "List User-Defined Attribute Names and Value Sizes",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.getFileAttributeView()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3637": {
        "Query": "List all the files in a directory passed to the program as a parameter:",
        "GroundTruth": [
            "java.io.File.listFiles()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3638": {
        "Query": "List blocking user ids in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3639": {
        "Query": "List contents of a directory",
        "GroundTruth": [
            "java.io.File.list()",
            "java.io.File.getPath()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3640": {
        "Query": "List file status in hadoop FileSystem",
        "GroundTruth": [
            "java.net.URI.create()"
        ],
        "APIClasses": [
            "java.net.URI"
        ],
        "Source": "Tutorial Websites"
    },
    "3641": {
        "Query": "List only files, not subdirectories, and doesn't list hidden files",
        "GroundTruth": [
            "java.io.File.listFiles()",
            "java.io.File.isFile()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3642": {
        "Query": "List the name and class of objects in a context",
        "GroundTruth": [
            "javax.naming.NamingEnumeration.hasMore()"
        ],
        "APIClasses": [
            "javax.naming.NamingEnumeration"
        ],
        "Source": "Tutorial Websites"
    },
    "3643": {
        "Query": "List the name of every file in a directory whose pathname is stored in the String variable path",
        "GroundTruth": [
            "java.io.File.listFiles()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3644": {
        "Query": "Listening for Caret Movement Events in a JTextComponent",
        "GroundTruth": [
            "javax.swing.text.JTextComponent.addCaretListener()"
        ],
        "APIClasses": [
            "javax.swing.text.JTextComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "3645": {
        "Query": "Listening for Expansion and Collapse Events in a JTree Component",
        "GroundTruth": [
            "javax.swing.JTree.addTreeWillExpandListener()",
            "javax.swing.JTree.addTreeExpansionListener()"
        ],
        "APIClasses": [
            "javax.swing.JTree",
            "javax.swing.JTree"
        ],
        "Source": "Tutorial Websites"
    },
    "3646": {
        "Query": "Listening for OK and Cancel Events in a JColorChooser Dialog",
        "GroundTruth": [
            "javax.swing.JColorChooser.createDialog()",
            "java.awt.Window.addWindowListener()"
        ],
        "APIClasses": [
            "javax.swing.JColorChooser",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "3647": {
        "Query": "Listening for Print Job Status Changes",
        "GroundTruth": [
            "javax.print.DocPrintJob.addPrintJobListener()"
        ],
        "APIClasses": [
            "javax.print.DocPrintJob"
        ],
        "Source": "Tutorial Websites"
    },
    "3648": {
        "Query": "Listening for Selection Events in a JTree Component",
        "GroundTruth": [
            "javax.swing.event.TreeSelectionEvent.getPaths()",
            "javax.swing.event.TreeSelectionEvent.isAddedPath()"
        ],
        "APIClasses": [
            "javax.swing.event.TreeSelectionEvent",
            "javax.swing.event.TreeSelectionEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "3649": {
        "Query": "Listing All Available Font Families",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getAvailableFontFamilyNames()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "3650": {
        "Query": "Listing All Available Locales",
        "GroundTruth": [
            "java.util.Locale.getAvailableLocales()",
            "java.util.Locale.getLanguage()",
            "java.util.Locale.getCountry()"
        ],
        "APIClasses": [
            "java.util.Locale",
            "java.util.Locale",
            "java.util.Locale"
        ],
        "Source": "Tutorial Websites"
    },
    "3651": {
        "Query": "Listing All Available Parameters for Creating a JDBC Connection",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getDriver()",
            "java.sql.Driver.getPropertyInfo()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager",
            "java.sql.Driver"
        ],
        "Source": "Tutorial Websites"
    },
    "3652": {
        "Query": "Listing All Non-SQL92 Keywords Used by a Database",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.getSQLKeywords()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3653": {
        "Query": "Listing All Table Names in a Database",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.getTables()",
            "java.sql.ResultSet.next()",
            "java.sql.ResultSet.getString()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3654": {
        "Query": "Listing All the Attributes of a DOM Element",
        "GroundTruth": [
            "javax.swing.text.Element.getAttributes()"
        ],
        "APIClasses": [
            "javax.swing.text.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "3655": {
        "Query": "Listing File System Root Directories",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.FileSystem.getRootDirectories()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.FileSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "3656": {
        "Query": "Listing the Entire Content of a directory as links, files, subdirectories, and hidden files",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.newDirectoryStream()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3657": {
        "Query": "Listing the File System Roots",
        "GroundTruth": [
            "java.io.File.listRoots()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3658": {
        "Query": "Listing the Files or Subdirectories in a Directory",
        "GroundTruth": [
            "javax.naming.Name.startsWith()",
            "java.io.File.listFiles()",
            "java.io.File.isDirectory()"
        ],
        "APIClasses": [
            "javax.naming.Name",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3659": {
        "Query": "Listing the Login Modules of an Entry in the Current Login Configuration",
        "GroundTruth": [
            "javax.security.auth.login.Configuration.getConfiguration()",
            "javax.security.auth.login.Configuration.getAppConfigurationEntry()",
            "javax.security.auth.login.AppConfigurationEntry.getLoginModuleName()",
            "javax.security.auth.login.AppConfigurationEntry.getControlFlag()"
        ],
        "APIClasses": [
            "javax.security.auth.login.Configuration",
            "javax.security.auth.login.Configuration",
            "javax.security.auth.login.AppConfigurationEntry",
            "javax.security.auth.login.AppConfigurationEntry"
        ],
        "Source": "Tutorial Websites"
    },
    "3660": {
        "Query": "Listing the Numeric Functions Supported by a Database",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.getNumericFunctions()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3661": {
        "Query": "Listing the Property Names of a Bean",
        "GroundTruth": [
            "java.beans.Introspector.getBeanInfo()"
        ],
        "APIClasses": [
            "java.beans.Introspector"
        ],
        "Source": "Tutorial Websites"
    },
    "3662": {
        "Query": "Listing the String Functions Supported by a Database",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.getStringFunctions()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3663": {
        "Query": "Listing the System Functions Supported by a Database",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.getSystemFunctions()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3664": {
        "Query": "Listing the Time and Date Functions Supported by a Database",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.getTimeDateFunctions()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3665": {
        "Query": "Lists blocking users in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3666": {
        "Query": "Lists favorited statuses in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3667": {
        "Query": "Lists follower ids in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3668": {
        "Query": "Lists friends ids in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3669": {
        "Query": "Lists incoming friendships in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3670": {
        "Query": "Load ResourceBundle by Locale",
        "GroundTruth": [
            "java.util.ResourceBundle.getBundle()"
        ],
        "APIClasses": [
            "java.util.ResourceBundle"
        ],
        "Source": "Tutorial Websites"
    },
    "3671": {
        "Query": "Load Save weka Data",
        "GroundTruth": [
            "java.awt.FileDialog.setFile()"
        ],
        "APIClasses": [
            "java.awt.FileDialog"
        ],
        "Source": "Tutorial Websites"
    },
    "3672": {
        "Query": "Load a resource from the classpath, first trying the thread context class loader, then the class loader of the given class.",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3673": {
        "Query": "Load and set system Properties stored in a file",
        "GroundTruth": [
            "java.lang.System.getProperties()",
            "java.lang.System.setProperties()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3674": {
        "Query": "Load class For Name",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3675": {
        "Query": "Load class with Class.forName()",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3676": {
        "Query": "Load different resource bundle for different locales",
        "GroundTruth": [
            "java.util.ResourceBundle.getBundle()"
        ],
        "APIClasses": [
            "java.util.ResourceBundle"
        ],
        "Source": "Tutorial Websites"
    },
    "3677": {
        "Query": "Loading a Flat File to a MySQL Table",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "3678": {
        "Query": "Loading a JDBC Driver for MySQL",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3679": {
        "Query": "Loading and Executing external JavaScript from Java",
        "GroundTruth": [
            "javax.script.ScriptEngineManager.getEngineByName()",
            "java.util.logging.Logger.getLogger()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngineManager",
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "3680": {
        "Query": "Loading and Executing internal JavaScript from Java",
        "GroundTruth": [
            "javax.script.ScriptEngineManager.getEngineByName()",
            "java.util.logging.Logger.getLogger()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngineManager",
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "3681": {
        "Query": "Loading and Playing Audio in an Application",
        "GroundTruth": [
            "java.applet.Applet.newAudioClip()"
        ],
        "APIClasses": [
            "java.applet.Applet"
        ],
        "Source": "Tutorial Websites"
    },
    "3682": {
        "Query": "Loading and Playing Midi Audio",
        "GroundTruth": [
            "javax.sound.midi.MidiSystem.getSequence()",
            "javax.sound.midi.MidiSystem.getSequencer()",
            "javax.sound.midi.Sequencer.setSequence()",
            "javax.sound.midi.Sequencer.start()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiSystem",
            "javax.sound.midi.Sequencer"
        ],
        "Source": "Tutorial Websites"
    },
    "3683": {
        "Query": "Loads JavaFX FXML structure for a controller.",
        "GroundTruth": [
            "javax.swing.tree.DefaultTreeModel.setRoot()"
        ],
        "APIClasses": [
            "javax.swing.tree.DefaultTreeModel"
        ],
        "Source": "Tutorial Websites"
    },
    "3684": {
        "Query": "Loads a Audio clip from the resource directory.",
        "GroundTruth": [
            "java.applet.Applet.newAudioClip()"
        ],
        "APIClasses": [
            "java.applet.Applet"
        ],
        "Source": "Tutorial Websites"
    },
    "3685": {
        "Query": "Loads a class from the classloader; If not found, the classloader of the context class specified will be used.",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3686": {
        "Query": "Loads a class starting from the given class loader (can be null, then use default class loader)",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.lang.ClassLoader.getSystemClassLoader()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.ClassLoader",
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3687": {
        "Query": "Loads a font from the resource directory.",
        "GroundTruth": [
            "java.net.URL.openStream()",
            "java.awt.Font.createFont()",
            "java.awt.Font.deriveFont()"
        ],
        "APIClasses": [
            "java.net.URL",
            "java.awt.Font"
        ],
        "Source": "Tutorial Websites"
    },
    "3688": {
        "Query": "Loads a resource from the context class loader or, if that fails, from the default class loader.",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3689": {
        "Query": "Loads an image from file at the input path and returns it as an ImageIcon",
        "GroundTruth": [
            "javax.imageio.ImageIO.read()",
            "java.awt.Image.getScaledInstance()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO",
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "3690": {
        "Query": "Loads an image from the resource directory.",
        "GroundTruth": [
            "java.net.URL.openStream()",
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "java.net.URL",
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "3691": {
        "Query": "Loads an image that isn't JPEG (with default Java loader).",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.MediaTracker.addImage()",
            "java.awt.MediaTracker.waitForAll()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.MediaTracker",
            "java.awt.MediaTracker"
        ],
        "Source": "Tutorial Websites"
    },
    "3692": {
        "Query": "Loads saved java object from XML file via JAXB",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext"
        ],
        "Source": "Tutorial Websites"
    },
    "3693": {
        "Query": "Loads the class via the optionally specified classes in the order of their specification, and if not found, via the context class loader of the current thread, and if not found, from the caller class loader as the last resort.",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3694": {
        "Query": "Loads the class with the specified name",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3695": {
        "Query": "Loads the given HTML file to Swing HTMLDocument.",
        "GroundTruth": [
            "javax.swing.text.EditorKit.createDefaultDocument()",
            "javax.swing.text.EditorKit.read()"
        ],
        "APIClasses": [
            "javax.swing.text.EditorKit"
        ],
        "Source": "Tutorial Websites"
    },
    "3696": {
        "Query": "Loads the object from the XML file via JAXB",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()",
            "javax.xml.bind.JAXBContext.createUnmarshaller()",
            "java.nio.file.Path.toFile()",
            "java.nio.file.Path.toString()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "3697": {
        "Query": "Loads the system default X509TrustManager .",
        "GroundTruth": [
            "javax.net.ssl.TrustManagerFactory.getInstance()",
            "javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()",
            "javax.net.ssl.TrustManagerFactory.getTrustManagers()"
        ],
        "APIClasses": [
            "javax.net.ssl.TrustManagerFactory",
            "javax.net.ssl.TrustManagerFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "3698": {
        "Query": "LocalDateTime To Millisecond UTC",
        "GroundTruth": [
            "java.time.chrono.ChronoZonedDateTime.toInstant()",
            "java.time.chrono.ChronoLocalDateTime.toInstant()",
            "java.time.OffsetDateTime.toInstant()",
            "java.time.Instant.toEpochMilli()"
        ],
        "APIClasses": [
            "java.time.chrono.ChronoZonedDateTime",
            "java.time.chrono.ChronoLocalDateTime",
            "java.time.OffsetDateTime",
            "java.time.Instant"
        ],
        "Source": "Tutorial Websites"
    },
    "3699": {
        "Query": "Locates generic declaration by index on a class.",
        "GroundTruth": [
            "java.lang.Class.getGenericSuperclass()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3700": {
        "Query": "Locating Files and Directories Using Paths",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Path.resolveSibling()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "3701": {
        "Query": "Locating the Target of a Link",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.readSymbolicLink()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3702": {
        "Query": "Locks a Jtable's column width with 'pixels' size.",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMinWidth()",
            "javax.swing.table.TableColumn.setMaxWidth()",
            "javax.swing.table.TableColumn.setPreferredWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "3703": {
        "Query": "Longest Common Sub Sequence between two string",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3704": {
        "Query": "Look for XML Element node if given name.",
        "GroundTruth": [
            "org.w3c.dom.Node.getNodeType()",
            "org.w3c.dom.Node.getNodeName()",
            "java.lang.String.equals()",
            "org.w3c.dom.Node.getNextSibling()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3705": {
        "Query": "Look for XML Element node of given name.",
        "GroundTruth": [
            "org.w3c.dom.Node.getNodeType()",
            "org.w3c.dom.Node.getNodeName()",
            "java.lang.String.equals()",
            "org.w3c.dom.Node.getNextSibling()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3706": {
        "Query": "Look for XML Element node.",
        "GroundTruth": [
            "org.w3c.dom.Node.getNodeType()",
            "org.w3c.dom.Node.getNextSibling()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "3707": {
        "Query": "Look for child XML node of given name.",
        "GroundTruth": [
            "org.w3c.dom.Node.getNodeType()",
            "org.w3c.dom.Node.getNodeName()",
            "java.lang.String.equals()",
            "org.w3c.dom.Node.getNextSibling()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3708": {
        "Query": "Look for the HTTP verb which should be GET , POST , PUT , DELETE , OPTIONS or HEAD .",
        "GroundTruth": [
            "java.lang.reflect.Method.getDeclaredAnnotations()",
            "java.lang.annotation.Annotation.annotationType()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method",
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "3709": {
        "Query": "Looks up friendships in twitter",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3710": {
        "Query": "Lower-case to upper-case string conversion",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3711": {
        "Query": "MBean implementation for the Hello MBean",
        "GroundTruth": [
            "java.lang.System.currentTimeMillis()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3712": {
        "Query": "Maintaining file ownership attributes using the FileOwnerAttributeView",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.getFileAttributeView()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3713": {
        "Query": "Make a color darker.",
        "GroundTruth": [
            "java.lang.Math.round()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.awt.Color.getAlpha()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "3714": {
        "Query": "Make a color lighter.",
        "GroundTruth": [
            "java.lang.Math.round()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.awt.Color.getAlpha()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "3715": {
        "Query": "Make a field accessible.",
        "GroundTruth": [
            "java.lang.reflect.Modifier.isPublic()",
            "java.lang.reflect.Field.getModifiers()",
            "java.security.AccessController.doPrivileged()",
            "java.lang.reflect.AccessibleObject.setAccessible()"
        ],
        "APIClasses": [
            "java.lang.reflect.Modifier",
            "java.lang.reflect.Field",
            "java.security.AccessController",
            "java.lang.reflect.AccessibleObject"
        ],
        "Source": "Tutorial Websites"
    },
    "3716": {
        "Query": "Make a list without duplicates.",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3717": {
        "Query": "Make a relative copy of a URI.",
        "GroundTruth": [
            "java.net.URI.isAbsolute()",
            "java.net.URI.getRawPath()",
            "java.net.URI.getQuery()",
            "java.net.URI.getRawQuery()",
            "java.net.URI.create()"
        ],
        "APIClasses": [
            "java.net.URI"
        ],
        "Source": "Tutorial Websites"
    },
    "3718": {
        "Query": "Make a set unmodifiable",
        "GroundTruth": [
            "java.util.Collections.addAll()",
            "java.util.Collections.unmodifiableSet()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "3719": {
        "Query": "Make a twitter tweet",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3720": {
        "Query": "Make all combinations of N size of objects",
        "GroundTruth": [
            "java.util.Collections.singletonList()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3721": {
        "Query": "Make the Cholesky decomposition L of a given input matrix A, where: A is symmetric and positive definite (has full rank) A = L L^T (L^T is the transpose of L - here A has real entries only, though a Cholesky decomposition is possible with complex entries) L is a lower triangular matrix We perform the decomposition using the Cholesky?Banachiewicz algorithm, computing L from the top left, row by row (see wikipedia) This method has been adapted from the JAMA project (public domain software)",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3722": {
        "Query": "Makes JavaFX ListView scroll on the bottom element when added.",
        "GroundTruth": [
            "java.awt.List.getItems()"
        ],
        "APIClasses": [
            "java.awt.List"
        ],
        "Source": "Tutorial Websites"
    },
    "3723": {
        "Query": "Makes a Timestamp for the beginning of the month",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.sql.Timestamp.getTime()",
            "java.sql.CallableStatement.getTime()",
            "java.sql.ResultSet.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.sql.Timestamp",
            "java.sql.CallableStatement",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3724": {
        "Query": "Makes a directory, including any necessary but nonexistent parent directories.",
        "GroundTruth": [
            "java.io.File.mkdirs()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3725": {
        "Query": "Makes a time String in the format HH:MM:SS from a Date.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.get()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "3726": {
        "Query": "Makes an unmodifiable list from the given arguments.",
        "GroundTruth": [
            "java.util.Collections.unmodifiableList()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3727": {
        "Query": "Makes sure the component won't receive the focus.",
        "GroundTruth": [
            "javax.swing.JComponent.setRequestFocusEnabled()",
            "java.awt.Component.setFocusable()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "3728": {
        "Query": "Making the Browser Visit a URL",
        "GroundTruth": [
            "java.applet.AppletContext.showDocument()"
        ],
        "APIClasses": [
            "java.applet.AppletContext"
        ],
        "Source": "Tutorial Websites"
    },
    "3729": {
        "Query": "Managing extra mouse buttons and high resolution mouse wheels",
        "GroundTruth": [
            "java.awt.event.MouseWheelEvent.getPreciseWheelRotation()",
            "java.awt.event.MouseWheelEvent.getWheelRotation()",
            "javax.swing.SwingUtilities.invokeLater()",
            "java.awt.Window.setVisible()"
        ],
        "APIClasses": [
            "java.awt.event.MouseWheelEvent",
            "java.awt.event.MouseWheelEvent",
            "javax.swing.SwingUtilities",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "3730": {
        "Query": "Mark file or directory Read Only",
        "GroundTruth": [
            "java.io.File.setReadOnly()",
            "java.io.File.canWrite()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3731": {
        "Query": "Mark that the ongoing Swing document modification(s) will be caused by user's typing.",
        "GroundTruth": [
            "java.lang.Boolean.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "3732": {
        "Query": "Marshal the elements from the given enumeration into an array of the given type.",
        "GroundTruth": [
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.nextElement()"
        ],
        "APIClasses": [
            "java.util.Enumeration"
        ],
        "Source": "Tutorial Websites"
    },
    "3733": {
        "Query": "Match String value for one or the other",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3734": {
        "Query": "Match String with upper or lower case",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3735": {
        "Query": "Match a word using regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "3736": {
        "Query": "Match any digits or numbers are present, in this case the",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3737": {
        "Query": "Match single word by regex",
        "GroundTruth": [
            "java.lang.Integer.parseInt()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "3738": {
        "Query": "Match word start in regular expression",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.lookingAt()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "3739": {
        "Query": "Matching a String Against a Pattern",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3740": {
        "Query": "Matching a Word Boundary using \\\\b to get \\b",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3741": {
        "Query": "Matching with Wildcards in a SQL Statement",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "3742": {
        "Query": "Math Calculation on double type value",
        "GroundTruth": [
            "java.lang.Math.exp()",
            "java.lang.Math.log()",
            "java.lang.Math.pow()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3743": {
        "Query": "Math Expression Plot using nfunk JEP",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3744": {
        "Query": "Math log based 2",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3745": {
        "Query": "Maximizes a JFrame, just like the 'maximize window' button does.",
        "GroundTruth": [
            "java.awt.Frame.setExtendedState()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Tutorial Websites"
    },
    "3746": {
        "Query": "Measures the distance of a point to a line segment.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.awt.geom.Line2D.ptSegDistSq()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.geom.Line2D"
        ],
        "Source": "Tutorial Websites"
    },
    "3747": {
        "Query": "Measures the squared distance of a point to a line segment.",
        "GroundTruth": [
            "java.awt.geom.Line2D.ptSegDistSq()"
        ],
        "APIClasses": [
            "java.awt.geom.Line2D"
        ],
        "Source": "Tutorial Websites"
    },
    "3748": {
        "Query": "Merge All array and return one big array",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.System.arraycopy()",
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.System",
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "3749": {
        "Query": "Merge the given array into the given Collection.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.add()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "3750": {
        "Query": "Merged all arrays into a single array.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.reflect.Array.newInstance()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.reflect.Array",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3751": {
        "Query": "Method References via non static method",
        "GroundTruth": [
            "java.util.Arrays.sort()",
            "javax.naming.Name.compareTo()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "javax.naming.Name"
        ],
        "Source": "Tutorial Websites"
    },
    "3752": {
        "Query": "Method get Column Type.",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.getColumns()",
            "java.sql.ResultSet.next()",
            "java.sql.ResultSet.getInt()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "3753": {
        "Query": "Method that rounds a value to the n precision decimals",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3754": {
        "Query": "Method that will find all sub-classes and implemented interfaces of a given class or interface.",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3755": {
        "Query": "Method to calculate and return the average power of the signal (average amplitude)",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3756": {
        "Query": "Method to check if a Class is a Collection or not.",
        "GroundTruth": [
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3757": {
        "Query": "Method to convert a Array Collection of int to a Array Collection of Integer.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "3758": {
        "Query": "Method to convert a Collection to Iterator object.",
        "GroundTruth": [
            "java.util.logging.ErrorManager.error()"
        ],
        "APIClasses": [
            "java.util.logging.ErrorManager"
        ],
        "Source": "Tutorial Websites"
    },
    "3759": {
        "Query": "Method to convert a Set Collection to a Array Collection",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Arrays.toString()",
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "3760": {
        "Query": "Method to convert an array to a Object array.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "3761": {
        "Query": "Method to get the hash code for double data type",
        "GroundTruth": [
            "java.lang.Double.doubleToLongBits()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3762": {
        "Query": "Method to return the type category for a type.",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3763": {
        "Query": "Method used to add a Handler to a stub or dispatch object.",
        "GroundTruth": [
            "javax.xml.ws.BindingProvider.getBinding()",
            "javax.xml.ws.Binding.getHandlerChain()",
            "javax.xml.ws.Binding.setHandlerChain()"
        ],
        "APIClasses": [
            "javax.xml.ws.BindingProvider",
            "javax.xml.ws.Binding"
        ],
        "Source": "Tutorial Websites"
    },
    "3764": {
        "Query": "Method used to check is some class exists at JVM.",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3765": {
        "Query": "Method used to return some class that exists at JVM.",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3766": {
        "Query": "Minimizing the Impact of Logging Code",
        "GroundTruth": [
            "java.util.logging.Logger.getLogger()",
            "java.util.logging.Logger.finest()",
            "java.util.logging.Logger.isLoggable()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "3767": {
        "Query": "Mixing heavyweight and lightweight components",
        "GroundTruth": [
            "javax.swing.SwingUtilities.invokeLater()",
            "java.awt.Window.setVisible()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "3768": {
        "Query": "Modify the object by applying the given transform.",
        "GroundTruth": [
            "java.lang.instrument.ClassFileTransformer.transform()"
        ],
        "APIClasses": [
            "java.lang.instrument.ClassFileTransformer"
        ],
        "Source": "Tutorial Websites"
    },
    "3769": {
        "Query": "Modifying Elements of an Array Parameter Inside a Method",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3770": {
        "Query": "Modifying an Array Parameter Inside a Method",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3771": {
        "Query": "Modular random BigInteger number generator.",
        "GroundTruth": [
            "java.math.BigInteger.bitLength()",
            "java.math.BigInteger.compareTo()",
            "java.math.BigDecimal.compareTo()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "3772": {
        "Query": "Modular random number generator for the multiplicative subgroup.",
        "GroundTruth": [
            "java.math.BigInteger.bitLength()",
            "java.util.Calendar.compareTo()",
            "java.util.UUID.compareTo()",
            "java.util.Date.compareTo()",
            "java.math.BigInteger.gcd()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigInteger",
            "java.util.Calendar",
            "java.util.UUID",
            "java.util.Date",
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "3773": {
        "Query": "Move a file from one directory to another",
        "GroundTruth": [
            "java.io.File.renameTo()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3774": {
        "Query": "Moves a number of entries in an array to another point in the array, shifting those in between as required.",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3775": {
        "Query": "Moves the position of the given ByteBuffer the given count from the current position.",
        "GroundTruth": [
            "java.nio.Buffer.position()"
        ],
        "APIClasses": [
            "java.nio.Buffer"
        ],
        "Source": "Tutorial Websites"
    },
    "3776": {
        "Query": "Moving a File or Directory to Another Directory",
        "GroundTruth": [
            "java.io.File.renameTo()",
            "java.io.File.getName()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3777": {
        "Query": "Moving a file and a directory",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.move()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3778": {
        "Query": "Multiple Verticle CSV File Analysis In Spark SQL",
        "GroundTruth": [
            "java.lang.String.join()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3779": {
        "Query": "Multiplies 2 matrices in O(n^3) time",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3780": {
        "Query": "Multiplies all the elements in an array of doubles by the elements of an equally sized array of doubles.",
        "GroundTruth": [
            "java.lang.Object.clone()",
            "java.lang.Enum.clone()",
            "java.lang.Thread.clone()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Enum",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3781": {
        "Query": "Multiplies an array of doubles and an array of integers element-wise.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3782": {
        "Query": "Multiplies every component of an array by a scalar.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toString()",
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3783": {
        "Query": "Multiplies first BigDecimal by second BigDecimal.",
        "GroundTruth": [
            "java.math.BigInteger.multiply()",
            "java.math.BigDecimal.multiply()",
            "java.math.BigDecimal.setScale()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "3784": {
        "Query": "Naive method for computing minimum distance - slower but needs less memory.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3785": {
        "Query": "Node to string with XML Transform",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3786": {
        "Query": "Normalises the elements in the given array",
        "GroundTruth": [
            "java.lang.Double.isInfinite()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3787": {
        "Query": "Normalize a path, ensuring that it start with a '/' and does not end with a '/'.",
        "GroundTruth": [
            "java.lang.String.charAt()",
            "java.lang.String.length()",
            "java.lang.String.toString()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3788": {
        "Query": "Normalize an array of ln values to probabilities.",
        "GroundTruth": [
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3789": {
        "Query": "Normalizes a vector, such that its length is 1.0 .",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3790": {
        "Query": "Normalizes the input array to double values between -1.0 and 1.0.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3791": {
        "Query": "Normalizes the midi signature by removing the velocity from NOTE_ON and NOTE_OFF messages.",
        "GroundTruth": [
            "javax.sound.midi.ShortMessage.getCommand()",
            "javax.sound.midi.ShortMessage.getChannel()",
            "javax.sound.midi.ShortMessage.getData1()",
            "javax.sound.midi.ShortMessage.getData2()"
        ],
        "APIClasses": [
            "javax.sound.midi.ShortMessage"
        ],
        "Source": "Tutorial Websites"
    },
    "3792": {
        "Query": "Null safe creation of a HashSet out of a given collection without null elements.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Set.remove()",
            "java.util.Set.add()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "3793": {
        "Query": "Null safe creation of a HashSet out of a given collection.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Set.add()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "3794": {
        "Query": "Null safe creation of a LinkedHashSet out of a given collection without null elements.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Set.remove()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "3795": {
        "Query": "Null safe creation of a LinkedHashSet out of a given collection.",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3796": {
        "Query": "Object Feature Extraction from Image using openimaj",
        "GroundTruth": [
            "java.io.BufferedWriter.newLine()"
        ],
        "APIClasses": [
            "java.io.BufferedWriter"
        ],
        "Source": "Tutorial Websites"
    },
    "3797": {
        "Query": "Object Serialized to Byte Array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.io.ObjectOutput.writeObject()",
            "java.io.ObjectOutputStream.writeObject()",
            "java.io.ByteArrayOutputStream.toByteArray()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.io.ObjectOutput",
            "java.io.ObjectOutputStream",
            "java.io.ByteArrayOutputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "3798": {
        "Query": "Object serialization from Byte Array",
        "GroundTruth": [
            "java.io.ObjectInputStream.readObject()",
            "java.io.ObjectInput.readObject()"
        ],
        "APIClasses": [
            "java.io.ObjectInputStream",
            "java.io.ObjectInput"
        ],
        "Source": "Tutorial Websites"
    },
    "3799": {
        "Query": "Obtain JVM's Free Memory.",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.freeMemory()",
            "java.lang.String.toUpperCase()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3800": {
        "Query": "Obtain JVM's In Use Memory.",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.totalMemory()",
            "java.lang.Runtime.freeMemory()",
            "java.lang.String.toUpperCase()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime",
            "java.lang.Runtime",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3801": {
        "Query": "Obtain JVM's Maximum Memory.",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.maxMemory()",
            "java.lang.String.toUpperCase()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3802": {
        "Query": "Obtain JVM's Total Memory.",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.totalMemory()",
            "java.lang.String.toUpperCase()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3803": {
        "Query": "Obtain the bean info for a bean class.",
        "GroundTruth": [
            "java.beans.Introspector.getBeanInfo()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.beans.Introspector",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "3804": {
        "Query": "Obtaining a map of file attributes",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.readAttributes()",
            "java.nio.file.Files.getAttribute()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3805": {
        "Query": "Obtaining a single attribute at a time using the getAttribute method",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.getAttribute()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3806": {
        "Query": "Obtaining user input from a Swing dialog.",
        "GroundTruth": [
            "javax.swing.JOptionPane.showInputDialog()",
            "java.lang.String.format()",
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3807": {
        "Query": "Obtains a string from the clipboard.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()",
            "java.awt.datatransfer.Clipboard.getContents()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.awt.datatransfer.Clipboard"
        ],
        "Source": "Tutorial Websites"
    },
    "3808": {
        "Query": "Obtains an object from the clipboard.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()",
            "java.awt.datatransfer.Clipboard.getContents()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.awt.datatransfer.Clipboard"
        ],
        "Source": "Tutorial Websites"
    },
    "3809": {
        "Query": "Obtains the Constructor specified from the given Class and argument types",
        "GroundTruth": [
            "java.security.AccessController.doPrivileged()"
        ],
        "APIClasses": [
            "java.security.AccessController"
        ],
        "Source": "Tutorial Websites"
    },
    "3810": {
        "Query": "Open Dom Document from file path",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "3811": {
        "Query": "Open Zip File From File Object",
        "GroundTruth": [
            "java.util.zip.ZipFile.getName()",
            "java.util.zip.ZipFile.close()"
        ],
        "APIClasses": [
            "java.util.zip.ZipFile"
        ],
        "Source": "Tutorial Websites"
    },
    "3812": {
        "Query": "Open Zip File Using ZipFile Class",
        "GroundTruth": [
            "java.util.zip.ZipFile.getName()",
            "java.util.zip.ZipFile.close()"
        ],
        "APIClasses": [
            "java.util.zip.ZipFile"
        ],
        "Source": "Tutorial Websites"
    },
    "3813": {
        "Query": "Open a URL or File as an InputStream",
        "GroundTruth": [
            "java.net.URL.openStream()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "3814": {
        "Query": "Open the given URL in the system web browser.",
        "GroundTruth": [
            "java.awt.Desktop.isDesktopSupported()",
            "java.awt.Desktop.getDesktop()",
            "java.awt.Desktop.isSupported()",
            "java.awt.SystemTray.isSupported()",
            "java.awt.Desktop.browse()"
        ],
        "APIClasses": [
            "java.awt.Desktop",
            "java.awt.SystemTray",
            "java.awt.Desktop"
        ],
        "Source": "Tutorial Websites"
    },
    "3815": {
        "Query": "Opens a JOptionPane with the error message and formatted stack trace of the throwable in a scrollable text area.",
        "GroundTruth": [
            "java.lang.String.toString()",
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "3816": {
        "Query": "Order pizza via Scanner",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3817": {
        "Query": "Our own implementation of Math.round due to difference between java 1.6 and 1.7 implementations See Java bug 6430675 Using java 1.6 implementation of Math.round defined as floor of 0.5d plus value.",
        "GroundTruth": [
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3818": {
        "Query": "Override method from parent class",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3819": {
        "Query": "Override methods from parent",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3820": {
        "Query": "Overriding the equals() and hashCode() Methods in a Class",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "3821": {
        "Query": "Package-access members of a class are accessible by other classes in the same package.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3822": {
        "Query": "Pads an array of bytes inline with the given padding scheme",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3823": {
        "Query": "Pads the data float array to the specified number of data points.",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3824": {
        "Query": "Pads the data to the next power of 2.",
        "GroundTruth": [
            "java.lang.System.arraycopy()",
            "java.lang.StrictMath.ceil()",
            "java.lang.StrictMath.log()",
            "java.lang.StrictMath.max()",
            "java.lang.StrictMath.pow()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "3825": {
        "Query": "Paints a horizontal gradient background from the start color to the end color.",
        "GroundTruth": [
            "java.awt.Image.getGraphics()",
            "java.awt.Graphics2D.setPaint()"
        ],
        "APIClasses": [
            "java.awt.Image",
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "3826": {
        "Query": "Paints a rectangular drop shadow with a 5 pixel offset.",
        "GroundTruth": [
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "3827": {
        "Query": "Parse CSV line from Reader",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3828": {
        "Query": "Parse Double value from String with default value",
        "GroundTruth": [
            "java.lang.Double.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3829": {
        "Query": "Parse Float from String with default value",
        "GroundTruth": [
            "java.lang.Float.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "3830": {
        "Query": "Parse Integer from String with default value",
        "GroundTruth": [
            "java.lang.Integer.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3831": {
        "Query": "Parse Long from String with default value",
        "GroundTruth": [
            "java.lang.Long.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "3832": {
        "Query": "Parse Short from String with default value",
        "GroundTruth": [
            "java.lang.Short.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Short"
        ],
        "Source": "Tutorial Websites"
    },
    "3833": {
        "Query": "Parse String to Byte value with default value",
        "GroundTruth": [
            "java.lang.Byte.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Byte"
        ],
        "Source": "Tutorial Websites"
    },
    "3834": {
        "Query": "Parse String to Date using yyyy-MM-dd'T'HH:mm:ss format",
        "GroundTruth": [
            "java.util.Locale.LanguageRange.parse()",
            "java.util.Date.parse()",
            "java.util.logging.Level.parse()"
        ],
        "APIClasses": [
            "java.util.Locale.LanguageRange",
            "java.util.Date",
            "java.util.logging.Level"
        ],
        "Source": "Tutorial Websites"
    },
    "3835": {
        "Query": "Parse String to Long and catch exception",
        "GroundTruth": [
            "java.lang.Long.parseLong()",
            "java.lang.Throwable.printStackTrace()"
        ],
        "APIClasses": [
            "java.lang.Long",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "3836": {
        "Query": "Parse XML File using DOM Parser",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "3837": {
        "Query": "Parse a String into a Color, and returns the given default value if the color is not parsable.",
        "GroundTruth": [
            "java.lang.String.isEmpty()",
            "java.lang.String.toLowerCase()",
            "java.awt.Color.decode()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.Color",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3838": {
        "Query": "Parse a String into a Color.",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.awt.Color.decode()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.Color",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3839": {
        "Query": "Parse a String to its Double representation.",
        "GroundTruth": [
            "java.lang.Double.parseDouble()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3840": {
        "Query": "Parse a number, ignoring thousand-separating commas.",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.replaceAll()",
            "java.lang.Integer.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3841": {
        "Query": "Parse string To LocalDateTime in format of dd-MM-yyyy HH:mm:ss",
        "GroundTruth": [
            "java.time.LocalDateTime.parse()",
            "java.time.format.DateTimeFormatter.ofPattern()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime",
            "java.time.format.DateTimeFormatter"
        ],
        "Source": "Tutorial Websites"
    },
    "3842": {
        "Query": "Parse string to Date",
        "GroundTruth": [
            "java.util.Locale.LanguageRange.parse()",
            "java.util.Date.parse()",
            "java.util.logging.Level.parse()"
        ],
        "APIClasses": [
            "java.util.Locale.LanguageRange",
            "java.util.Date",
            "java.util.logging.Level"
        ],
        "Source": "Tutorial Websites"
    },
    "3843": {
        "Query": "Parse string to double, return defaultValue if parse fails",
        "GroundTruth": [
            "java.lang.Double.parseDouble()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3844": {
        "Query": "Parse string to float",
        "GroundTruth": [
            "java.lang.Float.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "3845": {
        "Query": "Parse string to int, return defaultValue if parse fails",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3846": {
        "Query": "Parse string to short, return defaultValue if parse fails",
        "GroundTruth": [
            "java.lang.Short.parseShort()"
        ],
        "APIClasses": [
            "java.lang.Short"
        ],
        "Source": "Tutorial Websites"
    },
    "3847": {
        "Query": "Parse the XML file and create Document",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "3848": {
        "Query": "Parses a String into a new XML Element.",
        "GroundTruth": [
            "javax.xml.transform.Transformer.transform()",
            "org.w3c.dom.Document.getDocumentElement()",
            "javax.xml.parsers.DocumentBuilder.newDocument()"
        ],
        "APIClasses": [
            "javax.xml.transform.Transformer",
            "org.w3c.dom.Document",
            "javax.xml.parsers.DocumentBuilder"
        ],
        "Source": "Tutorial Websites"
    },
    "3849": {
        "Query": "Parses a color instance from the given hex string.",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3850": {
        "Query": "Parses a hex color string (e.g. #FF0000 or FF0000)",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.startsWith()",
            "java.lang.String.substring()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3851": {
        "Query": "Parses an XML entity value such as #xFD45 or #6582.",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.Integer.parseInt()",
            "java.lang.String.substring()",
            "java.lang.Character.toString()",
            "javax.swing.text.html.parser.DTD.getEntity()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer",
            "java.lang.Character",
            "javax.swing.text.html.parser.DTD"
        ],
        "Source": "Tutorial Websites"
    },
    "3852": {
        "Query": "Parses an html color.",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.startsWith()",
            "java.lang.String.substring()",
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "3853": {
        "Query": "Parses and returns Locale by given String local String like en_EN or de_DE.",
        "GroundTruth": [
            "java.util.regex.Pattern.split()",
            "java.util.SplittableRandom.split()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "3854": {
        "Query": "Parses the given string as a double.",
        "GroundTruth": [
            "java.lang.Double.parseDouble()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3855": {
        "Query": "Parses the string and returns a InetSocketAddress.",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.lang.Integer.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3856": {
        "Query": "Parsing a JNDI Compound Name",
        "GroundTruth": [
            "org.xml.sax.Parser.parse()"
        ],
        "APIClasses": [
            "org.xml.sax.Parser"
        ],
        "Source": "Tutorial Websites"
    },
    "3857": {
        "Query": "Parsing a Timestamp to Get Its Time Parts",
        "GroundTruth": [
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "3858": {
        "Query": "Parsing and Formatting a Big Integer into Binary, Octal, and Hexadecimal",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3859": {
        "Query": "Parsing and Formatting a Byte Array into Binary, Octal, and Hexadecimal",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3860": {
        "Query": "Partial Path comparison can be accomplished by using the startsWith() and endsWith() methods",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.lang.String.startsWith()",
            "java.lang.String.endsWith()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3861": {
        "Query": "Pass Date string in dd/MM/yyyy format",
        "GroundTruth": [
            "java.util.Locale.LanguageRange.parse()",
            "java.util.Date.parse()",
            "java.util.logging.Level.parse()"
        ],
        "APIClasses": [
            "java.util.Locale.LanguageRange",
            "java.util.Date",
            "java.util.logging.Level"
        ],
        "Source": "Tutorial Websites"
    },
    "3862": {
        "Query": "Pass Predicate into a function",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.length()",
            "java.util.function.Predicate.test()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.util.function.Predicate"
        ],
        "Source": "Tutorial Websites"
    },
    "3863": {
        "Query": "Pass lambda as function parameter",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3864": {
        "Query": "Pass method to Stream forEach action via method reference",
        "GroundTruth": [
            "java.util.stream.Stream.of()"
        ],
        "APIClasses": [
            "java.util.stream.Stream"
        ],
        "Source": "Tutorial Websites"
    },
    "3865": {
        "Query": "Passing Arguments to Methods",
        "GroundTruth": [
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3866": {
        "Query": "Passing Lambda Expressions to Methods",
        "GroundTruth": [
            "java.util.List.size()",
            "java.util.List.get()",
            "java.lang.Double.valueOf()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3867": {
        "Query": "Passing Parameters From a Java Program to Scripts",
        "GroundTruth": [
            "javax.script.ScriptEngineManager.getEngineByName()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngineManager"
        ],
        "Source": "Tutorial Websites"
    },
    "3868": {
        "Query": "Passing String value Java Parameters into Javascript",
        "GroundTruth": [
            "javax.script.ScriptEngineManager.getEngineByName()",
            "javax.script.SimpleBindings.put()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngineManager",
            "javax.script.SimpleBindings"
        ],
        "Source": "Tutorial Websites"
    },
    "3869": {
        "Query": "Passing float value Java Parameters into Javascript",
        "GroundTruth": [
            "javax.script.ScriptEngineManager.getEngineByName()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngineManager"
        ],
        "Source": "Tutorial Websites"
    },
    "3870": {
        "Query": "Pause Thread Using Sleep Method",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3871": {
        "Query": "Pause the program to wait for the user to enter a String and press enter.",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3872": {
        "Query": "Pausing the Current Thread",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "3873": {
        "Query": "Perform Binary Search on ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.sort()",
            "java.util.Collections.binarySearch()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "3874": {
        "Query": "Perform Binary Search on Vector",
        "GroundTruth": [
            "java.util.Collections.sort()",
            "java.util.Collections.binarySearch()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "3875": {
        "Query": "Perform fuzzy comparison of two doubles with specified tolerance.",
        "GroundTruth": [
            "java.lang.Math.max()",
            "java.lang.Math.abs()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3876": {
        "Query": "Perform the copy operation with Files.copy method",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.copy()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3877": {
        "Query": "Performing Binary Search on Java char Array",
        "GroundTruth": [
            "java.util.Arrays.sort()",
            "java.util.Arrays.binarySearch()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3878": {
        "Query": "Performing Binary Search on Java long Array",
        "GroundTruth": [
            "java.util.Arrays.sort()",
            "java.util.Arrays.binarySearch()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3879": {
        "Query": "Performing Binary Search on byte Array",
        "GroundTruth": [
            "java.util.Arrays.sort()",
            "java.util.Arrays.binarySearch()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "3880": {
        "Query": "Places an extension on a filename if it does not already exist.",
        "GroundTruth": [
            "java.io.File.compareTo()",
            "java.io.ObjectStreamField.compareTo()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.ObjectStreamField"
        ],
        "Source": "Tutorial Websites"
    },
    "3881": {
        "Query": "Plain String UTF-8 communication using DataOutputStream",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Integer.parseInt()",
            "java.net.Socket.getOutputStream()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Integer",
            "java.net.Socket"
        ],
        "Source": "Tutorial Websites"
    },
    "3882": {
        "Query": "Playing Streaming Midi Audio",
        "GroundTruth": [
            "javax.sound.midi.MidiSystem.getSequencer()",
            "java.net.URL.openStream()",
            "javax.sound.midi.Sequencer.setSequence()",
            "javax.sound.midi.Sequencer.start()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiSystem",
            "java.net.URL",
            "javax.sound.midi.Sequencer"
        ],
        "Source": "Tutorial Websites"
    },
    "3883": {
        "Query": "Points Inside a Path",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3884": {
        "Query": "Polar To Cartesian Coordinate",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3885": {
        "Query": "Pop the last element off the array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3886": {
        "Query": "Populates specified array with random integers.",
        "GroundTruth": [
            "java.util.Random.nextInt()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "3887": {
        "Query": "Populates the given collection by replacing any existing contents with the given elements, in a null-safe way.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.clear()",
            "java.util.Collection.addAll()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "3888": {
        "Query": "Predicate for List processing",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.length()",
            "java.util.function.Predicate.test()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.util.function.Predicate"
        ],
        "Source": "Tutorial Websites"
    },
    "3889": {
        "Query": "Press ENTER key to continue",
        "GroundTruth": [
            "java.io.Console.readLine()"
        ],
        "APIClasses": [
            "java.io.Console"
        ],
        "Source": "Tutorial Websites"
    },
    "3890": {
        "Query": "Preventing Automatic Redirects in a HTTP Connection",
        "GroundTruth": [
            "java.net.HttpURLConnection.setFollowRedirects()",
            "java.net.URL.openConnection()",
            "java.net.HttpURLConnection.setInstanceFollowRedirects()"
        ],
        "APIClasses": [
            "java.net.HttpURLConnection",
            "java.net.URL",
            "java.net.HttpURLConnection"
        ],
        "Source": "Tutorial Websites"
    },
    "3891": {
        "Query": "Preventing a Bean Property from Being Serialized to XML",
        "GroundTruth": [
            "java.beans.Encoder.writeObject()"
        ],
        "APIClasses": [
            "java.beans.Encoder"
        ],
        "Source": "Tutorial Websites"
    },
    "3892": {
        "Query": "Preventing a Logger from Forwarding Log Records to Its Parent",
        "GroundTruth": [
            "java.util.logging.Logger.getLogger()",
            "java.util.logging.Logger.setUseParentHandlers()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "3893": {
        "Query": "Primitive type Default Byte Size",
        "GroundTruth": [
            "javax.sound.sampled.AudioFileFormat.Type.equals()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFileFormat.Type"
        ],
        "Source": "Tutorial Websites"
    },
    "3894": {
        "Query": "Print Map, sorted by Key.",
        "GroundTruth": [
            "java.util.Map.keySet()",
            "java.util.Collections.sort()",
            "java.util.Map.get()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "3895": {
        "Query": "Print a DOM document to stdout.",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()",
            "javax.xml.transform.Transformer.transform()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "3896": {
        "Query": "Print collection to console",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection",
            "java.util.Iterator"
        ],
        "Source": "Tutorial Websites"
    },
    "3897": {
        "Query": "Printing All Available Zone IDs",
        "GroundTruth": [
            "java.time.ZoneId.getAvailableZoneIds()"
        ],
        "APIClasses": [
            "java.time.ZoneId"
        ],
        "Source": "Tutorial Websites"
    },
    "3898": {
        "Query": "Printing a Message on the Standard Output Using Different Scripting Languages",
        "GroundTruth": [
            "javax.script.ScriptEngineManager.getEngineByName()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngineManager"
        ],
        "Source": "Tutorial Websites"
    },
    "3899": {
        "Query": "Printing a Message on the Standard Output Using Nashorn",
        "GroundTruth": [
            "javax.script.ScriptEngineManager.getEngineByName()"
        ],
        "APIClasses": [
            "javax.script.ScriptEngineManager"
        ],
        "Source": "Tutorial Websites"
    },
    "3900": {
        "Query": "Prints a textual representation of the given XML node to the specified PrintStream.",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3901": {
        "Query": "Prints all prime numbers till the given number.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3902": {
        "Query": "Prints out a pretty hex version of a byte array.",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3903": {
        "Query": "Prints string given in text with current time.",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.util.logging.SimpleFormatter.format()",
            "java.util.logging.XMLFormatter.format()",
            "java.util.logging.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.util.logging.SimpleFormatter",
            "java.util.logging.XMLFormatter",
            "java.util.logging.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "3904": {
        "Query": "Prints the current thread's details to the console.",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.management.ThreadInfo.getStackTrace()",
            "java.lang.Throwable.getStackTrace()",
            "java.lang.Thread.getStackTrace()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.management.ThreadInfo",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "3905": {
        "Query": "Private Constructor access via reflection",
        "GroundTruth": [
            "java.lang.Class.getDeclaredConstructor()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "3906": {
        "Query": "Private Instance Variable and Public Methods",
        "GroundTruth": [
            "java.lang.Double.isNaN()",
            "java.lang.Double.isInfinite()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3907": {
        "Query": "Private members of class Time1 are not accessible.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3908": {
        "Query": "Processing the contents of a directory by using the DirectoryStream interface",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.newDirectoryStream()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3909": {
        "Query": "Program demonstrating the use of mathematical functions",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.sin()",
            "java.lang.Math.cos()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3910": {
        "Query": "Provides the first item from a list, unless the list is null or empty, in which case null is returned.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.isEmpty()",
            "java.util.List.get()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "3911": {
        "Query": "Provides the first item of the given Iterable.",
        "GroundTruth": [
            "java.util.List.iterator()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "3912": {
        "Query": "Public method and field access",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3913": {
        "Query": "Public method and field from parent class",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3914": {
        "Query": "Puts the IEEE representation of the double provided into the array at the designated position",
        "GroundTruth": [
            "java.lang.Double.doubleToLongBits()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3915": {
        "Query": "Puts the current thread to sleep for the specified amount of time.",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.sleep()",
            "java.lang.Throwable.printStackTrace()",
            "java.lang.ThreadGroup.interrupt()",
            "java.lang.Thread.interrupt()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Throwable",
            "java.lang.ThreadGroup"
        ],
        "Source": "Tutorial Websites"
    },
    "3916": {
        "Query": "Puts the entire source array in the target array at offset offset.",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3917": {
        "Query": "Puts the given value in the given ConcurrentHashMap for the given key if no mapping exists, and returns the new value.",
        "GroundTruth": [
            "java.util.Map.get()",
            "java.util.Map.putIfAbsent()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "3918": {
        "Query": "Quadratic equation solver with double value",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3919": {
        "Query": "Quadratic equation solver with user input",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3920": {
        "Query": "Quote a XML string via CDATA",
        "GroundTruth": [
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3921": {
        "Query": "Quote a string, and write to a PrintWriter for XML.",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3922": {
        "Query": "Quotes a value in CSV format converter.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.replaceAll()",
            "java.lang.String.indexOf()",
            "java.lang.String.startsWith()",
            "java.lang.String.endsWith()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3923": {
        "Query": "Random Forest Image Classifier Trainer in weka",
        "GroundTruth": [
            "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.attribute()",
            "java.lang.System.currentTimeMillis()"
        ],
        "APIClasses": [
            "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3924": {
        "Query": "Random integer within a range",
        "GroundTruth": [
            "java.util.Scanner.nextInt()",
            "java.util.PrimitiveIterator.OfInt.nextInt()",
            "java.util.Random.nextInt()",
            "java.util.concurrent.ThreadLocalRandom.nextInt()",
            "java.util.SplittableRandom.nextInt()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.PrimitiveIterator.OfInt",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "3925": {
        "Query": "Randomly chooses from a uniform distribution of integers in the range [i, j)",
        "GroundTruth": [
            "java.util.Random.nextInt()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "3926": {
        "Query": "Randomly permute the Objects in an array.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3927": {
        "Query": "Re samples audio data using simple methods.",
        "GroundTruth": [
            "java.lang.Math.round()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3928": {
        "Query": "Read BigInteger from console using Scanner",
        "GroundTruth": [
            "java.util.Scanner.nextBigInteger()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "3929": {
        "Query": "Read JSON file from url Returns null if JSON file is not available",
        "GroundTruth": [
            "java.io.File.getAbsolutePath()",
            "java.io.Reader.close()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.Reader"
        ],
        "Source": "Tutorial Websites"
    },
    "3930": {
        "Query": "Read Number from Console and Check if it is a Palindrome Number",
        "GroundTruth": [
            "java.lang.Integer.parseInt()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3931": {
        "Query": "Read String from console using Scanner",
        "GroundTruth": [
            "java.util.Scanner.nextLine()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "3932": {
        "Query": "Read a double from the byte array at the given offset.",
        "GroundTruth": [
            "java.lang.Double.longBitsToDouble()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3933": {
        "Query": "Read a file input stream",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3934": {
        "Query": "Read a float from the byte array at the given offset.",
        "GroundTruth": [
            "java.lang.Float.intBitsToFloat()"
        ],
        "APIClasses": [
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "3935": {
        "Query": "Read a littleEndian short(16 bits) from DataInput",
        "GroundTruth": [
            "java.io.ObjectInputStream.readUnsignedByte()",
            "java.io.DataInputStream.readUnsignedByte()",
            "java.io.RandomAccessFile.readUnsignedByte()",
            "java.io.DataInput.readUnsignedByte()"
        ],
        "APIClasses": [
            "java.io.ObjectInputStream",
            "java.io.DataInputStream",
            "java.io.RandomAccessFile",
            "java.io.DataInput"
        ],
        "Source": "Tutorial Websites"
    },
    "3936": {
        "Query": "Read a text block by block using InputStream and FileInputStream",
        "GroundTruth": [
            "org.omg.CORBA.portable.InputStream.read()",
            "java.io.InputStream.close()"
        ],
        "APIClasses": [
            "org.omg.CORBA.portable.InputStream",
            "java.io.InputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "3937": {
        "Query": "Read a text file word by word",
        "GroundTruth": [
            "java.lang.Character.isWhitespace()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.Character",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3938": {
        "Query": "Read an ACL Using Files.getFileAttributeView()",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.getFileAttributeView()",
            "java.nio.file.attribute.AclFileAttributeView.getAcl()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.nio.file.attribute.AclFileAttributeView"
        ],
        "Source": "Tutorial Websites"
    },
    "3939": {
        "Query": "Read an integer from console",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3940": {
        "Query": "Read an unsigned short from a ByteBuffer",
        "GroundTruth": [
            "java.nio.Buffer.position()",
            "java.nio.ByteBuffer.getShort()"
        ],
        "APIClasses": [
            "java.nio.Buffer",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "3941": {
        "Query": "Read byte array using ByteArrayInputStream",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3942": {
        "Query": "Read byte by byte with InputStream unbuffered stream",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.newInputStream()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3943": {
        "Query": "Read char from console using Scanner",
        "GroundTruth": [
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3944": {
        "Query": "Read data from socket channel into byte array with default timeout",
        "GroundTruth": [
            "java.nio.ByteBuffer.wrap()",
            "java.lang.ref.Reference.clear()",
            "java.lang.Readable.read()",
            "java.lang.Process.getInputStream()",
            "org.omg.CORBA.portable.InputStream.read()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer",
            "java.lang.ref.Reference",
            "java.lang.Readable",
            "java.lang.Process",
            "org.omg.CORBA.portable.InputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "3945": {
        "Query": "Read file as a Input Stream from given resource",
        "GroundTruth": [
            "java.lang.ClassLoader.getSystemClassLoader()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Tutorial Websites"
    },
    "3946": {
        "Query": "Read file in byte array using FileInputStream",
        "GroundTruth": [
            "java.io.File.length()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3947": {
        "Query": "Read file using FileInputStream",
        "GroundTruth": [
            "java.io.File.getAbsolutePath()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3948": {
        "Query": "Read from URI wrapped in Path using buffered reader",
        "GroundTruth": [
            "java.nio.file.Files.newBufferedReader()",
            "java.nio.file.Paths.get()",
            "java.nio.charset.Charset.defaultCharset()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.nio.file.Paths",
            "java.nio.charset.Charset"
        ],
        "Source": "Tutorial Websites"
    },
    "3949": {
        "Query": "Read from file in Path type with buffered reader",
        "GroundTruth": [
            "java.nio.file.Files.newBufferedReader()",
            "java.nio.charset.Charset.defaultCharset()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.nio.charset.Charset"
        ],
        "Source": "Tutorial Websites"
    },
    "3950": {
        "Query": "Read int from console using Scanner",
        "GroundTruth": [
            "java.util.Scanner.hasNextInt()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "3951": {
        "Query": "Read int value from console with System.in",
        "GroundTruth": [
            "java.lang.Integer.parseInt()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3952": {
        "Query": "Read key from Properties",
        "GroundTruth": [
            "java.lang.System.load()",
            "java.lang.Runtime.load()",
            "java.lang.Throwable.printStackTrace()",
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Runtime",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "3953": {
        "Query": "Read line of characters from console using InputStream",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3954": {
        "Query": "Read number from file and add them up using Scanner",
        "GroundTruth": [
            "java.io.File.exists()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3955": {
        "Query": "Read properties with and without security manager",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3956": {
        "Query": "Read sprite sheet and return BufferedImage",
        "GroundTruth": [
            "javax.imageio.ImageIO.read()",
            "java.awt.image.BufferedImage.getSubimage()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO",
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "3957": {
        "Query": "Read string via Scanner",
        "GroundTruth": [
            "java.util.Scanner.nextLine()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "3958": {
        "Query": "Read text file through a buffered character stream",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3959": {
        "Query": "Read text file with encoding",
        "GroundTruth": [
            "java.nio.file.Files.readAllBytes()",
            "java.nio.file.Paths.get()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.nio.file.Paths"
        ],
        "Source": "Tutorial Websites"
    },
    "3960": {
        "Query": "Read the lastModifiedTime and lastAccessTime attributes of the target and sets them to the link.",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.createSymbolicLink()",
            "java.nio.file.Files.getAttribute()",
            "java.nio.file.Files.setAttribute()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3961": {
        "Query": "Read two-digit hexadecimal sequences from a text file and displays their decimal equivalents",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.substring()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "3962": {
        "Query": "Read using BufferedReader till the end of text file",
        "GroundTruth": [
            "java.io.Reader.close()"
        ],
        "APIClasses": [
            "java.io.Reader"
        ],
        "Source": "Tutorial Websites"
    },
    "3963": {
        "Query": "Reader to String Builder",
        "GroundTruth": [
            "java.lang.StringBuilder.append()",
            "java.lang.StringBuffer.append()",
            "java.lang.Appendable.append()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.Appendable"
        ],
        "Source": "Tutorial Websites"
    },
    "3964": {
        "Query": "Reading Text from a Socket",
        "GroundTruth": [
            "java.net.Socket.getInputStream()"
        ],
        "APIClasses": [
            "java.net.Socket"
        ],
        "Source": "Tutorial Websites"
    },
    "3965": {
        "Query": "Reading a File into a Byte Array",
        "GroundTruth": [
            "java.io.File.length()",
            "java.io.File.getName()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "3966": {
        "Query": "Reading a Small File  with the readAllBytes() Method",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.readAllBytes()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3967": {
        "Query": "Reading all of the lines of a file returned as a list",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.readAllLines()",
            "java.nio.charset.Charset.defaultCharset()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.nio.charset.Charset"
        ],
        "Source": "Tutorial Websites"
    },
    "3968": {
        "Query": "Reading an Image from a File, InputStream, or URL",
        "GroundTruth": [
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "3969": {
        "Query": "Reading an Image or Icon from a File",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "3970": {
        "Query": "Reading an integer value",
        "GroundTruth": [
            "java.util.Scanner.useLocale()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "3971": {
        "Query": "Reading from a Channel with a ByteBuffer",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocateDirect()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "3972": {
        "Query": "Reading text file with the readAllLines() Method",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.charset.Charset.forName()",
            "java.nio.file.Files.readAllLines()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.charset.Charset",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "3973": {
        "Query": "Reads 4 bytes and concatenates them into a String from RandomAccessFile",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3974": {
        "Query": "Reads a decimal value as a IEEE-11073 16-bits float from ByteBuffer",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3975": {
        "Query": "Reads a decimal value as a IEEE-11073 32-bits float from ByteBuffer",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3976": {
        "Query": "Reads a double from console",
        "GroundTruth": [
            "java.lang.Double.parseDouble()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "3977": {
        "Query": "Reads a file to determine the number of bytes it contains and then overwrites all those bytes with 0s",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3978": {
        "Query": "Reads a float from console",
        "GroundTruth": [
            "java.lang.Float.parseFloat()"
        ],
        "APIClasses": [
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "3979": {
        "Query": "Reads a long from console",
        "GroundTruth": [
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "3980": {
        "Query": "Reads a short from console",
        "GroundTruth": [
            "java.lang.Short.parseShort()"
        ],
        "APIClasses": [
            "java.lang.Short"
        ],
        "Source": "Tutorial Websites"
    },
    "3981": {
        "Query": "Reads a signature if it applies.",
        "GroundTruth": [
            "java.io.InputStream.mark()",
            "org.omg.CORBA.portable.InputStream.read()",
            "java.io.InputStream.reset()"
        ],
        "APIClasses": [
            "java.io.InputStream",
            "org.omg.CORBA.portable.InputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "3982": {
        "Query": "Reads a string from system clipboard.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()",
            "java.awt.datatransfer.Clipboard.getContents()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.awt.datatransfer.Clipboard"
        ],
        "Source": "Tutorial Websites"
    },
    "3983": {
        "Query": "Reads a string in UTF-8 encoding from a byte array.",
        "GroundTruth": [
            "java.lang.StringBuilder.append()",
            "java.lang.StringBuffer.append()",
            "java.lang.Appendable.append()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.Appendable"
        ],
        "Source": "Tutorial Websites"
    },
    "3984": {
        "Query": "Reads a string in UTF-8 encoding from a data stream in full and returns that string.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3985": {
        "Query": "Reads the path to the directory for temporary files from the configuration and returns it.",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3986": {
        "Query": "Rearranges the delimiters of given JavaFX split pane.",
        "GroundTruth": [
            "java.awt.List.getItems()",
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.awt.List",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3987": {
        "Query": "Receive AudioFormat from a TCP type connection",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()",
            "java.lang.Float.parseFloat()",
            "java.lang.Integer.parseInt()",
            "java.lang.Boolean.parseBoolean()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "3988": {
        "Query": "Rectangle2D From Center Point",
        "GroundTruth": [
            "java.awt.Point.getX()",
            "java.awt.Point.getY()"
        ],
        "APIClasses": [
            "java.awt.Point"
        ],
        "Source": "Tutorial Websites"
    },
    "3989": {
        "Query": "Recursive binary search method",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "3990": {
        "Query": "Recursive factorial method for BigInteger.",
        "GroundTruth": [
            "java.lang.String.compareTo()",
            "java.math.BigInteger.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "3991": {
        "Query": "Recursive fibonacci method with BigInteger",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.math.BigInteger.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "3992": {
        "Query": "Recursively Calculation of DouglasPeucker Algorithm",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3993": {
        "Query": "Recursively enables or disables all the AWT components contained in the containers of components.",
        "GroundTruth": [
            "java.awt.MenuComponent.AccessibleAWTMenuComponent.setEnabled()",
            "java.awt.Component.AccessibleAWTComponent.setEnabled()",
            "java.awt.Component.setEnabled()",
            "java.awt.MenuItem.setEnabled()",
            "java.awt.List.AccessibleAWTList.AccessibleAWTListChild.setEnabled()"
        ],
        "APIClasses": [
            "java.awt.MenuComponent.AccessibleAWTMenuComponent",
            "java.awt.Component.AccessibleAWTComponent",
            "java.awt.Component",
            "java.awt.MenuItem",
            "java.awt.List.AccessibleAWTList.AccessibleAWTListChild"
        ],
        "Source": "Tutorial Websites"
    },
    "3994": {
        "Query": "Recursively search the contents of the container to find a MenuItem or Button that uses this action.",
        "GroundTruth": [
            "java.awt.Container.getComponentCount()",
            "java.awt.Container.getComponent()"
        ],
        "APIClasses": [
            "java.awt.Container"
        ],
        "Source": "Tutorial Websites"
    },
    "3995": {
        "Query": "Recursively searches for enterprise annotations matching the filter.",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "3996": {
        "Query": "Recursively sets the enabled state of the component and its child components",
        "GroundTruth": [
            "java.awt.Component.setEnabled()",
            "java.awt.Container.getComponents()"
        ],
        "APIClasses": [
            "java.awt.Component",
            "java.awt.Container"
        ],
        "Source": "Tutorial Websites"
    },
    "3997": {
        "Query": "Redirecting Standard Output, and Error",
        "GroundTruth": [
            "java.lang.System.setOut()",
            "java.lang.System.setErr()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "3998": {
        "Query": "Reduces a given angle to a value between ?",
        "GroundTruth": [
            "java.lang.Math.IEEEremainder()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "3999": {
        "Query": "Refreshing a Row in an Updatable Result Set",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.ResultSet.refreshRow()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "4000": {
        "Query": "Register an UncaughtExceptionHandler on a specific thread.",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.setUncaughtExceptionHandler()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4001": {
        "Query": "Registers a keystroke to close the given dialog.",
        "GroundTruth": [
            "javax.swing.JComponent.registerKeyboardAction()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "4002": {
        "Query": "Registers the Escape key to close the given dialog.",
        "GroundTruth": [
            "javax.swing.KeyStroke.getKeyStroke()",
            "javax.swing.JComponent.registerKeyboardAction()"
        ],
        "APIClasses": [
            "javax.swing.KeyStroke",
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "4003": {
        "Query": "Regular Expression with Multiple Excludes",
        "GroundTruth": [
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "4004": {
        "Query": "Regularize the matrix using ridge regression",
        "GroundTruth": [
            "java.lang.Object.clone()",
            "java.lang.Enum.clone()",
            "java.lang.Thread.clone()",
            "javax.management.Query.times()",
            "java.lang.invoke.MethodHandles.identity()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Enum",
            "java.lang.Thread",
            "javax.management.Query",
            "java.lang.invoke.MethodHandles",
            "javax.management.Query",
            "javax.management.Query"
        ],
        "Source": "Tutorial Websites"
    },
    "4005": {
        "Query": "Reimplementing toString() Method of the Object Class in the SmartIntHolder Class",
        "GroundTruth": [
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4006": {
        "Query": "Remove a cookie by name and its default path \"/\" from Servlet.",
        "GroundTruth": [
            "java.net.HttpCookie.setMaxAge()",
            "java.net.HttpCookie.setPath()"
        ],
        "APIClasses": [
            "java.net.HttpCookie",
            "java.net.HttpCookie"
        ],
        "Source": "Tutorial Websites"
    },
    "4007": {
        "Query": "Remove a named attribute from JSP PageContext.",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4008": {
        "Query": "Remove all action listeners from a button Swing AbstractButton.",
        "GroundTruth": [
            "java.awt.Button.getActionListeners()",
            "java.awt.Button.removeActionListener()"
        ],
        "APIClasses": [
            "java.awt.Button"
        ],
        "Source": "Tutorial Websites"
    },
    "4009": {
        "Query": "Remove all elements from HashSet",
        "GroundTruth": [
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4010": {
        "Query": "Remove all elements from LinkedHashSet",
        "GroundTruth": [
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4011": {
        "Query": "Remove all elements from TreeSet",
        "GroundTruth": [
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4012": {
        "Query": "Remove all the opaqueness of the given components and child components.",
        "GroundTruth": [
            "javax.swing.JComponent.setOpaque()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "4013": {
        "Query": "Remove all the rows from a DefaultTableModel",
        "GroundTruth": [
            "javax.swing.table.DefaultTableModel.removeRow()"
        ],
        "APIClasses": [
            "javax.swing.table.DefaultTableModel"
        ],
        "Source": "Tutorial Websites"
    },
    "4014": {
        "Query": "Remove all values from TreeMap",
        "GroundTruth": [
            "java.util.TreeMap.put()",
            "java.util.TreeMap.clear()",
            "java.util.TreeMap.size()"
        ],
        "APIClasses": [
            "java.util.TreeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "4015": {
        "Query": "Remove an element from an array.",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.lang.Object.getClass()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.Object",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4016": {
        "Query": "Remove an element from specified index of ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.ArrayList.remove()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Tutorial Websites"
    },
    "4017": {
        "Query": "Remove element element with index on array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4018": {
        "Query": "Remove value from TreeMap",
        "GroundTruth": [
            "java.util.TreeMap.put()",
            "java.util.TreeMap.remove()"
        ],
        "APIClasses": [
            "java.util.TreeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "4019": {
        "Query": "Remove/Clear the value of the passed in key in ThreadLocal",
        "GroundTruth": [
            "java.lang.ThreadLocal.get()"
        ],
        "APIClasses": [
            "java.lang.ThreadLocal"
        ],
        "Source": "Tutorial Websites"
    },
    "4020": {
        "Query": "Removes a windows byte order mark if present in XML String.",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.startsWith()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4021": {
        "Query": "Removes all JTable columns of the given column model.",
        "GroundTruth": [
            "java.util.Collections.list()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4022": {
        "Query": "Removes all apps in /var/mobile/Applications.",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Process.waitFor()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Process"
        ],
        "Source": "Tutorial Websites"
    },
    "4023": {
        "Query": "Removes all carriage returns from a string",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4024": {
        "Query": "Removes all comment blocks and XML declaration using regex",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4025": {
        "Query": "Removes all elements from the Collection",
        "GroundTruth": [
            "java.util.Collection.remove()"
        ],
        "APIClasses": [
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "4026": {
        "Query": "Removes all extra whitespace (multiple spaces or tabs) from a string",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4027": {
        "Query": "Removes all extra whitespace characters from the passed String.",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.Character.isWhitespace()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "4028": {
        "Query": "Removes all illegal filename characters from a given String",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.io.RandomAccessFile.length()",
            "java.io.File.length()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.io.RandomAccessFile",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "4029": {
        "Query": "Removes all vocals from a given string vis recursive function",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4030": {
        "Query": "Removes any next siblings text XML nodes",
        "GroundTruth": [
            "org.w3c.dom.Node.getParentNode()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "4031": {
        "Query": "Removes any previous siblings text XML nodes",
        "GroundTruth": [
            "org.w3c.dom.Node.getParentNode()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "4032": {
        "Query": "Removes control characters (char <= 32) from both ends of this String, handling null by returning an empty String (\"\").",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4033": {
        "Query": "Removes duplicate values from a BigInteger array",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.HashSet.size()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.HashSet"
        ],
        "Source": "Tutorial Websites"
    },
    "4034": {
        "Query": "Removes file extension from a file name",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4035": {
        "Query": "Removes the duplicates from List.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Set.addAll()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "4036": {
        "Query": "Removes the items array elements from the end of the array.",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.lang.Object.getClass()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.Object",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4037": {
        "Query": "Removing All the Attributes in a DOM Element",
        "GroundTruth": [
            "javax.swing.text.Element.getAttributes()",
            "org.w3c.dom.NamedNodeMap.removeNamedItem()"
        ],
        "APIClasses": [
            "javax.swing.text.Element",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "4038": {
        "Query": "Removing Duplicate Whitespace in a String",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "4039": {
        "Query": "Removing a Node to a JTree Component",
        "GroundTruth": [
            "javax.swing.tree.TreePath.getLastPathComponent()",
            "javax.swing.tree.DefaultTreeModel.removeNodeFromParent()",
            "javax.swing.tree.DefaultTreeModel.setRoot()"
        ],
        "APIClasses": [
            "javax.swing.tree.TreePath",
            "javax.swing.tree.DefaultTreeModel",
            "javax.swing.tree.DefaultTreeModel"
        ],
        "Source": "Tutorial Websites"
    },
    "4040": {
        "Query": "Removing a Preference Node",
        "GroundTruth": [
            "java.util.prefs.Preferences.userRoot()"
        ],
        "APIClasses": [
            "java.util.prefs.Preferences"
        ],
        "Source": "Tutorial Websites"
    },
    "4041": {
        "Query": "Removing a Preference from a Preference Node",
        "GroundTruth": [
            "java.util.prefs.Preferences.userNodeForPackage()"
        ],
        "APIClasses": [
            "java.util.prefs.Preferences"
        ],
        "Source": "Tutorial Websites"
    },
    "4042": {
        "Query": "Removing accents and diacritics from given text .",
        "GroundTruth": [
            "java.text.Normalizer.normalize()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.text.Normalizer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4043": {
        "Query": "Removing redundancies by normalizing a path",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Path.toAbsolutePath()",
            "java.nio.file.Path.toUri()",
            "java.nio.file.Path.normalize()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "4044": {
        "Query": "Removing the Column Headers from a Scrollable in a JTable Component",
        "GroundTruth": [
            "javax.swing.JTable.setTableHeader()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "4045": {
        "Query": "Rename file or an empty directory",
        "GroundTruth": [
            "java.io.File.renameTo()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "4046": {
        "Query": "Renaming a File or Directory",
        "GroundTruth": [
            "java.io.File.renameTo()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "4047": {
        "Query": "Renaming files using File object",
        "GroundTruth": [
            "java.io.File.renameTo()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "4048": {
        "Query": "Renormalizes the array so that its L2 norm is 1 (up to computational errors).",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toString()",
            "java.lang.System.getProperty()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.System",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4049": {
        "Query": "Repaints the parent of the given component.",
        "GroundTruth": [
            "javax.swing.SwingUtilities.getAncestorOfClass()",
            "java.awt.Component.revalidate()",
            "java.awt.Component.repaint()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "4050": {
        "Query": "Replace All Elements Of ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.fill()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4051": {
        "Query": "Replace All Elements Of Vector",
        "GroundTruth": [
            "java.util.Collections.fill()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4052": {
        "Query": "Replace all after match for a word in regular expression",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4053": {
        "Query": "Replace all after match for wildcard in regular expression",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4054": {
        "Query": "Replace all occurrences of specified element of ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.replaceAll()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4055": {
        "Query": "Replace all occurrences of specified element of Vector using Collections.replaceAll",
        "GroundTruth": [
            "java.util.Collections.replaceAll()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4056": {
        "Query": "Replace an element at specified index of ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.ArrayList.set()",
            "java.util.ArrayList.size()",
            "java.util.ArrayList.get()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Tutorial Websites"
    },
    "4057": {
        "Query": "Replace char in String",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4058": {
        "Query": "Replace greek character entity names with entity names that work in HTML.",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.util.Map.Entry.getKey()",
            "java.util.Map.Entry.getValue()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Map.Entry"
        ],
        "Source": "Tutorial Websites"
    },
    "4059": {
        "Query": "Replace invalid XML chars by spaces.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4060": {
        "Query": "Replace string using regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4061": {
        "Query": "Replace value in StringBuffer",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4062": {
        "Query": "Replaces the final component in the supplied path with the specified new component.",
        "GroundTruth": [
            "java.lang.String.lastIndexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4063": {
        "Query": "Replaces the value of an entity in an XML string and returns the updated XML string.",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()",
            "java.util.jar.Attributes.Name.equals()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.jar.Attributes.Name",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4064": {
        "Query": "Report Spam to Twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4065": {
        "Query": "Report Spam using twitter api",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4066": {
        "Query": "Reporting  the  lexicographically  minimum  string  of  the command line arguments",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4067": {
        "Query": "Reports all the interesting information in an EventSetDescriptor",
        "GroundTruth": [
            "java.beans.EventSetDescriptor.getListenerType()",
            "java.beans.EventSetDescriptor.getGetListenerMethod()",
            "java.beans.EventSetDescriptor.getAddListenerMethod()",
            "java.beans.EventSetDescriptor.getRemoveListenerMethod()"
        ],
        "APIClasses": [
            "java.beans.EventSetDescriptor",
            "java.beans.EventSetDescriptor",
            "java.beans.EventSetDescriptor",
            "java.beans.EventSetDescriptor"
        ],
        "Source": "Tutorial Websites"
    },
    "4068": {
        "Query": "Require the JavaFX text field to contain numeric digits only.",
        "GroundTruth": [
            "java.lang.String.matches()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4069": {
        "Query": "Reset value in text field with FocusListener",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4070": {
        "Query": "Resets cookie values in the request and response.",
        "GroundTruth": [
            "java.net.CookieStore.getCookies()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.net.CookieStore",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4071": {
        "Query": "Resizes a JDialog by a given factor based on the client's screen size.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()",
            "java.lang.Math.round()",
            "java.awt.Window.setLocationRelativeTo()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.lang.Math",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "4072": {
        "Query": "Resolve the annotation's class.",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "4073": {
        "Query": "Resolve the given jar file URL into a Jar File object.",
        "GroundTruth": [
            "java.lang.String.startsWith()",
            "java.net.URI.getSchemeSpecificPart()",
            "java.lang.String.replaceAll()",
            "java.lang.String.substring()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.net.URI"
        ],
        "Source": "Tutorial Websites"
    },
    "4074": {
        "Query": "Resolve the passed path against the current path's parent path",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Path.resolveSibling()",
            "java.nio.file.Path.toString()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "4075": {
        "Query": "Rethrowing an Exception to Hide the Location of the Original Exception",
        "GroundTruth": [
            "java.lang.Throwable.fillInStackTrace()"
        ],
        "APIClasses": [
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "4076": {
        "Query": "Rethrowing exceptions in Java",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.delete()",
            "java.nio.file.Path.toFile()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "4077": {
        "Query": "Rethrowing the Caught Exception",
        "GroundTruth": [
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4078": {
        "Query": "Retrieve Data from apache hadoop hbase HTable",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4079": {
        "Query": "Retrieve FileStoreAttributeView classes that provide a read-only or updatable view of a set of file store attributes",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.FileSystem.getFileStores()",
            "java.nio.file.FileStore.getFileStoreAttributeView()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.FileSystem",
            "java.nio.file.FileStore"
        ],
        "Source": "Tutorial Websites"
    },
    "4080": {
        "Query": "Retrieve a Print Service with a name containing the specified Printer Name; will return null if not found.",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.awt.print.PrinterJob.lookupPrintServices()",
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.print.PrinterJob"
        ],
        "Source": "Tutorial Websites"
    },
    "4081": {
        "Query": "Retrieve a byte from a byte array.",
        "GroundTruth": [
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4082": {
        "Query": "Retrieve the amount of elapsed hours between the two given calendars.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()",
            "java.util.Calendar.after()",
            "java.util.Date.after()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "4083": {
        "Query": "Retrieve the amount of elapsed milliseconds between the two given calendars.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()",
            "java.util.Calendar.after()",
            "java.util.Date.after()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "4084": {
        "Query": "Retrieve the amount of elapsed minutes between the two given calendars.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()",
            "java.util.Calendar.after()",
            "java.util.Date.after()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "4085": {
        "Query": "Retrieve the amount of elapsed seconds between the two given calendars.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()",
            "java.util.Calendar.after()",
            "java.util.Date.after()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "4086": {
        "Query": "Retrieve the default value of the \"value\" attribute of a single-element Annotation, given an annotation instance.",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.Class.getDeclaredMethod()",
            "java.lang.reflect.Method.getDefaultValue()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation",
            "java.lang.Class",
            "java.lang.reflect.Method"
        ],
        "Source": "Tutorial Websites"
    },
    "4087": {
        "Query": "Retrieve the value of the \"value\" attribute of a single-element Annotation, given an annotation instance.",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.Class.getDeclaredMethod()",
            "java.lang.reflect.Method.invoke()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation",
            "java.lang.Class",
            "java.lang.reflect.Method"
        ],
        "Source": "Tutorial Websites"
    },
    "4088": {
        "Query": "Retrieves a List of Printer Service Names.",
        "GroundTruth": [
            "java.awt.print.PrinterJob.lookupPrintServices()",
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.awt.print.PrinterJob",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4089": {
        "Query": "Retrieves a null terminated substring from an array of bytes.",
        "GroundTruth": [
            "java.lang.StringBuilder.append()",
            "java.lang.StringBuffer.append()",
            "java.lang.Appendable.append()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.Appendable"
        ],
        "Source": "Tutorial Websites"
    },
    "4090": {
        "Query": "Retrieves a setter name based on a field name passed in",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.substring()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4091": {
        "Query": "Retrieves the first element from a collection that matches a predicate.",
        "GroundTruth": [
            "java.util.function.LongPredicate.test()",
            "java.util.function.BiPredicate.test()",
            "java.util.function.DoublePredicate.test()",
            "java.util.function.Predicate.test()",
            "java.util.function.IntPredicate.test()"
        ],
        "APIClasses": [
            "java.util.function.LongPredicate",
            "java.util.function.BiPredicate",
            "java.util.function.DoublePredicate",
            "java.util.function.Predicate",
            "java.util.function.IntPredicate"
        ],
        "Source": "Tutorial Websites"
    },
    "4092": {
        "Query": "Retrieves the hex representation of the specified colour.",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4093": {
        "Query": "Retrieves the integer value of a subarray of bytes.",
        "GroundTruth": [
            "java.util.Arrays.copyOfRange()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4094": {
        "Query": "Retrieves the long value of a subarray of bytes.",
        "GroundTruth": [
            "java.util.Arrays.copyOfRange()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4095": {
        "Query": "Retrieves the resource as an input stream via the context class loader of the current thread, and if not found, via the class loaders of the optionally specified classes in the order of their specification, and if not found, from the class loader of ClassLoaderHelper as the last resort.",
        "GroundTruth": [
            "java.net.URL.openStream()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()"
        ],
        "APIClasses": [
            "java.net.URL",
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4096": {
        "Query": "Retrieves the resource via the context class loader of the current thread, and if not found, via the class loaders of the optionally specified classes in the order of their specification, and if not found, from the class loader of ClassLoaderHelper as the last resort.",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4097": {
        "Query": "Retrieving Text from the System Clipboard",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "4098": {
        "Query": "Retrieving a Key Pair from a Key Store",
        "GroundTruth": [
            "java.security.KeyStore.getKey()",
            "java.security.KeyStore.getCertificate()"
        ],
        "APIClasses": [
            "java.security.KeyStore"
        ],
        "Source": "Tutorial Websites"
    },
    "4099": {
        "Query": "Retrieving a Predefined Color by Name",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.lang.reflect.Field.get()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "4100": {
        "Query": "Retrieving fields list of specified class If recursively is true, retrieving fields from all class hierarchy",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()",
            "java.util.Collections.addAll()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4101": {
        "Query": "Retrieving the Color Chooser Panels in a JColorChooser Dialog",
        "GroundTruth": [
            "javax.swing.JColorChooser.getChooserPanels()",
            "java.lang.Object.getClass()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "javax.swing.JColorChooser",
            "java.lang.Object",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4102": {
        "Query": "Retrieving the Parent and Child Nodes of a Preference Node",
        "GroundTruth": [
            "java.util.prefs.Preferences.userNodeForPackage()"
        ],
        "APIClasses": [
            "java.util.prefs.Preferences"
        ],
        "Source": "Tutorial Websites"
    },
    "4103": {
        "Query": "Return a String of the name of status byte of a MidiMessage.",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getStatus()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage"
        ],
        "Source": "Tutorial Websites"
    },
    "4104": {
        "Query": "Return a Timestamp for right now",
        "GroundTruth": [
            "java.lang.System.currentTimeMillis()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4105": {
        "Query": "Return a Vantage Pro two-byte representation of rain fall.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4106": {
        "Query": "Return a XML attribute setting.",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4107": {
        "Query": "Return a collection as Constant List",
        "GroundTruth": [
            "java.util.Collections.unmodifiableList()",
            "java.util.Arrays.asList()",
            "java.util.Arrays.copyOf()",
            "java.util.Vector.trimToSize()",
            "java.util.ArrayList.trimToSize()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.util.Arrays",
            "java.util.Vector",
            "java.util.ArrayList"
        ],
        "Source": "Tutorial Websites"
    },
    "4108": {
        "Query": "Return a list of elements based on xPath",
        "GroundTruth": [
            "javax.xml.xpath.XPathFactory.newInstance()",
            "javax.xml.xpath.XPathFactory.newXPath()",
            "javax.xml.xpath.XPath.compile()"
        ],
        "APIClasses": [
            "javax.xml.xpath.XPathFactory",
            "javax.xml.xpath.XPath"
        ],
        "Source": "Tutorial Websites"
    },
    "4109": {
        "Query": "Return a long as a string but capped as a 32-bit signed value.",
        "GroundTruth": [
            "java.lang.Long.toString()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "4110": {
        "Query": "Return a long value from bytearray \"ar\" starting at the offset \"offset\".",
        "GroundTruth": [
            "java.lang.reflect.Array.getInt()",
            "java.lang.reflect.Field.getInt()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "4111": {
        "Query": "Return a new matrix with the columns of matrix1 joined on the back of matrix2",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4112": {
        "Query": "Return a range Of int between two Min and Max, return a List<String>",
        "GroundTruth": [
            "java.util.Set.add()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "4113": {
        "Query": "Return a range of int as array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4114": {
        "Query": "Return a string representing the name of the file expected to contain the source code for the specified object.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.String.replace()",
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4115": {
        "Query": "Return a vector containing all the notes from all Notes that are playing at tick in MIDI.",
        "GroundTruth": [
            "javax.sound.midi.Track.add()"
        ],
        "APIClasses": [
            "javax.sound.midi.Track"
        ],
        "Source": "Tutorial Websites"
    },
    "4116": {
        "Query": "Return alphas shaded color.",
        "GroundTruth": [
            "java.awt.Color.getRGBColorComponents()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4117": {
        "Query": "Return an encoded String for url from value",
        "GroundTruth": [
            "java.net.URLEncoder.encode()",
            "java.lang.Throwable.printStackTrace()"
        ],
        "APIClasses": [
            "java.net.URLEncoder",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "4118": {
        "Query": "Return array of all stop codons for the configured genetic code - stop codons as 3 letter nucleotide letters eg \"TGA\"",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4119": {
        "Query": "Return distance between the line defined by (x0,y0) and (x1,y1) and the point (x,y).",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4120": {
        "Query": "Return largest of four numbers.",
        "GroundTruth": [
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4121": {
        "Query": "Return month in Month representation from String .",
        "GroundTruth": [
            "java.time.Month.of()",
            "java.util.Calendar.get()",
            "java.lang.Integer.parseInt()",
            "java.util.Calendar.getInstance()"
        ],
        "APIClasses": [
            "java.time.Month",
            "java.util.Calendar",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4122": {
        "Query": "Return name of attribute assuming method is a mutator or accessor.",
        "GroundTruth": [
            "java.lang.reflect.Method.getName()",
            "java.lang.String.startsWith()",
            "java.lang.Character.toLowerCase()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method",
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "4123": {
        "Query": "Return natural log of a double.",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4124": {
        "Query": "Return the \"Version\" entry from the given JAR's manifest file.",
        "GroundTruth": [
            "java.util.jar.JarFile.getManifest()"
        ],
        "APIClasses": [
            "java.util.jar.JarFile"
        ],
        "Source": "Tutorial Websites"
    },
    "4125": {
        "Query": "Return the \"build Date\" entry from the given JAR's manifest file.",
        "GroundTruth": [
            "java.util.jar.JarFile.getManifest()"
        ],
        "APIClasses": [
            "java.util.jar.JarFile"
        ],
        "Source": "Tutorial Websites"
    },
    "4126": {
        "Query": "Return the \"distance\" between two colors.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.awt.Color.getColorComponents()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.Color",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4127": {
        "Query": "Return the JSF parent Naming Container of the component passed as argument.",
        "GroundTruth": [
            "java.awt.Component.getParent()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "4128": {
        "Query": "Return the accessor method for attribute with specified name.",
        "GroundTruth": [
            "java.lang.Character.toUpperCase()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.Character",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4129": {
        "Query": "Return the angle between to vectors in radians",
        "GroundTruth": [
            "java.lang.Math.acos()",
            "java.lang.StrictMath.acos()",
            "java.lang.Math.sqrt()",
            "java.lang.StrictMath.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4130": {
        "Query": "Return the contangent of a double.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4131": {
        "Query": "Return the cosines of the angle between to vectors",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.StrictMath.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4132": {
        "Query": "Return the default ClassLoader to use: typically the thread context ClassLoader, if available; the ClassLoader that loaded the ClassUtils class will be used as fallback.",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4133": {
        "Query": "Return the distance between the given two points described vector v1 and v2.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.StrictMath.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4134": {
        "Query": "Return the equivalent AWT Color of the supplied hexString in format eg #FF33D2",
        "GroundTruth": [
            "java.lang.String.substring()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4135": {
        "Query": "Return the given color to hex code.",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4136": {
        "Query": "Return the greatest common divisor of a and b, consistently with BigInteger#gcd(BigInteger) .",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Long.numberOfTrailingZeros()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "4137": {
        "Query": "Return the hyperbolic cosine of a double.",
        "GroundTruth": [
            "java.lang.Math.exp()",
            "java.lang.Math.abs()",
            "java.lang.Double.isNaN()",
            "java.lang.Double.isInfinite()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4138": {
        "Query": "Return the hyperbolic tangent of a double.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Double.isNaN()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4139": {
        "Query": "Return the inverse (arc) hyperbolic cosine of a double.",
        "GroundTruth": [
            "java.lang.Double.isNaN()",
            "java.lang.Math.sqrt()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4140": {
        "Query": "Return the inverse (arc) hyperbolic sine of a double.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Double.isNaN()",
            "java.lang.Math.sqrt()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4141": {
        "Query": "Return the last throwable in the chain.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getMethod()",
            "java.lang.reflect.Method.invoke()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class",
            "java.lang.reflect.Method"
        ],
        "Source": "Tutorial Websites"
    },
    "4142": {
        "Query": "Return the length of a vector, a.k.a the norm or magnitude",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.StrictMath.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4143": {
        "Query": "Return the length of a vector.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4144": {
        "Query": "Return the max resolution possible across all monitors",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getScreenDevices()",
            "java.awt.GraphicsDevice.getDisplayMode()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice"
        ],
        "Source": "Tutorial Websites"
    },
    "4145": {
        "Query": "Return the minimum Euclidean distance from each point to any other observation.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4146": {
        "Query": "Return the minimum of three values.",
        "GroundTruth": [
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4147": {
        "Query": "Return the month abbreviation for the specified month, which must be a two-digit String.",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4148": {
        "Query": "Return the note value for a note on or note off event for MIDI.",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getMessage()",
            "javax.sound.midi.MidiEvent.getMessage()",
            "javax.sound.midi.MidiMessage.getStatus()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.MidiEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "4149": {
        "Query": "Return the number of note on and note off events in track for MIDI.",
        "GroundTruth": [
            "javax.sound.midi.Track.size()",
            "javax.sound.midi.Track.get()",
            "javax.sound.midi.MidiMessage.getMessage()",
            "javax.sound.midi.MidiEvent.getMessage()",
            "javax.sound.midi.MidiMessage.getStatus()"
        ],
        "APIClasses": [
            "javax.sound.midi.Track",
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.MidiEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "4150": {
        "Query": "Return the reverse complement version of a DNA string in upper case.",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4151": {
        "Query": "Return the signature of method as an array of strings.",
        "GroundTruth": [
            "java.lang.reflect.Method.getParameterTypes()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method"
        ],
        "Source": "Tutorial Websites"
    },
    "4152": {
        "Query": "Return the standard deviation of all the elements in array",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4153": {
        "Query": "Return the two least significant bytes of a value.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4154": {
        "Query": "Return the value of BigInteger as a byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.math.BigInteger.toByteArray()",
            "java.math.BigInteger.bitLength()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.math.BigInteger",
            "java.math.BigInteger",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4155": {
        "Query": "Return the velocity for a note on or note off event for MIDI.",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getMessage()",
            "javax.sound.midi.MidiEvent.getMessage()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.MidiEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "4156": {
        "Query": "Return true if event is a Note Off event for MIDI.",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getMessage()",
            "javax.sound.midi.MidiEvent.getMessage()",
            "javax.sound.midi.MidiMessage.getStatus()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.MidiEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "4157": {
        "Query": "Return true if event is a Note On MIDI event.",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getMessage()",
            "javax.sound.midi.MidiEvent.getMessage()",
            "javax.sound.midi.MidiMessage.getStatus()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.MidiEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "4158": {
        "Query": "Return true if message is a Note Off message for MIDI.",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getStatus()",
            "javax.sound.midi.MidiMessage.getMessage()",
            "javax.sound.midi.MidiEvent.getMessage()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.MidiEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "4159": {
        "Query": "Return true if message is a Note On MIDI message.",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getStatus()",
            "javax.sound.midi.MidiMessage.getMessage()",
            "javax.sound.midi.MidiEvent.getMessage()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.MidiEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "4160": {
        "Query": "Return true if method matches naming convention for mutator.",
        "GroundTruth": [
            "java.lang.reflect.Method.getName()",
            "javax.naming.Name.startsWith()",
            "java.lang.String.length()",
            "java.lang.reflect.Method.getGenericReturnType()",
            "java.lang.reflect.Method.getParameterTypes()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method",
            "javax.naming.Name",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4161": {
        "Query": "Return true if the combination of mouse and keyboard buttons used to select objects has been pressed (left click)",
        "GroundTruth": [
            "java.awt.event.MouseEvent.getClickCount()"
        ],
        "APIClasses": [
            "java.awt.event.MouseEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "4162": {
        "Query": "Return whether a key event KeyStroke matches the mnemonic of a provided action.",
        "GroundTruth": [
            "javax.swing.Action.getValue()",
            "javax.swing.KeyStroke.getKeyStrokeForEvent()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "javax.swing.Action",
            "javax.swing.KeyStroke",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4163": {
        "Query": "Returns Gamma function of x.",
        "GroundTruth": [
            "java.lang.Math.floor()",
            "java.lang.Math.exp()",
            "java.lang.Math.log()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4164": {
        "Query": "Returns Least absolute deviation DV = sqrt ( 1/N * SUM | Xi - mu | )",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4165": {
        "Query": "Returns LocalDate date of the first day of month to which provided date belongs to.",
        "GroundTruth": [
            "java.time.ZonedDateTime.withDayOfMonth()",
            "java.time.LocalDateTime.withDayOfMonth()",
            "java.time.MonthDay.withDayOfMonth()",
            "java.time.OffsetDateTime.withDayOfMonth()",
            "java.time.LocalDate.withDayOfMonth()"
        ],
        "APIClasses": [
            "java.time.ZonedDateTime",
            "java.time.LocalDateTime",
            "java.time.MonthDay",
            "java.time.OffsetDateTime",
            "java.time.LocalDate"
        ],
        "Source": "Tutorial Websites"
    },
    "4166": {
        "Query": "Returns MAD - median of the absolute values",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4167": {
        "Query": "Returns RGBA from a HEX string (# should not be included)",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.substring()",
            "java.lang.Integer.parseInt()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4168": {
        "Query": "Returns The array list of JTable columns.",
        "GroundTruth": [
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.nextElement()",
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.Enumeration",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4169": {
        "Query": "Returns a *copy* of a subimage of image.",
        "GroundTruth": [
            "java.awt.Graphics2D.drawRenderedImage()",
            "java.awt.geom.AffineTransform.getTranslateInstance()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D",
            "java.awt.geom.AffineTransform"
        ],
        "Source": "Tutorial Websites"
    },
    "4170": {
        "Query": "Returns a 2-D array that represents a triangle from Project Euler questions",
        "GroundTruth": [
            "java.lang.AutoCloseable.close()",
            "java.lang.String.split()",
            "java.lang.Integer.parseInt()",
            "java.lang.Throwable.printStackTrace()"
        ],
        "APIClasses": [
            "java.lang.AutoCloseable",
            "java.lang.String",
            "java.lang.Integer",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "4171": {
        "Query": "Returns a Color for an object that is determined by the object's hash code.",
        "GroundTruth": [
            "java.awt.Color.darker()",
            "java.lang.Math.abs()",
            "java.lang.String.hashCode()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.lang.Math",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4172": {
        "Query": "Returns a Constructor for the given method signature, or null if no such Constructor can be found.",
        "GroundTruth": [
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "4173": {
        "Query": "Returns a DOM implementation that has the following features: Core 3.0 XML 3.0 LS",
        "GroundTruth": [
            "org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance()"
        ],
        "APIClasses": [
            "org.w3c.dom.bootstrap.DOMImplementationRegistry"
        ],
        "Source": "Tutorial Websites"
    },
    "4174": {
        "Query": "Returns a JPanel with the specified component nested inside it",
        "GroundTruth": [
            "java.awt.Container.add()"
        ],
        "APIClasses": [
            "java.awt.Container"
        ],
        "Source": "Tutorial Websites"
    },
    "4175": {
        "Query": "Returns a JavaFX ObservableList containing Stage s created at this point.",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "4176": {
        "Query": "Returns a List with the given functions applied using Lambda.",
        "GroundTruth": [
            "java.util.function.Function.identity()"
        ],
        "APIClasses": [
            "java.util.function.Function"
        ],
        "Source": "Tutorial Websites"
    },
    "4177": {
        "Query": "Returns a LocalDateTime instance for the specified date with time set to 12:00:00.",
        "GroundTruth": [
            "java.time.LocalDate.now()",
            "java.time.LocalDateTime.of()",
            "java.time.LocalTime.of()"
        ],
        "APIClasses": [
            "java.time.LocalDate",
            "java.time.LocalDateTime",
            "java.time.LocalTime"
        ],
        "Source": "Tutorial Websites"
    },
    "4178": {
        "Query": "Returns a Method object corresponding to a getter that retrieves an instance of componentClass from target.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4179": {
        "Query": "Returns a PreparedStatement of the given connection, set with the given SQL query and the given parameter values.",
        "GroundTruth": [
            "java.sql.Connection.prepareStatement()",
            "java.sql.Ref.setObject()",
            "java.sql.PreparedStatement.setObject()",
            "java.sql.CallableStatement.setObject()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.Ref",
            "java.sql.PreparedStatement",
            "java.sql.CallableStatement"
        ],
        "Source": "Tutorial Websites"
    },
    "4180": {
        "Query": "Returns a bean descriptor for specified class.",
        "GroundTruth": [
            "java.beans.Introspector.getBeanInfo()"
        ],
        "APIClasses": [
            "java.beans.Introspector"
        ],
        "Source": "Tutorial Websites"
    },
    "4181": {
        "Query": "Returns a button to add to a panel in a tabbed pane.",
        "GroundTruth": [
            "javax.swing.JComponent.setOpaque()",
            "java.lang.System.getProperty()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.indexOf()",
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4182": {
        "Query": "Returns a byte array left padded of pad Size zero bytes",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4183": {
        "Query": "Returns a byte array left trimmed of trim Size elements",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.util.Arrays.copyOfRange()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4184": {
        "Query": "Returns a color identical to the given color but with a new alpha.",
        "GroundTruth": [
            "java.awt.Color.getRGBColorComponents()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4185": {
        "Query": "Returns a color to use for \"error\" text in a text field.",
        "GroundTruth": [
            "javax.swing.UIManager.getColor()"
        ],
        "APIClasses": [
            "javax.swing.UIManager"
        ],
        "Source": "Tutorial Websites"
    },
    "4186": {
        "Query": "Returns a color whose brightness has been scaled by the provided factor.",
        "GroundTruth": [
            "java.awt.Color.RGBtoHSB()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.awt.Color.getHSBColor()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4187": {
        "Query": "Returns a constructor with single argument.",
        "GroundTruth": [
            "java.lang.reflect.Modifier.isPublic()"
        ],
        "APIClasses": [
            "java.lang.reflect.Modifier"
        ],
        "Source": "Tutorial Websites"
    },
    "4188": {
        "Query": "Returns a copy of the array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()",
            "java.lang.String.toString()",
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4189": {
        "Query": "Returns a copy of the given array of the given length.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4190": {
        "Query": "Returns a copy of the rgb colour brightened up by the given amount.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.max()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4191": {
        "Query": "Returns a darker version of the given color by the given factor.",
        "GroundTruth": [
            "java.awt.Color.getRGBComponents()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4192": {
        "Query": "Returns a darker version of the given color.",
        "GroundTruth": [
            "java.lang.Math.max()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.awt.Color.getAlpha()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4193": {
        "Query": "Returns a default extension for a given mime-type, or an empty string if the mimetype is unknown.",
        "GroundTruth": [
            "javax.sound.sampled.AudioFileFormat.Type.equals()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFileFormat.Type"
        ],
        "Source": "Tutorial Websites"
    },
    "4194": {
        "Query": "Returns a double representation of the Binomial Coefficient, \"n choose k\", the number of k-element subsets that can be selected from an n-element set.",
        "GroundTruth": [
            "java.lang.Math.floor()",
            "java.lang.Math.exp()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4195": {
        "Query": "Returns a duplicates of an array.",
        "GroundTruth": [
            "java.lang.reflect.Array.getLength()",
            "java.lang.reflect.Array.newInstance()",
            "java.lang.Object.getClass()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.Object",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4196": {
        "Query": "Returns a event set descriptor for the class that matches the property name.",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.beans.Introspector.getBeanInfo()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.beans.Introspector"
        ],
        "Source": "Tutorial Websites"
    },
    "4197": {
        "Query": "Returns a filtered copy of the collection",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4198": {
        "Query": "Returns a formatted Double value given a specific DecimalFormat If more than 4 integer, then we display the value in scientific notation",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.String.valueOf()",
            "java.lang.Math.pow()",
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4199": {
        "Query": "Returns a formatted string representing the thread identified by the passed id",
        "GroundTruth": [
            "java.lang.management.ThreadMXBean.getThreadInfo()",
            "java.lang.String.format()",
            "java.lang.management.ThreadInfo.getThreadName()",
            "java.lang.management.ThreadInfo.getThreadId()"
        ],
        "APIClasses": [
            "java.lang.management.ThreadMXBean",
            "java.lang.String",
            "java.lang.management.ThreadInfo",
            "java.lang.management.ThreadInfo"
        ],
        "Source": "Tutorial Websites"
    },
    "4200": {
        "Query": "Returns a graphics device.",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getScreenDevices()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "4201": {
        "Query": "Returns a gray version of the color parameter c, which means all parts (r,g,b) do have the same value.",
        "GroundTruth": [
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4202": {
        "Query": "Returns a hex string representing the given color object.",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4203": {
        "Query": "Returns a java.awt.Color by reading the RGB values from a hexadecimal string of format #RRGGBB",
        "GroundTruth": [
            "java.lang.String.charAt()",
            "java.lang.String.length()",
            "java.lang.Integer.parseInt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4204": {
        "Query": "Returns a key stroke with the modifier #getMenuShortcutMask() .",
        "GroundTruth": [
            "javax.swing.KeyStroke.getKeyStroke()",
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getMenuShortcutKeyMask()"
        ],
        "APIClasses": [
            "javax.swing.KeyStroke",
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "4205": {
        "Query": "Returns a key stroke with the modifiers #getMenuShortcutMask() and ALT down.",
        "GroundTruth": [
            "javax.swing.KeyStroke.getKeyStroke()",
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getMenuShortcutKeyMask()"
        ],
        "APIClasses": [
            "javax.swing.KeyStroke",
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "4206": {
        "Query": "Returns a key stroke with the modifiers #getMenuShortcutMask() and SHIFT down.",
        "GroundTruth": [
            "javax.swing.KeyStroke.getKeyStroke()",
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getMenuShortcutKeyMask()"
        ],
        "APIClasses": [
            "javax.swing.KeyStroke",
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "4207": {
        "Query": "Returns a lighter version of the given color by the given factor.",
        "GroundTruth": [
            "java.awt.Color.getRGBComponents()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4208": {
        "Query": "Returns a lighter version of the given color.",
        "GroundTruth": [
            "java.lang.Math.min()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.awt.Color.getAlpha()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4209": {
        "Query": "Returns a list of a pojo's PropertyDescriptors minus the same for java.lang.Object.",
        "GroundTruth": [
            "java.util.List.removeAll()",
            "java.util.List.add()",
            "java.beans.Introspector.getBeanInfo()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.beans.Introspector",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4210": {
        "Query": "Returns a list of a shape's segments as they are returned by its path iterator.",
        "GroundTruth": [
            "java.awt.Shape.getPathIterator()"
        ],
        "APIClasses": [
            "java.awt.Shape"
        ],
        "Source": "Tutorial Websites"
    },
    "4211": {
        "Query": "Returns a list of all of a pojo's PropertyDescriptors",
        "GroundTruth": [
            "java.util.List.add()",
            "java.beans.Introspector.getBeanInfo()",
            "java.lang.Object.getClass()",
            "java.util.List.removeAll()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.beans.Introspector",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4212": {
        "Query": "Returns a list of available Swing Look and Feels",
        "GroundTruth": [
            "javax.swing.UIManager.getInstalledLookAndFeels()"
        ],
        "APIClasses": [
            "javax.swing.UIManager"
        ],
        "Source": "Tutorial Websites"
    },
    "4213": {
        "Query": "Returns a new ArrayList with the same contents as source, except for the case that source is nil or empty, in which source itself is returned.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4214": {
        "Query": "Returns a new BufferedImage using the same color model as the image passed as a parameter.",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "4215": {
        "Query": "Returns a new Collection containing a - b.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.remove()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4216": {
        "Query": "Returns a new Document instance.",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "4217": {
        "Query": "Returns a new XML Document from the current DocumentBuidler.",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilder.newDocument()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilder"
        ],
        "Source": "Tutorial Websites"
    },
    "4218": {
        "Query": "Returns a new color equal to the old one, except alpha (transparency) channel is set to the new value.",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4219": {
        "Query": "Returns a new color equal to the old one, except that there is no alpha (transparency) channel.",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4220": {
        "Query": "Returns a new map with all entries of the input map except those which have a value of null.",
        "GroundTruth": [
            "java.util.Map.entrySet()",
            "java.util.Map.Entry.getValue()",
            "java.util.Map.Entry.getKey()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.Map.Entry"
        ],
        "Source": "Tutorial Websites"
    },
    "4221": {
        "Query": "Returns a new vector that is the normalized form of the specified vector.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4222": {
        "Query": "Returns a newly constructed array containing the indices of the non-zero bits.",
        "GroundTruth": [
            "java.util.BitSet.cardinality()",
            "java.util.BitSet.nextSetBit()"
        ],
        "APIClasses": [
            "java.util.BitSet",
            "java.util.BitSet"
        ],
        "Source": "Tutorial Websites"
    },
    "4223": {
        "Query": "Returns a normalised array of the elements in the given array",
        "GroundTruth": [
            "java.lang.Double.isInfinite()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4224": {
        "Query": "Returns a path for the arrow at the end of an edge from p1 to p2.",
        "GroundTruth": [
            "java.lang.Math.atan2()",
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4225": {
        "Query": "Returns a pretty string value for a KeyStroke, suitable for display as the keystroke's value in a GUI.",
        "GroundTruth": [
            "java.awt.event.KeyEvent.getKeyModifiersText()",
            "java.lang.String.length()",
            "java.awt.event.KeyEvent.getKeyText()"
        ],
        "APIClasses": [
            "java.awt.event.KeyEvent",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4226": {
        "Query": "Returns a property descriptor for the class that matches the property name.",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.beans.Introspector.getBeanInfo()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.beans.Introspector"
        ],
        "Source": "Tutorial Websites"
    },
    "4227": {
        "Query": "Returns a property that defines the state of the given JavaFX worker.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4228": {
        "Query": "Returns a random boolean value.",
        "GroundTruth": [
            "java.util.Random.nextBoolean()",
            "java.lang.Math.random()",
            "java.lang.StrictMath.random()",
            "java.util.Random.nextInt()",
            "java.util.Random.nextFloat()"
        ],
        "APIClasses": [
            "java.util.Random",
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4229": {
        "Query": "Returns a random int between min Val and max Val",
        "GroundTruth": [
            "java.lang.Math.round()",
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4230": {
        "Query": "Returns a random integer in the interval of the two parameters (including both from and to)",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4231": {
        "Query": "Returns a sorted entry set of given map.",
        "GroundTruth": [
            "java.util.Map.entrySet()",
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4232": {
        "Query": "Returns a square distance of two points.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4233": {
        "Query": "Returns a string representation of number with at least 2 digits",
        "GroundTruth": [
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4234": {
        "Query": "Returns a string representation of the date part of this datetime object.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4235": {
        "Query": "Returns a string representation of the specified socket address in the form : <IP ADDRESS>:<PORT>",
        "GroundTruth": [
            "java.net.InetSocketAddress.getAddress()",
            "java.net.InetSocketAddress.getHostName()",
            "java.net.InetAddress.getHostAddress()",
            "java.net.InetSocketAddress.getPort()"
        ],
        "APIClasses": [
            "java.net.InetSocketAddress",
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "4236": {
        "Query": "Returns a string representation of the whole datetime object.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4237": {
        "Query": "Returns a string representing the plain text content of an element.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4238": {
        "Query": "Returns a string with visible new line characters, shown along the invisible ones.",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4239": {
        "Query": "Returns a string with visible whitespace characters, removing the invisible ones.",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4240": {
        "Query": "Returns a thousands separated decimal formatter.",
        "GroundTruth": [
            "java.text.NumberFormat.getInstance()",
            "java.text.DecimalFormat.getDecimalFormatSymbols()",
            "java.text.DecimalFormatSymbols.setGroupingSeparator()",
            "java.text.DecimalFormat.setDecimalFormatSymbols()"
        ],
        "APIClasses": [
            "java.text.NumberFormat",
            "java.text.DecimalFormat",
            "java.text.DecimalFormatSymbols",
            "java.text.DecimalFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "4241": {
        "Query": "Returns a unique text for the given key modifiers",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4242": {
        "Query": "Returns a value between 0 and 255 which represents the gray value of the color parameter.",
        "GroundTruth": [
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4243": {
        "Query": "Returns a value between value1 and value2 that can include value1 and value2",
        "GroundTruth": [
            "java.lang.Math.min()",
            "java.lang.Math.max()",
            "java.util.Random.nextDouble()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "4244": {
        "Query": "Returns a value between value1 and value2 that can include value1, but not value2",
        "GroundTruth": [
            "java.lang.Math.min()",
            "java.lang.Math.max()",
            "java.util.Random.nextDouble()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "4245": {
        "Query": "Returns a {List} of the contents for the given {Iterable}",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4246": {
        "Query": "Returns all network interfaces of this host.",
        "GroundTruth": [
            "java.net.NetworkInterface.getNetworkInterfaces()"
        ],
        "APIClasses": [
            "java.net.NetworkInterface"
        ],
        "Source": "Tutorial Websites"
    },
    "4247": {
        "Query": "Returns an ImageIcon, or null if the path was invalid.",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4248": {
        "Query": "Returns an JLabel with the specified text.",
        "GroundTruth": [
            "javax.swing.JLabel.setDisplayedMnemonic()",
            "javax.swing.JLabel.setLabelFor()"
        ],
        "APIClasses": [
            "javax.swing.JLabel",
            "javax.swing.JLabel"
        ],
        "Source": "Tutorial Websites"
    },
    "4249": {
        "Query": "Returns an alphabetically sorted copy of vector.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.sort()",
            "java.lang.String.toString()",
            "java.lang.String.compareToIgnoreCase()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4250": {
        "Query": "Returns an annotation for the specified type if such an annotation is present, else null.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4251": {
        "Query": "Returns an array containing all numbers of bits that are set to true.",
        "GroundTruth": [
            "java.util.BitSet.cardinality()",
            "java.util.BitSet.nextSetBit()"
        ],
        "APIClasses": [
            "java.util.BitSet",
            "java.util.BitSet"
        ],
        "Source": "Tutorial Websites"
    },
    "4252": {
        "Query": "Returns an array containing all of the elements in the given collection.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Arrays.toString()",
            "java.lang.reflect.Array.newInstance()",
            "java.util.Collection.size()",
            "java.util.Collection.toArray()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.reflect.Array",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "4253": {
        "Query": "Returns an array of Field objects reflecting all the fields declared by the class including the fields of the superclasses as well.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.Class.getDeclaredFields()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Class",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4254": {
        "Query": "Returns an array of Method objects reflecting all the methods declared by the class including the methods of the superclasses as well.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.Class.getDeclaredMethods()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Class",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4255": {
        "Query": "Returns an array of MidiDevice.Info for MIDI Synthesizer device.",
        "GroundTruth": [
            "javax.sound.midi.MidiSystem.getMidiDeviceInfo()",
            "javax.sound.midi.MidiSystem.getMidiDevice()",
            "java.util.List.add()",
            "java.util.List.toArray()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiSystem",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4256": {
        "Query": "Returns an array of MidiDevice.Info for MIDI input device.",
        "GroundTruth": [
            "javax.sound.midi.MidiSystem.getMidiDeviceInfo()",
            "javax.sound.midi.MidiSystem.getMidiDevice()",
            "javax.sound.midi.MidiDevice.getMaxTransmitters()",
            "java.util.List.add()",
            "java.util.List.toArray()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiSystem",
            "javax.sound.midi.MidiDevice",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4257": {
        "Query": "Returns an array of MidiDevice.Info for MIDI output device.",
        "GroundTruth": [
            "javax.sound.midi.MidiSystem.getMidiDeviceInfo()",
            "javax.sound.midi.MidiSystem.getMidiDevice()",
            "javax.sound.midi.MidiDevice.getMaxReceivers()",
            "java.util.List.add()",
            "java.util.List.toArray()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiSystem",
            "javax.sound.midi.MidiDevice",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4258": {
        "Query": "Returns an array of event set descriptors for specified class.",
        "GroundTruth": [
            "java.beans.Introspector.getBeanInfo()"
        ],
        "APIClasses": [
            "java.beans.Introspector"
        ],
        "Source": "Tutorial Websites"
    },
    "4259": {
        "Query": "Returns an array of pixels, stored as integers, from a BufferedImage.",
        "GroundTruth": [
            "java.awt.image.Raster.getDataElements()"
        ],
        "APIClasses": [
            "java.awt.image.Raster"
        ],
        "Source": "Tutorial Websites"
    },
    "4260": {
        "Query": "Returns an array of property descriptors for specified class.",
        "GroundTruth": [
            "java.beans.Introspector.getBeanInfo()"
        ],
        "APIClasses": [
            "java.beans.Introspector"
        ],
        "Source": "Tutorial Websites"
    },
    "4261": {
        "Query": "Returns an array of strings by splitting a given text into tokens, that are separated by the '|' character.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4262": {
        "Query": "Returns an array of the same size as the index Array and the class of the original Array which contains the elements of the original array selected by the corresponding indices.",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4263": {
        "Query": "Returns an array without the element at given indexes.",
        "GroundTruth": [
            "java.util.Arrays.binarySearch()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4264": {
        "Query": "Returns an empty object array.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4265": {
        "Query": "Returns an enumeration of the hashtable keys that is not changed by parallel changes to the hashtable.",
        "GroundTruth": [
            "java.util.Hashtable.clone()"
        ],
        "APIClasses": [
            "java.util.Hashtable"
        ],
        "Source": "Tutorial Websites"
    },
    "4266": {
        "Query": "Returns an instance of the memcache, or null if we can't get at it.",
        "GroundTruth": [
            "java.util.Collections.emptyMap()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4267": {
        "Query": "Returns an int[] containing elements shared between the two arrays",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4268": {
        "Query": "Returns an integer hash code representing the given double value.",
        "GroundTruth": [
            "java.lang.Double.doubleToLongBits()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4269": {
        "Query": "Returns an iterator for the hash map keys that is not changed by parallel changes to the hash map.",
        "GroundTruth": [
            "java.util.HashMap.clone()"
        ],
        "APIClasses": [
            "java.util.HashMap"
        ],
        "Source": "Tutorial Websites"
    },
    "4270": {
        "Query": "Returns an object different from the given one.",
        "GroundTruth": [
            "java.util.function.Predicate.isEqual()"
        ],
        "APIClasses": [
            "java.util.function.Predicate"
        ],
        "Source": "Tutorial Websites"
    },
    "4271": {
        "Query": "Returns an opaque panel so we get the cool gradient effect on Windows XP and Vista.",
        "GroundTruth": [
            "javax.swing.JComponent.setOpaque()",
            "java.lang.System.getProperty()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.indexOf()",
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4272": {
        "Query": "Returns an unmodifiable view of the specified list.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.emptyList()",
            "java.util.Collections.unmodifiableList()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4273": {
        "Query": "Returns angle between the line specified by points and y=0 line.",
        "GroundTruth": [
            "java.lang.Math.asin()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4274": {
        "Query": "Returns chi-square probability for even numbers number.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.exp()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4275": {
        "Query": "Returns chi-square probability for odd numbers number.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.sqrt()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4276": {
        "Query": "Returns collection as sorted ArrayList",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4277": {
        "Query": "Returns composition of given functions.",
        "GroundTruth": [
            "java.util.function.Function.identity()"
        ],
        "APIClasses": [
            "java.util.function.Function"
        ],
        "Source": "Tutorial Websites"
    },
    "4278": {
        "Query": "Returns current working folder.",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4279": {
        "Query": "Returns either the passed in String, or if the String is empty or null, the value of defaultStr.",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4280": {
        "Query": "Returns gamma value for a double in.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4281": {
        "Query": "Returns haversine() of distance from (lat1, lng1) to (lat2, lng2) on the unit sphere.",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.StrictMath.cos()",
            "java.lang.Math.sin()",
            "java.lang.StrictMath.sin()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4282": {
        "Query": "Returns information whether the given annotated element is annotated by some annotation which is marked by given (marker) annotation.",
        "GroundTruth": [
            "java.lang.annotation.IncompleteAnnotationException.annotationType()",
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.annotation.Annotation.equals()"
        ],
        "APIClasses": [
            "java.lang.annotation.IncompleteAnnotationException",
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "4283": {
        "Query": "Returns information whether the given annotation type annotation is annotated by given annotation type annotated By.",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.annotation.IncompleteAnnotationException.annotationType()",
            "java.lang.annotation.Annotation.equals()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation",
            "java.lang.annotation.IncompleteAnnotationException"
        ],
        "Source": "Tutorial Websites"
    },
    "4284": {
        "Query": "Returns k-quantile of the data.",
        "GroundTruth": [
            "java.util.Arrays.sort()",
            "java.lang.Math.ceil()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4285": {
        "Query": "Returns latitude from mercator Y.",
        "GroundTruth": [
            "java.lang.Math.atan()",
            "java.lang.StrictMath.atan()",
            "java.lang.Math.exp()",
            "java.lang.StrictMath.exp()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4286": {
        "Query": "Returns less than zero if p2 is on the left hand side of the line created by p1 and theta and greater than zero if it is on the right hand side.",
        "GroundTruth": [
            "java.lang.Math.round()",
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4287": {
        "Query": "Returns mercator Y corresponding to latitude.",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.StrictMath.log()",
            "java.lang.Math.tan()",
            "java.lang.StrictMath.tan()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4288": {
        "Query": "Returns methods on the given target object which are annotated with the annotation of the given class.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getMethods()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "4289": {
        "Query": "Returns natural logarithm of Gamma function of x Algorithm is from Numerical recipes 6.1",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4290": {
        "Query": "Returns normalized text content for XML node.",
        "GroundTruth": [
            "org.w3c.dom.Node.getTextContent()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4291": {
        "Query": "Returns number in 0xABCDEF-Format",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.toUpperCase()",
            "java.lang.Character.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "4292": {
        "Query": "Returns number of CPUs in the Linus system",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4293": {
        "Query": "Returns of linked list of the objects given in the vararg.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4294": {
        "Query": "Returns of set of the objects given in the vararg.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4295": {
        "Query": "Returns rectangle containing all specified points.",
        "GroundTruth": [
            "java.lang.Math.min()",
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4296": {
        "Query": "Returns rgba() string from SAC rgb LexicalUnit value",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4297": {
        "Query": "Returns standard variation (rozptyl) DV = sqrt( 1/N * SUM ( Xi - mu )^2 )",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4298": {
        "Query": "Returns ten to the power of n for double",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4299": {
        "Query": "Returns the 3d surface normal of a triangle given three vertices.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.StrictMath.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4300": {
        "Query": "Returns the BigInteger as a hex encoded string.",
        "GroundTruth": [
            "java.math.BigInteger.toString()"
        ],
        "APIClasses": [
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "4301": {
        "Query": "Returns the Color for the given HTML code.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4302": {
        "Query": "Returns the FontMetrics for the specified Font.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()"
        ],
        "APIClasses": [
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "4303": {
        "Query": "Returns the HSL (Hue/Saturation/Luminance) equivalent of a given RGB color.",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4304": {
        "Query": "Returns the JTable column index for a specific column within the table.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4305": {
        "Query": "Returns the Jensen-Shannon divergence.",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4306": {
        "Query": "Returns the KL divergence, K(p1 || p2).",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4307": {
        "Query": "Returns the List as an Set either ordered or as-is, if the comparator is null.",
        "GroundTruth": [
            "java.util.Set.addAll()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "4308": {
        "Query": "Returns the MurmurHash3_x86_32 hash.",
        "GroundTruth": [
            "java.lang.Integer.rotateLeft()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4309": {
        "Query": "Returns the RGBA equivalence for named colors",
        "GroundTruth": [
            "java.lang.String.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4310": {
        "Query": "Returns the absolute value of the BigDecimal value, handles null.",
        "GroundTruth": [
            "java.math.BigInteger.abs()",
            "java.math.BigDecimal.abs()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "4311": {
        "Query": "Returns the address prefixed with the corresponding value via regex",
        "GroundTruth": [
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "4312": {
        "Query": "Returns the amount of free memory in the Java Virtual Machine.",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.freeMemory()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "4313": {
        "Query": "Returns the amount of memory available for use by the Java program.",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.totalMemory()",
            "java.lang.Runtime.freeMemory()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "4314": {
        "Query": "Returns the amount of memory currently used by the Java Virtual Machine.",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.totalMemory()",
            "java.lang.Runtime.freeMemory()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "4315": {
        "Query": "Returns the angle between the two vectors.",
        "GroundTruth": [
            "java.lang.Math.max()",
            "java.lang.Math.min()",
            "java.lang.Math.acos()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4316": {
        "Query": "Returns the angle of rotation (in radians) for the specified line.",
        "GroundTruth": [
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4317": {
        "Query": "Returns the approximate circumference of the ellipse defined by the specified minor and major axes.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4318": {
        "Query": "Returns the arc cosecant of a value.",
        "GroundTruth": [
            "java.lang.Math.asin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4319": {
        "Query": "Returns the arc cotangent of a value.",
        "GroundTruth": [
            "java.lang.Math.atan()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4320": {
        "Query": "Returns the arc hyperbolic cosecant of a value.",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4321": {
        "Query": "Returns the arc hyperbolic cosine of a value.",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4322": {
        "Query": "Returns the arc hyperbolic cotangent of a value.",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4323": {
        "Query": "Returns the arc hyperbolic secant of a value.",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4324": {
        "Query": "Returns the arc hyperbolic sine of a value.",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4325": {
        "Query": "Returns the arc hyperbolic tangent of a value.",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4326": {
        "Query": "Returns the arc secant of a value.",
        "GroundTruth": [
            "java.lang.Math.acos()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4327": {
        "Query": "Returns the argument, cast to type T[] in an unsafe way.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4328": {
        "Query": "Returns the average power per sample.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4329": {
        "Query": "Returns the base 10 logarithm of a double value.",
        "GroundTruth": [
            "java.lang.Math.log10()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4330": {
        "Query": "Returns the base 2 logarithm of a double value.",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.log10()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4331": {
        "Query": "Returns the bounds for the specified text.",
        "GroundTruth": [
            "java.awt.FontMetrics.stringWidth()"
        ],
        "APIClasses": [
            "java.awt.FontMetrics"
        ],
        "Source": "Tutorial Websites"
    },
    "4332": {
        "Query": "Returns the closest power-of-two number less than or equal to x.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.floor()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4333": {
        "Query": "Returns the color to use for hyperlink-style components.",
        "GroundTruth": [
            "javax.swing.UIManager.getColor()"
        ],
        "APIClasses": [
            "javax.swing.UIManager"
        ],
        "Source": "Tutorial Websites"
    },
    "4334": {
        "Query": "Returns the combined value of all entries in the Integer Collection",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4335": {
        "Query": "Returns the common (base 10) logarithm of a double.",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4336": {
        "Query": "Returns the complementary error function of a double.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4337": {
        "Query": "Returns the context class loader.",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4338": {
        "Query": "Returns the cookie value for a specific cookie in the a request.",
        "GroundTruth": [
            "java.net.CookieStore.getCookies()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.net.CookieStore",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4339": {
        "Query": "Returns the correlation between the two arrays of data, ignoring any Nan values See - Wikipedia",
        "GroundTruth": [
            "java.lang.Double.isNaN()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4340": {
        "Query": "Returns the correlation between the two arrays of data. The arrays are assumed to have the same lengths See - Wikipedia",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4341": {
        "Query": "Returns the cosecant of a value.",
        "GroundTruth": [
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4342": {
        "Query": "Returns the cotangent of a double.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4343": {
        "Query": "Returns the cotangent of a value.",
        "GroundTruth": [
            "java.lang.Math.tan()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4344": {
        "Query": "Returns the cumulative distribution function of a double value.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.abs()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4345": {
        "Query": "Returns the currently selected Swing combobox value.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4346": {
        "Query": "Returns the date format used for expiry times in type zero (Netscape) cookies.",
        "GroundTruth": [
            "java.util.TimeZone.getTimeZone()"
        ],
        "APIClasses": [
            "java.util.TimeZone"
        ],
        "Source": "Tutorial Websites"
    },
    "4347": {
        "Query": "Returns the deepest visible descendent Component of parent that contains the location x, y.",
        "GroundTruth": [
            "javax.swing.SwingUtilities.getDeepestComponentAt()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "4348": {
        "Query": "Returns the difference of both orientations.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Math.atan()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4349": {
        "Query": "Returns the dimensions of the smallest rectangle that could contain the supplied points.",
        "GroundTruth": [
            "java.lang.Math.min()",
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4350": {
        "Query": "Returns the double value of the number stored in the given JFormattedTextField.",
        "GroundTruth": [
            "java.lang.Number.doubleValue()"
        ],
        "APIClasses": [
            "java.lang.Number"
        ],
        "Source": "Tutorial Websites"
    },
    "4351": {
        "Query": "Returns the error function of a double.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4352": {
        "Query": "Returns the exponent of the given double value",
        "GroundTruth": [
            "java.lang.Double.doubleToRawLongBits()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4353": {
        "Query": "Returns the factorial of an integer.",
        "GroundTruth": [
            "java.lang.Double.isNaN()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4354": {
        "Query": "Returns the field with the given name on the type lowest in the class hierarchy.",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()",
            "java.lang.reflect.Field.getName()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.Field",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4355": {
        "Query": "Returns the file extension of the given file using Regex.",
        "GroundTruth": [
            "java.nio.file.Path.getFileName()",
            "java.nio.file.attribute.FileTime.toString()",
            "java.nio.file.attribute.PosixFilePermissions.toString()",
            "java.nio.file.attribute.AclEntry.toString()",
            "java.nio.file.Path.toString()"
        ],
        "APIClasses": [
            "java.nio.file.Path",
            "java.nio.file.attribute.FileTime",
            "java.nio.file.attribute.PosixFilePermissions",
            "java.nio.file.attribute.AclEntry"
        ],
        "Source": "Tutorial Websites"
    },
    "4356": {
        "Query": "Returns the filename extension without the dot using regex.",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.groupCount()",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.group()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "4357": {
        "Query": "Returns the first child of XML node that has the given name, or null.",
        "GroundTruth": [
            "org.w3c.dom.Node.getFirstChild()",
            "org.w3c.dom.Node.getNodeName()",
            "java.lang.String.equals()",
            "org.w3c.dom.Node.getNextSibling()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4358": {
        "Query": "Returns the first component in the tree of c that can accept the focus.",
        "GroundTruth": [
            "javax.swing.JComponent.isRequestFocusEnabled()",
            "java.awt.Container.getComponentCount()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "java.awt.Container"
        ],
        "Source": "Tutorial Websites"
    },
    "4359": {
        "Query": "Returns the first element of the list, null if the list is null or empty.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.isEmpty()",
            "java.util.List.get()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4360": {
        "Query": "Returns the first sibling of XML node, or node itself, which has the given name.",
        "GroundTruth": [
            "org.w3c.dom.Node.getNodeName()",
            "java.lang.String.equals()",
            "org.w3c.dom.Node.getNextSibling()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4361": {
        "Query": "Returns the floating-point number adjacent to the first argument in the direction of the second argument.",
        "GroundTruth": [
            "java.lang.Math.nextAfter()",
            "java.lang.StrictMath.nextAfter()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4362": {
        "Query": "Returns the floating-point value adjacent to d in the direction of positive infinity.",
        "GroundTruth": [
            "java.lang.Math.nextUp()",
            "java.lang.StrictMath.nextUp()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4363": {
        "Query": "Returns the free JVM Heap Size",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.freeMemory()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "4364": {
        "Query": "Returns the generic parameters of the given field.",
        "GroundTruth": [
            "java.lang.reflect.Field.getGenericType()",
            "java.util.Collections.emptyList()",
            "java.util.Arrays.asList()",
            "java.lang.reflect.ParameterizedType.getActualTypeArguments()"
        ],
        "APIClasses": [
            "java.lang.reflect.Field",
            "java.util.Collections",
            "java.util.Arrays",
            "java.lang.reflect.ParameterizedType"
        ],
        "Source": "Tutorial Websites"
    },
    "4365": {
        "Query": "Returns the given class (val) as itself or nulls if it it is equal to the default Class.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4366": {
        "Query": "Returns the given iterator's first element or null if no element found.",
        "GroundTruth": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.lang.Iterable.iterator()"
        ],
        "APIClasses": [
            "java.util.Iterator",
            "java.lang.Iterable"
        ],
        "Source": "Tutorial Websites"
    },
    "4367": {
        "Query": "Returns the given iterator's last element or null if no element found.",
        "GroundTruth": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.lang.Iterable.iterator()"
        ],
        "APIClasses": [
            "java.util.Iterator",
            "java.lang.Iterable"
        ],
        "Source": "Tutorial Websites"
    },
    "4368": {
        "Query": "Returns the given iterator's last element.",
        "GroundTruth": [
            "java.lang.Iterable.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()"
        ],
        "APIClasses": [
            "java.lang.Iterable",
            "java.util.Iterator"
        ],
        "Source": "Tutorial Websites"
    },
    "4369": {
        "Query": "Returns the given iterator's single element or null if no element found.",
        "GroundTruth": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.lang.Iterable.iterator()"
        ],
        "APIClasses": [
            "java.util.Iterator",
            "java.lang.Iterable"
        ],
        "Source": "Tutorial Websites"
    },
    "4370": {
        "Query": "Returns the given iterator's single element.",
        "GroundTruth": [
            "java.lang.Iterable.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()"
        ],
        "APIClasses": [
            "java.lang.Iterable",
            "java.util.Iterator"
        ],
        "Source": "Tutorial Websites"
    },
    "4371": {
        "Query": "Returns the given loader or the sytem classloader if loader is null",
        "GroundTruth": [
            "java.lang.ClassLoader.getSystemClassLoader()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Tutorial Websites"
    },
    "4372": {
        "Query": "Returns the greater of the specified dates.",
        "GroundTruth": [
            "java.util.Calendar.compareTo()",
            "java.util.UUID.compareTo()",
            "java.util.Date.compareTo()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.UUID",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "4373": {
        "Query": "Returns the greater of two values.",
        "GroundTruth": [
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4374": {
        "Query": "Returns the greatest common divisor of two positive numbers (this precondition is not checked and the result is undefined if not fulfilled) using the \"binary gcd\" method which avoids division and modulo operations.",
        "GroundTruth": [
            "java.lang.Integer.numberOfTrailingZeros()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4375": {
        "Query": "Returns the hostname of the local host.",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "4376": {
        "Query": "Returns the hyperbolic cosecant of a value.",
        "GroundTruth": [
            "java.lang.Math.sinh()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4377": {
        "Query": "Returns the hyperbolic cosine of a double.",
        "GroundTruth": [
            "java.lang.Math.exp()",
            "java.lang.Math.abs()",
            "java.lang.Double.isNaN()",
            "java.lang.Double.isInfinite()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4378": {
        "Query": "Returns the hyperbolic cosine of a value.",
        "GroundTruth": [
            "java.lang.Math.cosh()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4379": {
        "Query": "Returns the hyperbolic cosine of x.",
        "GroundTruth": [
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4380": {
        "Query": "Returns the hyperbolic cotangent of a value.",
        "GroundTruth": [
            "java.lang.Math.tanh()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4381": {
        "Query": "Returns the hyperbolic secant of a value.",
        "GroundTruth": [
            "java.lang.Math.cosh()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4382": {
        "Query": "Returns the hyperbolic sine of a double.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Double.isNaN()",
            "java.lang.Double.isInfinite()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4383": {
        "Query": "Returns the hyperbolic sine of a value.",
        "GroundTruth": [
            "java.lang.Math.sinh()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4384": {
        "Query": "Returns the hyperbolic tangent of a double.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Double.isNaN()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4385": {
        "Query": "Returns the hyperbolic tangent of a value.",
        "GroundTruth": [
            "java.lang.Math.tanh()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4386": {
        "Query": "Returns the index of an element in a given array.",
        "GroundTruth": [
            "java.lang.String.valueOf()",
            "javax.swing.text.html.parser.Element.toString()",
            "java.lang.String.equalsIgnoreCase()",
            "javax.lang.model.element.Element.equals()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.swing.text.html.parser.Element",
            "java.lang.String",
            "javax.lang.model.element.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "4387": {
        "Query": "Returns the index of the first bit that is set to true that occurs on or after the specified starting index.",
        "GroundTruth": [
            "java.lang.Integer.numberOfTrailingZeros()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4388": {
        "Query": "Returns the index within this string of the first occurrence of any of the characters specified in string any.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.StringBuilder.indexOf()",
            "java.lang.StringBuffer.indexOf()",
            "java.lang.String.indexOf()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "4389": {
        "Query": "Returns the input angle put into the 2pi radian range centered on the input center, [center-pi, center+pi)",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4390": {
        "Query": "Returns the input angle put into the 360 degree range centered on the input center, [center-180, center+180)",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4391": {
        "Query": "Returns the int value of the number stored in the given JFormattedTextField.",
        "GroundTruth": [
            "java.lang.Number.intValue()"
        ],
        "APIClasses": [
            "java.lang.Number"
        ],
        "Source": "Tutorial Websites"
    },
    "4392": {
        "Query": "Returns the inverse (arc) hyperbolic cosine of a double.",
        "GroundTruth": [
            "java.lang.Double.isNaN()",
            "java.lang.Math.log()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4393": {
        "Query": "Returns the inverse (arc) hyperbolic sine of a double.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Double.isNaN()",
            "java.lang.Math.log()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4394": {
        "Query": "Returns the inverse (arc) hyperbolic tangent of a double.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Double.isNaN()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4395": {
        "Query": "Returns the inverse cosecant of a double value",
        "GroundTruth": [
            "java.lang.Math.asin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4396": {
        "Query": "Returns the inverse cotangent of a double value",
        "GroundTruth": [
            "java.lang.Math.atan()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4397": {
        "Query": "Returns the items as a populated set.",
        "GroundTruth": [
            "java.util.Set.add()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "4398": {
        "Query": "Returns the largest of any number of int values.",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4399": {
        "Query": "Returns the last element of a list.",
        "GroundTruth": [
            "java.util.List.get()",
            "java.util.List.size()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4400": {
        "Query": "Returns the last element of an array list.",
        "GroundTruth": [
            "java.util.List.size()",
            "java.util.List.get()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4401": {
        "Query": "Returns the layered pane that is the top level container for the given component",
        "GroundTruth": [
            "javax.swing.SwingUtilities.windowForComponent()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "4402": {
        "Query": "Returns the least common multiple between two integer values.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4403": {
        "Query": "Returns the least common multiple of the absolute value of two numbers, using the formula lcm(a,b) = (a / gcd(a,b)) * b.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4404": {
        "Query": "Returns the length of the line.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4405": {
        "Query": "Returns the length of the vector v.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4406": {
        "Query": "Returns the lesser of two values.",
        "GroundTruth": [
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4407": {
        "Query": "Returns the lowest bit value",
        "GroundTruth": [
            "java.lang.Integer.lowestOneBit()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4408": {
        "Query": "Returns the max number in the numbers list using TreeSet.",
        "GroundTruth": [
            "java.util.SortedSet.last()",
            "java.util.concurrent.ConcurrentSkipListSet.last()",
            "java.util.TreeSet.last()"
        ],
        "APIClasses": [
            "java.util.SortedSet",
            "java.util.concurrent.ConcurrentSkipListSet",
            "java.util.TreeSet"
        ],
        "Source": "Tutorial Websites"
    },
    "4409": {
        "Query": "Returns the maximum amount of memory that the Java virtual machine will attempt to use.",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "4410": {
        "Query": "Returns the mean number in the BigDecimal list.",
        "GroundTruth": [
            "java.math.BigInteger.divide()",
            "java.math.BigDecimal.divide()",
            "java.math.BigInteger.add()",
            "java.math.BigDecimal.add()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "4411": {
        "Query": "Returns the mime-type according to the given file extension.",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4412": {
        "Query": "Returns the name of the MBean attribute corresponding to the given method object - chops the given prefix from the method name and returns the result.",
        "GroundTruth": [
            "java.lang.reflect.Method.getName()",
            "java.lang.String.substring()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4413": {
        "Query": "Returns the name of the XML element.",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4414": {
        "Query": "Returns the name of the bean getter in the BeanFactory class given its name.",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.equals()",
            "java.lang.String.substring()",
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4415": {
        "Query": "Returns the name of the jar file, or null if no \"Main-Class\" manifest attributes was defined.",
        "GroundTruth": [
            "java.util.jar.JarFile.getManifest()",
            "java.util.jar.Manifest.getMainAttributes()"
        ],
        "APIClasses": [
            "java.util.jar.JarFile",
            "java.util.jar.Manifest"
        ],
        "Source": "Tutorial Websites"
    },
    "4416": {
        "Query": "Returns the name of the property setter in the bean.",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.equals()",
            "java.lang.String.substring()",
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4417": {
        "Query": "Returns the natural log of the Binomial Coefficient, \"n choose k\", the number of k-element subsets that can be selected from an n-element set.",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4418": {
        "Query": "Returns the natural logarithm (base e) of a double value.",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.log10()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4419": {
        "Query": "Returns the natural logarithm of n!.",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4420": {
        "Query": "Returns the negative and positive roots of a quadratic equation a*x^2+b*x+c=0 as a double array. Note that if a<0 then the negative root has the smallest x-value, and if a>0 then the positive root has the smallest x-value.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4421": {
        "Query": "Returns the next bigger number that's a power of 2.",
        "GroundTruth": [
            "java.lang.StrictMath.ceil()",
            "java.lang.StrictMath.log()",
            "java.lang.StrictMath.max()",
            "java.lang.StrictMath.pow()"
        ],
        "APIClasses": [
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4422": {
        "Query": "Returns the next power of 2 superior to n.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Integer.numberOfLeadingZeros()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4423": {
        "Query": "Returns the next sibling element of the specified node, or null if there is no such element.",
        "GroundTruth": [
            "org.w3c.dom.Node.getNextSibling()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "4424": {
        "Query": "Returns the norm (i.e length) of a given vector",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4425": {
        "Query": "Returns the number of bits set to true in the bitset.",
        "GroundTruth": [
            "java.lang.Integer.bitCount()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4426": {
        "Query": "Returns the number of elements the iterable contains.",
        "GroundTruth": [
            "java.lang.Iterable.iterator()"
        ],
        "APIClasses": [
            "java.lang.Iterable"
        ],
        "Source": "Tutorial Websites"
    },
    "4427": {
        "Query": "Returns the number of occurrences of needle in haystack.",
        "GroundTruth": [
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4428": {
        "Query": "Returns the opacity component of the ARGB color as a decimal format.",
        "GroundTruth": [
            "java.lang.String.startsWith()",
            "java.lang.String.replace()",
            "java.lang.String.length()",
            "java.lang.Integer.parseInt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4429": {
        "Query": "Returns the owner element of the node and null if not found.",
        "GroundTruth": [
            "org.w3c.dom.Node.getNodeType()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "4430": {
        "Query": "Returns the parent JFrame of the specified component.",
        "GroundTruth": [
            "java.awt.Component.getParent()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "4431": {
        "Query": "Returns the parent window for the given AWT Component.",
        "GroundTruth": [
            "javax.swing.JOptionPane.getFrameForComponent()",
            "java.awt.Component.getParent()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane",
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "4432": {
        "Query": "Returns the path and name of the java launcher in which this program is executed.",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.lang.String.isEmpty()",
            "java.io.File.getAbsolutePath()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "4433": {
        "Query": "Returns the path to the launcher which has started this application.",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4434": {
        "Query": "Returns the phred-scaled error probability of no errors given a set of independent error sources",
        "GroundTruth": [
            "java.lang.Math.log10()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4435": {
        "Query": "Returns the prime-numbers number is divisible by without remainder Optimizing this function possibly could boost the overall process",
        "GroundTruth": [
            "java.util.Collections.reverse()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4436": {
        "Query": "Returns the probability density function of a double with mean 0 variance 1.",
        "GroundTruth": [
            "java.lang.Math.exp()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4437": {
        "Query": "Returns the running Java VM version in full format using System.getProperty(\"java.version\").",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4438": {
        "Query": "Returns the running Java VM version in short format (major version only) using System.getProperty(\"java.version\").",
        "GroundTruth": [
            "java.lang.Double.parseDouble()",
            "java.lang.System.getProperty()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4439": {
        "Query": "Returns the screen ID of the specified window.",
        "GroundTruth": [
            "java.awt.Component.getGraphicsConfiguration()",
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getScreenDevices()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.awt.Component",
            "java.awt.GraphicsEnvironment",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4440": {
        "Query": "Returns the size (width and height) of an image from the given input stream.",
        "GroundTruth": [
            "javax.imageio.ImageIO.createImageInputStream()",
            "javax.imageio.ImageIO.read()",
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO",
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "4441": {
        "Query": "Returns the size of the color index if the given image has one.",
        "GroundTruth": [
            "java.awt.image.IndexColorModel.getMapSize()"
        ],
        "APIClasses": [
            "java.awt.image.IndexColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "4442": {
        "Query": "Returns the size of the first screen size",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getScreenDevices()",
            "java.awt.GraphicsDevice.getDisplayMode()",
            "java.awt.DisplayMode.getWidth()",
            "java.awt.DisplayMode.getHeight()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice",
            "java.awt.DisplayMode"
        ],
        "Source": "Tutorial Websites"
    },
    "4443": {
        "Query": "Returns the smaller of the specified dates.",
        "GroundTruth": [
            "java.util.Calendar.compareTo()",
            "java.util.UUID.compareTo()",
            "java.util.Date.compareTo()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.UUID",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "4444": {
        "Query": "Returns the sorted version of the input string.",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4445": {
        "Query": "Returns the specified component's Frame.",
        "GroundTruth": [
            "javax.swing.JOptionPane.getFrameForComponent()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "4446": {
        "Query": "Returns the string where all non-ascii and <, &, > are encoded as numeric entities for XML",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.StringBuffer.append()",
            "java.lang.StringBuffer.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.StringBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "4447": {
        "Query": "Returns the string width for a given Font and string.",
        "GroundTruth": [
            "javax.swing.SwingUtilities.computeStringWidth()",
            "javax.swing.UIManager.getFont()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "javax.swing.UIManager"
        ],
        "Source": "Tutorial Websites"
    },
    "4448": {
        "Query": "Returns the substring before the first occurrence of a delimiter.",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4449": {
        "Query": "Returns the sum number in the BigDecimal list.",
        "GroundTruth": [
            "java.math.BigInteger.add()",
            "java.math.BigDecimal.add()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "4450": {
        "Query": "Returns the sum of all divisors of the given number.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4451": {
        "Query": "Returns the sum of the items of the given collection.",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4452": {
        "Query": "Returns the text content of the XML element.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4453": {
        "Query": "Returns the top visible frame.",
        "GroundTruth": [
            "java.awt.Frame.getFrames()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Tutorial Websites"
    },
    "4454": {
        "Query": "Returns the total amount of memory in the Java virtual machine.",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.totalMemory()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "4455": {
        "Query": "Returns the value of an attribute in the first XML element in a document with a given tag name.",
        "GroundTruth": [
            "org.w3c.dom.Document.getElementsByTagName()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "4456": {
        "Query": "Returns the value of the Bernstein polynomial for the specified parameters.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.StrictMath.pow()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4457": {
        "Query": "Returns the value of the given XML attribute of the also-given node.",
        "GroundTruth": [
            "org.w3c.dom.Node.getAttributes()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "4458": {
        "Query": "Returns the value of the integer of highest magnitude (farthest from zero) whose absolute value is at most that of x.",
        "GroundTruth": [
            "java.lang.Math.floor()",
            "java.lang.Math.ceil()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4459": {
        "Query": "Returns the value of the named attribute of the given element.",
        "GroundTruth": [
            "org.w3c.dom.Element.getAttributeNode()",
            "java.security.KeyStore.Entry.Attribute.getValue()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element",
            "java.security.KeyStore.Entry.Attribute"
        ],
        "Source": "Tutorial Websites"
    },
    "4460": {
        "Query": "Returns the window that is currently the focus owner.",
        "GroundTruth": [
            "java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager()",
            "java.awt.KeyboardFocusManager.getFocusedWindow()"
        ],
        "APIClasses": [
            "java.awt.KeyboardFocusManager",
            "java.awt.KeyboardFocusManager"
        ],
        "Source": "Tutorial Websites"
    },
    "4461": {
        "Query": "Returns the x,y coordinates of the end point of line starting at startx, starty in the direction of the given heading and of the given length.",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.toRadians()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4462": {
        "Query": "Returns total number of active threads in a string with header.",
        "GroundTruth": [
            "java.lang.Thread.activeCount()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4463": {
        "Query": "Returns true if an annotation for the specified annotation Type is declared locally on the supplied clazz, else false.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.annotation.Annotation.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "4464": {
        "Query": "Returns true if an array contains given value.",
        "GroundTruth": [
            "java.lang.Float.compare()",
            "java.lang.Double.compare()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Float",
            "java.lang.Double",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4465": {
        "Query": "Returns true if any annotation in parameter Annotations matches annotation Class.",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.annotation.Annotation.equals()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "4466": {
        "Query": "Returns true if parameter is a 'double click event'",
        "GroundTruth": [
            "java.awt.event.MouseEvent.getClickCount()"
        ],
        "APIClasses": [
            "java.awt.event.MouseEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "4467": {
        "Query": "Returns true if the Double value difference is minor to 1e-12.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4468": {
        "Query": "Returns true if the current thread is the Event Dispatcher Thread (EDT)",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isEventDispatchThread()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "4469": {
        "Query": "Returns true if the double numbers are equal by EPSILON.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4470": {
        "Query": "Returns true if the given annotation can be considered as a \"@Singleton\" annotation",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "4471": {
        "Query": "Returns true if the given constructor has an \"@Inject\" annotation",
        "GroundTruth": [
            "java.lang.reflect.Constructor.getDeclaredAnnotations()",
            "java.lang.reflect.Field.getDeclaredAnnotations()",
            "java.lang.annotation.Annotation.annotationType()"
        ],
        "APIClasses": [
            "java.lang.reflect.Constructor",
            "java.lang.reflect.Field",
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "4472": {
        "Query": "Returns true if the given double is considered to be too close of a rounding value for the given scale.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Math.floor()",
            "java.lang.Math.log10()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4473": {
        "Query": "Returns true if the given double value will be rounded to zero",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Math.max()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4474": {
        "Query": "Returns true if the given resource is either a zip, jar or war file.",
        "GroundTruth": [
            "java.lang.String.lastIndexOf()",
            "java.lang.String.length()",
            "java.lang.String.endsWith()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4475": {
        "Query": "Returns true if the objects are array instances and each of their elements compares via equals as well.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4476": {
        "Query": "Returns true if the rounding is considered to use too many digits of the double for a fast rounding",
        "GroundTruth": [
            "java.lang.Math.log10()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4477": {
        "Query": "Returns true if the specified character is a whitespace character (CR, LF, SP or HT).",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4478": {
        "Query": "Returns true if the specified class contains any public method annotated with any of the specified annotations.",
        "GroundTruth": [
            "java.lang.Class.getMethods()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "4479": {
        "Query": "Returns true if the specified image has transparent pixels.",
        "GroundTruth": [
            "java.awt.image.PixelGrabber.grabPixels()",
            "java.awt.image.ColorModel.hasAlpha()"
        ],
        "APIClasses": [
            "java.awt.image.PixelGrabber",
            "java.awt.image.ColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "4480": {
        "Query": "Returns true if the specified point (x, y) falls within or on the boundary of the specified rectangle.",
        "GroundTruth": [
            "java.awt.geom.RectangularShape.getMaxX()",
            "java.awt.geom.RectangularShape.getMaxY()"
        ],
        "APIClasses": [
            "java.awt.geom.RectangularShape",
            "java.awt.geom.RectangularShape"
        ],
        "Source": "Tutorial Websites"
    },
    "4481": {
        "Query": "Returns true if the two given calendars are dated on the same time.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "4482": {
        "Query": "Returns true if two doubles are considered equal.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4483": {
        "Query": "Returns type parameters of given type acquired via reflection.",
        "GroundTruth": [
            "java.lang.reflect.ParameterizedType.getActualTypeArguments()"
        ],
        "APIClasses": [
            "java.lang.reflect.ParameterizedType"
        ],
        "Source": "Tutorial Websites"
    },
    "4484": {
        "Query": "Returns user home folder.",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4485": {
        "Query": "Returns whether a JComponent listens for a key code, i.e.",
        "GroundTruth": [
            "javax.swing.JComponent.getInputMap()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "4486": {
        "Query": "Returns whether the arrays are equal by examining each of their elements, even if they are arrays themselves.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4487": {
        "Query": "Returns whether the component that currently has the focus listens for a specified key code, i.e.",
        "GroundTruth": [
            "java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager()",
            "javax.swing.JComponent.getInputMap()"
        ],
        "APIClasses": [
            "java.awt.KeyboardFocusManager",
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "4488": {
        "Query": "Returns whether the host system is connected to the internet",
        "GroundTruth": [
            "java.net.URL.openConnection()",
            "java.net.HttpURLConnection.getResponseCode()"
        ],
        "APIClasses": [
            "java.net.URL",
            "java.net.HttpURLConnection"
        ],
        "Source": "Tutorial Websites"
    },
    "4489": {
        "Query": "Returns whether the parent window of a JComponent has the current focus (or any other component in the window).",
        "GroundTruth": [
            "javax.swing.JComponent.getTopLevelAncestor()",
            "java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager()",
            "java.awt.KeyboardFocusManager.getFocusedWindow()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "java.awt.KeyboardFocusManager",
            "java.awt.KeyboardFocusManager"
        ],
        "Source": "Tutorial Websites"
    },
    "4490": {
        "Query": "Returns whether the windowing system supports changing the opacity value of top-level windows.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()"
        ],
        "APIClasses": [
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "4491": {
        "Query": "Returns whether the windowing system supports changing the shape of top-level windows.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()"
        ],
        "APIClasses": [
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "4492": {
        "Query": "Returns wrapped runnable that ensures that if an exception occurs during the execution, the specified exception handler is invoked.",
        "GroundTruth": [
            "java.lang.Runnable.run()",
            "java.lang.Thread.UncaughtExceptionHandler.uncaughtException()",
            "java.lang.ThreadGroup.uncaughtException()",
            "java.lang.Thread.currentThread()"
        ],
        "APIClasses": [
            "java.lang.Runnable",
            "java.lang.Thread.UncaughtExceptionHandler",
            "java.lang.ThreadGroup",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4493": {
        "Query": "Retweets specified status in twitter",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "4494": {
        "Query": "Reverse String by using StringBuffer",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4495": {
        "Query": "Reverse a String by appending to a StringBuilder",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.format()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4496": {
        "Query": "Reverse a String char by char",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4497": {
        "Query": "Reverse order of all elements of ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.reverse()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4498": {
        "Query": "Reverse order of all elements of Vector",
        "GroundTruth": [
            "java.util.Collections.reverse()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4499": {
        "Query": "Reverse sort a 2d double array by row on the column given by index.",
        "GroundTruth": [
            "java.util.Arrays.sort()",
            "java.lang.Double.compare()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4500": {
        "Query": "Reverse string by word using StringTokenizer",
        "GroundTruth": [
            "java.util.StringTokenizer.hasMoreTokens()"
        ],
        "APIClasses": [
            "java.util.StringTokenizer"
        ],
        "Source": "Tutorial Websites"
    },
    "4501": {
        "Query": "Reverse the order of a given byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4502": {
        "Query": "Reverses an array (Same implementation as string reversal",
        "GroundTruth": [
            "java.lang.Math.ceil()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4503": {
        "Query": "Reverses the order of the bytes in the given byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4504": {
        "Query": "Revert order of vector elements.",
        "GroundTruth": [
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4505": {
        "Query": "Rewrite a byte array as a char array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4506": {
        "Query": "Rewrite a byte array as an int array (the array can be padded with zeros)",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4507": {
        "Query": "Robot left Click Down",
        "GroundTruth": [
            "java.awt.Robot.mousePress()",
            "java.awt.Robot.mouseRelease()"
        ],
        "APIClasses": [
            "java.awt.Robot"
        ],
        "Source": "Tutorial Websites"
    },
    "4508": {
        "Query": "Robot press Enter Key",
        "GroundTruth": [
            "java.awt.Robot.keyPress()",
            "java.awt.Robot.keyRelease()"
        ],
        "APIClasses": [
            "java.awt.Robot"
        ],
        "Source": "Tutorial Websites"
    },
    "4509": {
        "Query": "Robot press Esc Key",
        "GroundTruth": [
            "java.awt.Robot.keyPress()",
            "java.awt.Robot.keyRelease()"
        ],
        "APIClasses": [
            "java.awt.Robot"
        ],
        "Source": "Tutorial Websites"
    },
    "4510": {
        "Query": "Robot press Tab Key",
        "GroundTruth": [
            "java.awt.Robot.keyPress()",
            "java.awt.Robot.keyRelease()"
        ],
        "APIClasses": [
            "java.awt.Robot"
        ],
        "Source": "Tutorial Websites"
    },
    "4511": {
        "Query": "Roll 2 dices one is the user the other is the computer until you want to end",
        "GroundTruth": [
            "java.lang.Math.random()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4512": {
        "Query": "Rolling The Dice using random function",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4513": {
        "Query": "Rotates a point a given angle around the center.",
        "GroundTruth": [
            "java.awt.geom.AffineTransform.getRotateInstance()",
            "java.lang.instrument.ClassFileTransformer.transform()"
        ],
        "APIClasses": [
            "java.awt.geom.AffineTransform",
            "java.lang.instrument.ClassFileTransformer"
        ],
        "Source": "Tutorial Websites"
    },
    "4514": {
        "Query": "Rotates a shape about the specified coordinates.",
        "GroundTruth": [
            "java.awt.geom.AffineTransform.getRotateInstance()"
        ],
        "APIClasses": [
            "java.awt.geom.AffineTransform"
        ],
        "Source": "Tutorial Websites"
    },
    "4515": {
        "Query": "Rotates array using classic three reversals",
        "GroundTruth": [
            "java.lang.Math.ceil()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4516": {
        "Query": "Round double to specified number of decimal places.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4517": {
        "Query": "Round down input value to nearest value of 10.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.floor()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4518": {
        "Query": "Round float and double numbers using Math.round",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4519": {
        "Query": "Rounds a double value to the exact value to one decimal point.",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4520": {
        "Query": "Rounds a float to a specified number of decimal places.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4521": {
        "Query": "Rounds down the value to the nearest lower power^2 value.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4522": {
        "Query": "Rounds the specified double value to the nearest tenth.",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4523": {
        "Query": "Run object finalization using System class",
        "GroundTruth": [
            "java.lang.System.runFinalization()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4524": {
        "Query": "Runs a thread asynchronously.",
        "GroundTruth": [
            "java.lang.ProcessBuilder.start()",
            "java.lang.Thread.start()"
        ],
        "APIClasses": [
            "java.lang.ProcessBuilder",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4525": {
        "Query": "Runs the given Callable on the JavaFX Application Thread.",
        "GroundTruth": [
            "java.util.concurrent.Future.get()"
        ],
        "APIClasses": [
            "java.util.concurrent.Future"
        ],
        "Source": "Tutorial Websites"
    },
    "4526": {
        "Query": "Runs the given Runnable on the JavaFX Application Thread.",
        "GroundTruth": [
            "java.util.concurrent.Future.get()"
        ],
        "APIClasses": [
            "java.util.concurrent.Future"
        ],
        "Source": "Tutorial Websites"
    },
    "4527": {
        "Query": "Runs the supplied class after a certain period of time, the thread will be executed in the EDT.",
        "GroundTruth": [
            "javax.swing.Timer.setRepeats()",
            "javax.swing.Timer.start()"
        ],
        "APIClasses": [
            "javax.swing.Timer"
        ],
        "Source": "Tutorial Websites"
    },
    "4528": {
        "Query": "Safe sub list operation",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.isEmpty()",
            "java.util.List.size()",
            "java.util.List.subList()",
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "4529": {
        "Query": "Safely Enabling Types or Methods to Operate on Objects of Various Types",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4530": {
        "Query": "Safely calculate hypotenuse value.",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4531": {
        "Query": "Sanitize a String so that it can be used as a Java identifier.",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.Character.isJavaIdentifierPart()",
            "java.lang.Character.isJavaIdentifierStart()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "4532": {
        "Query": "Save Dom Document to a file path",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.TransformerFactory.newTransformer()",
            "javax.xml.transform.Transformer.setOutputProperty()",
            "javax.xml.transform.Transformer.transform()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "4533": {
        "Query": "Save Exception Stacktrace to String",
        "GroundTruth": [
            "java.lang.Integer.parseInt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4534": {
        "Query": "Save String to a file by converting the text to a byte array",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.lang.String.getBytes()",
            "java.nio.file.Files.write()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.lang.String",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "4535": {
        "Query": "Save a BufferedImage to a Bitmap file.",
        "GroundTruth": [
            "javax.imageio.ImageIO.write()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "4536": {
        "Query": "Save byte array to a file",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.readAllBytes()",
            "java.nio.file.Files.write()",
            "java.nio.file.Path.resolveSibling()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "4537": {
        "Query": "Save custom object to file with ObjectInputStream and ObjectOutputStream",
        "GroundTruth": [
            "javax.swing.SpinnerNumberModel.getNumber()"
        ],
        "APIClasses": [
            "javax.swing.SpinnerNumberModel"
        ],
        "Source": "Tutorial Websites"
    },
    "4538": {
        "Query": "Save to a file with buffered stream",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.newOutputStream()",
            "java.io.Writer.write()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.io.Writer"
        ],
        "Source": "Tutorial Websites"
    },
    "4539": {
        "Query": "Save weka arff file with ArffSaver",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.awt.FileDialog.setFile()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.FileDialog"
        ],
        "Source": "Tutorial Websites"
    },
    "4540": {
        "Query": "Saves the given Swing document content in the given file.",
        "GroundTruth": [
            "javax.swing.text.EditorKit.write()"
        ],
        "APIClasses": [
            "javax.swing.text.EditorKit"
        ],
        "Source": "Tutorial Websites"
    },
    "4541": {
        "Query": "Saving and Retrieving a Preference Value",
        "GroundTruth": [
            "java.util.prefs.Preferences.userNodeForPackage()"
        ],
        "APIClasses": [
            "java.util.prefs.Preferences"
        ],
        "Source": "Tutorial Websites"
    },
    "4542": {
        "Query": "Saying Good Morning With A Text Field",
        "GroundTruth": [
            "java.lang.String.length()",
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "4543": {
        "Query": "Scale BigDecimal object to prefer scale.",
        "GroundTruth": [
            "java.math.BigDecimal.scale()",
            "java.math.BigDecimal.setScale()"
        ],
        "APIClasses": [
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "4544": {
        "Query": "Scale the original font of a JComponent by a given factor",
        "GroundTruth": [
            "java.awt.Font.deriveFont()",
            "java.lang.Math.round()",
            "java.awt.Font.getSize()"
        ],
        "APIClasses": [
            "java.awt.Font",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4545": {
        "Query": "Scales a BufferedImage using a theta that defines the scaling in both width and height.",
        "GroundTruth": [
            "java.awt.geom.AffineTransform.getScaleInstance()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.awt.geom.AffineTransform",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4546": {
        "Query": "Scales the given rectangle by the given scale factor.",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4547": {
        "Query": "Scales the specified array of doubles so that they sum to one.",
        "GroundTruth": [
            "java.lang.Integer.sum()",
            "java.lang.Float.sum()",
            "java.lang.Long.sum()",
            "java.lang.Double.sum()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.Float",
            "java.lang.Long",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4548": {
        "Query": "Scan apache hadoop hbase table",
        "GroundTruth": [
            "java.util.Scanner.next()",
            "java.util.Scanner.close()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "4549": {
        "Query": "Scans the class and all its predecessors (up to Object ) for fields.",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.util.Arrays.asList()",
            "java.lang.Class.getDeclaredFields()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Arrays",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "4550": {
        "Query": "Schedules a directory recursively for deletion on JVM exit.",
        "GroundTruth": [
            "java.io.File.deleteOnExit()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "4551": {
        "Query": "Schedules a file to be deleted when JVM exits.",
        "GroundTruth": [
            "java.io.File.isDirectory()",
            "java.io.File.deleteOnExit()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "4552": {
        "Query": "Scroll JTable to Show cell.",
        "GroundTruth": [
            "javax.swing.JTable.getCellRect()",
            "javax.swing.JTable.setRowSelectionInterval()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "4553": {
        "Query": "Scrolls JTable to the selected row.",
        "GroundTruth": [
            "javax.swing.JTable.getCellRect()",
            "javax.swing.JViewport.getViewPosition()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "javax.swing.JViewport"
        ],
        "Source": "Tutorial Websites"
    },
    "4554": {
        "Query": "Scrolls the given JComponent to its top or bottom.",
        "GroundTruth": [
            "javax.swing.SwingUtilities.getAncestorOfClass()",
            "java.awt.Scrollbar.setValue()",
            "java.awt.Scrollbar.getMinimum()",
            "java.awt.Scrollbar.getMaximum()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.awt.Scrollbar"
        ],
        "Source": "Tutorial Websites"
    },
    "4555": {
        "Query": "Search String for last Index Of Any character in it",
        "GroundTruth": [
            "java.lang.String.lastIndexOf()",
            "java.lang.String.length()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4556": {
        "Query": "Search String using indexOf",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.lastIndexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4557": {
        "Query": "Search Twitter user screen name and user name",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4558": {
        "Query": "Search an element of ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.ArrayList.contains()",
            "java.util.ArrayList.indexOf()",
            "java.util.ArrayList.lastIndexOf()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Tutorial Websites"
    },
    "4559": {
        "Query": "Search an element of Vector",
        "GroundTruth": [
            "java.lang.String.contains()",
            "java.lang.String.indexOf()",
            "java.lang.String.lastIndexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4560": {
        "Query": "Search an element of Vector from specific index with indexOf()",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.lastIndexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4561": {
        "Query": "Search by specifying a search filter and search controls",
        "GroundTruth": [
            "javax.naming.directory.SearchControls.setReturningAttributes()"
        ],
        "APIClasses": [
            "javax.naming.directory.SearchControls"
        ],
        "Source": "Tutorial Websites"
    },
    "4562": {
        "Query": "Search by specifying a search filter, objects to fill in filter, andsearch controls",
        "GroundTruth": [
            "javax.naming.directory.SearchControls.setReturningAttributes()"
        ],
        "APIClasses": [
            "javax.naming.directory.SearchControls"
        ],
        "Source": "Tutorial Websites"
    },
    "4563": {
        "Query": "Search char index Of Any in a String",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4564": {
        "Query": "Search elements of LinkedList",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.lastIndexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4565": {
        "Query": "Search for last Index Of a character in a String",
        "GroundTruth": [
            "java.lang.String.substring()",
            "java.lang.StringBuilder.lastIndexOf()",
            "java.lang.StringBuffer.lastIndexOf()",
            "java.lang.String.lastIndexOf()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "4566": {
        "Query": "Search item in array by indexof",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4567": {
        "Query": "Search pattern in a string, return all offset index",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4568": {
        "Query": "Search the position of the given object in the list of ordered objects.",
        "GroundTruth": [
            "java.util.List.size()",
            "java.util.List.get()",
            "java.util.Objects.compare()",
            "java.util.Comparator.compare()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.util.Objects",
            "java.util.Comparator"
        ],
        "Source": "Tutorial Websites"
    },
    "4569": {
        "Query": "Search whether any object in 'objects' array does equal 'another object'.",
        "GroundTruth": [
            "java.lang.Object.equals()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4570": {
        "Query": "Searches an XML string for an entity definition and returns its value.",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()",
            "java.util.jar.Attributes.Name.equals()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.jar.Attributes.Name"
        ],
        "Source": "Tutorial Websites"
    },
    "4571": {
        "Query": "Searches for a cookie within a HttpServletRequest.",
        "GroundTruth": [
            "java.net.CookieStore.getCookies()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.net.CookieStore",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4572": {
        "Query": "Searches for an element in an array, returning its index if present.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4573": {
        "Query": "Security exception or configure your policy to allow applets from its location to write to the file",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4574": {
        "Query": "See if string is a Roman numeral using looser (older) definition.",
        "GroundTruth": [
            "java.lang.String.toUpperCase()",
            "java.lang.Character.toUpperCase()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "4575": {
        "Query": "See if string is a Roman numeral.",
        "GroundTruth": [
            "java.lang.String.toUpperCase()",
            "java.lang.Character.toUpperCase()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "4576": {
        "Query": "See if string is an ordinal Roman numeral using looser definition.",
        "GroundTruth": [
            "java.lang.String.toUpperCase()",
            "java.lang.Character.toUpperCase()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "4577": {
        "Query": "Select Single Element from parent Element using XPath",
        "GroundTruth": [
            "javax.xml.xpath.XPath.compile()",
            "javax.xml.xpath.XPathExpression.evaluate()",
            "javax.xml.xpath.XPathFactory.newXPath()",
            "javax.xml.xpath.XPathFactory.newInstance()"
        ],
        "APIClasses": [
            "javax.xml.xpath.XPath",
            "javax.xml.xpath.XPathExpression",
            "javax.xml.xpath.XPathFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "4578": {
        "Query": "Sending a Cookie to an HTTP Server",
        "GroundTruth": [
            "java.net.URL.openConnection()",
            "java.net.URLConnection.setRequestProperty()"
        ],
        "APIClasses": [
            "java.net.URL",
            "java.net.URLConnection"
        ],
        "Source": "Tutorial Websites"
    },
    "4579": {
        "Query": "Sends a MidiUtils.MidiTuningStandard.keyBasedTuningDump MIDI message to a receiver using the specified tuning in cents.",
        "GroundTruth": [
            "javax.sound.midi.Receiver.send()"
        ],
        "APIClasses": [
            "javax.sound.midi.Receiver"
        ],
        "Source": "Tutorial Websites"
    },
    "4580": {
        "Query": "Sequentially searching an array for an item.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4581": {
        "Query": "Serialize a DOM document to an output stream.",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()",
            "javax.xml.transform.Transformer.transform()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "4582": {
        "Query": "Serializes a W3C DOM node to a String and dumps it to System.out.",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "4583": {
        "Query": "Serializes the given double as a string.",
        "GroundTruth": [
            "java.lang.Double.toString()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4584": {
        "Query": "Serializing a Bean to XML",
        "GroundTruth": [
            "java.beans.Encoder.writeObject()"
        ],
        "APIClasses": [
            "java.beans.Encoder"
        ],
        "Source": "Tutorial Websites"
    },
    "4585": {
        "Query": "Serializing an Immutable Bean Property to XML",
        "GroundTruth": [
            "java.beans.Encoder.setPersistenceDelegate()",
            "java.beans.Encoder.writeObject()"
        ],
        "APIClasses": [
            "java.beans.Encoder"
        ],
        "Source": "Tutorial Websites"
    },
    "4586": {
        "Query": "Set Background Color of JLabel",
        "GroundTruth": [
            "javax.swing.JComponent.setOpaque()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "4587": {
        "Query": "Set Capability for selenium Desired Capabilities",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4588": {
        "Query": "Set Private field value via reflection",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getDeclaredField()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "4589": {
        "Query": "Set Tooltip for JLabel",
        "GroundTruth": [
            "javax.swing.JComponent.setToolTipText()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "4590": {
        "Query": "Set Union, Gets a Set containing all of the entries from the sets provided.",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4591": {
        "Query": "Set a Attribute in the Swing HTMLDocument structure.",
        "GroundTruth": [
            "javax.swing.text.Element.getDocument()",
            "javax.swing.text.Element.getStartOffset()",
            "javax.swing.text.Element.getEndOffset()"
        ],
        "APIClasses": [
            "javax.swing.text.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "4592": {
        "Query": "Set a File Owner Using Files.setAttribute()",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Path.getFileSystem()",
            "java.nio.file.FileSystem.getUserPrincipalLookupService()",
            "java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByName()",
            "java.nio.file.Files.setAttribute()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Path",
            "java.nio.file.FileSystem",
            "java.nio.file.attribute.UserPrincipalLookupService",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "4593": {
        "Query": "Set allowed event for selenium remove server",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4594": {
        "Query": "Set array element value using reflection",
        "GroundTruth": [
            "java.lang.reflect.Array.setInt()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4595": {
        "Query": "Set attach header for HttpServletResponse",
        "GroundTruth": [
            "javax.xml.soap.MimeHeaders.setHeader()"
        ],
        "APIClasses": [
            "javax.xml.soap.MimeHeaders"
        ],
        "Source": "Tutorial Websites"
    },
    "4596": {
        "Query": "Set field value via reflection",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getDeclaredField()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "4597": {
        "Query": "Set hadoop file output path",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4598": {
        "Query": "Set last modified time of a file or directory",
        "GroundTruth": [
            "java.io.File.lastModified()",
            "java.io.File.setLastModified()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "4599": {
        "Query": "Set maximum number of directory levels to visit to ensure that all levels are traversed",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.util.EnumSet.of()",
            "java.nio.file.Files.walkFileTree()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.util.EnumSet",
            "java.nio.file.Files",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4600": {
        "Query": "Set new cookie by name, value and max age, with default path \"/\" from Servlet.",
        "GroundTruth": [
            "java.net.HttpCookie.setMaxAge()",
            "java.net.HttpCookie.setPath()"
        ],
        "APIClasses": [
            "java.net.HttpCookie",
            "java.net.HttpCookie"
        ],
        "Source": "Tutorial Websites"
    },
    "4601": {
        "Query": "Set of get ToolTip for JTextField",
        "GroundTruth": [
            "javax.swing.JComponent.setToolTipText()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "4602": {
        "Query": "Set or replace the value of a named attribute for JSP PageContext.",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4603": {
        "Query": "Set selenium Firefox Profile preference",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4604": {
        "Query": "Set short and long value to array using Array reflection",
        "GroundTruth": [
            "java.lang.reflect.Array.setShort()",
            "java.lang.reflect.Array.setLong()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "4605": {
        "Query": "Set the XML attribute value under the specified name, if the given value is neither null nor an empty String .",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4606": {
        "Query": "Set the given parameter values in the given PreparedStatement.",
        "GroundTruth": [
            "java.sql.Ref.setObject()",
            "java.sql.PreparedStatement.setObject()",
            "java.sql.CallableStatement.setObject()"
        ],
        "APIClasses": [
            "java.sql.Ref",
            "java.sql.PreparedStatement",
            "java.sql.CallableStatement"
        ],
        "Source": "Tutorial Websites"
    },
    "4607": {
        "Query": "Set the on the ThreadLocal instance",
        "GroundTruth": [
            "java.lang.ThreadLocal.get()",
            "java.lang.ThreadLocal.set()"
        ],
        "APIClasses": [
            "java.lang.ThreadLocal"
        ],
        "Source": "Tutorial Websites"
    },
    "4608": {
        "Query": "Set the sort order for a table using the specified column given a RowSorter for the TableModel containing the column.",
        "GroundTruth": [
            "java.lang.String.equals()",
            "javax.swing.RowSorter.setSortKeys()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.swing.RowSorter"
        ],
        "Source": "Tutorial Websites"
    },
    "4609": {
        "Query": "Set the value of XML attribute",
        "GroundTruth": [
            "org.w3c.dom.Element.setAttribute()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "4610": {
        "Query": "Set up appium server",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Thread.sleep()",
            "java.lang.Runtime.exec()",
            "java.lang.Process.destroy()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Thread",
            "java.lang.Process"
        ],
        "Source": "Tutorial Websites"
    },
    "4611": {
        "Query": "Set up selenium ChromeDriver",
        "GroundTruth": [
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4612": {
        "Query": "Set up selenium InternetExplorerDriver",
        "GroundTruth": [
            "java.lang.System.setProperty()",
            "java.util.List.size()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4613": {
        "Query": "Set value for Field of enum using reflection",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.reflect.AccessibleObject.setAccessible()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class",
            "java.lang.reflect.AccessibleObject"
        ],
        "Source": "Tutorial Websites"
    },
    "4614": {
        "Query": "Set value for Progress Bars",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4615": {
        "Query": "Set width of column in a JTable to 'width' pixels.",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMinWidth()",
            "javax.swing.table.TableColumn.setMaxWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "4616": {
        "Query": "Sets a long parameter in a PreparedStatement to either a value or null.",
        "GroundTruth": [
            "java.sql.PreparedStatement.setLong()",
            "java.sql.CallableStatement.setLong()",
            "java.sql.PreparedStatement.setNull()",
            "java.sql.CallableStatement.setNull()"
        ],
        "APIClasses": [
            "java.sql.PreparedStatement",
            "java.sql.CallableStatement"
        ],
        "Source": "Tutorial Websites"
    },
    "4617": {
        "Query": "Sets a private field value.",
        "GroundTruth": [
            "java.lang.Class.getDeclaredField()",
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.set()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "4618": {
        "Query": "Sets an array to the specified length scraping or padding the beginning if necessary.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()",
            "java.lang.String.toString()",
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4619": {
        "Query": "Sets an array to the specified length scraping or padding the end if necessary.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()",
            "java.lang.String.toString()",
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4620": {
        "Query": "Sets static boolean Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.setBoolean()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4621": {
        "Query": "Sets static char Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.setChar()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4622": {
        "Query": "Sets static double Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.setDouble()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4623": {
        "Query": "Sets static float Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.setFloat()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4624": {
        "Query": "Sets static int Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.setInt()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4625": {
        "Query": "Sets static long Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.setLong()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4626": {
        "Query": "Sets static object Field.",
        "GroundTruth": [
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.set()",
            "java.lang.Class.getDeclaredField()"
        ],
        "APIClasses": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "4627": {
        "Query": "Sets the Graphics2D instance's anti-alias feature.",
        "GroundTruth": [
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "4628": {
        "Query": "Sets the calendar field of the given calendar by amount.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()",
            "java.util.Calendar.get()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "4629": {
        "Query": "Sets the cursor to default.",
        "GroundTruth": [
            "javax.swing.SwingUtilities.windowForComponent()",
            "java.awt.Window.setCursor()",
            "java.awt.Cursor.getPredefinedCursor()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.awt.Window",
            "java.awt.Cursor"
        ],
        "Source": "Tutorial Websites"
    },
    "4630": {
        "Query": "Sets the cursor to hourglass.",
        "GroundTruth": [
            "javax.swing.SwingUtilities.windowForComponent()",
            "java.awt.Window.setCursor()",
            "java.awt.Cursor.getPredefinedCursor()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.awt.Window",
            "java.awt.Cursor"
        ],
        "Source": "Tutorial Websites"
    },
    "4631": {
        "Query": "Sets the icon of a button based on an ImageIcon",
        "GroundTruth": [
            "javax.swing.AbstractButton.setContentAreaFilled()",
            "javax.swing.BorderFactory.createEmptyBorder()"
        ],
        "APIClasses": [
            "javax.swing.AbstractButton",
            "javax.swing.BorderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "4632": {
        "Query": "Sets the length of a vector.",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4633": {
        "Query": "Sets the location of the specified window so that it is centered on screen.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()",
            "java.awt.Window.setLocation()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "4634": {
        "Query": "Sets the look and feel of the calling Java program to that of the system which it is running on.",
        "GroundTruth": [
            "javax.swing.UIManager.setLookAndFeel()",
            "javax.swing.UIManager.getSystemLookAndFeelClassName()"
        ],
        "APIClasses": [
            "javax.swing.UIManager"
        ],
        "Source": "Tutorial Websites"
    },
    "4635": {
        "Query": "Sets the maximum size of a JComponent to the preferred size",
        "GroundTruth": [
            "java.awt.Component.setMaximumSize()",
            "java.awt.Component.getPreferredSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "4636": {
        "Query": "Sets the specified Insets as margins for the given PageFormat instance.",
        "GroundTruth": [
            "java.awt.print.PageFormat.getPaper()",
            "java.awt.print.Paper.setImageableArea()",
            "java.awt.print.Paper.getWidth()",
            "java.awt.print.Paper.getHeight()",
            "java.awt.print.PageFormat.setPaper()"
        ],
        "APIClasses": [
            "java.awt.print.PageFormat",
            "java.awt.print.Paper"
        ],
        "Source": "Tutorial Websites"
    },
    "4637": {
        "Query": "Sets the value of the entry in the map for the given key",
        "GroundTruth": [
            "java.util.Map.get()",
            "java.util.List.add()",
            "java.util.Map.remove()",
            "java.util.Map.put()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4638": {
        "Query": "Sets the value of the given DOM element's attribute with the specified name to the given value.",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.Character.isISOControl()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "4639": {
        "Query": "Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.clear()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "4640": {
        "Query": "Setting Case Sensitivity in a Regular Expression",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "4641": {
        "Query": "Setting LDAP Context Request Controls",
        "GroundTruth": [
            "javax.naming.NamingEnumeration.hasMore()"
        ],
        "APIClasses": [
            "javax.naming.NamingEnumeration"
        ],
        "Source": "Tutorial Websites"
    },
    "4642": {
        "Query": "Setting a Description for Image Icons",
        "GroundTruth": [
            "javax.swing.ImageIcon.setDescription()"
        ],
        "APIClasses": [
            "javax.swing.ImageIcon"
        ],
        "Source": "Tutorial Websites"
    },
    "4643": {
        "Query": "Setting a Filter on a Logger Handler",
        "GroundTruth": [
            "java.util.logging.Handler.setFilter()",
            "java.util.logging.Logger.getLogger()",
            "java.util.logging.Logger.addHandler()"
        ],
        "APIClasses": [
            "java.util.logging.Handler",
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "4644": {
        "Query": "Setting a Keyboard Accelerator for a Menu Item",
        "GroundTruth": [
            "javax.swing.KeyStroke.getKeyStroke()"
        ],
        "APIClasses": [
            "javax.swing.KeyStroke"
        ],
        "Source": "Tutorial Websites"
    },
    "4645": {
        "Query": "Setting an Accessible Name for an Image Button",
        "GroundTruth": [
            "javax.swing.JComponent.setToolTipText()",
            "java.awt.Button.getAccessibleContext()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "java.awt.Button"
        ],
        "Source": "Tutorial Websites"
    },
    "4646": {
        "Query": "Setting the Byte Ordering for a ByteBuffer",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocate()",
            "java.nio.ByteBuffer.putShort()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "4647": {
        "Query": "Setting the Decimal Place of a Big Decimal Value",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4648": {
        "Query": "Setting the Number of Rows to Prefetch When Executing a SQL Query",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.ResultSet.setFetchSize()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "4649": {
        "Query": "Setting the Order of the Color Chooser Panel Tabs in a JColorChooser Dialog",
        "GroundTruth": [
            "javax.swing.JColorChooser.getChooserPanels()",
            "javax.swing.JColorChooser.setChooserPanels()",
            "java.lang.Object.getClass()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "javax.swing.JColorChooser",
            "javax.swing.JColorChooser",
            "java.lang.Object",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4650": {
        "Query": "Setting the Orientation of a Printed Page",
        "GroundTruth": [
            "java.awt.print.PrinterJob.getPrinterJob()",
            "java.awt.print.PrinterJob.defaultPage()",
            "java.awt.print.PrinterJob.setPrintable()"
        ],
        "APIClasses": [
            "java.awt.print.PrinterJob",
            "java.awt.print.PrinterJob",
            "java.awt.print.PrinterJob"
        ],
        "Source": "Tutorial Websites"
    },
    "4651": {
        "Query": "Setting the Tab Size of a JTextArea Component",
        "GroundTruth": [
            "javax.swing.JTextArea.setTabSize()"
        ],
        "APIClasses": [
            "javax.swing.JTextArea"
        ],
        "Source": "Tutorial Websites"
    },
    "4652": {
        "Query": "Share resource between two threads",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4653": {
        "Query": "Shell remount Linux Read Write and Copy",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "4654": {
        "Query": "Shifting Elements in an Array",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4655": {
        "Query": "Shortest path between all the pairs of nodes",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4656": {
        "Query": "Show Twitter public time line",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4657": {
        "Query": "Show a confirmation dialog box",
        "GroundTruth": [
            "javax.swing.JOptionPane.showConfirmDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "4658": {
        "Query": "Show and wait for the response of the given JavaFX dialog .",
        "GroundTruth": [
            "java.util.concurrent.Future.get()"
        ],
        "APIClasses": [
            "java.util.concurrent.Future"
        ],
        "Source": "Tutorial Websites"
    },
    "4659": {
        "Query": "Show input dialog in item selection mode with specified title, message and initial selection.",
        "GroundTruth": [
            "javax.swing.JOptionPane.showInputDialog()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4660": {
        "Query": "Show input dialog with specified title and message.",
        "GroundTruth": [
            "javax.swing.JOptionPane.showInputDialog()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4661": {
        "Query": "Showing the Table Header in a Non-Scrollable JTable Component",
        "GroundTruth": [
            "javax.swing.JTable.getTableHeader()",
            "java.awt.Container.setLayout()",
            "java.awt.Container.add()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "java.awt.Container"
        ],
        "Source": "Tutorial Websites"
    },
    "4662": {
        "Query": "Shows an error message Dialog using the given title and message.",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "4663": {
        "Query": "Shows an informational message Dialog using the given title and message.",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "4664": {
        "Query": "Shows an question message Dialog using the given title and message.",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "javax.swing.JOptionPane.showConfirmDialog()",
            "javax.swing.SwingUtilities.invokeAndWait()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "4665": {
        "Query": "Shows authenticated user's suggested user categories in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4666": {
        "Query": "Shows different ways of constructing an Rdn",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4667": {
        "Query": "Shows friendship between two users in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4668": {
        "Query": "Shows how values in the RDN can be retrieved from their string representation.",
        "GroundTruth": [
            "javax.naming.ldap.Rdn.escapeValue()",
            "javax.naming.ldap.Rdn.unescapeValue()"
        ],
        "APIClasses": [
            "javax.naming.ldap.Rdn"
        ],
        "Source": "Tutorial Websites"
    },
    "4669": {
        "Query": "Shows outgoing friendship ids in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4670": {
        "Query": "Shows the locations that Twitter has trending topic information for",
        "GroundTruth": [
            "javax.tools.JavaFileManager.Location.getName()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "javax.tools.JavaFileManager.Location",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4671": {
        "Query": "Shows ways of accessing the type/value pair(s) from an RDN",
        "GroundTruth": [
            "javax.naming.ldap.Rdn.size()",
            "javax.naming.ldap.Rdn.getType()",
            "javax.naming.ldap.Rdn.getValue()",
            "javax.naming.ldap.Rdn.toAttributes()"
        ],
        "APIClasses": [
            "javax.naming.ldap.Rdn"
        ],
        "Source": "Tutorial Websites"
    },
    "4672": {
        "Query": "Shuffle an array of type T",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4673": {
        "Query": "Shuffle an array or a portion of an array",
        "GroundTruth": [
            "java.util.Random.nextInt()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "4674": {
        "Query": "Shuffle elements of ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.shuffle()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4675": {
        "Query": "Shuffle selected left rows to right JTable table model.",
        "GroundTruth": [
            "javax.swing.JTable.getSelectedRows()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "4676": {
        "Query": "Shuffle selected right rows to left table model for JTable.",
        "GroundTruth": [
            "javax.swing.JTable.getSelectedRows()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "4677": {
        "Query": "Shuffling the Elements of a List or Array",
        "GroundTruth": [
            "java.util.Collections.shuffle()",
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4678": {
        "Query": "Simple Try With Resource",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4679": {
        "Query": "Simple method that calculate a tip base on the amount of the bill and a given tip percentage",
        "GroundTruth": [
            "java.lang.Double.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4680": {
        "Query": "Simple method to replace characters in a String with Stars to mask the password.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.StringBuilder.append()",
            "java.lang.StringBuilder.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.StringBuilder"
        ],
        "Source": "Tutorial Websites"
    },
    "4681": {
        "Query": "Simple method to retrieve a value from a concurrent hashmap, or generate a value if one was not found.",
        "GroundTruth": [
            "java.util.Map.get()",
            "java.util.Map.putIfAbsent()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "4682": {
        "Query": "SimpleDateFormat to format Date object using custom format string",
        "GroundTruth": [
            "java.text.SimpleDateFormat.format()"
        ],
        "APIClasses": [
            "java.text.SimpleDateFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "4683": {
        "Query": "Simulate a temporary file by adding DELETE_ON_CLOSE option in CREATE option",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.newOutputStream()",
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4684": {
        "Query": "Skip a specified number of bytes, i.e., advance the buffer's position.",
        "GroundTruth": [
            "java.nio.Buffer.position()",
            "java.nio.channels.FileChannel.position()",
            "java.nio.channels.FileLock.position()",
            "java.nio.channels.SeekableByteChannel.position()"
        ],
        "APIClasses": [
            "java.nio.Buffer",
            "java.nio.channels.FileChannel",
            "java.nio.channels.FileLock",
            "java.nio.channels.SeekableByteChannel"
        ],
        "Source": "Tutorial Websites"
    },
    "4685": {
        "Query": "Sleep for seconds seconds, without the exceptions",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4686": {
        "Query": "Solves a linear system with two unknowns: c1[0]*x+c1[1]*y+c1[2]=0 c2[0]*x+c2[1]*y+c2[2]=0",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4687": {
        "Query": "Solves the cubic curve giving parameterized t values at points where the curve has an y value matching the given value.",
        "GroundTruth": [
            "java.awt.geom.CubicCurve2D.solveCubic()"
        ],
        "APIClasses": [
            "java.awt.geom.CubicCurve2D"
        ],
        "Source": "Tutorial Websites"
    },
    "4688": {
        "Query": "Solves the quadratic curve giving parameterized t values at points where the curve has an y value matching the given value.",
        "GroundTruth": [
            "java.awt.geom.QuadCurve2D.solveQuadratic()"
        ],
        "APIClasses": [
            "java.awt.geom.QuadCurve2D"
        ],
        "Source": "Tutorial Websites"
    },
    "4689": {
        "Query": "Some of the Unicode apostrophe-like characters are not handled as expected",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4690": {
        "Query": "Sort Java ArrayList in descending order using comparator",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.reverseOrder()",
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4691": {
        "Query": "Sort Vector in descending order using comparator",
        "GroundTruth": [
            "java.util.Collections.reverseOrder()",
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4692": {
        "Query": "Sort an array with quick sort",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4693": {
        "Query": "Sort array and return the original indices of each item in the sorted list, such that array[returnValue[k]] is the kth item in the sorted list.",
        "GroundTruth": [
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4694": {
        "Query": "Sort double Array into ascending order",
        "GroundTruth": [
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4695": {
        "Query": "Sort elements of ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.sort()",
            "java.util.ArrayList.size()",
            "java.util.ArrayList.get()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4696": {
        "Query": "Sort elements of Java Vector",
        "GroundTruth": [
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4697": {
        "Query": "Sort long type Array",
        "GroundTruth": [
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4698": {
        "Query": "Sort words by the length (in increasing order) of each word, and then by lexicographical order if they are of the same length.",
        "GroundTruth": [
            "java.util.Collections.sort()",
            "java.lang.String.length()",
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4699": {
        "Query": "Sort words by the reverse length(i.e., from the longest to the shortest length ) of each word.",
        "GroundTruth": [
            "java.util.Collections.sort()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.util.Collections",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4700": {
        "Query": "Sorted List Merge/Remove via For Loop",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4701": {
        "Query": "Sorting an array with Arrays.sort method",
        "GroundTruth": [
            "java.lang.Math.random()",
            "java.util.Arrays.toString()",
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4702": {
        "Query": "Sorting an array with insertion sort.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4703": {
        "Query": "Sorting an array with merge sort.",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4704": {
        "Query": "Sorting an array with selection sort.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4705": {
        "Query": "Specify the default directory where a temporary file is created",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.createTempFile()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4706": {
        "Query": "SpinnerDateModel for an ordered list of dates.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "4707": {
        "Query": "Split String by digit in regular expression",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4708": {
        "Query": "Split String by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4709": {
        "Query": "Splits a byte array input into two arrays at index, i.e.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4710": {
        "Query": "Splits the Iterable .",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4711": {
        "Query": "Splits the given array into blocks of given size and adds padding to the last one, if necessary.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.ceil()",
            "java.util.Arrays.fill()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4712": {
        "Query": "Splits the string on every token into an array of stack frames.",
        "GroundTruth": [
            "java.util.StringTokenizer.countTokens()"
        ],
        "APIClasses": [
            "java.util.StringTokenizer"
        ],
        "Source": "Tutorial Websites"
    },
    "4713": {
        "Query": "Splits the string using a comma, creates and returns an array list of strings.",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4714": {
        "Query": "Splitting up a string",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4715": {
        "Query": "Stack class of package java.util.",
        "GroundTruth": [
            "java.util.Stack.push()",
            "java.util.Stack.pop()",
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Stack",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4716": {
        "Query": "Start Process with environment variables",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.lang.ProcessBuilder.environment()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.ProcessBuilder"
        ],
        "Source": "Tutorial Websites"
    },
    "4717": {
        "Query": "Starting a Background Task",
        "GroundTruth": [
            "java.lang.Thread.currentThread()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4718": {
        "Query": "Starting the Recursive Process",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.walkFileTree()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4719": {
        "Query": "Starts And End With Capital using regex",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.group()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "4720": {
        "Query": "Stops all threads that were run via start Thread().",
        "GroundTruth": [
            "java.lang.Iterable.forEach()"
        ],
        "APIClasses": [
            "java.lang.Iterable"
        ],
        "Source": "Tutorial Websites"
    },
    "4721": {
        "Query": "Stops any editing for a given cell on a JTable.",
        "GroundTruth": [
            "javax.swing.JTable.getEditingColumn()",
            "javax.swing.JTable.getEditingRow()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "4722": {
        "Query": "Stored Procedure accepts no parameters and returns no value",
        "GroundTruth": [
            "java.sql.Connection.prepareCall()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "4723": {
        "Query": "Stored Procedure accepts two IN parameters and does not return any value.",
        "GroundTruth": [
            "java.sql.Connection.prepareCall()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "4724": {
        "Query": "String To Bitmap BufferedImage",
        "GroundTruth": [
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "4725": {
        "Query": "String class substring methods.",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4726": {
        "Query": "String methods startsWith and endsWith.",
        "GroundTruth": [
            "java.lang.String.startsWith()",
            "java.lang.String.endsWith()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4727": {
        "Query": "String searching methods indexOf and lastIndexOf.",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.lastIndexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4728": {
        "Query": "String starts With Any Iterable",
        "GroundTruth": [
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4729": {
        "Query": "String to Byte Buffer",
        "GroundTruth": [
            "java.nio.ByteBuffer.wrap()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "4730": {
        "Query": "String to Chinese Encoding",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4731": {
        "Query": "StringBuffer delete remove character or clear content",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4732": {
        "Query": "StringTokenizer - Return Delimiters along with Tokens",
        "GroundTruth": [
            "java.util.StringTokenizer.hasMoreTokens()"
        ],
        "APIClasses": [
            "java.util.StringTokenizer"
        ],
        "Source": "Tutorial Websites"
    },
    "4733": {
        "Query": "StringTokenizer object used to tokenize strings",
        "GroundTruth": [
            "java.util.Scanner.nextLine()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4734": {
        "Query": "Strips HTML tags from text",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4735": {
        "Query": "Strips a mnemonic character out of a given text.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4736": {
        "Query": "Strips all XML tags (converts to plain text).",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4737": {
        "Query": "Strips the text from mnemonic indicators.",
        "GroundTruth": [
            "java.lang.String.replace()",
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4738": {
        "Query": "Stroking or Filling with a Texture",
        "GroundTruth": [
            "java.awt.Graphics2D.setPaint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "4739": {
        "Query": "Submit Runnable to ExecutorService",
        "GroundTruth": [
            "java.util.concurrent.Executors.newSingleThreadExecutor()",
            "java.util.concurrent.ExecutorService.submit()",
            "java.util.concurrent.ExecutorService.shutdown()",
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.util.concurrent.Executors",
            "java.util.concurrent.ExecutorService",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4740": {
        "Query": "Subtracts the two arrays together (component wise)",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toString()",
            "java.lang.System.getProperty()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4741": {
        "Query": "Subtracts the values in the two arrays of integers element-wise.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4742": {
        "Query": "Suggest JVM to Run Garbage Collector",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.gc()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "4743": {
        "Query": "Suggest JVM to Run Object Finalization",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.runFinalization()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "4744": {
        "Query": "Sum integer value read from argument",
        "GroundTruth": [
            "java.lang.Integer.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4745": {
        "Query": "Sum the difference between each element in an array",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "javax.swing.SwingUtilities.computeDifference()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "4746": {
        "Query": "Sums all array components then puts to power n.",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4747": {
        "Query": "Supporting multiple threads using the ThreadLocalRandom class",
        "GroundTruth": [
            "java.util.concurrent.ThreadLocalRandom.current()"
        ],
        "APIClasses": [
            "java.util.concurrent.ThreadLocalRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "4748": {
        "Query": "Surrounds a path, ensuring that it starts with a '/' and ends with a '/'.",
        "GroundTruth": [
            "java.lang.String.charAt()",
            "java.lang.String.length()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4749": {
        "Query": "Swap elements of ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.Collections.swap()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4750": {
        "Query": "Swing ListModel index Of",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4751": {
        "Query": "Swing Table set Column Size",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMinWidth()",
            "javax.swing.table.TableColumn.setPreferredWidth()",
            "javax.swing.table.TableColumn.setMaxWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "4752": {
        "Query": "Swing Table set Columns Size",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMinWidth()",
            "javax.swing.table.TableColumn.setPreferredWidth()",
            "javax.swing.table.TableColumn.setMaxWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "4753": {
        "Query": "Switch on String value",
        "GroundTruth": [
            "java.lang.String.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4754": {
        "Query": "Switches the first character of the propertyName to upper case and adds the prefix",
        "GroundTruth": [
            "java.lang.String.valueOf()",
            "java.lang.String.charAt()",
            "java.lang.String.toUpperCase()",
            "java.lang.String.replaceFirst()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4755": {
        "Query": "TCP server that runs on port 9090",
        "GroundTruth": [
            "java.net.Socket.getOutputStream()",
            "java.net.Socket.close()"
        ],
        "APIClasses": [
            "java.net.Socket"
        ],
        "Source": "Tutorial Websites"
    },
    "4756": {
        "Query": "T[] array to List<T>",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4757": {
        "Query": "Tag none using stanford nlp",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4758": {
        "Query": "Take reverse complement of a string.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4759": {
        "Query": "Takes a linear array of size 16 and converts it into a 4x4 state array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4760": {
        "Query": "Takes a probability distribution and reduces higher-order terms by contributions arising from combinations of lower order terms.",
        "GroundTruth": [
            "java.util.Arrays.copyOf()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4761": {
        "Query": "Takes an array and counts how many of its elements equals with the parameter",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4762": {
        "Query": "Takes in an integer, and returns a String that adds commas to the appropriate locations within the number.",
        "GroundTruth": [
            "java.util.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "4763": {
        "Query": "Takes stacktrace string out of exception.",
        "GroundTruth": [
            "java.lang.Throwable.printStackTrace()",
            "java.io.PrintWriter.close()",
            "java.io.StringWriter.toString()"
        ],
        "APIClasses": [
            "java.lang.Throwable",
            "java.io.PrintWriter",
            "java.io.StringWriter"
        ],
        "Source": "Tutorial Websites"
    },
    "4764": {
        "Query": "Takes the absolute value of each component of an array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.abs()",
            "java.lang.String.toString()",
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math",
            "java.lang.String",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4765": {
        "Query": "Tells whether an element is present in an array.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4766": {
        "Query": "Tells whether or not the given string contains or not new line characters (both line feed as carriage return).",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "4767": {
        "Query": "Terminate Java Virtual Machine (JVM)",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.halt()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "4768": {
        "Query": "Terminate virtual machine using System class",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4769": {
        "Query": "Test  input in while condition",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4770": {
        "Query": "Test Android Calculator using appium",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Thread.sleep()",
            "java.lang.Runtime.exec()",
            "java.lang.Process.destroy()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Thread",
            "java.lang.Process"
        ],
        "Source": "Tutorial Websites"
    },
    "4771": {
        "Query": "Test for equality with Objects.equals",
        "GroundTruth": [
            "java.util.Objects.equals()"
        ],
        "APIClasses": [
            "java.util.Objects"
        ],
        "Source": "Tutorial Websites"
    },
    "4772": {
        "Query": "Test if a given file is located inside the given directory.",
        "GroundTruth": [
            "java.io.File.getCanonicalPath()",
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.lang.String",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "4773": {
        "Query": "Test if four points lay on one line.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4774": {
        "Query": "Test to see if the given address string represents a literal IPv4 address.",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4775": {
        "Query": "Testing a String for a Palindrome",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.toUpperCase()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4776": {
        "Query": "Testing requireNonNull(T obj, String message) from Objects class",
        "GroundTruth": [
            "java.util.Objects.requireNonNull()"
        ],
        "APIClasses": [
            "java.util.Objects"
        ],
        "Source": "Tutorial Websites"
    },
    "4777": {
        "Query": "Tests if a given BigInteger value is a positive prime number.",
        "GroundTruth": [
            "java.math.BigInteger.isProbablePrime()",
            "java.lang.Integer.signum()",
            "java.lang.Long.signum()",
            "java.lang.Math.signum()",
            "java.lang.StrictMath.signum()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "4778": {
        "Query": "Tests if a method throws a checked exception from enterprise annotation method.",
        "GroundTruth": [
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "4779": {
        "Query": "Tests if at least one element in as satisfies predicate p.",
        "GroundTruth": [
            "java.util.function.LongPredicate.test()",
            "java.util.function.BiPredicate.test()",
            "java.util.function.DoublePredicate.test()",
            "java.util.function.Predicate.test()",
            "java.util.function.IntPredicate.test()"
        ],
        "APIClasses": [
            "java.util.function.LongPredicate",
            "java.util.function.BiPredicate",
            "java.util.function.DoublePredicate",
            "java.util.function.Predicate",
            "java.util.function.IntPredicate"
        ],
        "Source": "Tutorial Websites"
    },
    "4780": {
        "Query": "Tests if the given object is Immutable.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.String.contains()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4781": {
        "Query": "Tests to see if the filename has a any of the standard file extensions of common image formats",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.substring()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4782": {
        "Query": "Tests whether or not the current VM is a Java 6 or higher VM.",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4783": {
        "Query": "Tests whether the given XML TransformerFactory is known to support XSLT 2.0.",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.String",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4784": {
        "Query": "Tests whether the given node is a child of the given parent XML node.",
        "GroundTruth": [
            "org.w3c.dom.Node.getParentNode()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "4785": {
        "Query": "Tests whether the given string is a valid XML 1.1 name.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4786": {
        "Query": "Tests whether the given string is a valid XML name.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4787": {
        "Query": "Tests whether the ip Address is within the address space defined by the ip Address With Net mask.",
        "GroundTruth": [
            "java.lang.Integer.numberOfLeadingZeros()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4788": {
        "Query": "The Life Cycle of a JavaFX Application",
        "GroundTruth": [
            "java.lang.Thread.currentThread()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4789": {
        "Query": "The Program to Send E-Mail [J2EE]",
        "GroundTruth": [
            "javax.imageio.spi.IIORegistry.getDefaultInstance()",
            "java.security.cert.X509CertSelector.setSubject()"
        ],
        "APIClasses": [
            "javax.imageio.spi.IIORegistry",
            "java.security.cert.X509CertSelector"
        ],
        "Source": "Tutorial Websites"
    },
    "4790": {
        "Query": "The current date and time formatted as ISO 8601.",
        "GroundTruth": [
            "java.text.DateFormat.format()"
        ],
        "APIClasses": [
            "java.text.DateFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "4791": {
        "Query": "The instance XMLGregorianCalendar attributes contains current date and time.",
        "GroundTruth": [
            "javax.xml.datatype.DatatypeFactory.newInstance()",
            "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar()"
        ],
        "APIClasses": [
            "javax.xml.datatype.DatatypeFactory",
            "javax.xml.datatype.DatatypeFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "4792": {
        "Query": "The method returns a byte[] of the given size.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4793": {
        "Query": "The music needs to be stopped to play other sounds like right or wrong",
        "GroundTruth": [
            "javax.sound.sampled.DataLine.stop()"
        ],
        "APIClasses": [
            "javax.sound.sampled.DataLine"
        ],
        "Source": "Tutorial Websites"
    },
    "4794": {
        "Query": "This exports the array list of lines to a file",
        "GroundTruth": [
            "java.nio.file.Files.write()"
        ],
        "APIClasses": [
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "4795": {
        "Query": "This function calculates the SHA1 value of a given string",
        "GroundTruth": [
            "java.security.MessageDigest.getInstance()",
            "java.lang.String.getBytes()",
            "java.security.MessageDigest.digest()"
        ],
        "APIClasses": [
            "java.security.MessageDigest",
            "java.lang.String",
            "java.security.MessageDigest"
        ],
        "Source": "Tutorial Websites"
    },
    "4796": {
        "Query": "This function converts an array of type int into an array of type byte",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4797": {
        "Query": "This function converts an one-dimensional array of bytes into a one-dimensional array of int",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4798": {
        "Query": "This function is used to get the last element on a file path.",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.lang.String.toString()",
            "java.nio.file.Path.toString()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.lang.String",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "4799": {
        "Query": "This function murmur hashes an integer value.",
        "GroundTruth": [
            "java.lang.Integer.rotateLeft()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4800": {
        "Query": "This function performs a polynomial interpolation using a set of given x and y values.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4801": {
        "Query": "This is a generic version of C.A.R Hoare's Quick Sort algorithm.",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4802": {
        "Query": "This is a utility method that will returns a boolean indicating of the node is XML Element and the name matches the tag passed",
        "GroundTruth": [
            "org.w3c.dom.Node.getNodeName()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4803": {
        "Query": "This is a weaker version of Color#brighter() Uses a factor closer to 1.",
        "GroundTruth": [
            "java.awt.Color.RGBtoHSB()",
            "java.awt.Color.getHSBColor()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "4804": {
        "Query": "This message retrieve selected values from a jTable and copies them into a line-separated string, where each line contains the cell-data of each row.",
        "GroundTruth": [
            "javax.swing.JTable.getSelectedRows()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4805": {
        "Query": "This method adds a String to a String[] excluding all duplicates.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4806": {
        "Query": "This method allows to merge 2 arrays",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.lang.Object.getClass()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.Object",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4807": {
        "Query": "This method calculate difference of date from a couple of Calendar Object.",
        "GroundTruth": [
            "java.util.Calendar.getTimeInMillis()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "4808": {
        "Query": "This method checks if the list contains the given string (ignoring case).",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.compareToIgnoreCase()",
            "java.util.Set.isEmpty()",
            "java.util.List.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.util.Set",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "4809": {
        "Query": "This method encodes the URL, removes the spaces and brackets from the URL and replaces the same with \"%20\" and \"%5B\" and \"%5D\" and \"%7B\" \"%7D\".",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4810": {
        "Query": "This method encodes the URL, removes the spaces from the URL and replaces the same with \"%20\".",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4811": {
        "Query": "This method finds the two integers in the array whose values have the smallest absolute difference.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4812": {
        "Query": "This method gets the RGB from image.",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()",
            "java.lang.Math.max()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.awt.Image",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4813": {
        "Query": "This method is used to convert a dollar amount to cents given String as input and returns a long value",
        "GroundTruth": [
            "java.lang.Double.parseDouble()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4814": {
        "Query": "This method is used to convert a dollar amount to cents given double as input",
        "GroundTruth": [
            "java.lang.Double.parseDouble()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "4815": {
        "Query": "This method is used to get client ip address for login audit.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4816": {
        "Query": "This method is used to run a specified Runnable in the JavaFX Application thread, it waits for the task to finish before returning to the main thread.",
        "GroundTruth": [
            "java.util.concurrent.CountDownLatch.countDown()",
            "java.lang.Thread.currentThread()"
        ],
        "APIClasses": [
            "java.util.concurrent.CountDownLatch",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4817": {
        "Query": "This method makes the color in image transparent.",
        "GroundTruth": [
            "java.awt.Color.getRGB()",
            "java.awt.Toolkit.getDefaultToolkit()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "4818": {
        "Query": "This method retrieves a Double value from the resultset at the given column.",
        "GroundTruth": [
            "java.lang.reflect.Array.getDouble()",
            "java.lang.reflect.Field.getDouble()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "4819": {
        "Query": "This method returns a JTable with the given model.",
        "GroundTruth": [
            "javax.swing.JTable.setRowSelectionAllowed()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "4820": {
        "Query": "This method returns new date by adding (subtracting) days to the original date.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.set()",
            "java.util.Calendar.add()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "4821": {
        "Query": "This method returns new date by adding (subtracting) months to the original date.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.set()",
            "java.util.Calendar.add()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "4822": {
        "Query": "This method returns the first day of the month of the specified date",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "4823": {
        "Query": "This method returns the highest value of a map.",
        "GroundTruth": [
            "java.util.Map.entrySet()",
            "java.util.Map.Entry.getValue()",
            "java.util.Calendar.compareTo()",
            "java.util.UUID.compareTo()",
            "java.util.Date.compareTo()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.Map.Entry",
            "java.util.Calendar",
            "java.util.UUID",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "4824": {
        "Query": "This method returns the point at which the incoming dialog will be perfectly centered on screen.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "4825": {
        "Query": "This method returns the smallest double value that is smaller than d = x * 10exp where x is rounded up to the closest integer.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.ceil()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4826": {
        "Query": "This method returns true if the specified image has the possibility to store transparent pixels.",
        "GroundTruth": [
            "java.awt.image.PixelGrabber.grabPixels()",
            "java.awt.image.ColorModel.hasAlpha()"
        ],
        "APIClasses": [
            "java.awt.image.PixelGrabber",
            "java.awt.image.ColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "4827": {
        "Query": "This method returns true if the specified image has transparent pixels.",
        "GroundTruth": [
            "java.awt.image.PixelGrabber.grabPixels()",
            "java.awt.image.ColorModel.hasAlpha()"
        ],
        "APIClasses": [
            "java.awt.image.PixelGrabber",
            "java.awt.image.ColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "4828": {
        "Query": "This method should be used to check whether the lastly performed Swing document modification was caused by user's typing.",
        "GroundTruth": [
            "java.lang.Boolean.booleanValue()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "4829": {
        "Query": "This method takes the given text, replaces all '_' in it by ' ', and tokenizes the text.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.StringBuilder.replace()",
            "java.lang.StringBuffer.replace()",
            "java.lang.String.replace()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4830": {
        "Query": "This method writes a DOM document to a file",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "4831": {
        "Query": "This methods removes from string: \\n \\t ; |",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4832": {
        "Query": "This returns an affine transform which is appropriate for modifying an existing one for a change in the window size.",
        "GroundTruth": [
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4833": {
        "Query": "This returns the collision points between a line and a circle.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.awt.geom.Line2D.ptSegDist()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.geom.Line2D"
        ],
        "Source": "Tutorial Websites"
    },
    "4834": {
        "Query": "This returns the list of all k-tuple combinations in the sub-array, starting from base.",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4835": {
        "Query": "This utility function builds an printable string of the elements (values) of a given 2D double array and returns it.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4836": {
        "Query": "This will draw a paragraph centered in a box where drawing each line either starts at the bottom or top.",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.awt.FontMetrics.stringWidth()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.FontMetrics"
        ],
        "Source": "Tutorial Websites"
    },
    "4837": {
        "Query": "This will parse an XML stream and create a DOM document.",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "4838": {
        "Query": "This will trim trailing and leading white space from a Text node in a DOM structure.",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.Character.isWhitespace()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "4839": {
        "Query": "Thread sleep For Millis",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "4840": {
        "Query": "Thread-concurrency Lock Create a Deadlock",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4841": {
        "Query": "Tiles an image across the defined area.",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "4842": {
        "Query": "To Bytes Unicode 16",
        "GroundTruth": [
            "java.lang.String.getBytes()",
            "java.nio.charset.Charset.forName()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.nio.charset.Charset"
        ],
        "Source": "Tutorial Websites"
    },
    "4843": {
        "Query": "To String UTF 16",
        "GroundTruth": [
            "java.nio.charset.Charset.forName()"
        ],
        "APIClasses": [
            "java.nio.charset.Charset"
        ],
        "Source": "Tutorial Websites"
    },
    "4844": {
        "Query": "To display 000-00-0000 in a SNN field, use '0' as a placeholder character for the mast formatter",
        "GroundTruth": [
            "javax.swing.text.MaskFormatter.setPlaceholderCharacter()"
        ],
        "APIClasses": [
            "javax.swing.text.MaskFormatter"
        ],
        "Source": "Tutorial Websites"
    },
    "4845": {
        "Query": "To extract the file system root directories as an array of File",
        "GroundTruth": [
            "java.io.File.listRoots()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "4846": {
        "Query": "To output a DOM as a stream from XML Node",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()",
            "javax.xml.transform.Transformer.transform()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "4847": {
        "Query": "To output a Node as a XML String.",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.transform()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4848": {
        "Query": "To read the entire contents of a file at once",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.readAllBytes()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "4849": {
        "Query": "To see whether two String objects have matching values, an equals() method of the class is used.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4850": {
        "Query": "To take action only if the file does not exist, call the notExists() method",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.notExists()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "4851": {
        "Query": "ToLowerCase converts a string to all lowercase letters:",
        "GroundTruth": [
            "java.lang.String.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4852": {
        "Query": "Transfer bytes from one ByteBuffer to another.",
        "GroundTruth": [
            "java.nio.file.Files.copy()",
            "java.nio.file.spi.FileSystemProvider.copy()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.nio.file.spi.FileSystemProvider"
        ],
        "Source": "Tutorial Websites"
    },
    "4853": {
        "Query": "Transform Java String to JSON string.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.toCharArray()",
            "java.lang.Integer.toHexString()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4854": {
        "Query": "Transform a BigInteger DSA private key into a DSAPrivateKey object",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()",
            "java.util.logging.Logger.log()",
            "java.security.KeyFactory.generatePrivate()"
        ],
        "APIClasses": [
            "java.security.KeyFactory",
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "4855": {
        "Query": "Transform a BigInteger DSA public key into a DSAPublicKey object",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()",
            "java.util.logging.Logger.log()",
            "java.security.KeyFactory.generatePublic()"
        ],
        "APIClasses": [
            "java.security.KeyFactory",
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "4856": {
        "Query": "Transform a BigInteger RSA private key into a RSAPrivateKey object",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()",
            "java.util.logging.Logger.log()",
            "java.security.KeyFactory.generatePrivate()"
        ],
        "APIClasses": [
            "java.security.KeyFactory",
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "4857": {
        "Query": "Transform a BigInteger RSA public key into a RSAPublicKey object",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()",
            "java.util.logging.Logger.log()",
            "java.security.KeyFactory.generatePublic()"
        ],
        "APIClasses": [
            "java.security.KeyFactory",
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "4858": {
        "Query": "Transform a human-readable DNA sequence into internal 0..4 bytes.",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4859": {
        "Query": "Transforms a given column from the java.sql.ResultSet from a java.sql.Timestamp to a java.util.Calendar.",
        "GroundTruth": [
            "java.sql.ResultSet.getTimestamp()",
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTimeInMillis()",
            "java.lang.System.currentTimeMillis()",
            "java.sql.Timestamp.getTime()"
        ],
        "APIClasses": [
            "java.sql.ResultSet",
            "java.util.Calendar",
            "java.lang.System",
            "java.sql.Timestamp"
        ],
        "Source": "Tutorial Websites"
    },
    "4860": {
        "Query": "Transforms bytes into human readable byte count eg.",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.String.format()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4861": {
        "Query": "Translates String to Object.",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext"
        ],
        "Source": "Tutorial Websites"
    },
    "4862": {
        "Query": "Translates a \"ff0000\" html color into an AWT color.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.Integer.parseInt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4863": {
        "Query": "Traverse through ArrayList in forward direction using ListIterator",
        "GroundTruth": [
            "java.util.ListIterator.hasNext()",
            "java.util.ListIterator.next()"
        ],
        "APIClasses": [
            "java.util.ListIterator"
        ],
        "Source": "Tutorial Websites"
    },
    "4864": {
        "Query": "Tries to determine the frame the container is part of.",
        "GroundTruth": [
            "java.lang.Class.isInstance()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "4865": {
        "Query": "Tries to find the current focused window.",
        "GroundTruth": [
            "java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager()",
            "java.awt.KeyboardFocusManager.getFocusedWindow()",
            "java.awt.KeyboardFocusManager.getActiveWindow()"
        ],
        "APIClasses": [
            "java.awt.KeyboardFocusManager",
            "java.awt.KeyboardFocusManager",
            "java.awt.KeyboardFocusManager"
        ],
        "Source": "Tutorial Websites"
    },
    "4866": {
        "Query": "Trim method removes white space characters (spaces, tabs, newlines ... ) from the start and end of a word.",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4867": {
        "Query": "Trim the elements of the given String array, calling String.trim() on each of them.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4868": {
        "Query": "Trims the String content on an array of String.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4869": {
        "Query": "Trims the leading zeros from byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4870": {
        "Query": "Truncates the given array to the request length.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4871": {
        "Query": "Turn a String with delimiters into a List.",
        "GroundTruth": [
            "java.util.StringTokenizer.countTokens()",
            "java.util.StringTokenizer.hasMoreTokens()"
        ],
        "APIClasses": [
            "java.util.StringTokenizer",
            "java.util.StringTokenizer"
        ],
        "Source": "Tutorial Websites"
    },
    "4872": {
        "Query": "Turns a hex encoded string into a byte array.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4873": {
        "Query": "Turns a list of vararg parameters into a set.",
        "GroundTruth": [
            "java.util.Collections.addAll()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4874": {
        "Query": "Turns a long byte size into a human-readable String .",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.String.format()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4875": {
        "Query": "Turns a string representation of unix time into a XMLGregorianCalendar.",
        "GroundTruth": [
            "javax.xml.datatype.DatatypeFactory.newInstance()",
            "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendar()",
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "javax.xml.datatype.DatatypeFactory",
            "javax.xml.datatype.DatatypeFactory",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "4876": {
        "Query": "Turns the font of given JComponent into bold",
        "GroundTruth": [
            "java.awt.Font.deriveFont()"
        ],
        "APIClasses": [
            "java.awt.Font"
        ],
        "Source": "Tutorial Websites"
    },
    "4877": {
        "Query": "Twitter Adds a user to a specified list.",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4878": {
        "Query": "Twitter Deletes a user from a list.",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4879": {
        "Query": "Twitter Get User List Members",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4880": {
        "Query": "Twitter Subscribes specified list.",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4881": {
        "Query": "Twitter Unsubscribes specified list.",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4882": {
        "Query": "Twitter Updates the specified user list.",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4883": {
        "Query": "Twitter Uploads an image to YFrog with OAuth credentials specified in a properties file",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4884": {
        "Query": "Two dimensional euclidean distance.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4885": {
        "Query": "Two threads accessing the same AtomicInteger. One thread increments its value, the other decrements it.",
        "GroundTruth": [
            "java.util.concurrent.Executors.newScheduledThreadPool()"
        ],
        "APIClasses": [
            "java.util.concurrent.Executors"
        ],
        "Source": "Tutorial Websites"
    },
    "4886": {
        "Query": "UDP Send article data gram packet to given host.",
        "GroundTruth": [
            "java.net.InetAddress.getByName()",
            "java.lang.String.getBytes()",
            "java.net.Socket.close()"
        ],
        "APIClasses": [
            "java.net.InetAddress",
            "java.lang.String",
            "java.net.Socket"
        ],
        "Source": "Tutorial Websites"
    },
    "4887": {
        "Query": "UnRegisters the MBean if registered already.",
        "GroundTruth": [
            "javax.management.MBeanServer.queryNames()",
            "javax.management.MBeanServer.unregisterMBean()",
            "javax.management.Notification.getMessage()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "javax.management.MBeanServer",
            "javax.management.Notification",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4888": {
        "Query": "Unblocks the specified user in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4889": {
        "Query": "Unconditionally close an InputStream.",
        "GroundTruth": [
            "java.io.Closeable.close()"
        ],
        "APIClasses": [
            "java.io.Closeable"
        ],
        "Source": "Tutorial Websites"
    },
    "4890": {
        "Query": "Unescape XML characters, and also replace our special token for preserving a carriage return followed by a line feed.",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4891": {
        "Query": "Unescapes 'lt', 'gt', 'apos', 'quote' and 'amp' to the corresponding character values.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4892": {
        "Query": "Unfavorites the specified status in twitter",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "4893": {
        "Query": "Unfollows the specified user in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4894": {
        "Query": "Unmarshall to Object via JAXB",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()",
            "javax.xml.bind.JAXBContext.createUnmarshaller()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext"
        ],
        "Source": "Tutorial Websites"
    },
    "4895": {
        "Query": "Unquote the given string and replace escape sequences by the original characters.",
        "GroundTruth": [
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4896": {
        "Query": "Unregister the MBean represented by the object name.",
        "GroundTruth": [
            "java.lang.management.ManagementFactory.getPlatformMBeanServer()",
            "javax.management.MBeanServer.isRegistered()",
            "javax.management.MBeanServer.unregisterMBean()",
            "javax.management.ObjectName.getCanonicalName()"
        ],
        "APIClasses": [
            "java.lang.management.ManagementFactory",
            "javax.management.MBeanServer",
            "javax.management.ObjectName"
        ],
        "Source": "Tutorial Websites"
    },
    "4897": {
        "Query": "Unregister the given mbean name in all MBeanServers found.",
        "GroundTruth": [
            "javax.management.MBeanServerFactory.findMBeanServer()"
        ],
        "APIClasses": [
            "javax.management.MBeanServerFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "4898": {
        "Query": "Update Twitter user profile",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4899": {
        "Query": "Update any or all of the file's last modified time, last access time, and create time attributes",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.lang.System.currentTimeMillis()",
            "java.nio.file.attribute.FileTime.fromMillis()",
            "java.nio.file.Files.getFileAttributeView()",
            "java.nio.file.attribute.BasicFileAttributeView.setTimes()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.lang.System",
            "java.nio.file.attribute.FileTime",
            "java.nio.file.Files",
            "java.nio.file.attribute.BasicFileAttributeView"
        ],
        "Source": "Tutorial Websites"
    },
    "4900": {
        "Query": "Update the width/height of image files based on the size field in ResultSet.",
        "GroundTruth": [
            "java.sql.SQLXML.getString()",
            "java.sql.CallableStatement.getString()",
            "java.sql.ResultSet.getString()",
            "java.sql.ResultSet.updateString()",
            "java.sql.ResultSet.updateRow()"
        ],
        "APIClasses": [
            "java.sql.SQLXML",
            "java.sql.CallableStatement",
            "java.sql.ResultSet",
            "java.sql.ResultSet",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "4901": {
        "Query": "Updates profile background image in twitter",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Boolean.parseBoolean()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "4902": {
        "Query": "Updates profile colors in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4903": {
        "Query": "Updates profile image in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4904": {
        "Query": "Updates profile in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4905": {
        "Query": "Updates up friendship in twitter",
        "GroundTruth": [
            "java.lang.System.exit()",
            "java.lang.Boolean.parseBoolean()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "4906": {
        "Query": "Updating a Row in a Database Table",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "4907": {
        "Query": "Updating a Row in a Database Table Using an Updatable Result Set",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.ResultSet.first()",
            "java.sql.ResultSet.updateString()",
            "java.sql.ResultSet.updateRow()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "4908": {
        "Query": "Updating the file's last modified time can also be accomplished with the Files.setLastModifiedTime() method:",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.lang.System.currentTimeMillis()",
            "java.nio.file.attribute.FileTime.fromMillis()",
            "java.nio.file.Files.setLastModifiedTime()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.lang.System",
            "java.nio.file.attribute.FileTime",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "4909": {
        "Query": "Upper case a character in a string",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.Character.isUpperCase()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "4910": {
        "Query": "Use AbstractQueuedSynchronizer to manage resource",
        "GroundTruth": [
            "java.lang.Class.getDeclaredField()",
            "java.lang.reflect.AccessibleObject.setAccessible()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.AccessibleObject"
        ],
        "Source": "Tutorial Websites"
    },
    "4911": {
        "Query": "Use Autocompletes from aylien newsapi",
        "GroundTruth": [
            "java.nio.file.attribute.AclEntry.newBuilder()",
            "java.util.Locale.Builder.setLanguage()"
        ],
        "APIClasses": [
            "java.nio.file.attribute.AclEntry",
            "java.util.Locale.Builder"
        ],
        "Source": "Tutorial Websites"
    },
    "4912": {
        "Query": "Use BufferedReader and BufferedWriter to copy text file",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.io.BufferedReader.readLine()",
            "java.io.BufferedWriter.close()",
            "java.io.BufferedReader.close()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.io.BufferedReader",
            "java.io.BufferedWriter"
        ],
        "Source": "Tutorial Websites"
    },
    "4913": {
        "Query": "Use Enter key to transfer focus in Swing",
        "GroundTruth": [
            "javax.swing.KeyStroke.getKeyStroke()"
        ],
        "APIClasses": [
            "javax.swing.KeyStroke"
        ],
        "Source": "Tutorial Websites"
    },
    "4914": {
        "Query": "Use MaxentTagger from stanford nlp",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.util.Arrays.toString()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4915": {
        "Query": "Use MessageProducer to send message",
        "GroundTruth": [
            "javax.naming.InitialContext.lookup()",
            "javax.xml.soap.SOAPConnectionFactory.createConnection()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "javax.naming.InitialContext",
            "javax.xml.soap.SOAPConnectionFactory",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4916": {
        "Query": "Use Packed Decimal from IBM AS400PackedDecimal",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4917": {
        "Query": "Use RSA to decrypt the data.",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "4918": {
        "Query": "Use RSA to encrypt the data.",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "4919": {
        "Query": "Use ScheduledExecutorService to manage thread",
        "GroundTruth": [
            "java.util.concurrent.Executors.newSingleThreadScheduledExecutor()"
        ],
        "APIClasses": [
            "java.util.concurrent.Executors"
        ],
        "Source": "Tutorial Websites"
    },
    "4920": {
        "Query": "Use SimpleDateFormat to format date as 02/06/2005",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4921": {
        "Query": "Use StringTokenizer to break string value and count tokens",
        "GroundTruth": [
            "java.util.StringTokenizer.hasMoreTokens()",
            "java.util.StringTokenizer.countTokens()"
        ],
        "APIClasses": [
            "java.util.StringTokenizer",
            "java.util.StringTokenizer"
        ],
        "Source": "Tutorial Websites"
    },
    "4922": {
        "Query": "Use \\\\s+ to breaking a string into separate words",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4923": {
        "Query": "Use a functional interface from the java.util.function package to implement a lambda expression",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4924": {
        "Query": "Use an empty list iterator",
        "GroundTruth": [
            "java.util.List.listIterator()",
            "java.util.Collections.emptyListIterator()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4925": {
        "Query": "Use apache hadoop FsUrlStreamHandlerFactory",
        "GroundTruth": [
            "java.net.URL.openStream()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "4926": {
        "Query": "Use apache hadoop file system",
        "GroundTruth": [
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4927": {
        "Query": "Use apache jena QueryExecutionFactory",
        "GroundTruth": [
            "java.util.Formatter.out()"
        ],
        "APIClasses": [
            "java.util.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "4928": {
        "Query": "Use bouncy castle MD5 Digest",
        "GroundTruth": [
            "java.security.Security.addProvider()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.security.Security",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4929": {
        "Query": "Use classifiers trees J48",
        "GroundTruth": [
            "java.io.Reader.close()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.io.Reader",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4930": {
        "Query": "Use comma Separator to format a number",
        "GroundTruth": [
            "java.lang.Double.parseDouble()",
            "java.text.DecimalFormatSymbols.getInstance()",
            "java.text.DecimalFormatSymbols.setGroupingSeparator()",
            "java.util.Formatter.format()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.text.DecimalFormatSymbols",
            "java.text.DecimalFormatSymbols",
            "java.util.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "4931": {
        "Query": "Use for loop to check if an Array Contains a value",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.util.Arrays.asList()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "4932": {
        "Query": "Use interface to implement call back pattern",
        "GroundTruth": [
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "4933": {
        "Query": "Use private access control:",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4934": {
        "Query": "Use readAllBytes() method to read a text file",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.readAllBytes()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "4935": {
        "Query": "Use regex patterns to match a string literal exactly",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "4936": {
        "Query": "Use the GraphicsDevice object to determine if transparency is supported",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getDefaultScreenDevice()",
            "java.awt.GraphicsDevice.isWindowTranslucencySupported()",
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4937": {
        "Query": "Use the Math.abs and Math.signnum methods to force the sign of one variable to match the sign of another",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.Math.signum()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4938": {
        "Query": "Use the RSA private Key to decrypt the data.",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "4939": {
        "Query": "Use the RSA public Key to decrypt the data.",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "4940": {
        "Query": "Use the RSA public Key to encrypt the data.",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "4941": {
        "Query": "Use the getHoldability() method of the Connection to get this property of a ResultSet object",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "4942": {
        "Query": "Use the pow method to square a number",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4943": {
        "Query": "Use the regular expression  Pattern and Matcher classes.",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "4944": {
        "Query": "Use the specified character to create a legal Java class name.",
        "GroundTruth": [
            "java.lang.Character.forDigit()"
        ],
        "APIClasses": [
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "4945": {
        "Query": "Used for cutting off text that is too wide.",
        "GroundTruth": [
            "java.awt.FontMetrics.stringWidth()",
            "java.lang.String.substring()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.awt.FontMetrics",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4946": {
        "Query": "Used to get a completely(-1.0D - 1.0D) random double.",
        "GroundTruth": [
            "java.util.Scanner.nextDouble()",
            "java.util.Random.nextDouble()",
            "java.util.concurrent.ThreadLocalRandom.nextDouble()",
            "java.util.PrimitiveIterator.OfDouble.nextDouble()",
            "java.util.SplittableRandom.nextDouble()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom",
            "java.util.PrimitiveIterator.OfDouble",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "4947": {
        "Query": "Used to get a completely(-1.0F - 1.0F) random float.",
        "GroundTruth": [
            "java.util.Scanner.nextFloat()",
            "java.util.Random.nextFloat()",
            "java.util.concurrent.ThreadLocalRandom.nextFloat()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "4948": {
        "Query": "Used to verify the encoding of a byte array.",
        "GroundTruth": [
            "java.nio.charset.Charset.forName()",
            "java.nio.charset.Charset.newDecoder()",
            "java.util.Base64.Decoder.decode()",
            "java.nio.ByteBuffer.wrap()"
        ],
        "APIClasses": [
            "java.nio.charset.Charset",
            "java.nio.charset.Charset",
            "java.util.Base64.Decoder",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "4949": {
        "Query": "Useful for handling user supplied paths to resources, which can be both relative and absolute.",
        "GroundTruth": [
            "java.nio.file.Path.startsWith()",
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.nio.file.Path",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4950": {
        "Query": "Users Sieve of Eratosthenes method to find all primes between 0 and n, inclusive.",
        "GroundTruth": [
            "java.util.Arrays.fill()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4951": {
        "Query": "Uses binary searching to check if a String is already in a String[].",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4952": {
        "Query": "Uses substrings to replace all the vowels in a string entered by the user with asterisks:",
        "GroundTruth": [
            "java.util.Scanner.nextLine()",
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4953": {
        "Query": "Uses the fileChooser to browse a (not further filtered) file and put the path into the list(-model)",
        "GroundTruth": [
            "javax.swing.JFileChooser.setMultiSelectionEnabled()",
            "javax.swing.JFileChooser.showOpenDialog()",
            "javax.swing.JFileChooser.getSelectedFiles()",
            "java.io.File.getAbsolutePath()"
        ],
        "APIClasses": [
            "javax.swing.JFileChooser",
            "javax.swing.JFileChooser",
            "javax.swing.JFileChooser",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "4954": {
        "Query": "Uses the percentage format",
        "GroundTruth": [
            "java.text.NumberFormat.getPercentInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.text.NumberFormat",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4955": {
        "Query": "Using Anonymous Inner Classes to implement an interface",
        "GroundTruth": [
            "java.awt.Graphics2D.hit()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "4956": {
        "Query": "Using CSS to to Add a Padding and a Rounded, Blue Border to a Scene",
        "GroundTruth": [
            "javax.swing.table.DefaultTableModel.addRow()"
        ],
        "APIClasses": [
            "javax.swing.table.DefaultTableModel"
        ],
        "Source": "Tutorial Websites"
    },
    "4957": {
        "Query": "Using FXML to Build the GUI",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "4958": {
        "Query": "Using Groups in Regular Expressions",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "4959": {
        "Query": "Using Methods That Take Parameters",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "4960": {
        "Query": "Using Named Groups in Regular Expressions",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4961": {
        "Query": "Using Optional to store value",
        "GroundTruth": [
            "java.util.Optional.ofNullable()"
        ],
        "APIClasses": [
            "java.util.Optional"
        ],
        "Source": "Tutorial Websites"
    },
    "4962": {
        "Query": "Using Path and SVGPath Classes to Create 2D Shapes",
        "GroundTruth": [
            "java.awt.Graphics2D.setStroke()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D",
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "4963": {
        "Query": "Using Strings in a switch Statement",
        "GroundTruth": [
            "java.lang.String.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4964": {
        "Query": "Using SwingWorker to perform a long calculation with results displayed in a GUI.",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4965": {
        "Query": "Using a Body for Enum Constants",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.lang.Enum.ordinal()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Enum"
        ],
        "Source": "Tutorial Websites"
    },
    "4966": {
        "Query": "Using a Comparator object with method sort.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.sort()",
            "java.util.Collections.reverseOrder()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "4967": {
        "Query": "Using a Non-Capturing Group in a Regular Expression",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.groupCount()",
            "java.util.regex.Matcher.group()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "4968": {
        "Query": "Using a Random Access File",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4969": {
        "Query": "Using a finally Block",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "4970": {
        "Query": "Using an Optional Section in a Datetime Formatting Pattern",
        "GroundTruth": [
            "java.time.format.DateTimeFormatter.ofPattern()",
            "java.time.LocalDate.of()",
            "java.time.LocalTime.of()",
            "java.time.LocalDateTime.of()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.time.format.DateTimeFormatter",
            "java.time.LocalDate",
            "java.time.LocalTime",
            "java.time.LocalDateTime",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4971": {
        "Query": "Using buffered IO to read files",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.charset.Charset.forName()",
            "java.nio.file.Files.newBufferedReader()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.charset.Charset",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "4972": {
        "Query": "Using format flags to format negative number in parentheses",
        "GroundTruth": [
            "java.time.Year.format()"
        ],
        "APIClasses": [
            "java.time.Year"
        ],
        "Source": "Tutorial Websites"
    },
    "4973": {
        "Query": "Using like isEmpty but it check a collection is not empty or not.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "4974": {
        "Query": "Using the  Path.resolve() method to move a file by extracting its name directly from the movefrom path",
        "GroundTruth": [
            "java.nio.file.FileSystems.getDefault()",
            "java.nio.file.Files.move()"
        ],
        "APIClasses": [
            "java.nio.file.FileSystems",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "4975": {
        "Query": "Using the BorderPane Container",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMaxWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "4976": {
        "Query": "Using the Captured Text of a Group within a Pattern",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.reset()",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.group()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "4977": {
        "Query": "Using the Captured Text of a Group within a Replacement Pattern",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "4978": {
        "Query": "Using the Currency class in Java 7",
        "GroundTruth": [
            "java.util.Currency.getAvailableCurrencies()",
            "java.util.Currency.getDisplayName()",
            "java.util.Currency.getNumericCode()"
        ],
        "APIClasses": [
            "java.util.Currency"
        ],
        "Source": "Tutorial Websites"
    },
    "4979": {
        "Query": "Using the Files class' set/get POSIX file permission methods",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.getPosixFilePermissions()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "4980": {
        "Query": "Using the Files class' setAttribute method",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.setAttribute()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "4981": {
        "Query": "Using the Thai Buddhist and ISO Calendars",
        "GroundTruth": [
            "java.time.chrono.ThaiBuddhistDate.now()",
            "java.time.LocalDate.now()",
            "java.time.chrono.ThaiBuddhistDate.from()",
            "java.time.LocalDate.from()"
        ],
        "APIClasses": [
            "java.time.chrono.ThaiBuddhistDate",
            "java.time.LocalDate"
        ],
        "Source": "Tutorial Websites"
    },
    "4982": {
        "Query": "Using the diamond operator for constructor type inference",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.ArrayList.get()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Tutorial Websites"
    },
    "4983": {
        "Query": "Using the new BitSet methods in Java 7",
        "GroundTruth": [
            "java.util.BitSet.valueOf()",
            "java.util.BitSet.toLongArray()",
            "java.util.BitSet.previousSetBit()",
            "java.util.BitSet.previousClearBit()"
        ],
        "APIClasses": [
            "java.util.BitSet"
        ],
        "Source": "Tutorial Websites"
    },
    "4984": {
        "Query": "Using the new border types in Java 7",
        "GroundTruth": [
            "javax.swing.SwingUtilities.invokeLater()",
            "java.awt.Window.setVisible()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "4985": {
        "Query": "Using the newInputStream() Method to read the content of a file",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.newInputStream()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "4986": {
        "Query": "Using the newOutputStream() Method with unbuffered writing",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.lang.String.getBytes()",
            "java.nio.file.Files.newOutputStream()",
            "org.omg.CORBA.portable.OutputStream.write()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.lang.String",
            "java.nio.file.Files",
            "org.omg.CORBA.portable.OutputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "4987": {
        "Query": "Using the resolveSibling method with the move method to affect a rename operation",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.move()",
            "java.nio.file.Path.resolveSibling()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "4988": {
        "Query": "Using the supportsFileAttributeView method with a String argument",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.getFileStore()",
            "java.nio.file.FileStore.supportsFileAttributeView()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.nio.file.FileStore"
        ],
        "Source": "Tutorial Websites"
    },
    "4989": {
        "Query": "Using the supportsFileAttributeView method with a class argument",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.getFileStore()",
            "java.nio.file.FileStore.supportsFileAttributeView()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files",
            "java.nio.file.FileStore"
        ],
        "Source": "Tutorial Websites"
    },
    "4990": {
        "Query": "Using underscores with binary literals",
        "GroundTruth": [
            "java.lang.Integer.toBinaryString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4991": {
        "Query": "Utility common in use with GridBagLayout.",
        "GroundTruth": [
            "java.awt.GridBagLayout.setConstraints()"
        ],
        "APIClasses": [
            "java.awt.GridBagLayout"
        ],
        "Source": "Tutorial Websites"
    },
    "4992": {
        "Query": "Utility method to remove non-ASCII characters from a string.",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4993": {
        "Query": "Validate email with regular expression",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "4994": {
        "Query": "Validate if domain name is correct using regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4995": {
        "Query": "Validate the actual date of the given date elements and returns a calendar instance based on the given date elements.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.clear()",
            "java.util.Calendar.setLenient()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTimeInMillis()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "4996": {
        "Query": "Validates a modification of a LDAP attribute.",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "4997": {
        "Query": "Validates a port value if it is in range ( 1 - 65535 )",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "4998": {
        "Query": "Validates if the supplied value is null from the result set.",
        "GroundTruth": [
            "java.sql.ResultSet.getObject()"
        ],
        "APIClasses": [
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "4999": {
        "Query": "Validating Text Input with InputVerifier",
        "GroundTruth": [
            "javax.swing.JComponent.setInputVerifier()",
            "java.lang.String.length()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5000": {
        "Query": "Varargs version of AnnotatedElement.isAnnotationPresent()",
        "GroundTruth": [
            "java.lang.reflect.AnnotatedElement.isAnnotationPresent()"
        ],
        "APIClasses": [
            "java.lang.reflect.AnnotatedElement"
        ],
        "Source": "Tutorial Websites"
    },
    "5001": {
        "Query": "Verifies credentials for twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "5002": {
        "Query": "Verifies if 2 BigDecimal s are identical (both null or both the same integer value).",
        "GroundTruth": [
            "java.math.BigInteger.equals()",
            "java.math.BigDecimal.equals()",
            "java.math.MathContext.equals()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal",
            "java.math.MathContext"
        ],
        "Source": "Tutorial Websites"
    },
    "5003": {
        "Query": "Verifies whether a given GraphicsConfiguration supports the PERPIXEL_TRANSLUCENT kind of translucency.",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()"
        ],
        "APIClasses": [
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "5004": {
        "Query": "Verify the user's username and password from user table.",
        "GroundTruth": [
            "java.sql.Statement.executeQuery()",
            "java.sql.ResultSet.next()",
            "java.sql.SQLXML.getString()",
            "java.sql.CallableStatement.getString()",
            "java.sql.ResultSet.getString()"
        ],
        "APIClasses": [
            "java.sql.Statement",
            "java.sql.ResultSet",
            "java.sql.SQLXML",
            "java.sql.CallableStatement"
        ],
        "Source": "Tutorial Websites"
    },
    "5005": {
        "Query": "Visiting All the Nodes in a DOM Document",
        "GroundTruth": [
            "org.w3c.dom.Node.getChildNodes()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "5006": {
        "Query": "Wait for an array of threads to finish their processes",
        "GroundTruth": [
            "java.lang.Thread.join()",
            "java.lang.Throwable.printStackTrace()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "5007": {
        "Query": "Waits for batch job to finish.",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "5008": {
        "Query": "When using the java.net.InetAddress#getHostName() method in an environment where neither a proper DNS lookup nor an /etc/hosts entry exists for a given host,",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()",
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.net.InetAddress",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5009": {
        "Query": "Whether the calendar has time part",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.get()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5010": {
        "Query": "Whole HTTP response as String from given URLConnection",
        "GroundTruth": [
            "java.io.Reader.read()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.io.Reader",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5011": {
        "Query": "Will return number of consonants in given string 'str'",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.String.contains()",
            "java.lang.Character.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "5012": {
        "Query": "Will return number of vowels in given string 'str'",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.String.contains()",
            "java.lang.Character.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "5013": {
        "Query": "Will return string without redundant spaces",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5014": {
        "Query": "Works out the index of the k minimum values in the matrix in a given column",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.Double.isNaN()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "5015": {
        "Query": "Works out the maximum value in the matrix in a given column",
        "GroundTruth": [
            "java.lang.Double.isNaN()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "5016": {
        "Query": "Wraps illegal characters(in XML) to CData.",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.String.contains()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5017": {
        "Query": "Wraps up the nastiness that is the Java XML transformation API for doing an identity transform, which allows an XML document to be converted to a string.",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5018": {
        "Query": "Write a double to the byte array at the given offset.",
        "GroundTruth": [
            "java.lang.Double.doubleToLongBits()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "5019": {
        "Query": "Write a float to the byte array at the given offset.",
        "GroundTruth": [
            "java.lang.Float.floatToIntBits()"
        ],
        "APIClasses": [
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "5020": {
        "Query": "Write a function to convert an integer into its roman numeral representation",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5021": {
        "Query": "Write a single line of text to a file",
        "GroundTruth": [
            "java.io.Writer.close()"
        ],
        "APIClasses": [
            "java.io.Writer"
        ],
        "Source": "Tutorial Websites"
    },
    "5022": {
        "Query": "Write an array of strings into a file",
        "GroundTruth": [
            "java.io.Writer.write()",
            "java.io.Writer.close()"
        ],
        "APIClasses": [
            "java.io.Writer"
        ],
        "Source": "Tutorial Websites"
    },
    "5023": {
        "Query": "Write byte array to a file using FileOutputStream",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5024": {
        "Query": "Write byte array to file using BufferedOutputStream",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5025": {
        "Query": "Write bytes into the OutputStream by given encoding.",
        "GroundTruth": [
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5026": {
        "Query": "Write the given double value into the buffer, starting at the offset value.",
        "GroundTruth": [
            "java.lang.Double.doubleToLongBits()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "5027": {
        "Query": "Writes 4 bytes containing the given int value.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5028": {
        "Query": "Writes a portion of a string in UTF-8 encoding to a data stream.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5029": {
        "Query": "Writes a rectangular area of pixels in the destination BufferedImage.",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "5030": {
        "Query": "Writes an integer array to a file output stream",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5031": {
        "Query": "Writes the file to the hard disk. read UTF8 From File",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5032": {
        "Query": "Writing Bytes with the write() Method",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.write()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "5033": {
        "Query": "Writing Lines with the write() Method",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.nio.charset.Charset.forName()",
            "java.nio.file.Files.write()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.nio.charset.Charset",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "5034": {
        "Query": "Writing Log Records Only After a Condition Occurs",
        "GroundTruth": [
            "java.util.logging.Logger.getLogger()",
            "java.util.logging.Logger.addHandler()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "5035": {
        "Query": "Writing Log Records Only After a Condition Occurs with MemoryHandler",
        "GroundTruth": [
            "java.util.logging.Logger.getLogger()",
            "java.util.logging.Logger.addHandler()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "5036": {
        "Query": "Writing Log Records to Standard Error",
        "GroundTruth": [
            "java.util.logging.Logger.getLogger()",
            "java.util.logging.Logger.addHandler()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "5037": {
        "Query": "Writing Log Records to a Log File",
        "GroundTruth": [
            "java.util.logging.Logger.getLogger()",
            "java.util.logging.Logger.addHandler()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "5038": {
        "Query": "Writing Stack Trace of an Exception to a String",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5039": {
        "Query": "Writing Text to a Socket",
        "GroundTruth": [
            "java.net.Socket.getOutputStream()"
        ],
        "APIClasses": [
            "java.net.Socket"
        ],
        "Source": "Tutorial Websites"
    },
    "5040": {
        "Query": "Writing and Appending a ByteBuffer to a File",
        "GroundTruth": [
            "java.nio.ByteBuffer.wrap()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5041": {
        "Query": "Writing to a SocketChannel",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocateDirect()",
            "java.nio.channels.SocketChannel.write()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer",
            "java.nio.channels.SocketChannel"
        ],
        "Source": "Tutorial Websites"
    },
    "5042": {
        "Query": "Writing to a binary stream",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "5043": {
        "Query": "Writing to a simple file",
        "GroundTruth": [
            "java.nio.file.Paths.get()",
            "java.lang.String.getBytes()",
            "java.nio.file.Files.write()"
        ],
        "APIClasses": [
            "java.nio.file.Paths",
            "java.lang.String",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "5044": {
        "Query": "Writing your own directory filter",
        "GroundTruth": [
            "java.nio.file.Files.isHidden()",
            "java.nio.file.Paths.get()",
            "java.nio.file.Files.newDirectoryStream()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.nio.file.Paths"
        ],
        "Source": "Tutorial Websites"
    },
    "5045": {
        "Query": "XML String To Pojo via JAXB",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()",
            "javax.xml.bind.Unmarshaller.unmarshal()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext",
            "javax.xml.bind.Unmarshaller"
        ],
        "Source": "Tutorial Websites"
    },
    "5046": {
        "Query": "XML encode a string.",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5047": {
        "Query": "XML node As String",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5048": {
        "Query": "XML node List To Iterator",
        "GroundTruth": [
            "org.w3c.dom.NodeList.getLength()",
            "org.w3c.dom.NodeList.item()"
        ],
        "APIClasses": [
            "org.w3c.dom.NodeList"
        ],
        "Source": "Tutorial Websites"
    },
    "5049": {
        "Query": "XML node to String by Transformer",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.transform()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5050": {
        "Query": "XORs the bits in an arbitrary number of byte arrays.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5051": {
        "Query": "XPath evaluate expression and return element",
        "GroundTruth": [
            "javax.xml.xpath.XPath.evaluate()"
        ],
        "APIClasses": [
            "javax.xml.xpath.XPath"
        ],
        "Source": "Tutorial Websites"
    },
    "5052": {
        "Query": "Xors 2 byte arrays.",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5053": {
        "Query": "Zip String. aaabbbb ->3a4b",
        "GroundTruth": [
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5054": {
        "Query": "\\S matches any character that isn't a white space character.",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "5055": {
        "Query": "base64 Decode using sun.misc.BASE64Decoder",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5056": {
        "Query": "base64 Encode using sun.misc.BASE64Encoder",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5057": {
        "Query": "big Decimal To String",
        "GroundTruth": [
            "java.math.BigInteger.signum()",
            "java.math.BigDecimal.signum()",
            "java.math.BigInteger.abs()",
            "java.math.BigDecimal.abs()",
            "java.math.BigDecimal.toPlainString()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "5058": {
        "Query": "big Decimal to Integer",
        "GroundTruth": [
            "java.math.BigInteger.intValue()",
            "java.math.BigDecimal.intValue()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "5059": {
        "Query": "bind Style Sheet To JavaFX Window",
        "GroundTruth": [
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5060": {
        "Query": "bind To JavaFX Stage Title",
        "GroundTruth": [
            "java.awt.event.WindowEvent.getWindow()"
        ],
        "APIClasses": [
            "java.awt.event.WindowEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "5061": {
        "Query": "blur an image in RGB color space using its nearest 8 pixels",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "5062": {
        "Query": "brighter color by value",
        "GroundTruth": [
            "java.awt.Color.RGBtoHSB()",
            "java.awt.Color.HSBtoRGB()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "5063": {
        "Query": "bubble sort int array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.util.Collections.swap()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "5064": {
        "Query": "buffered Image To Byte Array",
        "GroundTruth": [
            "javax.imageio.ImageIO.write()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "5065": {
        "Query": "buffered To jai PlanarImage",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()"
        ],
        "APIClasses": [
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "5066": {
        "Query": "build HashSet From List",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Set.addAll()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "5067": {
        "Query": "build JavaFX Input Dialog",
        "GroundTruth": [
            "java.awt.Dialog.setTitle()"
        ],
        "APIClasses": [
            "java.awt.Dialog"
        ],
        "Source": "Tutorial Websites"
    },
    "5068": {
        "Query": "build XML DOM Document from String content",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "java.lang.String.getBytes()",
            "org.w3c.dom.Document.getDocumentElement()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory",
            "java.lang.String",
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "5069": {
        "Query": "builds the heap using the heapify method",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5070": {
        "Query": "builds the name for an accessor method for reflection.",
        "GroundTruth": [
            "java.lang.String.substring()",
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5071": {
        "Query": "byte Array To Ascii String",
        "GroundTruth": [
            "java.util.logging.Logger.getLogger()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "5072": {
        "Query": "byte Array To Utf String",
        "GroundTruth": [
            "java.util.logging.Logger.getLogger()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "5073": {
        "Query": "byte Buffer To Object",
        "GroundTruth": [
            "java.nio.Buffer.limit()",
            "java.nio.ByteBuffer.get()",
            "java.io.ObjectInputStream.readObject()"
        ],
        "APIClasses": [
            "java.nio.Buffer",
            "java.nio.ByteBuffer",
            "java.io.ObjectInputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "5074": {
        "Query": "byte To String via Integer.toString",
        "GroundTruth": [
            "java.lang.Integer.toString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5075": {
        "Query": "byte To Uint 8",
        "GroundTruth": [
            "java.lang.Integer.toString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5076": {
        "Query": "bytes Range To String",
        "GroundTruth": [
            "java.lang.StringBuilder.append()",
            "java.lang.StringBuilder.toString()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder"
        ],
        "Source": "Tutorial Websites"
    },
    "5077": {
        "Query": "bytes To Hex String using for loop",
        "GroundTruth": [
            "java.lang.Integer.toHexString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5078": {
        "Query": "bytes To Integers by Audio Format",
        "GroundTruth": [
            "javax.sound.sampled.AudioFormat.getSampleSizeInBits()",
            "java.nio.ByteBuffer.wrap()",
            "javax.sound.sampled.AudioFormat.isBigEndian()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFormat",
            "java.nio.ByteBuffer",
            "javax.sound.sampled.AudioFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "5079": {
        "Query": "bytes To RSA Private Key",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()",
            "java.security.KeyFactory.generatePrivate()"
        ],
        "APIClasses": [
            "java.security.KeyFactory",
            "java.security.KeyFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5080": {
        "Query": "bytes To RSA Public Key",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()",
            "java.security.KeyFactory.generatePublic()"
        ],
        "APIClasses": [
            "java.security.KeyFactory",
            "java.security.KeyFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5081": {
        "Query": "bytes To Short by Audio format",
        "GroundTruth": [
            "javax.sound.sampled.AudioFormat.isBigEndian()",
            "javax.sound.sampled.AudioFormat.getEncoding()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "5082": {
        "Query": "bytes To Shorts by Audio Format",
        "GroundTruth": [
            "javax.sound.sampled.AudioFormat.getSampleSizeInBits()",
            "java.nio.ByteBuffer.wrap()",
            "javax.sound.sampled.AudioFormat.isBigEndian()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFormat",
            "java.nio.ByteBuffer",
            "javax.sound.sampled.AudioFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "5083": {
        "Query": "calc Getter Name Bool for reflection",
        "GroundTruth": [
            "java.lang.Character.toUpperCase()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.Character",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5084": {
        "Query": "calc Getter Name for reflection",
        "GroundTruth": [
            "java.lang.Character.toUpperCase()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.Character",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5085": {
        "Query": "calc Setter Name for reflection",
        "GroundTruth": [
            "java.lang.Character.toUpperCase()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.Character",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5086": {
        "Query": "calculate Color from primary and secondary color and ratio",
        "GroundTruth": [
            "java.lang.Integer.parseInt()",
            "java.lang.String.substring()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5087": {
        "Query": "calculate Hash Code for AnnotatedElement",
        "GroundTruth": [
            "java.lang.annotation.Annotation.hashCode()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "5088": {
        "Query": "calculate JTable Row Height",
        "GroundTruth": [
            "java.awt.Component.getPreferredSize()",
            "java.util.logging.Logger.info()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.awt.Component",
            "java.util.logging.Logger",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5089": {
        "Query": "calculate Optimal Texture Resolution",
        "GroundTruth": [
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5090": {
        "Query": "calculate inverse document frequency between two double",
        "GroundTruth": [
            "java.lang.Math.log10()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5091": {
        "Query": "calculate the the angle of lines",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.pow()",
            "java.lang.Math.acos()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5092": {
        "Query": "calculates max of two values with smooth blending",
        "GroundTruth": [
            "java.lang.Math.max()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5093": {
        "Query": "calculates min of two values with smooth blending",
        "GroundTruth": [
            "java.lang.Math.min()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5094": {
        "Query": "call the  createPurchaseContract API which returns the PurchaseContract ID in amazon payments",
        "GroundTruth": [
            "javax.xml.ws.http.HTTPException.getStatusCode()"
        ],
        "APIClasses": [
            "javax.xml.ws.http.HTTPException"
        ],
        "Source": "Tutorial Websites"
    },
    "5095": {
        "Query": "camel Case To Dot Case by regex",
        "GroundTruth": [
            "java.lang.String.replaceAll()",
            "java.lang.String.toLowerCase()",
            "java.lang.Character.toLowerCase()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "5096": {
        "Query": "camel Case To Snake Case with regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.replaceAll()",
            "java.lang.String.toLowerCase()",
            "java.lang.Character.toLowerCase()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "5097": {
        "Query": "capture Screen To Clip Board",
        "GroundTruth": [
            "java.awt.Robot.keyPress()",
            "java.awt.Robot.keyRelease()"
        ],
        "APIClasses": [
            "java.awt.Robot"
        ],
        "Source": "Tutorial Websites"
    },
    "5098": {
        "Query": "cardinality = \"total number of set bits in BitSet\"",
        "GroundTruth": [
            "java.util.BitSet.cardinality()"
        ],
        "APIClasses": [
            "java.util.BitSet"
        ],
        "Source": "Tutorial Websites"
    },
    "5099": {
        "Query": "cartesian To Spherical and return JavaFX Point3D",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.atan()",
            "java.lang.Math.asin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5100": {
        "Query": "cast Collection element by class",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5101": {
        "Query": "cast List to List<T>",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5102": {
        "Query": "center And Size Window",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "5103": {
        "Query": "center Resize JavaFX Rectangle",
        "GroundTruth": [
            "java.util.Objects.requireNonNull()"
        ],
        "APIClasses": [
            "java.util.Objects"
        ],
        "Source": "Tutorial Websites"
    },
    "5104": {
        "Query": "change Item in a List",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.isEmpty()",
            "java.util.List.indexOf()",
            "java.util.List.remove()",
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "5105": {
        "Query": "change swing Text Component Background",
        "GroundTruth": [
            "javax.swing.UIManager.getColor()"
        ],
        "APIClasses": [
            "javax.swing.UIManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5106": {
        "Query": "char Array To Byte Array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5107": {
        "Query": "char Array To Bytes",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5108": {
        "Query": "check Birthday by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5109": {
        "Query": "check Blank Space by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5110": {
        "Query": "check Browser from HttpServletRequest",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5111": {
        "Query": "check Content of a Collection by instanceof operator",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.Class.isInstance()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "5112": {
        "Query": "check Decimals by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5113": {
        "Query": "check Digit by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5114": {
        "Query": "check Password by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "5115": {
        "Query": "check Password with regex, only number and letter, length 6-10",
        "GroundTruth": [
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5116": {
        "Query": "check Phone number with regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5117": {
        "Query": "check Postcode by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5118": {
        "Query": "check URL by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5119": {
        "Query": "check if Collection contains Any passed in objects",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.contains()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "5120": {
        "Query": "check if String contains Chinese by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5121": {
        "Query": "check if one subnet is in range of the other, useful , for dividing subnet into chunks",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.substring()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5122": {
        "Query": "check if user use windows or gnu/Linux using Swing JOptionPane",
        "GroundTruth": [
            "javax.swing.JOptionPane.showOptionDialog()",
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "5123": {
        "Query": "check numbers by regex",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Matcher",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5124": {
        "Query": "checks for a null list and returns Collections.emptyList in that case.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.emptyList()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "5125": {
        "Query": "checks for a null set and returns Collections.emptySet in that case.",
        "GroundTruth": [
            "java.util.Collections.emptySet()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "5126": {
        "Query": "checks whether the selected items can be moved down in JList",
        "GroundTruth": [
            "javax.swing.JList.getSelectedIndices()"
        ],
        "APIClasses": [
            "javax.swing.JList"
        ],
        "Source": "Tutorial Websites"
    },
    "5127": {
        "Query": "checks whether the selected items can be moved up in JList",
        "GroundTruth": [
            "javax.swing.JList.getSelectedIndices()"
        ],
        "APIClasses": [
            "javax.swing.JList"
        ],
        "Source": "Tutorial Websites"
    },
    "5128": {
        "Query": "chmod via Java NIO",
        "GroundTruth": [
            "java.io.File.toPath()",
            "java.nio.file.Files.isSymbolicLink()",
            "java.nio.file.Files.setPosixFilePermissions()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "5129": {
        "Query": "choose Dir from JFileChooser",
        "GroundTruth": [
            "javax.swing.JFileChooser.setFileSelectionMode()",
            "javax.swing.JFileChooser.getSelectedFile()"
        ],
        "APIClasses": [
            "javax.swing.JFileChooser",
            "javax.swing.JFileChooser"
        ],
        "Source": "Tutorial Websites"
    },
    "5130": {
        "Query": "choose File using JFileChooser",
        "GroundTruth": [
            "javax.swing.JFileChooser.showOpenDialog()",
            "javax.swing.JFileChooser.getSelectedFile()"
        ],
        "APIClasses": [
            "javax.swing.JFileChooser",
            "javax.swing.JFileChooser"
        ],
        "Source": "Tutorial Websites"
    },
    "5131": {
        "Query": "classify Return Age string",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5132": {
        "Query": "clean Punctuation by Regex",
        "GroundTruth": [
            "java.util.regex.Matcher.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "5133": {
        "Query": "collapse duplicate elements in a List",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5134": {
        "Query": "column JTable Header Width",
        "GroundTruth": [
            "javax.swing.JTable.getTableHeader()",
            "javax.swing.table.TableColumn.getHeaderValue()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "5135": {
        "Query": "combination from factorial via IntStream",
        "GroundTruth": [
            "java.util.stream.IntStream.rangeClosed()"
        ],
        "APIClasses": [
            "java.util.stream.IntStream"
        ],
        "Source": "Tutorial Websites"
    },
    "5136": {
        "Query": "combine two array into a Map",
        "GroundTruth": [
            "java.util.Map.put()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "5137": {
        "Query": "compare 2 BigDecimals (null safe).",
        "GroundTruth": [
            "java.math.BigInteger.compareTo()",
            "java.math.BigDecimal.compareTo()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "5138": {
        "Query": "compare Values for two Comparable",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Object",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5139": {
        "Query": "compare two host name to check if they are the same host without DNS resolving.",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.lang.String.charAt()",
            "java.lang.String.length()",
            "java.lang.String.substring()",
            "java.lang.Character.digit()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "5140": {
        "Query": "compare two time by date ,ignore HH:mm:ss",
        "GroundTruth": [
            "java.lang.Integer.valueOf()",
            "java.util.Formatter.format()",
            "java.util.logging.SimpleFormatter.format()",
            "java.util.logging.XMLFormatter.format()",
            "java.util.logging.Formatter.format()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.util.Formatter",
            "java.util.logging.SimpleFormatter",
            "java.util.logging.XMLFormatter",
            "java.util.logging.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "5141": {
        "Query": "compile opengl Shader Program",
        "GroundTruth": [
            "java.nio.IntBuffer.allocate()",
            "java.nio.IntBuffer.get()",
            "java.nio.ByteBuffer.allocate()",
            "java.nio.ByteBuffer.array()",
            "java.nio.charset.Charset.forName()"
        ],
        "APIClasses": [
            "java.nio.IntBuffer",
            "java.nio.ByteBuffer",
            "java.nio.charset.Charset"
        ],
        "Source": "Tutorial Websites"
    },
    "5142": {
        "Query": "compress Object To Byte Array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Throwable.printStackTrace()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "5143": {
        "Query": "compute Min Euclidean Distances",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5144": {
        "Query": "concatenate two byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "5145": {
        "Query": "connect To derby DataBase",
        "GroundTruth": [
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5146": {
        "Query": "contains Chinese by unicode",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5147": {
        "Query": "contains Non Numeric Characters by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "5148": {
        "Query": "convert BigInteger To Double",
        "GroundTruth": [
            "java.math.BigInteger.doubleValue()"
        ],
        "APIClasses": [
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "5149": {
        "Query": "convert BigInteger To Long",
        "GroundTruth": [
            "java.math.BigInteger.compareTo()",
            "java.math.BigInteger.valueOf()",
            "java.math.BigInteger.longValue()"
        ],
        "APIClasses": [
            "java.math.BigInteger"
        ],
        "Source": "Tutorial Websites"
    },
    "5150": {
        "Query": "convert Byte to BigInteger",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocate()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "5151": {
        "Query": "convert Collection<String> to String[] array",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5152": {
        "Query": "convert Color To Gray",
        "GroundTruth": [
            "java.awt.Color.RGBtoHSB()",
            "java.awt.Color.HSBtoRGB()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "5153": {
        "Query": "convert Excel Cell Address To Int Array",
        "GroundTruth": [
            "java.lang.String.replaceAll()",
            "java.lang.Integer.valueOf()",
            "java.lang.String.toUpperCase()",
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5154": {
        "Query": "convert From IPv4 Mapped IPv6 Address",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "5155": {
        "Query": "convert Int to BigInteger",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocate()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "5156": {
        "Query": "convert JavaFX Color To AWT",
        "GroundTruth": [
            "java.awt.Window.getOpacity()"
        ],
        "APIClasses": [
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "5157": {
        "Query": "convert JavaFX Node To 3D",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "5158": {
        "Query": "convert Latitude To Meters",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.Math.tan()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5159": {
        "Query": "convert Latitude To Pixel",
        "GroundTruth": [
            "java.lang.Math.round()",
            "java.lang.Math.log()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5160": {
        "Query": "convert Long to BigInteger",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocate()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "5161": {
        "Query": "convert Meters To Latitude",
        "GroundTruth": [
            "java.lang.Math.atan()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5162": {
        "Query": "convert Meters To Pixels",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5163": {
        "Query": "convert Pixel To Latitude",
        "GroundTruth": [
            "java.lang.Math.asin()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5164": {
        "Query": "convert Pixels To Meters",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5165": {
        "Query": "convert Query String To HashMap",
        "GroundTruth": [
            "java.net.CookieManager.put()",
            "java.net.CookieHandler.put()",
            "java.net.ResponseCache.put()"
        ],
        "APIClasses": [
            "java.net.CookieManager",
            "java.net.CookieHandler",
            "java.net.ResponseCache"
        ],
        "Source": "Tutorial Websites"
    },
    "5166": {
        "Query": "convert Query String To Properties",
        "GroundTruth": [
            "java.net.CookieManager.put()",
            "java.net.CookieHandler.put()",
            "java.net.ResponseCache.put()"
        ],
        "APIClasses": [
            "java.net.CookieManager",
            "java.net.CookieHandler",
            "java.net.ResponseCache"
        ],
        "Source": "Tutorial Websites"
    },
    "5167": {
        "Query": "convert RGB Color to YUV",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5168": {
        "Query": "convert Radians To Int Degrees",
        "GroundTruth": [
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5169": {
        "Query": "convert SQL Time to Xml Time",
        "GroundTruth": [
            "java.util.Calendar.setTimeInMillis()",
            "javax.xml.datatype.DatatypeFactory.newInstance()",
            "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "javax.xml.datatype.DatatypeFactory",
            "javax.xml.datatype.DatatypeFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5170": {
        "Query": "convert Short to BigInteger",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocate()",
            "java.nio.ByteBuffer.putShort()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "5171": {
        "Query": "convert Sql Type to Java Type",
        "GroundTruth": [
            "java.sql.Timestamp.equals()",
            "java.sql.RowId.equals()"
        ],
        "APIClasses": [
            "java.sql.Timestamp",
            "java.sql.RowId"
        ],
        "Source": "Tutorial Websites"
    },
    "5172": {
        "Query": "convert String Set To Sorted Array List",
        "GroundTruth": [
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "5173": {
        "Query": "convert To Binary Colors",
        "GroundTruth": [
            "java.awt.Image.getHeight()",
            "java.awt.Image.getWidth()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.awt.Image",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5174": {
        "Query": "convert To Int from JSF Html Input Hidden",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.equals()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5175": {
        "Query": "convert To String from JSF Html Input Hidden",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5176": {
        "Query": "convert To String to Byte array vis its char array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5177": {
        "Query": "convert Unix To LocalDateTime",
        "GroundTruth": [
            "java.time.LocalDateTime.ofEpochSecond()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime"
        ],
        "Source": "Tutorial Websites"
    },
    "5178": {
        "Query": "convert Unsigned Byte to BigInteger",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocate()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "5179": {
        "Query": "convert Unsigned Int to BigInteger",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocate()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "5180": {
        "Query": "convert Unsigned Long to BigInteger",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocate()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "5181": {
        "Query": "convert Unsigned Short to BigInteger",
        "GroundTruth": [
            "java.nio.ByteBuffer.allocate()",
            "java.nio.ByteBuffer.putShort()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "5182": {
        "Query": "convert ZonedDateTime to millisecond(long).",
        "GroundTruth": [
            "java.time.chrono.ChronoZonedDateTime.toInstant()",
            "java.time.chrono.ChronoLocalDateTime.toInstant()",
            "java.time.OffsetDateTime.toInstant()",
            "java.time.Instant.toEpochMilli()"
        ],
        "APIClasses": [
            "java.time.chrono.ChronoZonedDateTime",
            "java.time.chrono.ChronoLocalDateTime",
            "java.time.OffsetDateTime",
            "java.time.Instant"
        ],
        "Source": "Tutorial Websites"
    },
    "5183": {
        "Query": "convert byte array To String via Charset",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5184": {
        "Query": "convert calendar to date string with format yyyy-MM-dd",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.util.logging.SimpleFormatter.format()",
            "java.util.logging.XMLFormatter.format()",
            "java.util.logging.Formatter.format()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.util.logging.SimpleFormatter",
            "java.util.logging.XMLFormatter",
            "java.util.logging.Formatter",
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5185": {
        "Query": "convert from UTF-8 -> internal Java String format",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5186": {
        "Query": "convert from internal Java String format -> UTF-8",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5187": {
        "Query": "convert int To String with NumberFormat",
        "GroundTruth": [
            "java.text.NumberFormat.getInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.text.NumberFormat",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5188": {
        "Query": "convert int to bytes.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5189": {
        "Query": "convert java.util.Date to LocalDateTime",
        "GroundTruth": [
            "java.time.LocalDateTime.ofInstant()",
            "java.util.Date.toInstant()",
            "java.time.ZoneId.systemDefault()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime",
            "java.util.Date",
            "java.time.ZoneId"
        ],
        "Source": "Tutorial Websites"
    },
    "5190": {
        "Query": "convert longitude To Pixel",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5191": {
        "Query": "convert string to Byte array without encoding",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5192": {
        "Query": "convert the array into string separated by default delimiter which is comma separator",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5193": {
        "Query": "convert weka Arff to CSV",
        "GroundTruth": [
            "java.awt.FileDialog.setFile()"
        ],
        "APIClasses": [
            "java.awt.FileDialog"
        ],
        "Source": "Tutorial Websites"
    },
    "5194": {
        "Query": "converts a given String containing an integer value to a boolean value, e.g.: 0 -> false, !=0 -> true",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5195": {
        "Query": "converts a string to an int if the given String is not convertible -> return defaultValue",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5196": {
        "Query": "converts boolean to byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5197": {
        "Query": "converts cartesian coordinates (positive Y is down, positive X is right) into an angle in degrees (0 degrees is up, clockwise is positive).",
        "GroundTruth": [
            "java.lang.Math.toDegrees()",
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5198": {
        "Query": "converts ruby to camel case by regex",
        "GroundTruth": [
            "java.lang.String.isEmpty()",
            "java.lang.String.replaceAll()",
            "java.lang.String.toLowerCase()",
            "java.lang.Character.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "5199": {
        "Query": "copy Array using Arrays.copyOf method",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.util.Arrays.copyOf()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5200": {
        "Query": "copy To JavaFX Clipboard",
        "GroundTruth": [
            "java.awt.Toolkit.getSystemClipboard()"
        ],
        "APIClasses": [
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "5201": {
        "Query": "core sha1 for int array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5202": {
        "Query": "count Chinese Words by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5203": {
        "Query": "count Methods With Annotation",
        "GroundTruth": [
            "java.lang.Class.getMethods()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5204": {
        "Query": "counting of words in input list of sentences using apache spark",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5205": {
        "Query": "counts the vowels when you write a statement",
        "GroundTruth": [
            "java.util.Scanner.nextLine()",
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5206": {
        "Query": "create AWT Bold Font",
        "GroundTruth": [
            "java.awt.Font.getName()",
            "java.awt.Font.getSize()"
        ],
        "APIClasses": [
            "java.awt.Font"
        ],
        "Source": "Tutorial Websites"
    },
    "5207": {
        "Query": "create And Execute Android Process",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.equals()",
            "java.lang.Runtime.getRuntime()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "5208": {
        "Query": "create And Install Repaint Window Focus Listener",
        "GroundTruth": [
            "java.awt.event.WindowEvent.getWindow()",
            "java.awt.Window.addWindowFocusListener()"
        ],
        "APIClasses": [
            "java.awt.event.WindowEvent",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "5209": {
        "Query": "create Array by length and Class type",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "5210": {
        "Query": "create Byte Array With Wave Header",
        "GroundTruth": [
            "javax.sound.sampled.AudioSystem.write()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "5211": {
        "Query": "create Concurrent Hash Map",
        "GroundTruth": [
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5212": {
        "Query": "create Connection for derby",
        "GroundTruth": [
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5213": {
        "Query": "create Default Monochrome Bitmap Converter",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5214": {
        "Query": "create Default Trust Manager",
        "GroundTruth": [
            "javax.net.ssl.TrustManagerFactory.getInstance()",
            "javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()",
            "javax.net.ssl.TrustManagerFactory.getTrustManagers()"
        ],
        "APIClasses": [
            "javax.net.ssl.TrustManagerFactory",
            "javax.net.ssl.TrustManagerFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5215": {
        "Query": "create Delete via SSL Connection",
        "GroundTruth": [
            "java.net.URL.openConnection()",
            "java.net.HttpURLConnection.setRequestMethod()"
        ],
        "APIClasses": [
            "java.net.URL",
            "java.net.HttpURLConnection"
        ],
        "Source": "Tutorial Websites"
    },
    "5216": {
        "Query": "create Double Array using Array.newInstance",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "5217": {
        "Query": "create Empty XML Document",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "org.w3c.dom.DOMImplementation.createDocument()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory",
            "org.w3c.dom.DOMImplementation"
        ],
        "Source": "Tutorial Websites"
    },
    "5218": {
        "Query": "create Error Message for JSF FacesContext",
        "GroundTruth": [
            "java.util.ResourceBundle.getBundle()"
        ],
        "APIClasses": [
            "java.util.ResourceBundle"
        ],
        "Source": "Tutorial Websites"
    },
    "5219": {
        "Query": "create Gaussian Kernel for Image process",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5220": {
        "Query": "create HashSet from varargs",
        "GroundTruth": [
            "java.util.Collection.add()"
        ],
        "APIClasses": [
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "5221": {
        "Query": "create Home File Chooser",
        "GroundTruth": [
            "javax.swing.filechooser.FileSystemView.getFileSystemView()"
        ],
        "APIClasses": [
            "javax.swing.filechooser.FileSystemView"
        ],
        "Source": "Tutorial Websites"
    },
    "5222": {
        "Query": "create HttpClient pre-configured with support for integrated Windows authentication apache http client",
        "GroundTruth": [
            "javax.swing.text.html.parser.DTD.getEntity()"
        ],
        "APIClasses": [
            "javax.swing.text.html.parser.DTD"
        ],
        "Source": "Tutorial Websites"
    },
    "5223": {
        "Query": "create Icon From Resource",
        "GroundTruth": [
            "java.lang.ClassLoader.getSystemClassLoader()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Tutorial Websites"
    },
    "5224": {
        "Query": "create Image Resized Copy",
        "GroundTruth": [
            "java.awt.Graphics2D.setComposite()",
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D",
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "5225": {
        "Query": "create Int Array via Array.newInstance",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "5226": {
        "Query": "create JAXP XML Transformer Factory",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5227": {
        "Query": "create JSF Faces Error",
        "GroundTruth": [
            "javax.xml.bind.helpers.ValidationEventImpl.setSeverity()"
        ],
        "APIClasses": [
            "javax.xml.bind.helpers.ValidationEventImpl"
        ],
        "Source": "Tutorial Websites"
    },
    "5228": {
        "Query": "create JavaFX Bar Chart",
        "GroundTruth": [
            "java.util.Random.nextDouble()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "5229": {
        "Query": "create JavaFX Bubble Chart",
        "GroundTruth": [
            "java.util.Random.nextDouble()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "5230": {
        "Query": "create JavaFX CSS Property",
        "GroundTruth": [
            "javax.swing.JOptionPane.getInitialValue()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "5231": {
        "Query": "create JavaFX Choice Box",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMaxWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "5232": {
        "Query": "create JavaFX Combo Box",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMaxWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "5233": {
        "Query": "create JavaFX Css Meta Data List",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.unmodifiableList()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "5234": {
        "Query": "create JavaFX Cylindrical Mesh",
        "GroundTruth": [
            "java.lang.Math.sin()",
            "java.lang.Math.cos()",
            "java.util.Arrays.setAll()",
            "java.lang.System.setProperty()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "5235": {
        "Query": "create JavaFX Default Grid Pane",
        "GroundTruth": [
            "javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.setPadding()"
        ],
        "APIClasses": [
            "javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout"
        ],
        "Source": "Tutorial Websites"
    },
    "5236": {
        "Query": "create JavaFX Grid Pane",
        "GroundTruth": [
            "javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.setPadding()"
        ],
        "APIClasses": [
            "javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout"
        ],
        "Source": "Tutorial Websites"
    },
    "5237": {
        "Query": "create JavaFX Height Map",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "5238": {
        "Query": "create JavaFX Information Dialog",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMaxWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "5239": {
        "Query": "create JavaFX Progress Indicator",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMaxWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "5240": {
        "Query": "create JavaFX Read Only Java Bean Property",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.lang.Class.getDeclaredMethod()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5241": {
        "Query": "create JavaFX Scatter Chart",
        "GroundTruth": [
            "java.util.Random.nextDouble()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "5242": {
        "Query": "create JavaFX Spherical Height Map",
        "GroundTruth": [
            "java.lang.Math.sin()",
            "java.lang.Math.cos()",
            "java.util.Arrays.setAll()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5243": {
        "Query": "create JavaFX Split Pane",
        "GroundTruth": [
            "java.awt.List.getItems()"
        ],
        "APIClasses": [
            "java.awt.List"
        ],
        "Source": "Tutorial Websites"
    },
    "5244": {
        "Query": "create JavaFX Stacked Bar Chart",
        "GroundTruth": [
            "java.util.Random.nextDouble()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "5245": {
        "Query": "create JavaFX Text Area",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMaxWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "5246": {
        "Query": "create JavaFX Tool Bar",
        "GroundTruth": [
            "java.awt.List.getItems()"
        ],
        "APIClasses": [
            "java.awt.List"
        ],
        "Source": "Tutorial Websites"
    },
    "5247": {
        "Query": "create JavaFX Toroid Mesh",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()",
            "java.util.Arrays.setAll()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5248": {
        "Query": "create Key Factory by algorithm",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()"
        ],
        "APIClasses": [
            "java.security.KeyFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5249": {
        "Query": "create Linked List from varargs",
        "GroundTruth": [
            "java.util.Collection.add()"
        ],
        "APIClasses": [
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "5250": {
        "Query": "create LinkedHashSet from varargs",
        "GroundTruth": [
            "java.util.Collection.add()"
        ],
        "APIClasses": [
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "5251": {
        "Query": "create New XML Document",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "javax.xml.parsers.DocumentBuilder.newDocument()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilder"
        ],
        "Source": "Tutorial Websites"
    },
    "5252": {
        "Query": "create Polygon From Function",
        "GroundTruth": [
            "java.awt.Polygon.addPoint()"
        ],
        "APIClasses": [
            "java.awt.Polygon"
        ],
        "Source": "Tutorial Websites"
    },
    "5253": {
        "Query": "create RGB Image From Channels",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()",
            "java.awt.image.PixelGrabber.startGrabbing()",
            "java.awt.image.PixelGrabber.getPixels()",
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.Image",
            "java.awt.image.PixelGrabber",
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "5254": {
        "Query": "create Repaint Window Listener",
        "GroundTruth": [
            "java.awt.Component.repaint()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "5255": {
        "Query": "create SSL Hostname Verifier",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5256": {
        "Query": "create Table If Missing in h2 database",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.executeUpdate()",
            "java.sql.PreparedStatement.executeUpdate()",
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.Statement",
            "java.sql.PreparedStatement",
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5257": {
        "Query": "create Translucent Compatible Image",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getDefaultScreenDevice()",
            "java.awt.GraphicsDevice.getDefaultConfiguration()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice"
        ],
        "Source": "Tutorial Websites"
    },
    "5258": {
        "Query": "create Trust Manager From",
        "GroundTruth": [
            "javax.net.ssl.TrustManagerFactory.getInstance()",
            "javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()",
            "javax.net.ssl.TrustManagerFactory.getTrustManagers()"
        ],
        "APIClasses": [
            "javax.net.ssl.TrustManagerFactory",
            "javax.net.ssl.TrustManagerFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5259": {
        "Query": "create Vector from varargs",
        "GroundTruth": [
            "java.util.Collection.add()"
        ],
        "APIClasses": [
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "5260": {
        "Query": "create XML Empty Document",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "javax.xml.parsers.DocumentBuilder.newDocument()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilder"
        ],
        "Source": "Tutorial Websites"
    },
    "5261": {
        "Query": "create Xml Element and add to parent element",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5262": {
        "Query": "create a model in apache jena and write it in XML form to standard out",
        "GroundTruth": [
            "javax.annotation.processing.Filer.createResource()"
        ],
        "APIClasses": [
            "javax.annotation.processing.Filer"
        ],
        "Source": "Tutorial Websites"
    },
    "5263": {
        "Query": "create akka actor Props",
        "GroundTruth": [
            "java.util.logging.Logger.info()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.util.logging.Logger",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5264": {
        "Query": "create apache hadoop HDFS directory",
        "GroundTruth": [
            "java.net.URI.create()",
            "java.io.File.mkdirs()"
        ],
        "APIClasses": [
            "java.net.URI",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "5265": {
        "Query": "create graph and resource for apache jena",
        "GroundTruth": [
            "javax.annotation.processing.Filer.createResource()"
        ],
        "APIClasses": [
            "javax.annotation.processing.Filer"
        ],
        "Source": "Tutorial Websites"
    },
    "5266": {
        "Query": "create image in green RGB channel",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()",
            "java.awt.image.ColorModel.getGreen()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage",
            "java.awt.image.ColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "5267": {
        "Query": "create image in red RGB channel",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()",
            "java.awt.image.ColorModel.getRed()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage",
            "java.awt.image.ColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "5268": {
        "Query": "creates a set of unique string tokens which are separated by separator",
        "GroundTruth": [
            "java.util.StringTokenizer.hasMoreTokens()"
        ],
        "APIClasses": [
            "java.util.StringTokenizer"
        ],
        "Source": "Tutorial Websites"
    },
    "5269": {
        "Query": "creates a square beginning at x,y and tilted in the direction of the angle.",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()",
            "java.awt.Polygon.addPoint()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.Polygon"
        ],
        "Source": "Tutorial Websites"
    },
    "5270": {
        "Query": "creates an image in blue RGB channel",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()",
            "java.awt.image.ColorModel.getBlue()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage",
            "java.awt.image.ColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "5271": {
        "Query": "creates and returns Screen bounds.",
        "GroundTruth": [
            "java.awt.Rectangle.setLocation()",
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getMaximumWindowBounds()"
        ],
        "APIClasses": [
            "java.awt.Rectangle",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "5272": {
        "Query": "creates image from pixels",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "5273": {
        "Query": "creating a simple model in apache jena",
        "GroundTruth": [
            "javax.annotation.processing.Filer.createResource()"
        ],
        "APIClasses": [
            "javax.annotation.processing.Filer"
        ],
        "Source": "Tutorial Websites"
    },
    "5274": {
        "Query": "crop BufferedImage by rectangle",
        "GroundTruth": [
            "java.awt.image.BufferedImage.getSubimage()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "5275": {
        "Query": "current Format Four decimal",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5276": {
        "Query": "darker Color by value",
        "GroundTruth": [
            "java.awt.Color.RGBtoHSB()",
            "java.awt.Color.HSBtoRGB()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "5277": {
        "Query": "date To XML Gregorian Calendar",
        "GroundTruth": [
            "javax.xml.datatype.DatatypeFactory.newInstance()",
            "javax.xml.datatype.DatatypeFactory.newXMLGregorianCalendarDate()"
        ],
        "APIClasses": [
            "javax.xml.datatype.DatatypeFactory",
            "javax.xml.datatype.DatatypeFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5278": {
        "Query": "days Between two date",
        "GroundTruth": [
            "java.util.Calendar.getTime()",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.Date.getTime()",
            "java.util.concurrent.TimeUnit.convert()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date",
            "java.util.concurrent.TimeUnit"
        ],
        "Source": "Tutorial Websites"
    },
    "5279": {
        "Query": "de-accents a string via Regex",
        "GroundTruth": [
            "java.text.Normalizer.normalize()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.replaceAll()"
        ],
        "APIClasses": [
            "java.text.Normalizer",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "5280": {
        "Query": "debug Print Children XML Node",
        "GroundTruth": [
            "org.w3c.dom.Node.getChildNodes()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5281": {
        "Query": "decode Base64 string via java.util.Base64",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.util.Base64.getDecoder()",
            "java.nio.charset.Charset.forName()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Base64",
            "java.nio.charset.Charset",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5282": {
        "Query": "decode BufferedImage Alpha Exponent",
        "GroundTruth": [
            "java.awt.Image.getHeight()",
            "java.awt.Image.getWidth()",
            "java.lang.Math.min()",
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.Image",
            "java.lang.Math",
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "5283": {
        "Query": "decode ECB From Source",
        "GroundTruth": [
            "javax.crypto.SecretKeyFactory.getInstance()",
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()",
            "javax.crypto.Cipher.doFinal()"
        ],
        "APIClasses": [
            "javax.crypto.SecretKeyFactory",
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "5284": {
        "Query": "decode String to Color",
        "GroundTruth": [
            "java.lang.String.startsWith()",
            "java.lang.String.substring()",
            "java.lang.String.length()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5285": {
        "Query": "decode byte array with AES/CBC/NoPadding",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "5286": {
        "Query": "decompress byte array with gzip",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5287": {
        "Query": "decorate JSF UIComponent Attribute",
        "GroundTruth": [
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5288": {
        "Query": "decrypt Data with RSA private key",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()",
            "javax.crypto.Cipher.doFinal()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "5289": {
        "Query": "deep Copy Int Matrix",
        "GroundTruth": [
            "java.lang.Object.clone()",
            "java.lang.Enum.clone()",
            "java.lang.Thread.clone()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Enum",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "5290": {
        "Query": "deep Hash Code for Map",
        "GroundTruth": [
            "java.util.Map.Entry.getKey()",
            "java.lang.String.hashCode()",
            "java.util.Map.Entry.getValue()"
        ],
        "APIClasses": [
            "java.util.Map.Entry",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5291": {
        "Query": "defector Java 3D Rotation",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5292": {
        "Query": "delete HDFS file or directory",
        "GroundTruth": [
            "java.net.URI.create()"
        ],
        "APIClasses": [
            "java.net.URI"
        ],
        "Source": "Tutorial Websites"
    },
    "5293": {
        "Query": "delete JTable Select Row",
        "GroundTruth": [
            "javax.swing.JTable.getSelectedRows()",
            "java.util.Arrays.sort()",
            "javax.swing.table.DefaultTableModel.removeRow()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "java.util.Arrays",
            "javax.swing.table.DefaultTableModel"
        ],
        "Source": "Tutorial Websites"
    },
    "5294": {
        "Query": "delete a particular file or directory from filesystem",
        "GroundTruth": [
            "java.io.File.delete()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "5295": {
        "Query": "delete cookie from HttpServletResponse",
        "GroundTruth": [
            "java.net.HttpCookie.setMaxAge()"
        ],
        "APIClasses": [
            "java.net.HttpCookie"
        ],
        "Source": "Tutorial Websites"
    },
    "5296": {
        "Query": "des3 Decrypt byte array data with string key and charset setting",
        "GroundTruth": [
            "java.lang.String.getBytes()",
            "javax.crypto.Cipher.getInstance()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "5297": {
        "Query": "determine if two points are close to each other (no sqrt=faster)",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5298": {
        "Query": "determines the complement of a sequence of nucleotides.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5299": {
        "Query": "determines the reverse of a part of a sequence of nucleotides.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.substring()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5300": {
        "Query": "determines the reverse of a sequence of nucleotides.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5301": {
        "Query": "diff between two collection",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Set.removeAll()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "5302": {
        "Query": "difference In Days between two Calendar",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTime()",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "5303": {
        "Query": "disable System out print write",
        "GroundTruth": [
            "java.lang.System.setOut()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "5304": {
        "Query": "display Error Message Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "5305": {
        "Query": "display java time Duration as String",
        "GroundTruth": [
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5306": {
        "Query": "display sound Mixer Info",
        "GroundTruth": [
            "javax.sound.sampled.AudioSystem.getMixerInfo()",
            "javax.sound.sampled.AudioSystem.getMixer()",
            "javax.sound.sampled.Mixer.getSourceLineInfo()",
            "javax.sound.sampled.Mixer.getTargetLineInfo()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioSystem",
            "javax.sound.sampled.Mixer"
        ],
        "Source": "Tutorial Websites"
    },
    "5307": {
        "Query": "distance between two JavaFX Point2D",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5308": {
        "Query": "distance between two Point2D object",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5309": {
        "Query": "distance by latitude and longitude",
        "GroundTruth": [
            "java.lang.Math.toRadians()",
            "java.lang.Math.sin()",
            "java.lang.Math.cos()",
            "java.lang.Math.atan2()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5310": {
        "Query": "distance of two color",
        "GroundTruth": [
            "java.awt.Color.getRGBColorComponents()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.awt.Color",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5311": {
        "Query": "divide two BigDecimal value",
        "GroundTruth": [
            "java.math.BigInteger.intValue()",
            "java.math.BigDecimal.intValue()",
            "java.math.BigInteger.divide()",
            "java.math.BigDecimal.divide()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "5312": {
        "Query": "divide two double via BigDecimal and control rounding",
        "GroundTruth": [
            "java.lang.Double.toString()",
            "java.math.BigInteger.divide()",
            "java.math.BigDecimal.divide()",
            "java.math.BigInteger.doubleValue()",
            "java.math.BigDecimal.doubleValue()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "5313": {
        "Query": "do JavaFX Modal Dialog",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMaxWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "5314": {
        "Query": "do Layout Tree for Component",
        "GroundTruth": [
            "java.awt.Container.getComponents()"
        ],
        "APIClasses": [
            "java.awt.Container"
        ],
        "Source": "Tutorial Websites"
    },
    "5315": {
        "Query": "dom Document to String by Transformer",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.transform()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5316": {
        "Query": "double To Raw Long Bits",
        "GroundTruth": [
            "java.lang.Double.doubleToRawLongBits()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "5317": {
        "Query": "double greater Than Or Equals",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5318": {
        "Query": "double less Than Or Equals",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5319": {
        "Query": "double to Big Decimal",
        "GroundTruth": [
            "java.lang.Double.isNaN()",
            "java.lang.Double.isInfinite()",
            "java.lang.Double.toString()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "5320": {
        "Query": "double value list Absolute mean.",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5321": {
        "Query": "download Image from URL",
        "GroundTruth": [
            "java.net.URL.openConnection()",
            "java.net.HttpURLConnection.getResponseCode()",
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "java.net.URL",
            "java.net.HttpURLConnection",
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "5322": {
        "Query": "draw Affine Texture Scan Line",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "5323": {
        "Query": "draw Arc Through Center",
        "GroundTruth": [
            "java.lang.Math.acos()",
            "java.lang.Math.rint()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5324": {
        "Query": "draw Circle Through Center",
        "GroundTruth": [
            "java.awt.Graphics.drawOval()"
        ],
        "APIClasses": [
            "java.awt.Graphics"
        ],
        "Source": "Tutorial Websites"
    },
    "5325": {
        "Query": "draw Corner Shadow micro edition",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5326": {
        "Query": "draw Flat Scan Line",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "5327": {
        "Query": "draw Line by openGL",
        "GroundTruth": [
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.awt.Color.getAlpha()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "5328": {
        "Query": "draw Reflection Coefficient Circle",
        "GroundTruth": [
            "java.awt.Graphics.setColor()",
            "java.awt.PageAttributes.setColor()",
            "java.lang.Math.sqrt()",
            "java.awt.Graphics.drawLine()",
            "java.awt.Graphics.drawOval()"
        ],
        "APIClasses": [
            "java.awt.Graphics",
            "java.awt.PageAttributes",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5329": {
        "Query": "draw Rotated JavaFX Image",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "5330": {
        "Query": "draw Rounded Rect opengl",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5331": {
        "Query": "draw Sphere with OpenGL",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5332": {
        "Query": "draws a line starting at x,y, and going in the direction of the angle",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5333": {
        "Query": "enable Oracle dbms output",
        "GroundTruth": [
            "java.sql.Connection.prepareCall()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5334": {
        "Query": "encode ECB As Hex String",
        "GroundTruth": [
            "java.lang.String.getBytes()",
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()",
            "javax.crypto.Cipher.doFinal()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "5335": {
        "Query": "encode File To Wav",
        "GroundTruth": [
            "javax.sound.sampled.AudioSystem.write()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "5336": {
        "Query": "encode String to Base64 via java.util.Base64",
        "GroundTruth": [
            "java.util.Base64.getEncoder()"
        ],
        "APIClasses": [
            "java.util.Base64"
        ],
        "Source": "Tutorial Websites"
    },
    "5337": {
        "Query": "encode byte array Hmac SHA",
        "GroundTruth": [
            "javax.crypto.Mac.getInstance()",
            "javax.crypto.Mac.init()",
            "javax.crypto.Mac.doFinal()"
        ],
        "APIClasses": [
            "javax.crypto.Mac"
        ],
        "Source": "Tutorial Websites"
    },
    "5338": {
        "Query": "escape XML String by replace",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5339": {
        "Query": "escapes & < > \" ' characters to & < $gt; \" '",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.indexOf()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5340": {
        "Query": "escapes & characters to & only",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()",
            "java.lang.String.toString()",
            "java.lang.String.lastIndexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5341": {
        "Query": "exchange element in a List by index",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.size()",
            "java.util.List.get()",
            "java.util.List.remove()",
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "5342": {
        "Query": "execute Batch Query from a File",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.executeUpdate()",
            "java.sql.PreparedStatement.executeUpdate()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.Statement",
            "java.sql.PreparedStatement"
        ],
        "Source": "Tutorial Websites"
    },
    "5343": {
        "Query": "expand All JTree Nodes",
        "GroundTruth": [
            "javax.swing.JTree.expandRow()"
        ],
        "APIClasses": [
            "javax.swing.JTree"
        ],
        "Source": "Tutorial Websites"
    },
    "5344": {
        "Query": "expand First JTree Nodes",
        "GroundTruth": [
            "javax.swing.JTree.expandRow()"
        ],
        "APIClasses": [
            "javax.swing.JTree"
        ],
        "Source": "Tutorial Websites"
    },
    "5345": {
        "Query": "extract Encoding from XML String",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5346": {
        "Query": "extract Value From Query String And Key",
        "GroundTruth": [
            "java.util.StringTokenizer.hasMoreTokens()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.util.StringTokenizer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5347": {
        "Query": "extremely simple version natural logarithm, using no algorithm tricks, but just via doubles and recreating BigDecimal Might give less accurate results, but this is to be tested.",
        "GroundTruth": [
            "java.math.BigDecimal.unscaledValue()",
            "java.math.BigInteger.longValue()",
            "java.math.BigDecimal.longValue()",
            "java.math.BigDecimal.scale()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.math.BigDecimal",
            "java.math.BigInteger",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5348": {
        "Query": "field To Getter method",
        "GroundTruth": [
            "java.beans.PropertyDescriptor.getReadMethod()"
        ],
        "APIClasses": [
            "java.beans.PropertyDescriptor"
        ],
        "Source": "Tutorial Websites"
    },
    "5349": {
        "Query": "field To Setter method",
        "GroundTruth": [
            "java.beans.PropertyDescriptor.getWriteMethod()"
        ],
        "APIClasses": [
            "java.beans.PropertyDescriptor"
        ],
        "Source": "Tutorial Websites"
    },
    "5350": {
        "Query": "fill Transparent Bordered Selection Polygon",
        "GroundTruth": [
            "java.awt.Graphics2D.getComposite()",
            "java.awt.Graphics2D.setComposite()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D",
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "5351": {
        "Query": "fill Transparent Bordered Selection Rectangle",
        "GroundTruth": [
            "java.awt.Graphics2D.getComposite()",
            "java.awt.Graphics2D.setComposite()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D",
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "5352": {
        "Query": "fill Transparent Selection Area",
        "GroundTruth": [
            "java.awt.Graphics2D.getComposite()",
            "java.awt.Graphics2D.setComposite()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D",
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "5353": {
        "Query": "fill Transparent Selection Polygon",
        "GroundTruth": [
            "java.awt.Graphics2D.getComposite()",
            "java.awt.Graphics2D.setComposite()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D",
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "5354": {
        "Query": "fill Transparent Selection Rectangle",
        "GroundTruth": [
            "java.awt.Graphics2D.getComposite()",
            "java.awt.Graphics2D.setComposite()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D",
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "5355": {
        "Query": "fill an array Randomly",
        "GroundTruth": [
            "java.lang.System.currentTimeMillis()",
            "java.util.Random.nextInt()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "5356": {
        "Query": "fill array with filling char",
        "GroundTruth": [
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5357": {
        "Query": "filter List with Predicate",
        "GroundTruth": [
            "java.util.function.Predicate.test()"
        ],
        "APIClasses": [
            "java.util.function.Predicate"
        ],
        "Source": "Tutorial Websites"
    },
    "5358": {
        "Query": "filter a List from a String Array",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.contains()",
            "java.util.List.remove()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "5359": {
        "Query": "filter annotations by given class.",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()",
            "java.util.List.add()",
            "java.util.List.toArray()",
            "java.util.List.size()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "5360": {
        "Query": "find All Fields from a class via reflection",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.Class.getDeclaredFields()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5361": {
        "Query": "find Annotation Declaring Class",
        "GroundTruth": [
            "java.lang.annotation.IncompleteAnnotationException.annotationType()",
            "java.lang.annotation.Annotation.annotationType()"
        ],
        "APIClasses": [
            "java.lang.annotation.IncompleteAnnotationException",
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "5362": {
        "Query": "find Annotation for Class",
        "GroundTruth": [
            "java.lang.Class.isInstance()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5363": {
        "Query": "find Annotation from Annotation array",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.annotation.Annotation.equals()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "5364": {
        "Query": "find Annotation from Class",
        "GroundTruth": [
            "java.lang.annotation.IncompleteAnnotationException.annotationType()",
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.annotation.Annotation.equals()"
        ],
        "APIClasses": [
            "java.lang.annotation.IncompleteAnnotationException",
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "5365": {
        "Query": "find Annotations In Field",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()",
            "java.lang.reflect.Field.getAnnotation()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "5366": {
        "Query": "find BigInteger Nearest Power Of Ten",
        "GroundTruth": [
            "java.math.BigInteger.toString()",
            "java.math.BigDecimal.toString()",
            "java.math.MathContext.toString()",
            "java.math.BigInteger.multiply()",
            "java.math.BigDecimal.multiply()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal",
            "java.math.MathContext"
        ],
        "Source": "Tutorial Websites"
    },
    "5367": {
        "Query": "find Color on BufferedImage",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.awt.image.BufferedImage.getSubimage()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "5368": {
        "Query": "find Declared Field With Annotation",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()",
            "java.lang.reflect.Field.getDeclaredAnnotations()",
            "java.lang.Class.isAssignableFrom()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.Field",
            "java.lang.Class",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "5369": {
        "Query": "find Field from class by name using reflection",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.lang.Class.getDeclaredFields()",
            "java.util.jar.Attributes.Name.equals()",
            "java.lang.reflect.Field.getName()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Class",
            "java.util.jar.Attributes.Name",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "5370": {
        "Query": "find First Ends With",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.endsWith()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5371": {
        "Query": "find First Starts With",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5372": {
        "Query": "find Intersection Of Two Lines",
        "GroundTruth": [
            "java.lang.Math.max()",
            "java.lang.Math.min()",
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5373": {
        "Query": "find JSF Component By Id",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5374": {
        "Query": "find JSF Component For",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5375": {
        "Query": "find JSF Components Of Type",
        "GroundTruth": [
            "java.lang.Class.isInstance()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5376": {
        "Query": "find JSF Parent Form",
        "GroundTruth": [
            "java.awt.Component.getParent()",
            "java.awt.Font.getFamily()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.awt.Component",
            "java.awt.Font",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5377": {
        "Query": "find JSF Parent Naming Container",
        "GroundTruth": [
            "java.awt.Component.getParent()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "5378": {
        "Query": "find JSF Parent Unique Id Vendor",
        "GroundTruth": [
            "java.awt.Component.getParent()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "5379": {
        "Query": "find JavaFX Child By ID",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.awt.List.getItems()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.List"
        ],
        "Source": "Tutorial Websites"
    },
    "5380": {
        "Query": "find Line Number from Throwable",
        "GroundTruth": [
            "java.lang.StackTraceElement.getLineNumber()",
            "java.lang.management.ThreadInfo.getStackTrace()",
            "java.lang.Throwable.getStackTrace()",
            "java.lang.Thread.getStackTrace()",
            "java.lang.StackTraceElement.isNativeMethod()"
        ],
        "APIClasses": [
            "java.lang.StackTraceElement",
            "java.lang.management.ThreadInfo",
            "java.lang.Throwable",
            "java.lang.Thread",
            "java.lang.StackTraceElement"
        ],
        "Source": "Tutorial Websites"
    },
    "5381": {
        "Query": "find Max Occurrence In String List",
        "GroundTruth": [
            "java.util.List.size()",
            "java.util.Collections.frequency()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "5382": {
        "Query": "find Median value from array",
        "GroundTruth": [
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5383": {
        "Query": "find Method Ignore Case And Arguments Types Assigned",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()",
            "java.util.Arrays.equals()",
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Arrays",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5384": {
        "Query": "find Method from Throwable",
        "GroundTruth": [
            "java.lang.StackTraceElement.getMethodName()",
            "java.lang.management.ThreadInfo.getStackTrace()",
            "java.lang.Throwable.getStackTrace()",
            "java.lang.Thread.getStackTrace()",
            "java.lang.StackTraceElement.isNativeMethod()"
        ],
        "APIClasses": [
            "java.lang.StackTraceElement",
            "java.lang.management.ThreadInfo",
            "java.lang.Throwable",
            "java.lang.Thread",
            "java.lang.StackTraceElement"
        ],
        "Source": "Tutorial Websites"
    },
    "5385": {
        "Query": "find Named Child XML Node",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5386": {
        "Query": "find Named inject Annotation",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "5387": {
        "Query": "find Nearest Previous Monday",
        "GroundTruth": [
            "java.util.Calendar.setTime()",
            "java.util.Calendar.get()",
            "java.util.Calendar.add()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5388": {
        "Query": "find Proper Constructor by parameter types via reflection",
        "GroundTruth": [
            "java.lang.reflect.Constructor.getParameterTypes()",
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.reflect.Constructor",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5389": {
        "Query": "find Scroll Pane from JTable",
        "GroundTruth": [
            "javax.swing.SwingUtilities.getAncestorOfClass()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "5390": {
        "Query": "find Shortest Path With Greedy Approach",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5391": {
        "Query": "find XML Root Node from NodeList",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5392": {
        "Query": "find XML Sub Node",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5393": {
        "Query": "find annotated Methods Recursively",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.Class.getDeclaredMethods()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5394": {
        "Query": "find first non-repeating character in the input string",
        "GroundTruth": [
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5395": {
        "Query": "find if inputString is a Palindrome",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence"
        ],
        "Source": "Tutorial Websites"
    },
    "5396": {
        "Query": "find key in a Map Ignoring Case",
        "GroundTruth": [
            "java.util.Map.get()",
            "java.util.Map.entrySet()",
            "java.util.Map.Entry.getKey()",
            "java.util.Map.Entry.getValue()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.Map.Entry"
        ],
        "Source": "Tutorial Websites"
    },
    "5397": {
        "Query": "find natural logarithm value of a number using log method of Math class",
        "GroundTruth": [
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5398": {
        "Query": "find the length of the longest sequence of consecutive numbers in the array",
        "GroundTruth": [
            "java.lang.String.contains()",
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5399": {
        "Query": "finding the location of the current XML node of its kind.",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5400": {
        "Query": "finds the index of the smallest entry in a continuous span of ArrayList entries",
        "GroundTruth": [
            "java.util.ArrayList.size()",
            "java.util.ArrayList.get()",
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5401": {
        "Query": "fit Component Inside Screen",
        "GroundTruth": [
            "java.awt.Component.getSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "5402": {
        "Query": "fit Component Into Screen",
        "GroundTruth": [
            "java.awt.Component.setLocation()",
            "java.awt.Component.getLocation()",
            "java.awt.Component.getSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "5403": {
        "Query": "fit Popup Menu Inside Screen",
        "GroundTruth": [
            "java.awt.Component.getSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "5404": {
        "Query": "fix Whitespaces by removing new lines, tabs and multiple spaces via regular expression",
        "GroundTruth": [
            "java.util.regex.Matcher.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "5405": {
        "Query": "flip JavaFX Canvas Drawing",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5406": {
        "Query": "force JTable Column Width",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMinWidth()",
            "javax.swing.table.TableColumn.setMaxWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "5407": {
        "Query": "format BigDecimal by scale and rounding",
        "GroundTruth": [
            "java.math.BigDecimal.setScale()"
        ],
        "APIClasses": [
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "5408": {
        "Query": "format Bytes as String",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5409": {
        "Query": "format Degree To Dms",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5410": {
        "Query": "format Degree To Hms",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5411": {
        "Query": "format Double as Billion, Million, Thousand",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5412": {
        "Query": "format Duration in second",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5413": {
        "Query": "format During To HHMMSS",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5414": {
        "Query": "format Half Up BigDecimal",
        "GroundTruth": [
            "java.math.BigDecimal.setScale()",
            "java.math.BigDecimal.doubleValue()"
        ],
        "APIClasses": [
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "5415": {
        "Query": "format day using SimpleDateFormat",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5416": {
        "Query": "format double value as Currency",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5417": {
        "Query": "format double value as US Locale",
        "GroundTruth": [
            "java.text.NumberFormat.getInstance()"
        ],
        "APIClasses": [
            "java.text.NumberFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "5418": {
        "Query": "format int As Currency",
        "GroundTruth": [
            "java.text.NumberFormat.getCurrencyInstance()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.text.NumberFormat",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5419": {
        "Query": "from Bounds JavaFX Rectangle",
        "GroundTruth": [
            "java.util.Objects.requireNonNull()"
        ],
        "APIClasses": [
            "java.util.Objects"
        ],
        "Source": "Tutorial Websites"
    },
    "5420": {
        "Query": "from CSV Lineto Array",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5421": {
        "Query": "from PKCS8 to RSAPrivateKey",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()",
            "java.security.KeyFactory.generatePrivate()"
        ],
        "APIClasses": [
            "java.security.KeyFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5422": {
        "Query": "full justification with a java graphics drawstring replacement",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.awt.FontMetrics.stringWidth()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.FontMetrics"
        ],
        "Source": "Tutorial Websites"
    },
    "5423": {
        "Query": "gamma-function(x) using Lanczos approximation formula",
        "GroundTruth": [
            "java.lang.Math.exp()",
            "java.lang.StrictMath.exp()",
            "java.lang.Math.log()",
            "java.lang.StrictMath.log()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "5424": {
        "Query": "gen RSA Key Pair",
        "GroundTruth": [
            "java.security.KeyPairGenerator.getInstance()",
            "java.security.KeyPairGenerator.initialize()",
            "java.security.KeyPairGenerator.generateKeyPair()"
        ],
        "APIClasses": [
            "java.security.KeyPairGenerator"
        ],
        "Source": "Tutorial Websites"
    },
    "5425": {
        "Query": "generate 128 Bit Hash",
        "GroundTruth": [
            "java.util.Arrays.copyOfRange()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5426": {
        "Query": "generate AES Key SecretKey",
        "GroundTruth": [
            "javax.crypto.KeyGenerator.getInstance()",
            "java.lang.String.getBytes()",
            "javax.crypto.KeyGenerator.generateKey()"
        ],
        "APIClasses": [
            "javax.crypto.KeyGenerator",
            "java.lang.String",
            "javax.crypto.KeyGenerator"
        ],
        "Source": "Tutorial Websites"
    },
    "5427": {
        "Query": "generate LCD-like formatted number",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.Character.getNumericValue()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "5428": {
        "Query": "generate RSA Key Pair",
        "GroundTruth": [
            "java.security.KeyPairGenerator.getInstance()",
            "java.security.KeyPairGenerator.initialize()",
            "java.security.KeyPairGenerator.genKeyPair()"
        ],
        "APIClasses": [
            "java.security.KeyPairGenerator"
        ],
        "Source": "Tutorial Websites"
    },
    "5429": {
        "Query": "generate RSA Private Key",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()",
            "java.security.KeyFactory.generatePrivate()"
        ],
        "APIClasses": [
            "java.security.KeyFactory",
            "java.security.KeyFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5430": {
        "Query": "generate RSA Public Key",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()",
            "java.security.KeyFactory.generatePublic()"
        ],
        "APIClasses": [
            "java.security.KeyFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5431": {
        "Query": "generate Random AN String",
        "GroundTruth": [
            "java.util.Random.nextInt()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "5432": {
        "Query": "generate Random byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5433": {
        "Query": "generate Random integer within a range",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5434": {
        "Query": "generate Random value array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5435": {
        "Query": "generate Unique File Name",
        "GroundTruth": [
            "java.lang.System.nanoTime()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "5436": {
        "Query": "generate Unique String from current time in yyyyMMdd_HHmmss format",
        "GroundTruth": [
            "java.text.DateFormat.format()"
        ],
        "APIClasses": [
            "java.text.DateFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "5437": {
        "Query": "generate a random alpha-numeric string using BigInteger",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5438": {
        "Query": "generate readable File Size from long value",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5439": {
        "Query": "generates a key pair (private key, public key).",
        "GroundTruth": [
            "java.security.KeyPairGenerator.getInstance()"
        ],
        "APIClasses": [
            "java.security.KeyPairGenerator"
        ],
        "Source": "Tutorial Websites"
    },
    "5440": {
        "Query": "generates a random permutation of integers",
        "GroundTruth": [
            "java.util.ArrayList.add()",
            "java.util.ArrayList.size()",
            "java.lang.Math.random()",
            "java.util.ArrayList.get()",
            "java.util.ArrayList.set()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5441": {
        "Query": "get Absolute Path for class loader",
        "GroundTruth": [
            "java.lang.ClassLoader.getSystemClassLoader()",
            "java.lang.ClassLoader.getResource()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Tutorial Websites"
    },
    "5442": {
        "Query": "get Access Database Connection via Jdbc Odbc Bridge",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5443": {
        "Query": "get Accessible Method From Interface Nest",
        "GroundTruth": [
            "java.lang.reflect.Modifier.isPublic()",
            "java.lang.Class.getDeclaredMethod()"
        ],
        "APIClasses": [
            "java.lang.reflect.Modifier",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5444": {
        "Query": "get Accessible Method From Superclass",
        "GroundTruth": [
            "java.lang.reflect.Modifier.isPublic()"
        ],
        "APIClasses": [
            "java.lang.reflect.Modifier"
        ],
        "Source": "Tutorial Websites"
    },
    "5445": {
        "Query": "get Active Top Level Frame",
        "GroundTruth": [
            "java.awt.Frame.getFrames()"
        ],
        "APIClasses": [
            "java.awt.Frame"
        ],
        "Source": "Tutorial Websites"
    },
    "5446": {
        "Query": "get Address Xml by appending tag string together",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5447": {
        "Query": "get Age Days from Java LocalDate",
        "GroundTruth": [
            "java.time.LocalDate.now()"
        ],
        "APIClasses": [
            "java.time.LocalDate"
        ],
        "Source": "Tutorial Websites"
    },
    "5448": {
        "Query": "get Age from Java LocalDate",
        "GroundTruth": [
            "java.time.LocalDate.now()"
        ],
        "APIClasses": [
            "java.time.LocalDate"
        ],
        "Source": "Tutorial Websites"
    },
    "5449": {
        "Query": "get Age from LocalDate",
        "GroundTruth": [
            "java.time.Period.between()",
            "java.time.Period.getYears()",
            "java.time.LocalDate.now()"
        ],
        "APIClasses": [
            "java.time.Period",
            "java.time.LocalDate"
        ],
        "Source": "Tutorial Websites"
    },
    "5450": {
        "Query": "get All Column Name from ResultSetMetaData",
        "GroundTruth": [
            "java.sql.ResultSetMetaData.getColumnCount()",
            "java.sql.ResultSetMetaData.getColumnName()"
        ],
        "APIClasses": [
            "java.sql.ResultSetMetaData"
        ],
        "Source": "Tutorial Websites"
    },
    "5451": {
        "Query": "get All Fields Include Super Class",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5452": {
        "Query": "get All Fields Of Type",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()",
            "java.lang.Class.isAssignableFrom()",
            "java.lang.reflect.Field.getType()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Class",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "5453": {
        "Query": "get All Fields With Annotation",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()",
            "java.lang.reflect.Field.getAnnotation()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "5454": {
        "Query": "get All Fields from a Class",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.Class.getDeclaredFields()",
            "java.lang.reflect.Field.getAnnotation()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Class",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "5455": {
        "Query": "get All Fields from class",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5456": {
        "Query": "get All Files Under Directory using nio",
        "GroundTruth": [
            "java.nio.file.Files.walkFileTree()",
            "java.io.File.toPath()",
            "java.nio.file.Path.toFile()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.io.File",
            "java.nio.file.Path",
            "java.nio.file.Path"
        ],
        "Source": "Tutorial Websites"
    },
    "5457": {
        "Query": "get All Methods Include Super Class",
        "GroundTruth": [
            "java.lang.Class.getDeclaredMethods()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5458": {
        "Query": "get All Possible Substring Combinations",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5459": {
        "Query": "get All Super classes As Array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5460": {
        "Query": "get Ancestor JDialog from Component",
        "GroundTruth": [
            "javax.swing.SwingUtilities.getAncestorOfClass()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "5461": {
        "Query": "get Annotation from Annotated Element",
        "GroundTruth": [
            "javax.lang.model.element.Element.getAnnotation()"
        ],
        "APIClasses": [
            "javax.lang.model.element.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "5462": {
        "Query": "get Annotation from AnnotatedElement",
        "GroundTruth": [
            "java.lang.annotation.IncompleteAnnotationException.annotationType()",
            "java.lang.annotation.Annotation.annotationType()"
        ],
        "APIClasses": [
            "java.lang.annotation.IncompleteAnnotationException",
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "5463": {
        "Query": "get Annotation from annotated class",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "5464": {
        "Query": "get Annotations from Field",
        "GroundTruth": [
            "java.lang.reflect.Field.getDeclaredAnnotations()"
        ],
        "APIClasses": [
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "5465": {
        "Query": "get Annotations from Object",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "5466": {
        "Query": "get Argument Names from Method",
        "GroundTruth": [
            "java.lang.reflect.Method.getParameterTypes()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method"
        ],
        "Source": "Tutorial Websites"
    },
    "5467": {
        "Query": "get Array As String",
        "GroundTruth": [
            "java.lang.Object.toString()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "5468": {
        "Query": "get Array from Object",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Object.getClass()",
            "java.lang.Class.isAssignableFrom()",
            "java.lang.reflect.Array.getLength()",
            "java.lang.reflect.Array.get()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Object",
            "java.lang.Class",
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "5469": {
        "Query": "get As Enum Type Collection",
        "GroundTruth": [
            "java.lang.String.isEmpty()",
            "java.lang.String.split()",
            "java.lang.Enum.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Enum"
        ],
        "Source": "Tutorial Websites"
    },
    "5470": {
        "Query": "get Attr Of Name from Node",
        "GroundTruth": [
            "org.w3c.dom.Node.getAttributes()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "5471": {
        "Query": "get Attribute Boolean from XML Node by name",
        "GroundTruth": [
            "java.lang.Boolean.parseBoolean()",
            "org.w3c.dom.Node.getAttributes()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "java.lang.Boolean",
            "org.w3c.dom.Node",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "5472": {
        "Query": "get Attribute Int from Node by attribute name",
        "GroundTruth": [
            "java.lang.Integer.parseInt()",
            "org.w3c.dom.Node.getAttributes()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "org.w3c.dom.Node",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "5473": {
        "Query": "get Attribute Value from Node",
        "GroundTruth": [
            "org.w3c.dom.Node.getAttributes()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "5474": {
        "Query": "get Attribute Value from XML Node",
        "GroundTruth": [
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "5475": {
        "Query": "get Attribute Value from XML Node by attribute name",
        "GroundTruth": [
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "5476": {
        "Query": "get Attribute from XML Node by attribute name",
        "GroundTruth": [
            "org.w3c.dom.Node.getAttributes()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "5477": {
        "Query": "get Attribute from XML Node by name",
        "GroundTruth": [
            "org.w3c.dom.Node.getAttributes()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "5478": {
        "Query": "get Audio Clip from URL",
        "GroundTruth": [
            "java.applet.Applet.newAudioClip()"
        ],
        "APIClasses": [
            "java.applet.Applet"
        ],
        "Source": "Tutorial Websites"
    },
    "5479": {
        "Query": "get Audio Mixer Line If Available",
        "GroundTruth": [
            "javax.sound.sampled.Mixer.getLine()"
        ],
        "APIClasses": [
            "javax.sound.sampled.Mixer"
        ],
        "Source": "Tutorial Websites"
    },
    "5480": {
        "Query": "get Available Audio Input Lines",
        "GroundTruth": [
            "javax.sound.sampled.Mixer.getSourceLineInfo()",
            "javax.sound.sampled.Mixer.getLine()"
        ],
        "APIClasses": [
            "javax.sound.sampled.Mixer"
        ],
        "Source": "Tutorial Websites"
    },
    "5481": {
        "Query": "get Available Audio Mixer Output Lines",
        "GroundTruth": [
            "javax.sound.sampled.Mixer.getTargetLineInfo()",
            "javax.sound.sampled.Mixer.getLine()"
        ],
        "APIClasses": [
            "javax.sound.sampled.Mixer"
        ],
        "Source": "Tutorial Websites"
    },
    "5482": {
        "Query": "get Available Lines from Audio Mixer",
        "GroundTruth": [
            "javax.sound.sampled.Mixer.getLine()"
        ],
        "APIClasses": [
            "javax.sound.sampled.Mixer"
        ],
        "Source": "Tutorial Websites"
    },
    "5483": {
        "Query": "get Average Angle from GeneralPath",
        "GroundTruth": [
            "java.awt.geom.Path2D.getCurrentPoint()"
        ],
        "APIClasses": [
            "java.awt.geom.Path2D"
        ],
        "Source": "Tutorial Websites"
    },
    "5484": {
        "Query": "get Average Color from BufferedImage",
        "GroundTruth": [
            "java.awt.MultipleGradientPaint.getColors()"
        ],
        "APIClasses": [
            "java.awt.MultipleGradientPaint"
        ],
        "Source": "Tutorial Websites"
    },
    "5485": {
        "Query": "get Background Color Random",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5486": {
        "Query": "get Base Type of enterprise annotation",
        "GroundTruth": [
            "java.awt.CheckboxGroup.getCurrent()"
        ],
        "APIClasses": [
            "java.awt.CheckboxGroup"
        ],
        "Source": "Tutorial Websites"
    },
    "5487": {
        "Query": "get Begin Of Day",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5488": {
        "Query": "get Bigger Random Double",
        "GroundTruth": [
            "java.util.Scanner.nextDouble()",
            "java.util.Random.nextDouble()",
            "java.util.concurrent.ThreadLocalRandom.nextDouble()",
            "java.util.PrimitiveIterator.OfDouble.nextDouble()",
            "java.util.SplittableRandom.nextDouble()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom",
            "java.util.PrimitiveIterator.OfDouble",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "5489": {
        "Query": "get BitSet From Byte",
        "GroundTruth": [
            "java.util.BitSet.set()"
        ],
        "APIClasses": [
            "java.util.BitSet"
        ],
        "Source": "Tutorial Websites"
    },
    "5490": {
        "Query": "get Black Image BufferedImage",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "5491": {
        "Query": "get Body Element from Swing HTMLDocument",
        "GroundTruth": [
            "javax.swing.text.Document.getDefaultRootElement()",
            "javax.swing.text.Element.getName()",
            "java.lang.String.equals()",
            "javax.swing.text.Element.getElement()",
            "javax.swing.text.Element.getElementCount()"
        ],
        "APIClasses": [
            "javax.swing.text.Document",
            "javax.swing.text.Element",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5492": {
        "Query": "get Boolean from Properties",
        "GroundTruth": [
            "java.util.Properties.getProperty()",
            "java.util.logging.LogManager.getProperty()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.util.Properties",
            "java.util.logging.LogManager",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5493": {
        "Query": "get Boolean value from String",
        "GroundTruth": [
            "java.lang.Boolean.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "5494": {
        "Query": "get Browser Type from user agent",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5495": {
        "Query": "get Browser from user agent",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.indexOf()",
            "java.lang.String.substring()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5496": {
        "Query": "get BufferedImage Color Int Matrix",
        "GroundTruth": [
            "java.awt.Image.getHeight()",
            "java.awt.Image.getWidth()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "5497": {
        "Query": "get BufferedImage Split RGB",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "5498": {
        "Query": "get BufferedReader from file URL",
        "GroundTruth": [
            "java.net.URL.openStream()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "5499": {
        "Query": "get Byte Value From ResultSet",
        "GroundTruth": [
            "java.sql.SQLXML.getString()",
            "java.sql.CallableStatement.getString()",
            "java.sql.ResultSet.getString()",
            "java.sql.CallableStatement.getByte()",
            "java.sql.ResultSet.getByte()"
        ],
        "APIClasses": [
            "java.sql.SQLXML",
            "java.sql.CallableStatement",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "5500": {
        "Query": "get Byte array Of Host Address",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.split()",
            "java.lang.Short.parseShort()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.Short"
        ],
        "Source": "Tutorial Websites"
    },
    "5501": {
        "Query": "get Bytes From File",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.io.File.length()",
            "java.io.File.getName()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "5502": {
        "Query": "get Calendar From System Time In Millis",
        "GroundTruth": [
            "java.util.Calendar.setTimeInMillis()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5503": {
        "Query": "get Cause of an Exception",
        "GroundTruth": [
            "java.lang.reflect.UndeclaredThrowableException.getCause()",
            "java.lang.reflect.InvocationTargetException.getCause()",
            "java.lang.ClassNotFoundException.getCause()",
            "java.lang.Throwable.getCause()",
            "java.lang.ExceptionInInitializerError.getCause()"
        ],
        "APIClasses": [
            "java.lang.reflect.UndeclaredThrowableException",
            "java.lang.reflect.InvocationTargetException",
            "java.lang.ClassNotFoundException",
            "java.lang.Throwable",
            "java.lang.ExceptionInInitializerError"
        ],
        "Source": "Tutorial Websites"
    },
    "5504": {
        "Query": "get Centered Dialog Bounds",
        "GroundTruth": [
            "javax.swing.SwingUtilities.convertPointToScreen()",
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5505": {
        "Query": "get Centering Start Point",
        "GroundTruth": [
            "java.awt.FontMetrics.stringWidth()",
            "java.awt.Font.getLineMetrics()"
        ],
        "APIClasses": [
            "java.awt.FontMetrics",
            "java.awt.Font"
        ],
        "Source": "Tutorial Websites"
    },
    "5506": {
        "Query": "get Centering Start X",
        "GroundTruth": [
            "java.awt.FontMetrics.stringWidth()"
        ],
        "APIClasses": [
            "java.awt.FontMetrics"
        ],
        "Source": "Tutorial Websites"
    },
    "5507": {
        "Query": "get Centering Start Y",
        "GroundTruth": [
            "java.awt.Font.getLineMetrics()"
        ],
        "APIClasses": [
            "java.awt.Font"
        ],
        "Source": "Tutorial Websites"
    },
    "5508": {
        "Query": "get Child from XML Node",
        "GroundTruth": [
            "org.w3c.dom.Node.getChildNodes()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5509": {
        "Query": "get Children Elements By XML Tag",
        "GroundTruth": [
            "org.w3c.dom.Node.getChildNodes()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "5510": {
        "Query": "get Chinese String Length",
        "GroundTruth": [
            "java.lang.String.isEmpty()",
            "java.lang.String.split()",
            "java.lang.String.matches()",
            "java.lang.String.equals()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5511": {
        "Query": "get Cider Base IP",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5512": {
        "Query": "get Class By String for Reflection",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5513": {
        "Query": "get Class Execute Path",
        "GroundTruth": [
            "java.lang.ClassLoader.getSystemResource()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader"
        ],
        "Source": "Tutorial Websites"
    },
    "5514": {
        "Query": "get Class Mutator Method",
        "GroundTruth": [
            "java.lang.Class.getDeclaredMethod()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5515": {
        "Query": "get Class Name from TypeElement",
        "GroundTruth": [
            "javax.lang.model.element.Element.getSimpleName()",
            "java.lang.String.toString()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "javax.lang.model.element.Element",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5516": {
        "Query": "get Classes Iterator from Package",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5517": {
        "Query": "get Classpath Resource Image",
        "GroundTruth": [
            "java.lang.ClassLoader.getResourceAsStream()",
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "java.lang.ClassLoader",
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "5518": {
        "Query": "get Client IP from HttpServletRequest",
        "GroundTruth": [
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5519": {
        "Query": "get Cmd Progress Bar",
        "GroundTruth": [
            "java.lang.Math.round()",
            "java.lang.String.format()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5520": {
        "Query": "get Collinear Point With Length",
        "GroundTruth": [
            "java.awt.geom.Point2D.distance()"
        ],
        "APIClasses": [
            "java.awt.geom.Point2D"
        ],
        "Source": "Tutorial Websites"
    },
    "5521": {
        "Query": "get Color in Shape",
        "GroundTruth": [
            "java.awt.font.NumericShaper.shape()"
        ],
        "APIClasses": [
            "java.awt.font.NumericShaper"
        ],
        "Source": "Tutorial Websites"
    },
    "5522": {
        "Query": "get Colors from BufferedImage",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "5523": {
        "Query": "get Column Names from JTable",
        "GroundTruth": [
            "javax.swing.table.TableModel.getColumnCount()",
            "javax.swing.table.TableModel.getColumnName()"
        ],
        "APIClasses": [
            "javax.swing.table.TableModel"
        ],
        "Source": "Tutorial Websites"
    },
    "5524": {
        "Query": "get Component Top level Ancestor",
        "GroundTruth": [
            "java.awt.MenuComponent.getParent()",
            "java.awt.PopupMenu.getParent()",
            "java.awt.Component.getParent()",
            "java.awt.image.Raster.getParent()"
        ],
        "APIClasses": [
            "java.awt.MenuComponent",
            "java.awt.PopupMenu",
            "java.awt.Component",
            "java.awt.image.Raster"
        ],
        "Source": "Tutorial Websites"
    },
    "5525": {
        "Query": "get Component Type via reflection",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5526": {
        "Query": "get Computer Name from Host",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()",
            "java.net.InetAddress.getAllByName()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "5527": {
        "Query": "get Connection from Context",
        "GroundTruth": [
            "javax.naming.Context.lookup()"
        ],
        "APIClasses": [
            "javax.naming.Context"
        ],
        "Source": "Tutorial Websites"
    },
    "5528": {
        "Query": "get Connection from DB2 Database",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5529": {
        "Query": "get Connection from MySQL on Amazon Cloud Web Service",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()",
            "java.sql.Connection.setAutoCommit()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager",
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "5530": {
        "Query": "get Connection from hsql database",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5531": {
        "Query": "get Connection jdbc:odbc Bridge",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5532": {
        "Query": "get Connection to Oracle Database",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5533": {
        "Query": "get Connection to Sql Server",
        "GroundTruth": [
            "java.sql.DriverManager.getConnection()",
            "java.sql.Connection.setAutoCommit()"
        ],
        "APIClasses": [
            "java.sql.DriverManager",
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "5534": {
        "Query": "get Connection to h2 database",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5535": {
        "Query": "get Connection to postgresql",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5536": {
        "Query": "get Connection to sqlserver Database",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5537": {
        "Query": "get Content Type from return File Name",
        "GroundTruth": [
            "java.lang.String.lastIndexOf()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.substring()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5538": {
        "Query": "get Contents from XML Node",
        "GroundTruth": [
            "org.w3c.dom.Node.getChildNodes()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5539": {
        "Query": "get Cookie value from HttpServletRequest",
        "GroundTruth": [
            "java.net.CookieStore.getCookies()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.net.CookieStore",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5540": {
        "Query": "get Cpu Processor Count",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.availableProcessors()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "5541": {
        "Query": "get Currency value from String",
        "GroundTruth": [
            "java.lang.Double.parseDouble()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5542": {
        "Query": "get Current Class Name",
        "GroundTruth": [
            "java.lang.management.ThreadInfo.getStackTrace()",
            "java.lang.Throwable.getStackTrace()",
            "java.lang.Thread.getStackTrace()",
            "java.lang.StackTraceElement.getClassName()",
            "java.lang.management.LockInfo.getClassName()"
        ],
        "APIClasses": [
            "java.lang.management.ThreadInfo",
            "java.lang.Throwable",
            "java.lang.Thread",
            "java.lang.StackTraceElement",
            "java.lang.management.LockInfo"
        ],
        "Source": "Tutorial Websites"
    },
    "5543": {
        "Query": "get Current Decorations For Swing Action",
        "GroundTruth": [
            "javax.swing.Action.getValue()"
        ],
        "APIClasses": [
            "javax.swing.Action"
        ],
        "Source": "Tutorial Websites"
    },
    "5544": {
        "Query": "get Current Line Number",
        "GroundTruth": [
            "java.lang.management.ThreadInfo.getStackTrace()",
            "java.lang.Throwable.getStackTrace()",
            "java.lang.Thread.getStackTrace()",
            "java.lang.StackTraceElement.getLineNumber()"
        ],
        "APIClasses": [
            "java.lang.management.ThreadInfo",
            "java.lang.Throwable",
            "java.lang.Thread",
            "java.lang.StackTraceElement"
        ],
        "Source": "Tutorial Websites"
    },
    "5545": {
        "Query": "get Current Method Name",
        "GroundTruth": [
            "java.lang.management.ThreadInfo.getStackTrace()",
            "java.lang.Throwable.getStackTrace()",
            "java.lang.Thread.getStackTrace()",
            "java.lang.StackTraceElement.getMethodName()"
        ],
        "APIClasses": [
            "java.lang.management.ThreadInfo",
            "java.lang.Throwable",
            "java.lang.Thread",
            "java.lang.StackTraceElement"
        ],
        "Source": "Tutorial Websites"
    },
    "5546": {
        "Query": "get Current Time In Milliseconds",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5547": {
        "Query": "get Current Time No Dash",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTime()",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "5548": {
        "Query": "get Current Time Timestamp",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.sql.Timestamp.getTime()",
            "java.sql.CallableStatement.getTime()",
            "java.sql.ResultSet.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.sql.Timestamp",
            "java.sql.CallableStatement",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "5549": {
        "Query": "get Current Working Path",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "5550": {
        "Query": "get Current Year Begin",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5551": {
        "Query": "get Current Year End",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5552": {
        "Query": "get Current runnable code Line Number",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.management.ThreadInfo.getStackTrace()",
            "java.lang.Throwable.getStackTrace()",
            "java.lang.Thread.getStackTrace()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.management.ThreadInfo",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "5553": {
        "Query": "get DOM Attr by attribute name",
        "GroundTruth": [
            "org.w3c.dom.Node.getAttributes()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "5554": {
        "Query": "get DOM Root from XML File",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5555": {
        "Query": "get Database Connection from Context",
        "GroundTruth": [
            "javax.naming.Context.lookup()",
            "javax.sql.DataSource.getConnection()"
        ],
        "APIClasses": [
            "javax.naming.Context",
            "javax.sql.DataSource"
        ],
        "Source": "Tutorial Websites"
    },
    "5556": {
        "Query": "get Date Before Yesterday",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.add()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5557": {
        "Query": "get Date From JavaFX Date Picket",
        "GroundTruth": [
            "java.time.Instant.from()",
            "java.time.LocalDate.atStartOfDay()",
            "java.time.ZoneId.systemDefault()",
            "java.util.Date.from()"
        ],
        "APIClasses": [
            "java.time.Instant",
            "java.time.LocalDate",
            "java.time.ZoneId",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "5558": {
        "Query": "get Date From String in format dd/MM/yyyy",
        "GroundTruth": [
            "java.time.LocalDate.parse()"
        ],
        "APIClasses": [
            "java.time.LocalDate"
        ],
        "Source": "Tutorial Websites"
    },
    "5559": {
        "Query": "get Date From Year And Month String",
        "GroundTruth": [
            "java.lang.Integer.parseInt()",
            "java.time.LocalDate.of()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.time.LocalDate"
        ],
        "Source": "Tutorial Websites"
    },
    "5560": {
        "Query": "get Date Time Hour Pattern",
        "GroundTruth": [
            "java.util.Locale.toString()",
            "java.lang.String.equalsIgnoreCase()",
            "java.util.Calendar.Builder.setLocale()",
            "java.util.Locale.Builder.setLocale()"
        ],
        "APIClasses": [
            "java.util.Locale",
            "java.lang.String",
            "java.util.Calendar.Builder",
            "java.util.Locale.Builder"
        ],
        "Source": "Tutorial Websites"
    },
    "5561": {
        "Query": "get Date Time Hour Pattern With Am Pm",
        "GroundTruth": [
            "java.util.Locale.toString()",
            "java.lang.String.equalsIgnoreCase()",
            "java.util.Calendar.Builder.setLocale()",
            "java.util.Locale.Builder.setLocale()"
        ],
        "APIClasses": [
            "java.util.Locale",
            "java.lang.String",
            "java.util.Calendar.Builder",
            "java.util.Locale.Builder"
        ],
        "Source": "Tutorial Websites"
    },
    "5562": {
        "Query": "get Day Count Of Month",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getActualMaximum()",
            "java.util.Calendar.setTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5563": {
        "Query": "get Day from java.sql.Date",
        "GroundTruth": [
            "java.sql.Date.toLocalDate()",
            "java.time.LocalDate.getDayOfMonth()"
        ],
        "APIClasses": [
            "java.sql.Date",
            "java.time.LocalDate"
        ],
        "Source": "Tutorial Websites"
    },
    "5564": {
        "Query": "get Days In Month",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.get()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5565": {
        "Query": "get Days Of Week Count",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.get()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5566": {
        "Query": "get Decimal Amount via BigDecimal",
        "GroundTruth": [
            "java.math.BigDecimal.setScale()"
        ],
        "APIClasses": [
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "5567": {
        "Query": "get Declared Fields from generic type",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "5568": {
        "Query": "get Declared Methods from generic method",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "5569": {
        "Query": "get Default Mutable Tree Node Children for JTree",
        "GroundTruth": [
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.nextElement()"
        ],
        "APIClasses": [
            "java.util.Enumeration"
        ],
        "Source": "Tutorial Websites"
    },
    "5570": {
        "Query": "get Default System Charset",
        "GroundTruth": [
            "java.nio.charset.Charset.forName()",
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.nio.charset.Charset",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "5571": {
        "Query": "get Deserialized Lambda Object using reflection",
        "GroundTruth": [
            "java.lang.Class.getDeclaredMethod()",
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.util.Optional.of()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.AccessibleObject",
            "java.util.Optional"
        ],
        "Source": "Tutorial Websites"
    },
    "5572": {
        "Query": "get Device Or Null",
        "GroundTruth": [
            "javax.sound.midi.MidiSystem.getMidiDevice()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "5573": {
        "Query": "get Differential Int Matrix",
        "GroundTruth": [
            "java.lang.Math.floor()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5574": {
        "Query": "get Distance In Km",
        "GroundTruth": [
            "java.lang.Math.toRadians()",
            "java.lang.Math.acos()",
            "java.lang.Math.sin()",
            "java.lang.Math.cos()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5575": {
        "Query": "get Distance In Radians",
        "GroundTruth": [
            "java.lang.Math.toRadians()",
            "java.lang.Math.acos()",
            "java.lang.Math.sin()",
            "java.lang.Math.cos()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5576": {
        "Query": "get Document Root Element",
        "GroundTruth": [
            "org.w3c.dom.Document.getDocumentElement()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "5577": {
        "Query": "get Domain From Url",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5578": {
        "Query": "get Double From JavaFX Text Field",
        "GroundTruth": [
            "java.lang.Double.parseDouble()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "5579": {
        "Query": "get Earth Radius For Latitude",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.pow()",
            "java.lang.Math.sin()",
            "java.lang.Math.cos()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5580": {
        "Query": "get Empty Calendar Greenwich",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.TimeZone.getTimeZone()",
            "java.util.Calendar.clear()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.TimeZone"
        ],
        "Source": "Tutorial Websites"
    },
    "5581": {
        "Query": "get Entity Name from Annotation",
        "GroundTruth": [
            "java.lang.annotation.Annotation.equals()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "5582": {
        "Query": "get Factors for an integer",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5583": {
        "Query": "get Field By Field Name",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getDeclaredField()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5584": {
        "Query": "get Field Value via reflection",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.get()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class",
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "5585": {
        "Query": "get Fields With Annotation",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5586": {
        "Query": "get Fields from a class",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.util.Arrays.asList()",
            "java.lang.Class.getDeclaredFields()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Arrays",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5587": {
        "Query": "get Fields from class By annotation",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5588": {
        "Query": "get File Attributes via NIO",
        "GroundTruth": [
            "java.io.File.toPath()",
            "java.nio.file.Path.getFileSystem()",
            "java.nio.file.FileSystem.supportedFileAttributeViews()",
            "java.lang.String.contains()",
            "java.nio.file.Files.readAttributes()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.nio.file.Path",
            "java.nio.file.FileSystem",
            "java.lang.String",
            "java.nio.file.Files"
        ],
        "Source": "Tutorial Websites"
    },
    "5589": {
        "Query": "get File Extension Name from File",
        "GroundTruth": [
            "java.io.File.toString()",
            "java.util.regex.Pattern.quote()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5590": {
        "Query": "get File Last Modified Time",
        "GroundTruth": [
            "java.nio.file.Files.readAttributes()",
            "java.io.File.toPath()",
            "java.nio.file.attribute.BasicFileAttributes.lastModifiedTime()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.io.File",
            "java.nio.file.attribute.BasicFileAttributes"
        ],
        "Source": "Tutorial Websites"
    },
    "5591": {
        "Query": "get File Manager for Java Compiler",
        "GroundTruth": [
            "javax.tools.ToolProvider.getSystemJavaCompiler()",
            "javax.tools.JavaCompiler.getStandardFileManager()",
            "javax.tools.DocumentationTool.getStandardFileManager()"
        ],
        "APIClasses": [
            "javax.tools.ToolProvider",
            "javax.tools.JavaCompiler",
            "javax.tools.DocumentationTool"
        ],
        "Source": "Tutorial Websites"
    },
    "5592": {
        "Query": "get File Ownership Info",
        "GroundTruth": [
            "java.nio.file.Files.getFileAttributeView()",
            "java.io.File.toPath()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "5593": {
        "Query": "get File from resource",
        "GroundTruth": [
            "java.net.URL.toURI()",
            "java.net.URL.getPath()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "5594": {
        "Query": "get Files In Directory",
        "GroundTruth": [
            "java.io.File.listFiles()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "5595": {
        "Query": "get Finish Current Month",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.get()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getActualMaximum()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5596": {
        "Query": "get Finish Current Year",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5597": {
        "Query": "get First Child Element namespace",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5598": {
        "Query": "get First Day Next Month From Number",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5599": {
        "Query": "get First Day Of Month",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5600": {
        "Query": "get First Day Of Year",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.util.logging.SimpleFormatter.format()",
            "java.util.logging.XMLFormatter.format()",
            "java.util.logging.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.util.logging.SimpleFormatter",
            "java.util.logging.XMLFormatter",
            "java.util.logging.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "5601": {
        "Query": "get First Element from Iterable",
        "GroundTruth": [
            "java.lang.Iterable.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()"
        ],
        "APIClasses": [
            "java.lang.Iterable",
            "java.util.Iterator"
        ],
        "Source": "Tutorial Websites"
    },
    "5602": {
        "Query": "get First Hour Day",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Currency.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Currency"
        ],
        "Source": "Tutorial Websites"
    },
    "5603": {
        "Query": "get First Hour Today",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Currency.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Currency"
        ],
        "Source": "Tutorial Websites"
    },
    "5604": {
        "Query": "get First Name And Last Name Array From Full Name",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5605": {
        "Query": "get First Number by Regex",
        "GroundTruth": [
            "java.lang.Integer.parseInt()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.group()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "5606": {
        "Query": "get First Visible Row from JTree",
        "GroundTruth": [
            "javax.swing.JComponent.getVisibleRect()",
            "javax.swing.JTree.getRowBounds()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "javax.swing.JTree"
        ],
        "Source": "Tutorial Websites"
    },
    "5607": {
        "Query": "get First XML Element By Tag Name",
        "GroundTruth": [
            "org.w3c.dom.Document.getElementsByTagName()",
            "org.w3c.dom.NodeList.item()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document",
            "org.w3c.dom.NodeList"
        ],
        "Source": "Tutorial Websites"
    },
    "5608": {
        "Query": "get First XML Node By Name",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5609": {
        "Query": "get Float from XML Element attribute",
        "GroundTruth": [
            "java.lang.Float.parseFloat()",
            "org.w3c.dom.Element.getAttribute()"
        ],
        "APIClasses": [
            "java.lang.Float",
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "5610": {
        "Query": "get Formatted Amount in K or M",
        "GroundTruth": [
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5611": {
        "Query": "get Full GC via MBeanServer",
        "GroundTruth": [
            "java.lang.management.ManagementFactory.getPlatformMBeanServer()",
            "javax.management.MBeanServer.isRegistered()",
            "javax.management.MBeanServer.getAttribute()"
        ],
        "APIClasses": [
            "java.lang.management.ManagementFactory",
            "javax.management.MBeanServer"
        ],
        "Source": "Tutorial Websites"
    },
    "5612": {
        "Query": "get Gaussian Blur Filter",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5613": {
        "Query": "get GeneralPath Average Direction",
        "GroundTruth": [
            "java.awt.geom.Path2D.getCurrentPoint()"
        ],
        "APIClasses": [
            "java.awt.geom.Path2D"
        ],
        "Source": "Tutorial Websites"
    },
    "5614": {
        "Query": "get GeneralPath Nearest Line",
        "GroundTruth": [
            "java.awt.geom.Line2D.ptSegDist()"
        ],
        "APIClasses": [
            "java.awt.geom.Line2D"
        ],
        "Source": "Tutorial Websites"
    },
    "5615": {
        "Query": "get Generic Future With Delay",
        "GroundTruth": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "5616": {
        "Query": "get Generic concurrent Future",
        "GroundTruth": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "5617": {
        "Query": "get Getter Method from field name",
        "GroundTruth": [
            "java.lang.String.substring()",
            "java.lang.String.toUpperCase()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5618": {
        "Query": "get Gradle Home Lib Classpath",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.getProperty()",
            "java.io.File.listFiles()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "5619": {
        "Query": "get Graphics Device Configuration Bounds For",
        "GroundTruth": [
            "java.awt.GraphicsDevice.getDefaultConfiguration()",
            "java.awt.GraphicsConfiguration.getBounds()",
            "java.lang.String.contains()",
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getScreenDevices()"
        ],
        "APIClasses": [
            "java.awt.GraphicsDevice",
            "java.awt.GraphicsConfiguration",
            "java.lang.String",
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "5620": {
        "Query": "get Guid From Byte Array",
        "GroundTruth": [
            "java.nio.ByteBuffer.wrap()",
            "java.lang.reflect.Array.getLong()",
            "java.lang.reflect.Field.getLong()",
            "java.lang.Long.getLong()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer",
            "java.lang.reflect.Array",
            "java.lang.reflect.Field",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "5621": {
        "Query": "get HH:mm Format Time",
        "GroundTruth": [
            "java.util.Locale.getDefault()",
            "java.text.Format.format()"
        ],
        "APIClasses": [
            "java.util.Locale",
            "java.text.Format"
        ],
        "Source": "Tutorial Websites"
    },
    "5622": {
        "Query": "get Hex For Color",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5623": {
        "Query": "get Host Address Of Byte array",
        "GroundTruth": [
            "java.lang.Integer.toString()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5624": {
        "Query": "get Hour from java.sql.Time",
        "GroundTruth": [
            "java.sql.Time.toLocalTime()",
            "java.time.LocalTime.getHour()"
        ],
        "APIClasses": [
            "java.sql.Time",
            "java.time.LocalTime"
        ],
        "Source": "Tutorial Websites"
    },
    "5625": {
        "Query": "get Http URL Connection",
        "GroundTruth": [
            "java.net.URL.openConnection()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "5626": {
        "Query": "get Https URL Connection",
        "GroundTruth": [
            "java.net.URL.openConnection()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "5627": {
        "Query": "get IP Address using InetAddress",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()",
            "java.net.InetAddress.getAllByName()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "5628": {
        "Query": "get IP Subnet Mask",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5629": {
        "Query": "get IP Subnet Mask Numeric",
        "GroundTruth": [
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5630": {
        "Query": "get IP from SocketAddress",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.lang.String.substring()",
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5631": {
        "Query": "get ISO646 Bytes from String",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5632": {
        "Query": "get Image As Bytes",
        "GroundTruth": [
            "javax.imageio.ImageIO.write()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "5633": {
        "Query": "get Image From Data",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()",
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.Image",
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "5634": {
        "Query": "get Image Icon from File",
        "GroundTruth": [
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "5635": {
        "Query": "get Image from byte array",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()"
        ],
        "APIClasses": [
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "5636": {
        "Query": "get Index Of Excel Column",
        "GroundTruth": [
            "java.lang.String.toUpperCase()",
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5637": {
        "Query": "get Inet Socket Address",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5638": {
        "Query": "get Inner Outer Classes",
        "GroundTruth": [
            "java.lang.Class.getDeclaredClasses()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5639": {
        "Query": "get Input from Swing JOptionPane",
        "GroundTruth": [
            "javax.swing.JOptionPane.showInputDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "5640": {
        "Query": "get Instance By Type from BeanManager",
        "GroundTruth": [
            "java.lang.Class.cast()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5641": {
        "Query": "get Int Element from StartElement in StAX parser",
        "GroundTruth": [
            "javax.xml.stream.events.StartElement.getAttributeByName()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "javax.xml.stream.events.StartElement",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5642": {
        "Query": "get Int From JavaFX Text Field",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5643": {
        "Query": "get Int from String",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5644": {
        "Query": "get Int from XML Element attribute",
        "GroundTruth": [
            "java.lang.Integer.parseInt()",
            "org.w3c.dom.Element.getAttribute()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "5645": {
        "Query": "get Interfaces Include Super Class",
        "GroundTruth": [
            "javax.lang.model.util.Types.contains()"
        ],
        "APIClasses": [
            "javax.lang.model.util.Types"
        ],
        "Source": "Tutorial Websites"
    },
    "5646": {
        "Query": "get Ip Address from Inet4Address",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "5647": {
        "Query": "get Ip Byte Array From String",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Integer.parseInt()",
            "java.lang.Throwable.getMessage()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Integer",
            "java.lang.Throwable"
        ],
        "Source": "Tutorial Websites"
    },
    "5648": {
        "Query": "get JComponent Maximum Height",
        "GroundTruth": [
            "java.awt.Component.getMaximumSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "5649": {
        "Query": "get JComponent Maximum Width",
        "GroundTruth": [
            "java.awt.Component.getMaximumSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "5650": {
        "Query": "get JComponent Minimum Width",
        "GroundTruth": [
            "java.awt.Component.getMinimumSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "5651": {
        "Query": "get JComponent Preferred Height",
        "GroundTruth": [
            "java.awt.Component.getPreferredSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "5652": {
        "Query": "get JComponent Preferred Width",
        "GroundTruth": [
            "java.awt.Component.getPreferredSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "5653": {
        "Query": "get JTable Column Index From Name",
        "GroundTruth": [
            "javax.swing.table.TableModel.getColumnCount()",
            "javax.swing.table.TableModel.getColumnName()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "javax.swing.table.TableModel",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5654": {
        "Query": "get JTable Column Widths",
        "GroundTruth": [
            "javax.swing.JTable.getTableHeader()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "5655": {
        "Query": "get JTable First Visible Row",
        "GroundTruth": [
            "javax.swing.JComponent.getVisibleRect()",
            "javax.swing.JTable.rowAtPoint()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "5656": {
        "Query": "get JTable Last Visible Row",
        "GroundTruth": [
            "javax.swing.JComponent.getVisibleRect()",
            "javax.swing.JTable.rowAtPoint()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "5657": {
        "Query": "get JTable Reverse Selected Rows",
        "GroundTruth": [
            "java.lang.String.compareTo()",
            "javax.swing.JTable.getSelectedRows()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "5658": {
        "Query": "get JTree Node Children",
        "GroundTruth": [
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.nextElement()"
        ],
        "APIClasses": [
            "java.util.Enumeration"
        ],
        "Source": "Tutorial Websites"
    },
    "5659": {
        "Query": "get JVM Executable File",
        "GroundTruth": [
            "java.lang.System.getProperty()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "5660": {
        "Query": "get Java 3D Pitch",
        "GroundTruth": [
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5661": {
        "Query": "get Java 3D Roll",
        "GroundTruth": [
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5662": {
        "Query": "get Java 3D Yaw",
        "GroundTruth": [
            "java.lang.Math.asin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5663": {
        "Query": "get Java Bean Descriptor",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "5664": {
        "Query": "get Java Bean Info",
        "GroundTruth": [
            "java.beans.Introspector.getBeanInfo()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.beans.Introspector",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "5665": {
        "Query": "get Java Bean Property Descriptor",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.beans.Introspector.getBeanInfo()",
            "java.beans.BeanInfo.getPropertyDescriptors()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.beans.Introspector",
            "java.beans.BeanInfo"
        ],
        "Source": "Tutorial Websites"
    },
    "5666": {
        "Query": "get Java Bean Property Descriptors",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.beans.Introspector.getBeanInfo()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.beans.Introspector"
        ],
        "Source": "Tutorial Websites"
    },
    "5667": {
        "Query": "get Java Bean Property Type",
        "GroundTruth": [
            "java.beans.Introspector.getBeanInfo()",
            "java.beans.BeanInfo.getPropertyDescriptors()",
            "java.lang.String.equalsIgnoreCase()",
            "java.beans.PropertyDescriptor.getPropertyType()"
        ],
        "APIClasses": [
            "java.beans.Introspector",
            "java.beans.BeanInfo",
            "java.lang.String",
            "java.beans.PropertyDescriptor"
        ],
        "Source": "Tutorial Websites"
    },
    "5668": {
        "Query": "get Java Bean Read Method",
        "GroundTruth": [
            "java.beans.Introspector.getBeanInfo()",
            "java.beans.BeanInfo.getPropertyDescriptors()",
            "java.lang.String.equalsIgnoreCase()",
            "java.beans.PropertyDescriptor.getReadMethod()"
        ],
        "APIClasses": [
            "java.beans.Introspector",
            "java.beans.BeanInfo",
            "java.lang.String",
            "java.beans.PropertyDescriptor"
        ],
        "Source": "Tutorial Websites"
    },
    "5669": {
        "Query": "get Java Bean Write Method",
        "GroundTruth": [
            "java.beans.Introspector.getBeanInfo()",
            "java.beans.BeanInfo.getPropertyDescriptors()",
            "java.lang.String.equalsIgnoreCase()",
            "java.beans.PropertyDescriptor.getWriteMethod()"
        ],
        "APIClasses": [
            "java.beans.Introspector",
            "java.beans.BeanInfo",
            "java.lang.String",
            "java.beans.PropertyDescriptor"
        ],
        "Source": "Tutorial Websites"
    },
    "5670": {
        "Query": "get JavaFX Button Graphic",
        "GroundTruth": [
            "java.util.logging.Logger.warning()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "5671": {
        "Query": "get JavaFX Combo Box Integer Value",
        "GroundTruth": [
            "java.lang.Integer.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5672": {
        "Query": "get JavaFX Component Value",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5673": {
        "Query": "get JavaFX Dockable Tab",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "5674": {
        "Query": "get JavaFX Image Full Url",
        "GroundTruth": [
            "java.io.File.exists()",
            "java.util.logging.Logger.getLogger()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "5675": {
        "Query": "get JavaFX Rotate Transition",
        "GroundTruth": [
            "java.time.Clock.millis()"
        ],
        "APIClasses": [
            "java.time.Clock"
        ],
        "Source": "Tutorial Websites"
    },
    "5676": {
        "Query": "get JavaFX Screen Dimensions",
        "GroundTruth": [
            "java.awt.font.GlyphVector.getVisualBounds()"
        ],
        "APIClasses": [
            "java.awt.font.GlyphVector"
        ],
        "Source": "Tutorial Websites"
    },
    "5677": {
        "Query": "get JavaFX Translate Transition",
        "GroundTruth": [
            "java.time.Clock.millis()"
        ],
        "APIClasses": [
            "java.time.Clock"
        ],
        "Source": "Tutorial Websites"
    },
    "5678": {
        "Query": "get Jdbc Odbc Access Connection",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5679": {
        "Query": "get Key Mask from MouseEvent",
        "GroundTruth": [
            "java.awt.event.InputEvent.isAltDown()",
            "java.awt.event.InputEvent.isAltGraphDown()",
            "java.awt.event.InputEvent.isControlDown()",
            "java.awt.event.InputEvent.isShiftDown()"
        ],
        "APIClasses": [
            "java.awt.event.InputEvent",
            "java.awt.event.InputEvent",
            "java.awt.event.InputEvent",
            "java.awt.event.InputEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "5680": {
        "Query": "get KeyStore from file and password",
        "GroundTruth": [
            "java.security.KeyStore.getInstance()",
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.security.KeyStore",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5681": {
        "Query": "get Known Word Rate",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5682": {
        "Query": "get LDAP Attribute Value From Byte Array",
        "GroundTruth": [
            "java.util.jar.Attributes.get()",
            "javax.naming.directory.Attribute.get()"
        ],
        "APIClasses": [
            "java.util.jar.Attributes",
            "javax.naming.directory.Attribute"
        ],
        "Source": "Tutorial Websites"
    },
    "5683": {
        "Query": "get Last Day Of Month",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.add()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5684": {
        "Query": "get Last Day Of Week",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getFirstDayOfWeek()",
            "java.util.spi.CalendarDataProvider.getFirstDayOfWeek()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.spi.CalendarDataProvider"
        ],
        "Source": "Tutorial Websites"
    },
    "5685": {
        "Query": "get Last Day Of Year",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.util.logging.SimpleFormatter.format()",
            "java.util.logging.XMLFormatter.format()",
            "java.util.logging.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.util.logging.SimpleFormatter",
            "java.util.logging.XMLFormatter",
            "java.util.logging.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "5686": {
        "Query": "get Last Day To Month From Number",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5687": {
        "Query": "get Last Element from List",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.size()",
            "java.util.List.get()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "5688": {
        "Query": "get Last Hour Day",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Currency.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Currency"
        ],
        "Source": "Tutorial Websites"
    },
    "5689": {
        "Query": "get Last Hour Today",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Currency.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Currency"
        ],
        "Source": "Tutorial Websites"
    },
    "5690": {
        "Query": "get Last Int inside a string using regular expression",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.lang.Integer.parseInt()",
            "java.util.regex.Matcher.group()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5691": {
        "Query": "get Last Year Begin",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5692": {
        "Query": "get Last Year End",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5693": {
        "Query": "get Limited Size Image",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()",
            "java.awt.Image.getScaledInstance()"
        ],
        "APIClasses": [
            "java.awt.Image"
        ],
        "Source": "Tutorial Websites"
    },
    "5694": {
        "Query": "get Line Beginning With from a File",
        "GroundTruth": [
            "java.lang.String.startsWith()",
            "java.io.Reader.close()",
            "java.lang.String.format()",
            "java.io.File.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.io.Reader",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "5695": {
        "Query": "get List Of Class Level Annotation From Class",
        "GroundTruth": [
            "java.util.Collections.addAll()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "5696": {
        "Query": "get List Of Numeric IP Address",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.String.split()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5697": {
        "Query": "get Local Date For String in format dd.MM.yyyy",
        "GroundTruth": [
            "java.time.LocalDate.parse()",
            "java.time.format.DateTimeFormatter.ofPattern()"
        ],
        "APIClasses": [
            "java.time.LocalDate",
            "java.time.format.DateTimeFormatter"
        ],
        "Source": "Tutorial Websites"
    },
    "5698": {
        "Query": "get Local Host IP",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "5699": {
        "Query": "get Local Host Name",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()",
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.net.InetAddress",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5700": {
        "Query": "get Local Name from XML Node",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5701": {
        "Query": "get LocalDate From Timestamp",
        "GroundTruth": [
            "java.sql.Date.toLocalDate()",
            "java.time.LocalDateTime.ofInstant()",
            "java.time.Instant.ofEpochSecond()",
            "java.util.TimeZone.getDefault()",
            "java.util.TimeZone.toZoneId()"
        ],
        "APIClasses": [
            "java.sql.Date",
            "java.time.LocalDateTime",
            "java.time.Instant",
            "java.util.TimeZone",
            "java.util.TimeZone"
        ],
        "Source": "Tutorial Websites"
    },
    "5702": {
        "Query": "get LocalDate from LocalDateTime",
        "GroundTruth": [
            "java.time.ZonedDateTime.toLocalDate()",
            "java.time.chrono.ChronoZonedDateTime.toLocalDate()",
            "java.time.chrono.ChronoLocalDateTime.toLocalDate()",
            "java.time.LocalDateTime.toLocalDate()",
            "java.time.OffsetDateTime.toLocalDate()"
        ],
        "APIClasses": [
            "java.time.ZonedDateTime",
            "java.time.chrono.ChronoZonedDateTime",
            "java.time.chrono.ChronoLocalDateTime",
            "java.time.LocalDateTime",
            "java.time.OffsetDateTime"
        ],
        "Source": "Tutorial Websites"
    },
    "5703": {
        "Query": "get LocalDateTime For String as format dd.MM.yyyy HH:mm:ss",
        "GroundTruth": [
            "java.time.LocalDateTime.parse()",
            "java.time.format.DateTimeFormatter.ofPattern()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime",
            "java.time.format.DateTimeFormatter"
        ],
        "Source": "Tutorial Websites"
    },
    "5704": {
        "Query": "get LocalDateTime From Timestamp",
        "GroundTruth": [
            "java.time.LocalDateTime.ofInstant()",
            "java.time.Instant.ofEpochSecond()",
            "java.util.TimeZone.getDefault()",
            "java.util.TimeZone.toZoneId()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime",
            "java.time.Instant",
            "java.util.TimeZone",
            "java.util.TimeZone"
        ],
        "Source": "Tutorial Websites"
    },
    "5705": {
        "Query": "get LocalDateTime from ISO Date String as 2014-01-01 00:00:00",
        "GroundTruth": [
            "java.time.LocalDateTime.parse()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime"
        ],
        "Source": "Tutorial Websites"
    },
    "5706": {
        "Query": "get LocalTime For String in format HH:mm:ss",
        "GroundTruth": [
            "java.time.LocalTime.parse()",
            "java.time.format.DateTimeFormatter.ofPattern()"
        ],
        "APIClasses": [
            "java.time.LocalTime",
            "java.time.format.DateTimeFormatter"
        ],
        "Source": "Tutorial Websites"
    },
    "5707": {
        "Query": "get Location On Current Screen",
        "GroundTruth": [
            "java.awt.Component.getGraphicsConfiguration()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "5708": {
        "Query": "get Long Value From ResultSet",
        "GroundTruth": [
            "java.sql.SQLXML.getString()",
            "java.sql.CallableStatement.getString()",
            "java.sql.ResultSet.getString()",
            "java.sql.CallableStatement.getLong()",
            "java.sql.ResultSet.getLong()"
        ],
        "APIClasses": [
            "java.sql.SQLXML",
            "java.sql.CallableStatement",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "5709": {
        "Query": "get Long from String",
        "GroundTruth": [
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "5710": {
        "Query": "get Lowest Common Denominator",
        "GroundTruth": [
            "java.security.spec.EllipticCurve.getB()",
            "java.lang.Math.pow()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.security.spec.EllipticCurve",
            "java.lang.Math",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "5711": {
        "Query": "get MBean Notification Info",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5712": {
        "Query": "get MD5 byte array from String",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.getBytes()",
            "java.security.MessageDigest.getInstance()",
            "java.security.MessageDigest.digest()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.security.MessageDigest",
            "java.security.MessageDigest"
        ],
        "Source": "Tutorial Websites"
    },
    "5713": {
        "Query": "get MS SQL Server 2000 Connection",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5714": {
        "Query": "get MS SQL Server 2005 Connection",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5715": {
        "Query": "get MS SQL Server Connection via ODBC",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5716": {
        "Query": "get Manifest From File",
        "GroundTruth": [
            "java.util.jar.Manifest.read()"
        ],
        "APIClasses": [
            "java.util.jar.Manifest"
        ],
        "Source": "Tutorial Websites"
    },
    "5717": {
        "Query": "get Manifest Main Attribute Value",
        "GroundTruth": [
            "java.util.jar.Manifest.getMainAttributes()",
            "org.xml.sax.Attributes.getValue()"
        ],
        "APIClasses": [
            "java.util.jar.Manifest",
            "org.xml.sax.Attributes"
        ],
        "Source": "Tutorial Websites"
    },
    "5718": {
        "Query": "get Map Of Field Level Annotation From Class",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5719": {
        "Query": "get Map Of Method Level Annotation From Class",
        "GroundTruth": [
            "java.lang.Class.getDeclaredMethods()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5720": {
        "Query": "get Maximum Window Bounds",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.lang.reflect.Method.invoke()",
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.lang.reflect.Method",
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "5721": {
        "Query": "get Method Annotation Map",
        "GroundTruth": [
            "java.lang.annotation.IncompleteAnnotationException.annotationType()",
            "java.lang.annotation.Annotation.annotationType()"
        ],
        "APIClasses": [
            "java.lang.annotation.IncompleteAnnotationException",
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "5722": {
        "Query": "get Method Argument Names String",
        "GroundTruth": [
            "java.lang.reflect.Method.getParameterTypes()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5723": {
        "Query": "get Method Generic Parameter Types",
        "GroundTruth": [
            "java.lang.reflect.Method.getParameterTypes()",
            "java.lang.reflect.Method.getGenericParameterTypes()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method"
        ],
        "Source": "Tutorial Websites"
    },
    "5724": {
        "Query": "get Method Generic Return Type",
        "GroundTruth": [
            "java.lang.reflect.Method.getReturnType()",
            "java.lang.reflect.Method.getGenericReturnType()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method"
        ],
        "Source": "Tutorial Websites"
    },
    "5725": {
        "Query": "get Methods With Annotation",
        "GroundTruth": [
            "java.lang.Class.getMethods()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5726": {
        "Query": "get Methods from class by annotation",
        "GroundTruth": [
            "java.lang.Class.getDeclaredMethods()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5727": {
        "Query": "get Midi In Driver List",
        "GroundTruth": [
            "javax.sound.midi.MidiSystem.getMidiDeviceInfo()",
            "javax.sound.midi.MidiSystem.getMidiDevice()",
            "javax.sound.midi.MidiDevice.getMaxTransmitters()",
            "javax.sound.midi.Track.add()",
            "javax.sound.sampled.Port.Info.getName()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiSystem",
            "javax.sound.midi.MidiDevice",
            "javax.sound.midi.Track",
            "javax.sound.sampled.Port.Info"
        ],
        "Source": "Tutorial Websites"
    },
    "5728": {
        "Query": "get Minute from java.sql.Time",
        "GroundTruth": [
            "java.sql.Time.toLocalTime()",
            "java.time.LocalTime.getMinute()"
        ],
        "APIClasses": [
            "java.sql.Time",
            "java.time.LocalTime"
        ],
        "Source": "Tutorial Websites"
    },
    "5729": {
        "Query": "get Minutes Between Two Dates",
        "GroundTruth": [
            "java.lang.Math.abs()",
            "java.util.Calendar.getTime()",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "5730": {
        "Query": "get Month Of Days",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getActualMaximum()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5731": {
        "Query": "get Month from java.sql.Date",
        "GroundTruth": [
            "java.sql.Date.toLocalDate()",
            "java.time.LocalDate.getMonth()"
        ],
        "APIClasses": [
            "java.sql.Date",
            "java.time.LocalDate"
        ],
        "Source": "Tutorial Websites"
    },
    "5732": {
        "Query": "get Most Specific Cause Throwable",
        "GroundTruth": [
            "java.lang.reflect.UndeclaredThrowableException.getCause()",
            "java.lang.reflect.InvocationTargetException.getCause()",
            "java.lang.ClassNotFoundException.getCause()",
            "java.lang.Throwable.getCause()",
            "java.lang.ExceptionInInitializerError.getCause()"
        ],
        "APIClasses": [
            "java.lang.reflect.UndeclaredThrowableException",
            "java.lang.reflect.InvocationTargetException",
            "java.lang.ClassNotFoundException",
            "java.lang.Throwable",
            "java.lang.ExceptionInInitializerError"
        ],
        "Source": "Tutorial Websites"
    },
    "5733": {
        "Query": "get My Address as InetAddress",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "5734": {
        "Query": "get My Host Name from InetAddress",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()"
        ],
        "APIClasses": [
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "5735": {
        "Query": "get MySQL Connection and settings",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5736": {
        "Query": "get MySQL Connection from single connection string",
        "GroundTruth": [
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5737": {
        "Query": "get Name Attribute from XML Element",
        "GroundTruth": [
            "org.w3c.dom.Element.getAttribute()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "5738": {
        "Query": "get Name from XML Node",
        "GroundTruth": [
            "org.w3c.dom.Node.getLocalName()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "5739": {
        "Query": "get Namespace URI from XML Node",
        "GroundTruth": [
            "org.w3c.dom.Node.getNamespaceURI()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "5740": {
        "Query": "get New Row generated Key from PreparedStatement",
        "GroundTruth": [
            "java.sql.Statement.getGeneratedKeys()",
            "java.sql.ResultSet.next()",
            "java.sql.CallableStatement.getInt()",
            "java.sql.ResultSet.getInt()"
        ],
        "APIClasses": [
            "java.sql.Statement",
            "java.sql.ResultSet",
            "java.sql.CallableStatement"
        ],
        "Source": "Tutorial Websites"
    },
    "5741": {
        "Query": "get Next Day From Number",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5742": {
        "Query": "get Next Homo Sibling from XML Node",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5743": {
        "Query": "get Next Prime number",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.StrictMath.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "5744": {
        "Query": "get Next Sibling Element namespace",
        "GroundTruth": [
            "org.w3c.dom.Node.getNextSibling()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5745": {
        "Query": "get Node List from Document",
        "GroundTruth": [
            "javax.xml.xpath.XPathFactory.newInstance()",
            "javax.xml.xpath.XPathFactory.newXPath()",
            "javax.xml.xpath.XPath.compile()"
        ],
        "APIClasses": [
            "javax.xml.xpath.XPathFactory",
            "javax.xml.xpath.XPathFactory",
            "javax.xml.xpath.XPath"
        ],
        "Source": "Tutorial Websites"
    },
    "5746": {
        "Query": "get Now Thai Buddhist Date",
        "GroundTruth": [
            "java.time.chrono.ThaiBuddhistDate.now()",
            "java.time.format.DateTimeFormatter.ofPattern()",
            "java.util.Formatter.format()"
        ],
        "APIClasses": [
            "java.time.chrono.ThaiBuddhistDate",
            "java.time.format.DateTimeFormatter",
            "java.util.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "5747": {
        "Query": "get Object List Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showInputDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "5748": {
        "Query": "get Offspring from XML Node",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5749": {
        "Query": "get Os Type From Os",
        "GroundTruth": [
            "java.lang.String.isEmpty()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5750": {
        "Query": "get Os from user agent",
        "GroundTruth": [
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5751": {
        "Query": "get Owner Document from XML Node",
        "GroundTruth": [
            "org.w3c.dom.Node.getOwnerDocument()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "5752": {
        "Query": "get Package And Class Name",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5753": {
        "Query": "get Parameter Value If Not Null Else Get Default Value from HttpServletRequest",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5754": {
        "Query": "get Parameter from HttpServletRequest",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5755": {
        "Query": "get Parameterized Type Arguments from Field",
        "GroundTruth": [
            "java.lang.reflect.Field.getGenericType()",
            "java.lang.reflect.ParameterizedType.getActualTypeArguments()"
        ],
        "APIClasses": [
            "java.lang.reflect.Field",
            "java.lang.reflect.ParameterizedType"
        ],
        "Source": "Tutorial Websites"
    },
    "5756": {
        "Query": "get Parent Path from a string",
        "GroundTruth": [
            "java.io.RandomAccessFile.length()",
            "java.io.File.length()"
        ],
        "APIClasses": [
            "java.io.RandomAccessFile",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "5757": {
        "Query": "get Part Of Array by start and length",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5758": {
        "Query": "get Password from Console",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.isEmpty()",
            "java.lang.String.valueOf()",
            "java.io.Console.readPassword()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.io.Console"
        ],
        "Source": "Tutorial Websites"
    },
    "5759": {
        "Query": "get Permutations for List of int array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.util.Arrays.copyOf()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5760": {
        "Query": "get Pixels from BufferedImage",
        "GroundTruth": [
            "java.awt.image.Raster.getDataElements()"
        ],
        "APIClasses": [
            "java.awt.image.Raster"
        ],
        "Source": "Tutorial Websites"
    },
    "5761": {
        "Query": "get Point To Line Distance",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5762": {
        "Query": "get Points from GeneralPath",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "5763": {
        "Query": "get Popup Type from PopupFactory",
        "GroundTruth": [
            "java.lang.Class.getDeclaredMethod()",
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Method.invoke()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Method"
        ],
        "Source": "Tutorial Websites"
    },
    "5764": {
        "Query": "get Port from SocketAddress",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.lang.Integer.valueOf()",
            "java.lang.String.substring()",
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5765": {
        "Query": "get Posix File Attributes",
        "GroundTruth": [
            "java.nio.file.Files.readAttributes()",
            "java.io.File.toPath()"
        ],
        "APIClasses": [
            "java.nio.file.Files",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "5766": {
        "Query": "get Pre Homo Sibling from XML Node",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5767": {
        "Query": "get Preferred JTable Column Header Width",
        "GroundTruth": [
            "javax.swing.table.TableColumn.getHeaderRenderer()",
            "javax.swing.table.TableColumn.getHeaderValue()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn",
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "5768": {
        "Query": "get Prefix for XML Node",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5769": {
        "Query": "get Previous Month Index",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.get()",
            "java.util.Calendar.set()",
            "java.util.Calendar.roll()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5770": {
        "Query": "get Previous Prime number",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.StrictMath.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "5771": {
        "Query": "get Primary Key Column Name",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()",
            "java.sql.DatabaseMetaData.getPrimaryKeys()",
            "java.sql.ResultSet.next()",
            "java.sql.ResultSet.getString()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.DatabaseMetaData",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "5772": {
        "Query": "get Primary Monitor Bounds",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()",
            "java.awt.GraphicsDevice.getDefaultConfiguration()",
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.awt.GraphicsDevice",
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "5773": {
        "Query": "get Private Key from file",
        "GroundTruth": [
            "java.security.KeyStore.getKey()",
            "java.lang.String.toCharArray()",
            "java.security.KeyStore.getInstance()",
            "java.security.KeyStore.load()"
        ],
        "APIClasses": [
            "java.security.KeyStore",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5774": {
        "Query": "get Proper Divisors Sum via IntStream",
        "GroundTruth": [
            "java.util.stream.IntStream.range()"
        ],
        "APIClasses": [
            "java.util.stream.IntStream"
        ],
        "Source": "Tutorial Websites"
    },
    "5775": {
        "Query": "get Proper Divisors via IntStream",
        "GroundTruth": [
            "java.util.stream.IntStream.range()"
        ],
        "APIClasses": [
            "java.util.stream.IntStream"
        ],
        "Source": "Tutorial Websites"
    },
    "5776": {
        "Query": "get Properties File From Project",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.util.Properties.load()",
            "java.util.ServiceLoader.load()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.util.Properties",
            "java.util.ServiceLoader"
        ],
        "Source": "Tutorial Websites"
    },
    "5777": {
        "Query": "get Property Value from Property file",
        "GroundTruth": [
            "java.util.Properties.load()",
            "java.util.ServiceLoader.load()",
            "java.util.Properties.getProperty()",
            "java.util.logging.LogManager.getProperty()"
        ],
        "APIClasses": [
            "java.util.Properties",
            "java.util.ServiceLoader",
            "java.util.logging.LogManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5778": {
        "Query": "get RFC format Date, EEE, dd MMM yyyy HH:mm:ss 'GMT'",
        "GroundTruth": [
            "java.util.Formatter.format()",
            "java.util.logging.SimpleFormatter.format()",
            "java.util.logging.XMLFormatter.format()",
            "java.util.logging.Formatter.format()"
        ],
        "APIClasses": [
            "java.util.Formatter",
            "java.util.logging.SimpleFormatter",
            "java.util.logging.XMLFormatter",
            "java.util.logging.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "5779": {
        "Query": "get RSA Decrypt Cipher",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "5780": {
        "Query": "get RSA Encrypt Cipher",
        "GroundTruth": [
            "javax.crypto.Cipher.getInstance()",
            "javax.crypto.Cipher.init()"
        ],
        "APIClasses": [
            "javax.crypto.Cipher"
        ],
        "Source": "Tutorial Websites"
    },
    "5781": {
        "Query": "get RSA Private Key",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()",
            "java.security.KeyFactory.generatePrivate()"
        ],
        "APIClasses": [
            "java.security.KeyFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5782": {
        "Query": "get RSA Public Key",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()",
            "java.security.KeyFactory.generatePublic()"
        ],
        "APIClasses": [
            "java.security.KeyFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5783": {
        "Query": "get RSA Public Key By Specification",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()",
            "java.security.KeyFactory.generatePublic()"
        ],
        "APIClasses": [
            "java.security.KeyFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5784": {
        "Query": "get Random Bright Color",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5785": {
        "Query": "get Random Color by base color",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5786": {
        "Query": "get Random English Character",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5787": {
        "Query": "get Random English Lower Character",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5788": {
        "Query": "get Random Index from bitset",
        "GroundTruth": [
            "java.util.Random.nextInt()",
            "java.lang.Integer.bitCount()",
            "java.lang.Integer.numberOfTrailingZeros()"
        ],
        "APIClasses": [
            "java.util.Random",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5789": {
        "Query": "get Random Ip Address",
        "GroundTruth": [
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5790": {
        "Query": "get Random Mac Address",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5791": {
        "Query": "get Random Unset Bit",
        "GroundTruth": [
            "java.util.BitSet.cardinality()"
        ],
        "APIClasses": [
            "java.util.BitSet"
        ],
        "Source": "Tutorial Websites"
    },
    "5792": {
        "Query": "get Random User Agent",
        "GroundTruth": [
            "java.security.SecureRandom.getInstance()"
        ],
        "APIClasses": [
            "java.security.SecureRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "5793": {
        "Query": "get Random element from a List",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.size()",
            "java.util.List.get()",
            "java.util.Random.nextInt()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List",
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "5794": {
        "Query": "get Random integer within range",
        "GroundTruth": [
            "java.util.Scanner.nextInt()",
            "java.util.PrimitiveIterator.OfInt.nextInt()",
            "java.util.Random.nextInt()",
            "java.util.concurrent.ThreadLocalRandom.nextInt()",
            "java.util.SplittableRandom.nextInt()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.PrimitiveIterator.OfInt",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "5795": {
        "Query": "get Randomized Maximum Contrast Color List",
        "GroundTruth": [
            "java.util.Collections.shuffle()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "5796": {
        "Query": "get Real Length string length in GBK encoding",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5797": {
        "Query": "get Record Count in ResultSet",
        "GroundTruth": [
            "java.sql.ResultSet.getType()",
            "java.sql.ResultSet.getRow()",
            "java.sql.ResultSet.last()",
            "java.sql.ResultSet.first()",
            "java.sql.ResultSet.absolute()"
        ],
        "APIClasses": [
            "java.sql.ResultSet",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "5798": {
        "Query": "get Red Green Gradient",
        "GroundTruth": [
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5799": {
        "Query": "get Red Green Gradient Html",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.length()",
            "java.lang.Math.round()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5800": {
        "Query": "get Red Pixels from Image ColorModel",
        "GroundTruth": [
            "java.awt.image.ColorModel.getRed()"
        ],
        "APIClasses": [
            "java.awt.image.ColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "5801": {
        "Query": "get Remote File Size via URL",
        "GroundTruth": [
            "java.net.URLConnection.getContentLength()"
        ],
        "APIClasses": [
            "java.net.URLConnection"
        ],
        "Source": "Tutorial Websites"
    },
    "5802": {
        "Query": "get Rendered Component At JTable cell",
        "GroundTruth": [
            "javax.swing.JTable.isCellSelected()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "5803": {
        "Query": "get Request Map from HttpServletRequest",
        "GroundTruth": [
            "org.w3c.dom.DOMConfiguration.getParameterNames()"
        ],
        "APIClasses": [
            "org.w3c.dom.DOMConfiguration"
        ],
        "Source": "Tutorial Websites"
    },
    "5804": {
        "Query": "get Resource As File",
        "GroundTruth": [
            "java.net.URL.toURI()",
            "java.net.URL.getPath()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "5805": {
        "Query": "get Resource Bundle String",
        "GroundTruth": [
            "java.util.ResourceBundle.getLocale()",
            "java.util.ResourceBundle.getBundle()",
            "java.util.ResourceBundle.getString()"
        ],
        "APIClasses": [
            "java.util.ResourceBundle"
        ],
        "Source": "Tutorial Websites"
    },
    "5806": {
        "Query": "get Resource File Contents",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.util.Formatter.out()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.util.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "5807": {
        "Query": "get Resource Via Classes",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "5808": {
        "Query": "get Resource Via Context",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "5809": {
        "Query": "get Result Set from sql query",
        "GroundTruth": [
            "java.sql.Statement.executeQuery()",
            "java.sql.PreparedStatement.executeQuery()"
        ],
        "APIClasses": [
            "java.sql.Statement",
            "java.sql.PreparedStatement"
        ],
        "Source": "Tutorial Websites"
    },
    "5810": {
        "Query": "get Result Set with read only cursor",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.executeQuery()",
            "java.sql.PreparedStatement.executeQuery()",
            "java.sql.Statement.executeUpdate()",
            "java.sql.PreparedStatement.executeUpdate()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.Statement",
            "java.sql.PreparedStatement"
        ],
        "Source": "Tutorial Websites"
    },
    "5811": {
        "Query": "get Result from BlockingQueue",
        "GroundTruth": [
            "java.util.concurrent.BlockingQueue.poll()",
            "java.util.concurrent.BlockingQueue.offer()",
            "java.util.concurrent.BlockingQueue.take()"
        ],
        "APIClasses": [
            "java.util.concurrent.BlockingQueue"
        ],
        "Source": "Tutorial Websites"
    },
    "5812": {
        "Query": "get Right Angled Vertex for JavaFX",
        "GroundTruth": [
            "java.lang.Math.tan()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5813": {
        "Query": "get Root Cause With Reflection",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getMethod()",
            "java.lang.invoke.MethodHandle.invoke()",
            "java.lang.reflect.InvocationHandler.invoke()",
            "java.lang.reflect.Method.invoke()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class",
            "java.lang.invoke.MethodHandle",
            "java.lang.reflect.InvocationHandler",
            "java.lang.reflect.Method"
        ],
        "Source": "Tutorial Websites"
    },
    "5814": {
        "Query": "get Root from XML document, XML File and XML String",
        "GroundTruth": [
            "org.w3c.dom.Document.getElementsByTagName()",
            "org.w3c.dom.NodeList.item()",
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document",
            "org.w3c.dom.NodeList",
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5815": {
        "Query": "get Row Value from JTable",
        "GroundTruth": [
            "javax.swing.JTable.getSelectedRows()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "5816": {
        "Query": "get SOAP Action Uri",
        "GroundTruth": [
            "javax.xml.soap.SOAPConnection.get()"
        ],
        "APIClasses": [
            "javax.xml.soap.SOAPConnection"
        ],
        "Source": "Tutorial Websites"
    },
    "5817": {
        "Query": "get Scaled Image Icon",
        "GroundTruth": [
            "javax.swing.ImageIcon.getImage()"
        ],
        "APIClasses": [
            "javax.swing.ImageIcon"
        ],
        "Source": "Tutorial Websites"
    },
    "5818": {
        "Query": "get Scaled Rectangle Dimensions",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5819": {
        "Query": "get Screen Device Default Configuration Bounds",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getScreenDevices()",
            "java.awt.GraphicsDevice.getDefaultConfiguration()",
            "java.awt.GraphicsConfiguration.getBounds()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice",
            "java.awt.GraphicsConfiguration"
        ],
        "Source": "Tutorial Websites"
    },
    "5820": {
        "Query": "get Screen as BufferedImage",
        "GroundTruth": [
            "java.awt.Robot.createScreenCapture()",
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Robot",
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "5821": {
        "Query": "get Second from java.sql.Time",
        "GroundTruth": [
            "java.sql.Time.toLocalTime()",
            "java.time.LocalTime.getSecond()"
        ],
        "APIClasses": [
            "java.sql.Time",
            "java.time.LocalTime"
        ],
        "Source": "Tutorial Websites"
    },
    "5822": {
        "Query": "get Selected Swing Button Elements",
        "GroundTruth": [
            "java.awt.Container.getComponents()"
        ],
        "APIClasses": [
            "java.awt.Container"
        ],
        "Source": "Tutorial Websites"
    },
    "5823": {
        "Query": "get Selection from ButtonGroup",
        "GroundTruth": [
            "javax.swing.ButtonGroup.getSelection()"
        ],
        "APIClasses": [
            "javax.swing.ButtonGroup"
        ],
        "Source": "Tutorial Websites"
    },
    "5824": {
        "Query": "get Session Param from JSF FacesContext",
        "GroundTruth": [
            "java.util.Map.entrySet()",
            "java.util.jar.Attributes.Name.equals()",
            "java.util.Map.Entry.getKey()",
            "java.util.Map.Entry.getValue()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.jar.Attributes.Name",
            "java.util.Map.Entry"
        ],
        "Source": "Tutorial Websites"
    },
    "5825": {
        "Query": "get Setter Method For Field",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getDeclaredMethod()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5826": {
        "Query": "get Setter Method Name For Field",
        "GroundTruth": [
            "java.lang.String.substring()",
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5827": {
        "Query": "get Setter Method Names",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.startsWith()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5828": {
        "Query": "get Setters Method from Class",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5829": {
        "Query": "get Short Java Name",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5830": {
        "Query": "get Simple Class Name",
        "GroundTruth": [
            "java.lang.String.lastIndexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5831": {
        "Query": "get Single Color Int Matrix",
        "GroundTruth": [
            "java.awt.Color.equals()"
        ],
        "APIClasses": [
            "java.awt.Color"
        ],
        "Source": "Tutorial Websites"
    },
    "5832": {
        "Query": "get Single Element Of Iterable",
        "GroundTruth": [
            "java.lang.Iterable.iterator()",
            "java.util.Iterator.next()",
            "java.util.Iterator.hasNext()"
        ],
        "APIClasses": [
            "java.lang.Iterable",
            "java.util.Iterator"
        ],
        "Source": "Tutorial Websites"
    },
    "5833": {
        "Query": "get Smaller Random Double",
        "GroundTruth": [
            "java.util.Scanner.nextDouble()",
            "java.util.Random.nextDouble()",
            "java.util.concurrent.ThreadLocalRandom.nextDouble()",
            "java.util.PrimitiveIterator.OfDouble.nextDouble()",
            "java.util.SplittableRandom.nextDouble()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom",
            "java.util.PrimitiveIterator.OfDouble",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "5834": {
        "Query": "get Sort Key from JTable by Column",
        "GroundTruth": [
            "javax.swing.JTable.getRowSorter()",
            "javax.swing.RowSorter.getSortKeys()",
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "javax.swing.RowSorter",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5835": {
        "Query": "get Source Code From File",
        "GroundTruth": [
            "java.io.BufferedReader.readLine()"
        ],
        "APIClasses": [
            "java.io.BufferedReader"
        ],
        "Source": "Tutorial Websites"
    },
    "5836": {
        "Query": "get Statement from Connection",
        "GroundTruth": [
            "java.sql.Connection.createStatement()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "5837": {
        "Query": "get Stream From URL",
        "GroundTruth": [
            "java.net.URL.openConnection()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "5838": {
        "Query": "get Stream via BufferedReader",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5839": {
        "Query": "get String For Color",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5840": {
        "Query": "get String Kemata Hash",
        "GroundTruth": [
            "java.security.MessageDigest.getInstance()",
            "java.lang.String.getBytes()",
            "java.security.MessageDigest.digest()"
        ],
        "APIClasses": [
            "java.security.MessageDigest",
            "java.lang.String",
            "java.security.MessageDigest"
        ],
        "Source": "Tutorial Websites"
    },
    "5841": {
        "Query": "get String Of Sub Network Address Ranges",
        "GroundTruth": [
            "java.lang.Integer.toString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5842": {
        "Query": "get String Size on Component",
        "GroundTruth": [
            "java.awt.FontMetrics.stringWidth()"
        ],
        "APIClasses": [
            "java.awt.FontMetrics"
        ],
        "Source": "Tutorial Websites"
    },
    "5843": {
        "Query": "get String Source Java File Manager",
        "GroundTruth": [
            "javax.tools.JavaCompiler.getStandardFileManager()",
            "javax.tools.DocumentationTool.getStandardFileManager()"
        ],
        "APIClasses": [
            "javax.tools.JavaCompiler",
            "javax.tools.DocumentationTool"
        ],
        "Source": "Tutorial Websites"
    },
    "5844": {
        "Query": "get String from Properties",
        "GroundTruth": [
            "java.util.Properties.getProperty()",
            "java.util.logging.LogManager.getProperty()"
        ],
        "APIClasses": [
            "java.util.Properties",
            "java.util.logging.LogManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5845": {
        "Query": "get String from XML Element attribute",
        "GroundTruth": [
            "org.w3c.dom.Element.getAttribute()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "5846": {
        "Query": "get Sub List By Page number and page size",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.size()",
            "java.util.List.subList()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "5847": {
        "Query": "get Sub Network Address Range",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.lang.Short.parseShort()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Short"
        ],
        "Source": "Tutorial Websites"
    },
    "5848": {
        "Query": "get Suitable Dialog Parent",
        "GroundTruth": [
            "javax.swing.SwingUtilities.getAncestorOfClass()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "5849": {
        "Query": "get Sum Of Factors",
        "GroundTruth": [
            "java.lang.Integer.intValue()",
            "java.lang.Integer.valueOf()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5850": {
        "Query": "get Super Class Generic Type",
        "GroundTruth": [
            "java.lang.Class.getGenericSuperclass()",
            "java.lang.reflect.ParameterizedType.getActualTypeArguments()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.ParameterizedType"
        ],
        "Source": "Tutorial Websites"
    },
    "5851": {
        "Query": "get Swing Digital Filter Document",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5852": {
        "Query": "get Swing Selected Button Text from ButtonGroup",
        "GroundTruth": [
            "javax.swing.ButtonGroup.getElements()"
        ],
        "APIClasses": [
            "javax.swing.ButtonGroup"
        ],
        "Source": "Tutorial Websites"
    },
    "5853": {
        "Query": "get Swing Text Area Scroll Pane Container",
        "GroundTruth": [
            "java.awt.TextArea.setRows()",
            "java.awt.TextArea.setColumns()",
            "javax.swing.JScrollPane.setViewportView()"
        ],
        "APIClasses": [
            "java.awt.TextArea",
            "javax.swing.JScrollPane"
        ],
        "Source": "Tutorial Websites"
    },
    "5854": {
        "Query": "get Table Name from Annotation",
        "GroundTruth": [
            "java.lang.annotation.Annotation.equals()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "5855": {
        "Query": "get Tables from MySQL",
        "GroundTruth": [
            "java.sql.Connection.getMetaData()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "5856": {
        "Query": "get Temperature By Longitude",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.toRadians()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5857": {
        "Query": "get Temperature By Longitude Rev",
        "GroundTruth": [
            "java.lang.Math.sin()",
            "java.lang.Math.toRadians()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5858": {
        "Query": "get Tens Int Value from BigDecimal",
        "GroundTruth": [
            "java.math.BigInteger.intValue()",
            "java.math.BigDecimal.intValue()",
            "java.math.BigInteger.remainder()",
            "java.math.BigDecimal.remainder()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "5859": {
        "Query": "get Tens Value from BigDecimal",
        "GroundTruth": [
            "java.math.BigInteger.remainder()",
            "java.math.BigDecimal.remainder()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "5860": {
        "Query": "get Test DB Connection via UcanaccessDriver",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5861": {
        "Query": "get Text Content from Node",
        "GroundTruth": [
            "org.w3c.dom.Node.getTextContent()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "5862": {
        "Query": "get Thai Buddhist Date",
        "GroundTruth": [
            "java.time.chrono.ThaiBuddhistDate.of()",
            "java.time.format.DateTimeFormatter.ofPattern()",
            "java.util.Formatter.format()"
        ],
        "APIClasses": [
            "java.time.chrono.ThaiBuddhistDate",
            "java.time.format.DateTimeFormatter",
            "java.util.Formatter"
        ],
        "Source": "Tutorial Websites"
    },
    "5863": {
        "Query": "get Timestamp from Date",
        "GroundTruth": [
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "5864": {
        "Query": "get Timestamp from long",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.sql.Timestamp.getTime()",
            "java.sql.CallableStatement.getTime()",
            "java.sql.ResultSet.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.sql.Timestamp",
            "java.sql.CallableStatement",
            "java.sql.ResultSet"
        ],
        "Source": "Tutorial Websites"
    },
    "5865": {
        "Query": "get Total Row Number from Statement and table name",
        "GroundTruth": [
            "java.lang.reflect.Array.getLong()",
            "java.lang.reflect.Field.getLong()",
            "java.lang.Long.getLong()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.reflect.Field",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "5866": {
        "Query": "get USD Currency Format",
        "GroundTruth": [
            "java.text.NumberFormat.getCurrencyInstance()",
            "java.util.Currency.getInstance()"
        ],
        "APIClasses": [
            "java.text.NumberFormat",
            "java.util.Currency"
        ],
        "Source": "Tutorial Websites"
    },
    "5867": {
        "Query": "get Union of two HashSet",
        "GroundTruth": [
            "java.util.Set.addAll()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "5868": {
        "Query": "get Unix Timestamp from Instant",
        "GroundTruth": [
            "java.time.Instant.now()",
            "java.time.Instant.getEpochSecond()"
        ],
        "APIClasses": [
            "java.time.Instant",
            "java.time.Instant"
        ],
        "Source": "Tutorial Websites"
    },
    "5869": {
        "Query": "get Unsigned Int From ByteBuffer",
        "GroundTruth": [
            "java.nio.ByteBuffer.getInt()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "5870": {
        "Query": "get Unsigned Short From ByteBuffer",
        "GroundTruth": [
            "java.nio.ByteBuffer.getShort()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "5871": {
        "Query": "get VM Memory String",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.freeMemory()",
            "java.lang.Runtime.totalMemory()",
            "java.lang.Runtime.maxMemory()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime",
            "java.lang.Runtime",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "5872": {
        "Query": "get Value From ResultSet",
        "GroundTruth": [
            "java.sql.Ref.getObject()",
            "java.sql.CallableStatement.getObject()",
            "java.sql.ResultSet.getObject()",
            "java.sql.Timestamp.equals()",
            "java.sql.RowId.equals()"
        ],
        "APIClasses": [
            "java.sql.Ref",
            "java.sql.CallableStatement",
            "java.sql.ResultSet",
            "java.sql.Timestamp",
            "java.sql.RowId"
        ],
        "Source": "Tutorial Websites"
    },
    "5873": {
        "Query": "get Value From XML Tag",
        "GroundTruth": [
            "org.w3c.dom.Document.getElementsByTagName()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "5874": {
        "Query": "get Visible Row Count from JTree",
        "GroundTruth": [
            "javax.swing.JComponent.getVisibleRect()",
            "javax.swing.JTree.getRowBounds()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "javax.swing.JTree"
        ],
        "Source": "Tutorial Websites"
    },
    "5875": {
        "Query": "get Web App Context Path",
        "GroundTruth": [
            "java.net.URL.toString()",
            "java.lang.String.split()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.net.URL",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5876": {
        "Query": "get Week Of Date",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.get()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5877": {
        "Query": "get Week Of First Day",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()",
            "java.util.Calendar.get()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5878": {
        "Query": "get White space Regex Pattern",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5879": {
        "Query": "get Word Position from sentence via regex",
        "GroundTruth": [
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5880": {
        "Query": "get Word from string using regex",
        "GroundTruth": [
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5881": {
        "Query": "get XML Attribute Boolean Value",
        "GroundTruth": [
            "org.w3c.dom.NamedNodeMap.getNamedItem()",
            "java.lang.Boolean.parseBoolean()"
        ],
        "APIClasses": [
            "org.w3c.dom.NamedNodeMap",
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "5882": {
        "Query": "get XML Attribute Int Value",
        "GroundTruth": [
            "org.w3c.dom.NamedNodeMap.getNamedItem()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "org.w3c.dom.NamedNodeMap",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5883": {
        "Query": "get XML Attribute Long Value",
        "GroundTruth": [
            "org.w3c.dom.NamedNodeMap.getNamedItem()",
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "org.w3c.dom.NamedNodeMap",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "5884": {
        "Query": "get XML Attribute Value",
        "GroundTruth": [
            "org.w3c.dom.Node.getAttributes()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "5885": {
        "Query": "get XML Boolean Attribute",
        "GroundTruth": [
            "java.lang.Boolean.parseBoolean()",
            "org.w3c.dom.Element.getAttribute()",
            "java.lang.String.isEmpty()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.Boolean",
            "org.w3c.dom.Element",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5886": {
        "Query": "get XML Child Element As Float",
        "GroundTruth": [
            "java.lang.Float.parseFloat()"
        ],
        "APIClasses": [
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "5887": {
        "Query": "get XML Child Element As Integer",
        "GroundTruth": [
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5888": {
        "Query": "get XML Child With Attribute Value",
        "GroundTruth": [
            "java.lang.String.equals()",
            "org.w3c.dom.Element.getAttribute()"
        ],
        "APIClasses": [
            "java.lang.String",
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "5889": {
        "Query": "get XML Comment Node",
        "GroundTruth": [
            "org.w3c.dom.NodeList.getLength()",
            "org.w3c.dom.NodeList.item()"
        ],
        "APIClasses": [
            "org.w3c.dom.NodeList"
        ],
        "Source": "Tutorial Websites"
    },
    "5890": {
        "Query": "get XML Content String from Document",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5891": {
        "Query": "get XML DOM Attr by name",
        "GroundTruth": [
            "org.w3c.dom.NamedNodeMap.getNamedItem()",
            "org.w3c.dom.Node.getAttributes()"
        ],
        "APIClasses": [
            "org.w3c.dom.NamedNodeMap",
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "5892": {
        "Query": "get XML DOM Document Builder",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.setIgnoringElementContentWhitespace()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5893": {
        "Query": "get XML DOM Implementation Registry",
        "GroundTruth": [
            "org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance()"
        ],
        "APIClasses": [
            "org.w3c.dom.bootstrap.DOMImplementationRegistry"
        ],
        "Source": "Tutorial Websites"
    },
    "5894": {
        "Query": "get XML Direct Attribute",
        "GroundTruth": [
            "org.w3c.dom.Node.getAttributes()",
            "org.w3c.dom.NamedNodeMap.getNamedItem()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node",
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "5895": {
        "Query": "get XML Document Builder",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5896": {
        "Query": "get XML Document From Class Path",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5897": {
        "Query": "get XML Document From Stream",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5898": {
        "Query": "get XML Document from DocumentBuilder",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "javax.xml.parsers.DocumentBuilder.newDocument()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilder"
        ],
        "Source": "Tutorial Websites"
    },
    "5899": {
        "Query": "get XML Document from File",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5900": {
        "Query": "get XML Element Attribute",
        "GroundTruth": [
            "org.w3c.dom.Element.getAttribute()",
            "java.lang.String.trim()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5901": {
        "Query": "get XML Element Child As String",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5902": {
        "Query": "get XML Element Children",
        "GroundTruth": [
            "org.w3c.dom.Node.getNodeType()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "5903": {
        "Query": "get XML Element Text",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.length()",
            "org.w3c.dom.Element.getElementsByTagNameNS()"
        ],
        "APIClasses": [
            "java.lang.String",
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "5904": {
        "Query": "get XML Element by tag name and namespace",
        "GroundTruth": [
            "org.w3c.dom.Element.getElementsByTagNameNS()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "5905": {
        "Query": "get XML Node Position",
        "GroundTruth": [
            "org.w3c.dom.Node.getPreviousSibling()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "5906": {
        "Query": "get XML Node Type",
        "GroundTruth": [
            "org.w3c.dom.Node.getNodeType()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "5907": {
        "Query": "get XML QName Local Part",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5908": {
        "Query": "get XML QName Prefix",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5909": {
        "Query": "get XML String from Node using Transformer",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5910": {
        "Query": "get XML Sub Node",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5911": {
        "Query": "get Xpath from XPathFactory",
        "GroundTruth": [
            "javax.xml.xpath.XPathFactory.newInstance()",
            "javax.xml.xpath.XPathFactory.newXPath()"
        ],
        "APIClasses": [
            "javax.xml.xpath.XPathFactory",
            "javax.xml.xpath.XPathFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "5912": {
        "Query": "get Year from Date",
        "GroundTruth": [
            "java.util.Calendar.setTime()",
            "java.util.Calendar.get()",
            "java.util.Calendar.getInstance()",
            "java.util.Currency.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Currency"
        ],
        "Source": "Tutorial Websites"
    },
    "5913": {
        "Query": "get Yes No Dialog via JOptionPane",
        "GroundTruth": [
            "java.lang.String.equals()",
            "javax.swing.JOptionPane.showInputDialog()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "5914": {
        "Query": "get Zip Entry Comment",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5915": {
        "Query": "get a color as a int from a string, alpha is set to 255 if we can not get the color then we return 0",
        "GroundTruth": [
            "java.lang.Integer.decode()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5916": {
        "Query": "get all local IP Addresses",
        "GroundTruth": [
            "java.net.InetAddress.getAllByName()",
            "java.net.InetAddress.getLocalHost()",
            "java.net.InetSocketAddress.getHostName()",
            "java.net.InetAddress.getHostName()"
        ],
        "APIClasses": [
            "java.net.InetAddress",
            "java.net.InetSocketAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "5917": {
        "Query": "get bluetooth Service Class",
        "GroundTruth": [
            "java.lang.Object.wait()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "5918": {
        "Query": "get cookie from HttpServletRequest",
        "GroundTruth": [
            "java.net.CookieStore.getCookies()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.net.CookieStore",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5919": {
        "Query": "get date of Last Month",
        "GroundTruth": [
            "java.util.Calendar.add()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5920": {
        "Query": "get date of Last Week",
        "GroundTruth": [
            "java.util.Calendar.set()",
            "java.util.Calendar.get()",
            "java.util.Calendar.add()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5921": {
        "Query": "get date of This Month",
        "GroundTruth": [
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()",
            "java.util.Calendar.add()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5922": {
        "Query": "get date of This Week",
        "GroundTruth": [
            "java.util.Calendar.set()",
            "java.util.Calendar.get()",
            "java.util.Calendar.add()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "5923": {
        "Query": "get derby DB Connection",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.registerDriver()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5924": {
        "Query": "get fields list of a type, and all the fields returned contains the given annotation",
        "GroundTruth": [
            "java.lang.Class.getDeclaredFields()",
            "java.lang.reflect.Field.getAnnotation()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "5925": {
        "Query": "get management Object Name",
        "GroundTruth": [
            "java.util.Map.put()",
            "javax.management.ObjectName.getInstance()"
        ],
        "APIClasses": [
            "java.util.Map",
            "javax.management.ObjectName"
        ],
        "Source": "Tutorial Websites"
    },
    "5926": {
        "Query": "get md5 checksum of an byte array",
        "GroundTruth": [
            "java.security.MessageDigest.getInstance()",
            "java.security.MessageDigest.digest()",
            "java.lang.String.toString()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.security.MessageDigest",
            "java.security.MessageDigest",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5927": {
        "Query": "get min value from two BigDecimal",
        "GroundTruth": [
            "java.math.BigInteger.doubleValue()",
            "java.math.BigDecimal.doubleValue()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "5928": {
        "Query": "get minimum int from three int value",
        "GroundTruth": [
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5929": {
        "Query": "get mysql Connection and set unicode",
        "GroundTruth": [
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5930": {
        "Query": "get mysql Local Connection",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5931": {
        "Query": "get opengl Program Status",
        "GroundTruth": [
            "java.nio.IntBuffer.allocate()",
            "java.nio.IntBuffer.get()",
            "java.nio.ByteBuffer.allocate()",
            "java.nio.ByteBuffer.array()",
            "java.nio.charset.Charset.forName()"
        ],
        "APIClasses": [
            "java.nio.IntBuffer",
            "java.nio.ByteBuffer",
            "java.nio.charset.Charset"
        ],
        "Source": "Tutorial Websites"
    },
    "5932": {
        "Query": "get oracle Connection on Amazon Web Service",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5933": {
        "Query": "get oracle XE Connection",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.sql.DriverManager.getConnection()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.sql.DriverManager"
        ],
        "Source": "Tutorial Websites"
    },
    "5934": {
        "Query": "get sound Mixer Count",
        "GroundTruth": [
            "javax.sound.sampled.AudioSystem.getMixerInfo()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "5935": {
        "Query": "get sound Mixer Name",
        "GroundTruth": [
            "javax.sound.sampled.AudioSystem.getMixerInfo()",
            "javax.sound.sampled.ReverbType.getName()",
            "javax.sound.sampled.Port.Info.getName()",
            "javax.sound.sampled.Mixer.Info.getName()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioSystem",
            "javax.sound.sampled.ReverbType",
            "javax.sound.sampled.Port.Info",
            "javax.sound.sampled.Mixer.Info"
        ],
        "Source": "Tutorial Websites"
    },
    "5936": {
        "Query": "get sound Source Data Line",
        "GroundTruth": [
            "javax.sound.sampled.AudioSystem.isLineSupported()",
            "javax.sound.sampled.AudioSystem.getLine()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "5937": {
        "Query": "get sound Volume Controls",
        "GroundTruth": [
            "javax.sound.sampled.Line.getControls()",
            "javax.sound.sampled.Control.getType()",
            "javax.sound.sampled.LineEvent.getType()",
            "javax.sound.sampled.AudioFileFormat.getType()"
        ],
        "APIClasses": [
            "javax.sound.sampled.Line",
            "javax.sound.sampled.Control",
            "javax.sound.sampled.LineEvent",
            "javax.sound.sampled.AudioFileFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "5938": {
        "Query": "get swing Positive Digital Filter Document",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5939": {
        "Query": "get the Number of Times a Character Occurs In a String",
        "GroundTruth": [
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5940": {
        "Query": "get the lowest value from a List.",
        "GroundTruth": [
            "java.util.List.add()",
            "java.util.Collections.sort()",
            "java.util.List.get()",
            "java.util.List.isEmpty()"
        ],
        "APIClasses": [
            "java.util.List",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "5941": {
        "Query": "get the package name of the specified class to the specified name and replaces all '.'",
        "GroundTruth": [
            "java.lang.String.replace()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5942": {
        "Query": "get the setter method corresponding to given property",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.toCharArray()",
            "java.lang.Character.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "5943": {
        "Query": "get the text value of XML element.",
        "GroundTruth": [
            "org.w3c.dom.Node.getChildNodes()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "5944": {
        "Query": "get value by key from a may Or return Default",
        "GroundTruth": [
            "java.util.Map.get()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "5945": {
        "Query": "get yyyy/MM/dd Format Time",
        "GroundTruth": [
            "java.util.Locale.getDefault()",
            "java.text.Format.format()"
        ],
        "APIClasses": [
            "java.util.Locale",
            "java.text.Format"
        ],
        "Source": "Tutorial Websites"
    },
    "5946": {
        "Query": "get yyyy/MM/dd HH:mm Format Time",
        "GroundTruth": [
            "java.util.Locale.getDefault()",
            "java.text.Format.format()"
        ],
        "APIClasses": [
            "java.util.Locale",
            "java.text.Format"
        ],
        "Source": "Tutorial Websites"
    },
    "5947": {
        "Query": "getAndroidModel Asks a device for its model.",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "5948": {
        "Query": "gets a color from a hexadecimal string like \"AABBCC\" or \"AABBCCDD\".",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.Long.decode()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "5949": {
        "Query": "gets all the available graphics devices that can be drawn to IE screens or monitors",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getScreenDevices()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "5950": {
        "Query": "getter method name to Setter method name",
        "GroundTruth": [
            "java.lang.String.startsWith()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5951": {
        "Query": "getting 2 unsigned bytes from ByteBuffer.",
        "GroundTruth": [
            "java.nio.ByteBuffer.getShort()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "5952": {
        "Query": "getting a single unsigned integer.",
        "GroundTruth": [
            "java.lang.reflect.Array.getInt()",
            "java.lang.reflect.Field.getInt()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "5953": {
        "Query": "go To JTree Node",
        "GroundTruth": [
            "javax.swing.JTree.scrollPathToVisible()"
        ],
        "APIClasses": [
            "javax.swing.JTree"
        ],
        "Source": "Tutorial Websites"
    },
    "5954": {
        "Query": "go recursively deep to find the XML node with the name",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5955": {
        "Query": "has Chinese By Char Range",
        "GroundTruth": [
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5956": {
        "Query": "has Chinese By Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "5957": {
        "Query": "has Cookie in HttpServletRequest",
        "GroundTruth": [
            "java.net.CookieStore.getCookies()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.net.CookieStore",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5958": {
        "Query": "has Explicit Bean Info",
        "GroundTruth": [
            "java.lang.String.lastIndexOf()",
            "java.lang.String.substring()",
            "java.beans.Introspector.getBeanInfoSearchPath()",
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.beans.Introspector",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5959": {
        "Query": "has Main Attribute Value in Manifest",
        "GroundTruth": [
            "java.util.jar.Manifest.getMainAttributes()",
            "org.xml.sax.Attributes.getValue()"
        ],
        "APIClasses": [
            "java.util.jar.Manifest",
            "org.xml.sax.Attributes"
        ],
        "Source": "Tutorial Websites"
    },
    "5960": {
        "Query": "has Repeat by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "5961": {
        "Query": "hash Name to long value via SHA",
        "GroundTruth": [
            "java.security.MessageDigest.getInstance()",
            "java.io.DataOutputStream.writeUTF()",
            "java.io.DataOutputStream.flush()",
            "java.security.MessageDigest.digest()",
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.security.MessageDigest",
            "java.io.DataOutputStream",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "5962": {
        "Query": "heapifies starting from a given node heapifying checks each child of the node and if it is greater than the parent it swaps the two and heapifies the child",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5963": {
        "Query": "hide File via shell command",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Process.waitFor()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Process"
        ],
        "Source": "Tutorial Websites"
    },
    "5964": {
        "Query": "how to check if TreeMap object contains a particular key using containsKey method of TreeMap class",
        "GroundTruth": [
            "java.util.TreeMap.put()",
            "java.util.TreeMap.containsKey()"
        ],
        "APIClasses": [
            "java.util.TreeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "5965": {
        "Query": "how to use isNaN() method of the Float class.",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.Float.isNaN()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.Float"
        ],
        "Source": "Tutorial Websites"
    },
    "5966": {
        "Query": "human Readable Byte Count",
        "GroundTruth": [
            "java.lang.Math.log()",
            "java.lang.String.format()",
            "java.lang.Math.pow()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5967": {
        "Query": "if Contain Chinese by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "5968": {
        "Query": "if o is of the given type, returns o cast to it; otherwise returns null.",
        "GroundTruth": [
            "java.lang.Class.isInstance()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5969": {
        "Query": "image To Buffered Image",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()",
            "java.awt.image.BufferedImage.createGraphics()"
        ],
        "APIClasses": [
            "java.awt.Image",
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "5970": {
        "Query": "implements a simple text learner in Java using WEKA",
        "GroundTruth": [
            "java.io.Reader.close()"
        ],
        "APIClasses": [
            "java.io.Reader"
        ],
        "Source": "Tutorial Websites"
    },
    "5971": {
        "Query": "implements the NeedlemanWunch distance function.",
        "GroundTruth": [
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5972": {
        "Query": "implode Array which uses a COMMA delimiter.",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.lang.Integer.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "5973": {
        "Query": "import Csv from File",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5974": {
        "Query": "import XML Document To Document",
        "GroundTruth": [
            "org.w3c.dom.Document.getDocumentElement()",
            "org.w3c.dom.Document.importNode()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document",
            "org.w3c.dom.Document",
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "5975": {
        "Query": "import XML Document To Node",
        "GroundTruth": [
            "org.w3c.dom.Document.getDocumentElement()",
            "org.w3c.dom.Document.importNode()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document",
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "5976": {
        "Query": "import XML Node To Document",
        "GroundTruth": [
            "org.w3c.dom.Document.importNode()",
            "org.w3c.dom.Document.getDocumentElement()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document",
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "5977": {
        "Query": "import XML Node To Node",
        "GroundTruth": [
            "org.w3c.dom.Document.importNode()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "5978": {
        "Query": "insert sort the most stable sort algorithm times of comparing equals times of swap two times as fast as bubble sort a little faster than select sort",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5979": {
        "Query": "insert will insert the item into the heap",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5980": {
        "Query": "inserts the element at the end of a particular sub-array into its sorted position in the rest of the array before it",
        "GroundTruth": [
            "java.util.ArrayList.get()",
            "java.lang.String.compareTo()",
            "java.util.ArrayList.set()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5981": {
        "Query": "install Delegating JTable Column",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setMaxWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "5982": {
        "Query": "install Escape Close Operation for JDialog",
        "GroundTruth": [
            "javax.swing.JComponent.getInputMap()"
        ],
        "APIClasses": [
            "javax.swing.JComponent"
        ],
        "Source": "Tutorial Websites"
    },
    "5983": {
        "Query": "instantiate a Class by its name",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5984": {
        "Query": "instantiate a class without throwing a exception",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "5985": {
        "Query": "int To Byte Array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.nio.ByteBuffer.wrap()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "5986": {
        "Query": "internal use - get buffer from image BufferedImage",
        "GroundTruth": [
            "java.awt.image.Raster.getDataBuffer()"
        ],
        "APIClasses": [
            "java.awt.image.Raster"
        ],
        "Source": "Tutorial Websites"
    },
    "5987": {
        "Query": "intersect Line2D and Shape",
        "GroundTruth": [
            "java.awt.Shape.contains()",
            "java.awt.geom.Point2D.distance()"
        ],
        "APIClasses": [
            "java.awt.Shape",
            "java.awt.geom.Point2D"
        ],
        "Source": "Tutorial Websites"
    },
    "5988": {
        "Query": "invert All But First Byte",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "5989": {
        "Query": "invoke In Awt Event Queue",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "java.lang.Runnable.run()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.lang.Runnable"
        ],
        "Source": "Tutorial Websites"
    },
    "5990": {
        "Query": "invoke On JavaFX Application Thread",
        "GroundTruth": [
            "java.lang.Runnable.run()"
        ],
        "APIClasses": [
            "java.lang.Runnable"
        ],
        "Source": "Tutorial Websites"
    },
    "5991": {
        "Query": "ip Int To String",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5992": {
        "Query": "is Alpha by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "5993": {
        "Query": "is Ancestor Of Focused Component",
        "GroundTruth": [
            "java.awt.Component.hasFocus()",
            "java.awt.Container.getComponentCount()"
        ],
        "APIClasses": [
            "java.awt.Component",
            "java.awt.Container"
        ],
        "Source": "Tutorial Websites"
    },
    "5994": {
        "Query": "is Annotation Declared With",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.annotation.Annotation.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.annotation.Annotation"
        ],
        "Source": "Tutorial Websites"
    },
    "5995": {
        "Query": "is Annotation Exists on Class",
        "GroundTruth": [
            "java.lang.annotation.Annotation.annotationType()",
            "java.lang.reflect.Method.getAnnotation()",
            "java.lang.reflect.Field.getAnnotation()"
        ],
        "APIClasses": [
            "java.lang.annotation.Annotation",
            "java.lang.reflect.Method",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "5996": {
        "Query": "is Apple Webkit user agent",
        "GroundTruth": [
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5997": {
        "Query": "is Calendar Between two other Calendar",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.compareTo()",
            "java.util.UUID.compareTo()",
            "java.util.Date.compareTo()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.UUID",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "5998": {
        "Query": "is Chinese By Name in regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "5999": {
        "Query": "is Chinese Char by Regex",
        "GroundTruth": [
            "java.lang.String.isEmpty()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "6000": {
        "Query": "is Chinese English Number by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6001": {
        "Query": "is Chinese by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6002": {
        "Query": "is Contain White Space by Regex",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6003": {
        "Query": "is CubicCurve2D Cutting Shape",
        "GroundTruth": [
            "java.awt.Shape.contains()"
        ],
        "APIClasses": [
            "java.awt.Shape"
        ],
        "Source": "Tutorial Websites"
    },
    "6004": {
        "Query": "is Date by Regex, one format",
        "GroundTruth": [
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "6005": {
        "Query": "is Digital by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6006": {
        "Query": "is Double Negative by Regex",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6007": {
        "Query": "is Double Positive by Regex",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6008": {
        "Query": "is Double by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6009": {
        "Query": "is ESC key pressed JavaFX KeyEvent",
        "GroundTruth": [
            "java.lang.String.isEmpty()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6010": {
        "Query": "is Email by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6011": {
        "Query": "is English Number By Regex",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6012": {
        "Query": "is English by Regex",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6013": {
        "Query": "is Executed From Jar",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6014": {
        "Query": "is Ext Jar file by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6015": {
        "Query": "is Gzip Supported HttpServletRequest",
        "GroundTruth": [
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6016": {
        "Query": "is HBase Jar Present",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "6017": {
        "Query": "is Host Port Available",
        "GroundTruth": [
            "java.net.Socket.close()"
        ],
        "APIClasses": [
            "java.net.Socket"
        ],
        "Source": "Tutorial Websites"
    },
    "6018": {
        "Query": "is IE user agent from connection String",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.indexOf()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6019": {
        "Query": "is IP address string by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.split()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6020": {
        "Query": "is IPv4 Address by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6021": {
        "Query": "is IPv4 Literal Address",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.Character.digit()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "6022": {
        "Query": "is IPv4 Literal Address by regex",
        "GroundTruth": [
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "6023": {
        "Query": "is IPv4 or IPv6 Literal Address",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "6024": {
        "Query": "is IPv6 Address by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "6025": {
        "Query": "is IPv6 Hex Compressed Address",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6026": {
        "Query": "is IPv6 Standard Address by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6027": {
        "Query": "is Iana Reserved Private Network IP Address by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()",
            "java.lang.Integer.parseInt()",
            "java.util.regex.Matcher.group()",
            "java.util.regex.MatchResult.group()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.Integer",
            "java.util.regex.MatchResult"
        ],
        "Source": "Tutorial Websites"
    },
    "6028": {
        "Query": "is In Active swing Window",
        "GroundTruth": [
            "javax.swing.SwingUtilities.getWindowAncestor()",
            "java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager()",
            "java.awt.KeyboardFocusManager.getFocusedWindow()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.awt.KeyboardFocusManager",
            "java.awt.KeyboardFocusManager"
        ],
        "Source": "Tutorial Websites"
    },
    "6029": {
        "Query": "is Integer Negative by Regex",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6030": {
        "Query": "is Integer Positive by Regex",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6031": {
        "Query": "is Integer String by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "6032": {
        "Query": "is Integer by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6033": {
        "Query": "is Interface With Annotated Methods",
        "GroundTruth": [
            "java.lang.Class.getMethods()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "6034": {
        "Query": "is Ip address by Regex",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6035": {
        "Query": "is Ipad Or Iphone user agent",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "6036": {
        "Query": "is Item Contained In Array",
        "GroundTruth": [
            "java.lang.Object.equals()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "6037": {
        "Query": "is JTree Path Descendant",
        "GroundTruth": [
            "javax.swing.tree.TreePath.getPathCount()",
            "javax.swing.tree.TreePath.getParentPath()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "javax.swing.tree.TreePath",
            "javax.swing.tree.TreePath",
            "javax.swing.tree.TreePath",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6038": {
        "Query": "is JavaFX Rectangle Size Too Small",
        "GroundTruth": [
            "java.lang.Math.abs()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6039": {
        "Query": "is JavaFX Thread Initialized",
        "GroundTruth": [
            "java.lang.Thread.getAllStackTraces()",
            "java.lang.Thread.getName()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6040": {
        "Query": "is Javascript Octal Escape",
        "GroundTruth": [
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6041": {
        "Query": "is Jvm 64 bit",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6042": {
        "Query": "is Legal Name with English and Chinese character by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.lang.String.matches()",
            "java.lang.String.trim()",
            "java.lang.String.length()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.lang.String",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6043": {
        "Query": "is Legal Password, length between 6.20",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.trim()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6044": {
        "Query": "is Loop Back IP Address by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()",
            "java.lang.Integer.parseInt()",
            "java.util.regex.Matcher.group()",
            "java.util.regex.MatchResult.group()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.Integer",
            "java.util.regex.MatchResult"
        ],
        "Source": "Tutorial Websites"
    },
    "6045": {
        "Query": "is Menu Shortcut Key Down in mouse event",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getMenuShortcutKeyMask()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "6046": {
        "Query": "is Midi Hardware Device",
        "GroundTruth": [
            "javax.sound.midi.MidiSystem.getMidiDevice()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "6047": {
        "Query": "is Midi Input Device Available",
        "GroundTruth": [
            "javax.sound.midi.MidiSystem.getMidiDevice()",
            "javax.sound.midi.MidiDevice.getMaxTransmitters()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiSystem",
            "javax.sound.midi.MidiDevice"
        ],
        "Source": "Tutorial Websites"
    },
    "6048": {
        "Query": "is Money String by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6049": {
        "Query": "is Mouse Button Right Click",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isRightMouseButton()",
            "javax.swing.SwingUtilities.isLeftMouseButton()",
            "java.awt.event.InputEvent.isControlDown()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.awt.event.InputEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "6050": {
        "Query": "is Mouse Middle Click",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isMiddleMouseButton()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "6051": {
        "Query": "is Mouse Over JTree Path",
        "GroundTruth": [
            "javax.swing.JTree.getRowForLocation()"
        ],
        "APIClasses": [
            "javax.swing.JTree"
        ],
        "Source": "Tutorial Websites"
    },
    "6052": {
        "Query": "is Mouse Right Click",
        "GroundTruth": [
            "java.awt.event.MouseEvent.getButton()"
        ],
        "APIClasses": [
            "java.awt.event.MouseEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "6053": {
        "Query": "is Mouse Right Or Control Click",
        "GroundTruth": [
            "java.awt.event.InputEvent.isControlDown()",
            "java.awt.event.MouseEvent.getButton()"
        ],
        "APIClasses": [
            "java.awt.event.InputEvent",
            "java.awt.event.MouseEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "6054": {
        "Query": "is Nan Or Infinity JavaFX BooleanBinding",
        "GroundTruth": [
            "java.lang.Double.isInfinite()",
            "java.lang.Double.isNaN()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "6055": {
        "Query": "is Node Type Matches",
        "GroundTruth": [
            "org.w3c.dom.Node.getNodeType()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "6056": {
        "Query": "is Number by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6057": {
        "Query": "is Numeric by regex",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6058": {
        "Query": "is Package Declaration by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6059": {
        "Query": "is Phone Number by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6060": {
        "Query": "is Point On Screen",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getScreenDevices()",
            "java.awt.GraphicsDevice.getDefaultConfiguration()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6061": {
        "Query": "is Preposition English Word",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6062": {
        "Query": "is Prime Miller Rabin",
        "GroundTruth": [
            "java.lang.Integer.numberOfTrailingZeros()",
            "java.lang.Long.numberOfTrailingZeros()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "6063": {
        "Query": "is Rectangle Displayable On Screen",
        "GroundTruth": [
            "java.awt.GraphicsDevice.getDefaultConfiguration()",
            "java.lang.String.contains()",
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()"
        ],
        "APIClasses": [
            "java.awt.GraphicsDevice",
            "java.lang.String",
            "java.awt.GraphicsEnvironment"
        ],
        "Source": "Tutorial Websites"
    },
    "6064": {
        "Query": "is Remote Session Bean",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "6065": {
        "Query": "is Same Day Of Year",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.get()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "6066": {
        "Query": "is Same Month Of Year",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.get()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "6067": {
        "Query": "is Scientific number by Regex",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6068": {
        "Query": "is String Empty Or Null",
        "GroundTruth": [
            "java.lang.String.isEmpty()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6069": {
        "Query": "is String Not Empty",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence"
        ],
        "Source": "Tutorial Websites"
    },
    "6070": {
        "Query": "is String Start With Number",
        "GroundTruth": [
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6071": {
        "Query": "is String a HTTP URL by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6072": {
        "Query": "is String exist in list",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6073": {
        "Query": "is String have Chinese character",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6074": {
        "Query": "is String having Unique Character Using Array, Time: O(n), Space: O(1)",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6075": {
        "Query": "is String having Unique Character Using HashMap, Time: O(n), Space: O(1)",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6076": {
        "Query": "is String having Unique Character Using Loop",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6077": {
        "Query": "is String having Unique Character Using Sort, Time: O(nlog(n)), Space: O(1)",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.toCharArray()",
            "java.util.Arrays.sort()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6078": {
        "Query": "is Telephone Number by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6079": {
        "Query": "is Test Annotation by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6080": {
        "Query": "is Time String by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6081": {
        "Query": "is Url by Regex",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6082": {
        "Query": "is Valid External IP Address by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()",
            "java.lang.Integer.parseInt()",
            "java.util.regex.Matcher.group()",
            "java.util.regex.MatchResult.group()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.Integer",
            "java.util.regex.MatchResult"
        ],
        "Source": "Tutorial Websites"
    },
    "6083": {
        "Query": "is Valid IP Address by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6084": {
        "Query": "is Validate Alpha Chars by Regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6085": {
        "Query": "is X On Screen",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getScreenDevices()",
            "java.awt.GraphicsDevice.getDefaultConfiguration()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice"
        ],
        "Source": "Tutorial Websites"
    },
    "6086": {
        "Query": "is XML Saxon Available",
        "GroundTruth": [
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "6087": {
        "Query": "is Xml Char Reference Part",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6088": {
        "Query": "is Y On Screen",
        "GroundTruth": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getScreenDevices()",
            "java.awt.GraphicsDevice.getDefaultConfiguration()"
        ],
        "APIClasses": [
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsEnvironment",
            "java.awt.GraphicsDevice"
        ],
        "Source": "Tutorial Websites"
    },
    "6089": {
        "Query": "is a string representing an Email",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.trim()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6090": {
        "Query": "is content Type Binary",
        "GroundTruth": [
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6091": {
        "Query": "is double value Between",
        "GroundTruth": [
            "java.lang.Double.compare()"
        ],
        "APIClasses": [
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "6092": {
        "Query": "is mouse Left Click",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isLeftMouseButton()",
            "java.awt.event.InputEvent.isControlDown()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.awt.event.InputEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "6093": {
        "Query": "is one String the rotation of another string",
        "GroundTruth": [
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6094": {
        "Query": "is one char array Subset of another char array",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6095": {
        "Query": "is sound Input Port",
        "GroundTruth": [
            "javax.sound.sampled.Mixer.getSourceLineInfo()"
        ],
        "APIClasses": [
            "javax.sound.sampled.Mixer"
        ],
        "Source": "Tutorial Websites"
    },
    "6096": {
        "Query": "is sound Output Port",
        "GroundTruth": [
            "javax.sound.sampled.Mixer.getTargetLineInfo()"
        ],
        "APIClasses": [
            "javax.sound.sampled.Mixer"
        ],
        "Source": "Tutorial Websites"
    },
    "6097": {
        "Query": "is sound Source Data Line",
        "GroundTruth": [
            "javax.sound.sampled.Mixer.isLineSupported()"
        ],
        "APIClasses": [
            "javax.sound.sampled.Mixer"
        ],
        "Source": "Tutorial Websites"
    },
    "6098": {
        "Query": "is string a Domain Name by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6099": {
        "Query": "is string a Numeric string by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6100": {
        "Query": "is string a Phone number by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.trim()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6101": {
        "Query": "is string a Positive Integer by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6102": {
        "Query": "is string a Url starting with http:// or https://",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.trim()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6103": {
        "Query": "is string a Validate Phone in format (123)-123-1234",
        "GroundTruth": [
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher",
            "java.util.regex.Pattern",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6104": {
        "Query": "is string an Email by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6105": {
        "Query": "is string an IP address by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6106": {
        "Query": "is string an IP v4 address",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6107": {
        "Query": "is string an Image Url",
        "GroundTruth": [
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.trim()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6108": {
        "Query": "is string an Integer by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matches()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6109": {
        "Query": "is to cut KeyEvent",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getMenuShortcutKeyMask()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "6110": {
        "Query": "java.util.Date from LocalDate In UTC",
        "GroundTruth": [
            "java.util.Date.from()",
            "java.time.LocalDate.atStartOfDay()",
            "java.time.chrono.ChronoZonedDateTime.toInstant()",
            "java.time.chrono.ChronoLocalDateTime.toInstant()",
            "java.time.OffsetDateTime.toInstant()"
        ],
        "APIClasses": [
            "java.util.Date",
            "java.time.LocalDate",
            "java.time.chrono.ChronoZonedDateTime",
            "java.time.chrono.ChronoLocalDateTime",
            "java.time.OffsetDateTime"
        ],
        "Source": "Tutorial Websites"
    },
    "6111": {
        "Query": "java.util.Date from LocalDate In ZoneOffset",
        "GroundTruth": [
            "java.util.Date.from()",
            "java.time.LocalDate.atStartOfDay()",
            "java.time.chrono.ChronoZonedDateTime.toInstant()",
            "java.time.chrono.ChronoLocalDateTime.toInstant()",
            "java.time.OffsetDateTime.toInstant()"
        ],
        "APIClasses": [
            "java.util.Date",
            "java.time.LocalDate",
            "java.time.chrono.ChronoZonedDateTime",
            "java.time.chrono.ChronoLocalDateTime",
            "java.time.OffsetDateTime"
        ],
        "Source": "Tutorial Websites"
    },
    "6112": {
        "Query": "join Collection<?> to String",
        "GroundTruth": [
            "java.util.Collection.size()",
            "java.util.Collection.iterator()",
            "java.util.Iterator.next()"
        ],
        "APIClasses": [
            "java.util.Collection",
            "java.util.Iterator"
        ],
        "Source": "Tutorial Websites"
    },
    "6113": {
        "Query": "join an array to String from offset index",
        "GroundTruth": [
            "java.util.Collection.size()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.util.Collection",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6114": {
        "Query": "just paste what in the clipboard with Robot",
        "GroundTruth": [
            "java.awt.Robot.keyPress()",
            "java.awt.Robot.keyRelease()"
        ],
        "APIClasses": [
            "java.awt.Robot"
        ],
        "Source": "Tutorial Websites"
    },
    "6115": {
        "Query": "last Day Of Year",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "6116": {
        "Query": "last value from Collection",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.toArray()",
            "java.util.List.size()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "6117": {
        "Query": "launch Url with default system application",
        "GroundTruth": [
            "java.awt.Desktop.isDesktopSupported()",
            "java.awt.Desktop.getDesktop()",
            "java.awt.Desktop.isSupported()",
            "java.awt.Desktop.browse()"
        ],
        "APIClasses": [
            "java.awt.Desktop"
        ],
        "Source": "Tutorial Websites"
    },
    "6118": {
        "Query": "limit the string Length",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6119": {
        "Query": "load Class Via Classes",
        "GroundTruth": [
            "java.lang.Class.forName()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()"
        ],
        "APIClasses": [
            "java.lang.Class",
            "java.lang.Thread",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "6120": {
        "Query": "load Class Via Context",
        "GroundTruth": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()",
            "java.lang.Class.forName()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.Thread",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "6121": {
        "Query": "load Image from URL",
        "GroundTruth": [
            "javax.imageio.ImageIO.read()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "6122": {
        "Query": "load KeyStore from File",
        "GroundTruth": [
            "java.security.KeyStore.getInstance()",
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.security.KeyStore",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6123": {
        "Query": "load Properties from class path",
        "GroundTruth": [
            "java.util.Properties.load()",
            "java.util.ServiceLoader.load()",
            "java.io.Closeable.close()"
        ],
        "APIClasses": [
            "java.util.Properties",
            "java.util.ServiceLoader",
            "java.io.Closeable"
        ],
        "Source": "Tutorial Websites"
    },
    "6124": {
        "Query": "load Sound File from URL",
        "GroundTruth": [
            "java.applet.Applet.newAudioClip()"
        ],
        "APIClasses": [
            "java.applet.Applet"
        ],
        "Source": "Tutorial Websites"
    },
    "6125": {
        "Query": "local Canonical Host Name",
        "GroundTruth": [
            "java.net.InetAddress.getLocalHost()",
            "java.net.InetAddress.getCanonicalHostName()"
        ],
        "APIClasses": [
            "java.net.InetAddress",
            "java.net.InetAddress"
        ],
        "Source": "Tutorial Websites"
    },
    "6126": {
        "Query": "long To Byte Array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.nio.ByteBuffer.wrap()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "6127": {
        "Query": "lookup Data Source in InitialContext",
        "GroundTruth": [
            "javax.naming.Context.lookup()"
        ],
        "APIClasses": [
            "javax.naming.Context"
        ],
        "Source": "Tutorial Websites"
    },
    "6128": {
        "Query": "lookup Internal JavaFX Node",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.awt.List.getItems()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.awt.List"
        ],
        "Source": "Tutorial Websites"
    },
    "6129": {
        "Query": "lookup Within JavaFX Node",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "6130": {
        "Query": "make Circle and return GeneralPath",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()",
            "java.awt.geom.Path2D.closePath()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.awt.geom.Path2D"
        ],
        "Source": "Tutorial Websites"
    },
    "6131": {
        "Query": "make Image Color Transparent",
        "GroundTruth": [
            "java.awt.Color.getRGB()",
            "java.awt.Toolkit.getDefaultToolkit()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "6132": {
        "Query": "make JavaFX Window Always On Top",
        "GroundTruth": [
            "java.lang.Boolean.booleanValue()"
        ],
        "APIClasses": [
            "java.lang.Boolean"
        ],
        "Source": "Tutorial Websites"
    },
    "6133": {
        "Query": "make List from varargs",
        "GroundTruth": [
            "java.util.Collections.addAll()"
        ],
        "APIClasses": [
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "6134": {
        "Query": "make Wrappable Label as JTextArea",
        "GroundTruth": [
            "javax.swing.JTextArea.setLineWrap()",
            "javax.swing.JTextArea.setWrapStyleWord()"
        ],
        "APIClasses": [
            "javax.swing.JTextArea",
            "javax.swing.JTextArea"
        ],
        "Source": "Tutorial Websites"
    },
    "6135": {
        "Query": "make Xor On int Arrays",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6136": {
        "Query": "make a deep copy of a 2D array",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6137": {
        "Query": "maximum value in two dimensional array",
        "GroundTruth": [
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6138": {
        "Query": "merge Arrays to ArrayList",
        "GroundTruth": [
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "6139": {
        "Query": "merge Two Object Arrays",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6140": {
        "Query": "merge Two String Arrays",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6141": {
        "Query": "merges two sorted halves of an array into a single sorted array.",
        "GroundTruth": [
            "java.util.ArrayList.get()",
            "java.lang.String.compareTo()",
            "java.util.ArrayList.set()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6142": {
        "Query": "meters To Pretty Distance",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6143": {
        "Query": "minimum value in two dimensional array",
        "GroundTruth": [
            "java.lang.Math.min()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6144": {
        "Query": "minus Minutes To Date",
        "GroundTruth": [
            "java.util.Calendar.getTime()",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date"
        ],
        "Source": "Tutorial Websites"
    },
    "6145": {
        "Query": "move Item to new index in a List",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.isEmpty()",
            "java.util.List.indexOf()",
            "java.util.List.remove()",
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "6146": {
        "Query": "move Object Down in a List",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.indexOf()",
            "java.util.List.set()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "6147": {
        "Query": "move Object Up in the List",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.indexOf()",
            "java.util.List.set()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "6148": {
        "Query": "ms -> LocalDateTime object.",
        "GroundTruth": [
            "java.time.LocalDateTime.ofInstant()",
            "java.time.Instant.ofEpochMilli()",
            "java.time.ZoneId.systemDefault()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime",
            "java.time.Instant",
            "java.time.ZoneId"
        ],
        "Source": "Tutorial Websites"
    },
    "6149": {
        "Query": "ms -> OffsetDateTime object.",
        "GroundTruth": [
            "java.time.OffsetDateTime.ofInstant()",
            "java.time.Instant.ofEpochMilli()",
            "java.time.ZoneId.systemDefault()"
        ],
        "APIClasses": [
            "java.time.OffsetDateTime",
            "java.time.Instant",
            "java.time.ZoneId"
        ],
        "Source": "Tutorial Websites"
    },
    "6150": {
        "Query": "ms -> ZonedDateTime object.",
        "GroundTruth": [
            "java.time.ZonedDateTime.ofInstant()",
            "java.time.Instant.ofEpochMilli()",
            "java.time.ZoneId.systemDefault()"
        ],
        "APIClasses": [
            "java.time.ZonedDateTime",
            "java.time.Instant",
            "java.time.ZoneId"
        ],
        "Source": "Tutorial Websites"
    },
    "6151": {
        "Query": "multi Step Bilinear Resize for BufferedImage",
        "GroundTruth": [
            "java.awt.image.BufferedImage.setRGB()",
            "java.awt.image.Raster.getDataBuffer()"
        ],
        "APIClasses": [
            "java.awt.image.BufferedImage",
            "java.awt.image.Raster"
        ],
        "Source": "Tutorial Websites"
    },
    "6152": {
        "Query": "multiply two double via BigDecimal",
        "GroundTruth": [
            "java.lang.Double.toString()",
            "java.math.BigInteger.multiply()",
            "java.math.BigDecimal.multiply()",
            "java.math.BigInteger.doubleValue()",
            "java.math.BigDecimal.doubleValue()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "6153": {
        "Query": "nearest Power Of Two",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.ceil()",
            "java.lang.Math.log()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6154": {
        "Query": "new Date Time Format",
        "GroundTruth": [
            "java.util.Calendar.Builder.setTimeZone()",
            "java.util.Calendar.setTimeZone()",
            "java.util.GregorianCalendar.setTimeZone()",
            "java.util.TimeZone.getTimeZone()"
        ],
        "APIClasses": [
            "java.util.Calendar.Builder",
            "java.util.Calendar",
            "java.util.GregorianCalendar",
            "java.util.TimeZone"
        ],
        "Source": "Tutorial Websites"
    },
    "6155": {
        "Query": "new Marshaller for JAXB",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.createMarshaller()",
            "javax.xml.bind.JAXBContext.newInstance()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext"
        ],
        "Source": "Tutorial Websites"
    },
    "6156": {
        "Query": "new Multi dimensional Array",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "6157": {
        "Query": "new Scheduled Thread Pool Executor",
        "GroundTruth": [
            "java.util.concurrent.Executors.defaultThreadFactory()",
            "java.util.concurrent.ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy()",
            "java.util.concurrent.ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy()"
        ],
        "APIClasses": [
            "java.util.concurrent.Executors",
            "java.util.concurrent.ScheduledThreadPoolExecutor",
            "java.util.concurrent.ScheduledThreadPoolExecutor"
        ],
        "Source": "Tutorial Websites"
    },
    "6158": {
        "Query": "now Utc as LocalDateTime",
        "GroundTruth": [
            "java.time.LocalDateTime.now()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime"
        ],
        "Source": "Tutorial Websites"
    },
    "6159": {
        "Query": "number Of Days Between Calendar",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "6160": {
        "Query": "open Audio Sound Line",
        "GroundTruth": [
            "javax.sound.sampled.Line.isOpen()",
            "javax.sound.sampled.Line.open()"
        ],
        "APIClasses": [
            "javax.sound.sampled.Line"
        ],
        "Source": "Tutorial Websites"
    },
    "6161": {
        "Query": "open File With Desktop App",
        "GroundTruth": [
            "java.awt.Desktop.isDesktopSupported()",
            "java.awt.Desktop.getDesktop()",
            "java.awt.Desktop.open()"
        ],
        "APIClasses": [
            "java.awt.Desktop"
        ],
        "Source": "Tutorial Websites"
    },
    "6162": {
        "Query": "open Url In Browser on Windows",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()"
        ],
        "APIClasses": [
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "6163": {
        "Query": "opengl Draw a torus, using a helix as the guiding point.",
        "GroundTruth": [
            "java.lang.Math.sin()",
            "java.lang.Math.cos()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6164": {
        "Query": "opengl Draws a filled 2D circle centered on the specified point and contained in the XY plane (z=0).",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6165": {
        "Query": "opengl Draws the outline of a 2D circle centered on the specified point and contained in the XY plane (z=0).",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6166": {
        "Query": "opengl Draws the outline of a 2D inclined ellipse centered on the specified point and contained in the XY plane (z=0).",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6167": {
        "Query": "opengl Draws the outline of a 2D inclined elliptical arc starting at \"angle\" and extending to angle + sweep, centered on the specified point, and contained in the XY plane (z=0).",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6168": {
        "Query": "opengl Method to draw a sphere in OpenGL.",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6169": {
        "Query": "opengl draw a circle outline on the x/y plane, located at the given z position.",
        "GroundTruth": [
            "java.lang.Math.toRadians()",
            "java.lang.Math.cos()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6170": {
        "Query": "opengl to draw a sphere in OpenGL.",
        "GroundTruth": [
            "java.lang.Math.sin()",
            "java.lang.Math.cos()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6171": {
        "Query": "orders three entries of an ArrayList at their specified indices assumes left <= mid <= right",
        "GroundTruth": [
            "java.util.ArrayList.get()",
            "java.lang.String.compareTo()",
            "java.util.Collections.swap()",
            "java.util.ArrayList.set()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.lang.String",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "6172": {
        "Query": "org.w3c.dom.Document to XML String",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.transform()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6173": {
        "Query": "output XML by indent via transformer",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "6174": {
        "Query": "output and transform XML data in a file",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()",
            "javax.xml.transform.Transformer.transform()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "6175": {
        "Query": "pack Raw byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.AutoCloseable.close()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.AutoCloseable"
        ],
        "Source": "Tutorial Websites"
    },
    "6176": {
        "Query": "pad byte array from Left",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6177": {
        "Query": "pad byte array from Right",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6178": {
        "Query": "parent Path from Path String",
        "GroundTruth": [
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6179": {
        "Query": "parent Window To Front",
        "GroundTruth": [
            "java.awt.Component.getParent()",
            "java.awt.Window.toFront()",
            "java.awt.MenuComponent.getParent()",
            "java.awt.PopupMenu.getParent()",
            "java.awt.image.Raster.getParent()"
        ],
        "APIClasses": [
            "java.awt.Component",
            "java.awt.Window",
            "java.awt.MenuComponent",
            "java.awt.PopupMenu",
            "java.awt.image.Raster"
        ],
        "Source": "Tutorial Websites"
    },
    "6180": {
        "Query": "parse Camel Case with regex",
        "GroundTruth": [
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6181": {
        "Query": "parse Date by format yyyy-MM-dd'T'HH:mm:ss.SSS",
        "GroundTruth": [
            "java.util.Locale.LanguageRange.parse()",
            "java.util.Date.parse()",
            "java.util.logging.Level.parse()"
        ],
        "APIClasses": [
            "java.util.Locale.LanguageRange",
            "java.util.Date",
            "java.util.logging.Level"
        ],
        "Source": "Tutorial Websites"
    },
    "6182": {
        "Query": "parse File and return XML Document",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "6183": {
        "Query": "parse InputStream to Document",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "6184": {
        "Query": "parse RFC in format EEE, dd MMM yyyy HH:mm:ss 'GMT'",
        "GroundTruth": [
            "java.util.Locale.LanguageRange.parse()",
            "java.util.Date.parse()",
            "java.util.logging.Level.parse()"
        ],
        "APIClasses": [
            "java.util.Locale.LanguageRange",
            "java.util.Date",
            "java.util.logging.Level"
        ],
        "Source": "Tutorial Websites"
    },
    "6185": {
        "Query": "parse String By Bytes and encoding",
        "GroundTruth": [
            "java.lang.String.getBytes()",
            "javax.sound.sampled.AudioFormat.Encoding.equals()",
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.sound.sampled.AudioFormat.Encoding",
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6186": {
        "Query": "parse String To Double",
        "GroundTruth": [
            "java.lang.String.replaceAll()",
            "java.lang.Double.valueOf()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "6187": {
        "Query": "parse To Big Decimal",
        "GroundTruth": [
            "java.math.BigDecimal.valueOf()",
            "java.lang.Double.valueOf()"
        ],
        "APIClasses": [
            "java.math.BigDecimal",
            "java.lang.Double"
        ],
        "Source": "Tutorial Websites"
    },
    "6188": {
        "Query": "parse XML from InputStream into DOM Document",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "6189": {
        "Query": "parse host And Port via InetSocketAddress",
        "GroundTruth": [
            "java.lang.String.split()",
            "java.net.InetAddress.getByName()",
            "java.lang.Integer.parseInt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.net.InetAddress",
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "6190": {
        "Query": "parse string in format yyyy-MM-dd HH:mm:ss to LocalDateTime",
        "GroundTruth": [
            "java.time.Year.length()",
            "java.time.Month.length()",
            "java.time.LocalDateTime.parse()"
        ],
        "APIClasses": [
            "java.time.Year",
            "java.time.Month",
            "java.time.LocalDateTime"
        ],
        "Source": "Tutorial Websites"
    },
    "6191": {
        "Query": "parse string in format yyyy-MM-dd-H to LocalDateTime",
        "GroundTruth": [
            "java.time.LocalDateTime.parse()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime"
        ],
        "Source": "Tutorial Websites"
    },
    "6192": {
        "Query": "parse the IP address string as a byte array If the IP address is IPv4 address, the byte array length is 4 If the IP address is IPv6 address, the byte array length is 16 If the host is not an IP address string, will return null;",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.charAt()",
            "java.lang.String.length()",
            "java.lang.String.substring()",
            "java.lang.Character.digit()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "6193": {
        "Query": "parses string exclusively in this format \"dd/mm/yyyy HH:mm\" to LocalDateTime",
        "GroundTruth": [
            "java.time.LocalDateTime.parse()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime"
        ],
        "Source": "Tutorial Websites"
    },
    "6194": {
        "Query": "partition a Collection by size",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.ArrayList.addAll()",
            "java.util.Objects.isNull()",
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.ArrayList",
            "java.util.Objects",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "6195": {
        "Query": "pdf read with apache pdfbox",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.split()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6196": {
        "Query": "permitted security auth Subject",
        "GroundTruth": [
            "javax.security.auth.Subject.doAsPrivileged()"
        ],
        "APIClasses": [
            "javax.security.auth.Subject"
        ],
        "Source": "Tutorial Websites"
    },
    "6197": {
        "Query": "point In Polygon Or On Boundary",
        "GroundTruth": [
            "java.awt.geom.Line2D.linesIntersect()"
        ],
        "APIClasses": [
            "java.awt.geom.Line2D"
        ],
        "Source": "Tutorial Websites"
    },
    "6198": {
        "Query": "populate Double Array with random double value",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6199": {
        "Query": "populate String Array with random number",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Math.random()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Math",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6200": {
        "Query": "populate X509Certificate from a certificate file at the certificate File Path",
        "GroundTruth": [
            "java.security.cert.CertificateFactory.getInstance()",
            "java.security.cert.CertificateFactory.generateCertificate()"
        ],
        "APIClasses": [
            "java.security.cert.CertificateFactory",
            "java.security.cert.CertificateFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "6201": {
        "Query": "prepare Query via InitialContext",
        "GroundTruth": [
            "javax.sql.DataSource.getConnection()",
            "java.sql.Connection.prepareStatement()"
        ],
        "APIClasses": [
            "javax.sql.DataSource",
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "6202": {
        "Query": "pressed Control F7 with JavaFX",
        "GroundTruth": [
            "java.awt.event.InputEvent.isControlDown()"
        ],
        "APIClasses": [
            "java.awt.event.InputEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "6203": {
        "Query": "pretty Print XML Document via Transformer",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6204": {
        "Query": "print Annotations via Reflection",
        "GroundTruth": [
            "java.lang.String.format()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "6205": {
        "Query": "print Input Map for Swing JComponent",
        "GroundTruth": [
            "javax.swing.JComponent.getInputMap()",
            "javax.swing.InputMap.allKeys()",
            "javax.swing.InputMap.get()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "javax.swing.InputMap"
        ],
        "Source": "Tutorial Websites"
    },
    "6206": {
        "Query": "print JavaFX Node Tree",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6207": {
        "Query": "print Matrix To File",
        "GroundTruth": [
            "java.lang.String.toString()",
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6208": {
        "Query": "print Private Key Info",
        "GroundTruth": [
            "java.math.BigInteger.bitLength()",
            "java.lang.String.toString()",
            "java.security.interfaces.RSAPrivateKey.getPrivateExponent()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.lang.String",
            "java.security.interfaces.RSAPrivateKey"
        ],
        "Source": "Tutorial Websites"
    },
    "6209": {
        "Query": "print Public Key Info",
        "GroundTruth": [
            "java.math.BigInteger.bitLength()",
            "java.lang.String.toString()",
            "java.security.interfaces.RSAPublicKey.getPublicExponent()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.lang.String",
            "java.security.interfaces.RSAPublicKey"
        ],
        "Source": "Tutorial Websites"
    },
    "6210": {
        "Query": "print Result Set Header via ResultSetMetaData",
        "GroundTruth": [
            "java.sql.PreparedStatement.getMetaData()",
            "java.sql.Connection.getMetaData()",
            "java.sql.ResultSet.getMetaData()",
            "java.sql.ResultSetMetaData.getColumnCount()",
            "java.sql.ResultSetMetaData.getColumnLabel()"
        ],
        "APIClasses": [
            "java.sql.PreparedStatement",
            "java.sql.Connection",
            "java.sql.ResultSet",
            "java.sql.ResultSetMetaData"
        ],
        "Source": "Tutorial Websites"
    },
    "6211": {
        "Query": "print Sound Max Lines",
        "GroundTruth": [
            "javax.sound.sampled.Line.Info.getLineClass()",
            "javax.sound.sampled.ReverbType.getName()",
            "javax.sound.sampled.Port.Info.getName()",
            "javax.sound.sampled.Mixer.Info.getName()",
            "javax.sound.sampled.Mixer.getMaxLines()"
        ],
        "APIClasses": [
            "javax.sound.sampled.Line.Info",
            "javax.sound.sampled.ReverbType",
            "javax.sound.sampled.Port.Info",
            "javax.sound.sampled.Mixer.Info",
            "javax.sound.sampled.Mixer"
        ],
        "Source": "Tutorial Websites"
    },
    "6212": {
        "Query": "print Xml via Transformation",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()",
            "javax.xml.transform.Transformer.transform()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "6213": {
        "Query": "print Xml via Transformer",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()",
            "javax.xml.transform.Transformer.transform()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "6214": {
        "Query": "process On Swing Event Thread",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "javax.swing.SwingUtilities.invokeAndWait()",
            "javax.swing.SwingUtilities.invokeLater()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "6215": {
        "Query": "produces a double between 0 and 1 based on the given array x and the index that must be between (0 and x.length)",
        "GroundTruth": [
            "java.lang.Math.exp()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6216": {
        "Query": "prompts the user for a sentence and a string using Scanner",
        "GroundTruth": [
            "java.util.Scanner.nextLine()",
            "java.lang.String.replace()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6217": {
        "Query": "put to ConcurrentMap If Absent",
        "GroundTruth": [
            "java.util.Map.putIfAbsent()"
        ],
        "APIClasses": [
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "6218": {
        "Query": "quote XML String By Entity",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.length()",
            "java.lang.String.substring()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6219": {
        "Query": "rabbitmq Publish Subscribe Receive",
        "GroundTruth": [
            "java.lang.System.lineSeparator()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6220": {
        "Query": "rabbitmq with apache camel",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "6221": {
        "Query": "random Number In Range",
        "GroundTruth": [
            "java.util.Scanner.nextInt()",
            "java.util.PrimitiveIterator.OfInt.nextInt()",
            "java.util.Random.nextInt()",
            "java.util.concurrent.ThreadLocalRandom.nextInt()",
            "java.util.SplittableRandom.nextInt()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.util.PrimitiveIterator.OfInt",
            "java.util.Random",
            "java.util.concurrent.ThreadLocalRandom",
            "java.util.SplittableRandom"
        ],
        "Source": "Tutorial Websites"
    },
    "6222": {
        "Query": "random Number List by Stream",
        "GroundTruth": [
            "java.util.stream.Stream.generate()",
            "java.lang.Math.random()"
        ],
        "APIClasses": [
            "java.util.stream.Stream",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6223": {
        "Query": "randomize Collection and return a List",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.shuffle()",
            "java.util.Collection.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "6224": {
        "Query": "randomly permutes all entries in an ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.size()",
            "java.lang.Math.random()",
            "java.util.ArrayList.get()",
            "java.util.ArrayList.set()"
        ],
        "APIClasses": [
            "java.util.ArrayList",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6225": {
        "Query": "read File by file name and save to String",
        "GroundTruth": [
            "java.lang.System.getProperty()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6226": {
        "Query": "read Fixed String from DataInput",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6227": {
        "Query": "read Int Value from Console",
        "GroundTruth": [
            "java.util.Scanner.hasNextInt()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "6228": {
        "Query": "read Int and String from Console",
        "GroundTruth": [
            "java.lang.Integer.parseInt()",
            "java.io.BufferedReader.readLine()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.io.BufferedReader"
        ],
        "Source": "Tutorial Websites"
    },
    "6229": {
        "Query": "read Short Array from ByteBuffer",
        "GroundTruth": [
            "java.nio.ByteBuffer.getShort()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "6230": {
        "Query": "read String From Stream",
        "GroundTruth": [
            "java.io.BufferedReader.readLine()"
        ],
        "APIClasses": [
            "java.io.BufferedReader"
        ],
        "Source": "Tutorial Websites"
    },
    "6231": {
        "Query": "read String Line from Console",
        "GroundTruth": [
            "java.util.Scanner.nextLine()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.Scanner",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6232": {
        "Query": "read String Value from Console",
        "GroundTruth": [
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6233": {
        "Query": "read Sub XML Node Value",
        "GroundTruth": [
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6234": {
        "Query": "read XML Document from uri",
        "GroundTruth": [
            "org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance()",
            "org.w3c.dom.ls.DOMImplementationLS.createLSParser()",
            "org.w3c.dom.ls.LSParser.parseURI()"
        ],
        "APIClasses": [
            "org.w3c.dom.bootstrap.DOMImplementationRegistry",
            "org.w3c.dom.ls.DOMImplementationLS",
            "org.w3c.dom.ls.LSParser"
        ],
        "Source": "Tutorial Websites"
    },
    "6235": {
        "Query": "read XML Node from InputStream",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "org.w3c.dom.Document.getDocumentElement()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory",
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "6236": {
        "Query": "read XML and return a NodeList",
        "GroundTruth": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "org.w3c.dom.Document.getDocumentElement()"
        ],
        "APIClasses": [
            "javax.xml.parsers.DocumentBuilderFactory",
            "javax.xml.parsers.DocumentBuilderFactory",
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "6237": {
        "Query": "read file To String",
        "GroundTruth": [
            "java.io.File.length()",
            "java.nio.charset.Charset.forName()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.nio.charset.Charset"
        ],
        "Source": "Tutorial Websites"
    },
    "6238": {
        "Query": "receives a string as input parameter and normalizes it to lowercase, removes leading and trailing spaces and strips accents from the input string.",
        "GroundTruth": [
            "java.text.Normalizer.normalize()",
            "java.lang.String.trim()",
            "java.lang.String.toLowerCase()",
            "java.lang.Character.toLowerCase()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.text.Normalizer",
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "6239": {
        "Query": "recursively Get Files In Directory",
        "GroundTruth": [
            "java.io.File.listFiles()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "6240": {
        "Query": "redirect System Streams to JTextArea",
        "GroundTruth": [
            "java.lang.String.valueOf()",
            "java.lang.System.setOut()",
            "java.lang.System.setErr()",
            "javax.swing.SwingUtilities.invokeLater()",
            "java.awt.TextArea.append()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.System",
            "javax.swing.SwingUtilities",
            "java.awt.TextArea"
        ],
        "Source": "Tutorial Websites"
    },
    "6241": {
        "Query": "register Escape Key for JDialog",
        "GroundTruth": [
            "javax.swing.JComponent.registerKeyboardAction()",
            "javax.swing.KeyStroke.getKeyStroke()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "javax.swing.KeyStroke"
        ],
        "Source": "Tutorial Websites"
    },
    "6242": {
        "Query": "register Listener For JavaFX Stage Fullscreen",
        "GroundTruth": [
            "java.awt.event.WindowEvent.getWindow()"
        ],
        "APIClasses": [
            "java.awt.event.WindowEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "6243": {
        "Query": "register Listener For JavaFX Window Focus",
        "GroundTruth": [
            "java.awt.event.WindowEvent.getWindow()"
        ],
        "APIClasses": [
            "java.awt.event.WindowEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "6244": {
        "Query": "remove Accents using regex",
        "GroundTruth": [
            "java.text.Normalizer.normalize()",
            "java.util.regex.Matcher.replaceAll()"
        ],
        "APIClasses": [
            "java.text.Normalizer",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6245": {
        "Query": "remove All Rows from JTable",
        "GroundTruth": [
            "javax.swing.table.DefaultTableModel.removeRow()"
        ],
        "APIClasses": [
            "javax.swing.table.DefaultTableModel"
        ],
        "Source": "Tutorial Websites"
    },
    "6246": {
        "Query": "remove All XML Children",
        "GroundTruth": [
            "org.w3c.dom.Node.getChildNodes()",
            "org.w3c.dom.Node.removeChild()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "6247": {
        "Query": "remove All XML Children Without Header",
        "GroundTruth": [
            "org.w3c.dom.Node.getChildNodes()",
            "org.w3c.dom.Node.removeChild()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "6248": {
        "Query": "remove Anchor from URL",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6249": {
        "Query": "remove Bean Method Prefix",
        "GroundTruth": [
            "java.lang.String.startsWith()",
            "java.lang.String.replaceFirst()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6250": {
        "Query": "remove Border from JComponent",
        "GroundTruth": [
            "javax.swing.BorderFactory.createLineBorder()",
            "javax.swing.BorderFactory.createRaisedBevelBorder()",
            "javax.swing.BorderFactory.createLoweredBevelBorder()",
            "javax.swing.BorderFactory.createCompoundBorder()"
        ],
        "APIClasses": [
            "javax.swing.BorderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "6251": {
        "Query": "remove Carriage Return with regex",
        "GroundTruth": [
            "java.util.regex.Matcher.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6252": {
        "Query": "remove Classes from JavaFX Node",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6253": {
        "Query": "remove Cookie from HttpServletResponse",
        "GroundTruth": [
            "java.net.HttpCookie.setMaxAge()"
        ],
        "APIClasses": [
            "java.net.HttpCookie"
        ],
        "Source": "Tutorial Websites"
    },
    "6254": {
        "Query": "remove Cookies from HttpServletRequest",
        "GroundTruth": [
            "java.net.CookieStore.getCookies()",
            "java.net.HttpCookie.setMaxAge()"
        ],
        "APIClasses": [
            "java.net.CookieStore",
            "java.net.HttpCookie"
        ],
        "Source": "Tutorial Websites"
    },
    "6255": {
        "Query": "remove Duplication In Order in a List",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6256": {
        "Query": "remove Duplication in a List",
        "GroundTruth": [
            "java.util.Arrays.asList()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6257": {
        "Query": "remove End Zero by regex",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.group()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6258": {
        "Query": "remove Files From Folder",
        "GroundTruth": [
            "java.io.File.listFiles()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "6259": {
        "Query": "remove ISO Control Chars from String",
        "GroundTruth": [
            "java.lang.String.toCharArray()",
            "java.lang.Character.isISOControl()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "6260": {
        "Query": "remove Item From Array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Object.equals()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "6261": {
        "Query": "remove Leading And Trailing Spaces with regex",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6262": {
        "Query": "remove Leading Spaces with regex",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6263": {
        "Query": "remove Newlines Tabs And Spaces",
        "GroundTruth": [
            "java.lang.String.replaceAll()",
            "java.lang.StringBuilder.replace()",
            "java.lang.StringBuffer.replace()",
            "java.lang.String.replace()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6264": {
        "Query": "remove Node from XML Parent",
        "GroundTruth": [
            "org.w3c.dom.Node.getParentNode()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "6265": {
        "Query": "remove Nodes from XML Document",
        "GroundTruth": [
            "org.w3c.dom.Node.getParentNode()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "6266": {
        "Query": "remove Selected JTable Rows",
        "GroundTruth": [
            "javax.swing.JTable.getSelectedRows()",
            "javax.swing.JTable.setRowSelectionInterval()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "6267": {
        "Query": "remove Tab By Title",
        "GroundTruth": [
            "javax.swing.JTabbedPane.getTitleAt()",
            "java.lang.String.equals()",
            "javax.swing.JTabbedPane.removeTabAt()"
        ],
        "APIClasses": [
            "javax.swing.JTabbedPane",
            "java.lang.String",
            "javax.swing.JTabbedPane"
        ],
        "Source": "Tutorial Websites"
    },
    "6268": {
        "Query": "remove XML Invalid Chars",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.Character.charCount()",
            "java.lang.String.codePointAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "6269": {
        "Query": "remove sub components of container which matches regular expression",
        "GroundTruth": [
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6270": {
        "Query": "remove subString from a String in the middle",
        "GroundTruth": [
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6271": {
        "Query": "remove will remove the element from heap",
        "GroundTruth": [
            "java.lang.String.compareTo()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6272": {
        "Query": "removes all unicode characters that are outside the Basic multilingual plane (BMP)",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6273": {
        "Query": "repeat Asterisk by length and return a char array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6274": {
        "Query": "replace Letter from a String using Regex",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6275": {
        "Query": "replace Mark from HTML String",
        "GroundTruth": [
            "java.lang.String.trim()",
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6276": {
        "Query": "replace No ASCII using regex",
        "GroundTruth": [
            "java.util.regex.Matcher.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6277": {
        "Query": "replace Non XML Characters",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6278": {
        "Query": "replace Number using Regex",
        "GroundTruth": [
            "java.util.regex.Matcher.replaceAll()"
        ],
        "APIClasses": [
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6279": {
        "Query": "replace line to <Br>",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6280": {
        "Query": "replace the xml chars: & to &amp; < to &lt; > to &gt; \" to &#034; ' to &#039;",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6281": {
        "Query": "replace value in Array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.util.Arrays.fill()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6282": {
        "Query": "replaces all occurrences of the CR character with the LF character, except when the CR is immediately followed by a LF (CRLF sequences), in which case the CR is removed.",
        "GroundTruth": [
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.CharSequence.length()",
            "java.lang.String.length()",
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6283": {
        "Query": "request execution with the HttpClient fluent API apache http client",
        "GroundTruth": [
            "java.util.UUID.version()"
        ],
        "APIClasses": [
            "java.util.UUID"
        ],
        "Source": "Tutorial Websites"
    },
    "6284": {
        "Query": "require Feature XML Transformer",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.getFeature()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "6285": {
        "Query": "resize array and append array element",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.System.arraycopy()",
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.System",
            "java.lang.Object",
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "6286": {
        "Query": "resize array by new size and component type",
        "GroundTruth": [
            "java.lang.System.arraycopy()",
            "java.lang.Object.getClass()",
            "java.lang.reflect.Array.newInstance()"
        ],
        "APIClasses": [
            "java.lang.System",
            "java.lang.Object",
            "java.lang.reflect.Array"
        ],
        "Source": "Tutorial Websites"
    },
    "6287": {
        "Query": "resources as property values in apache jena",
        "GroundTruth": [
            "javax.annotation.processing.Filer.createResource()"
        ],
        "APIClasses": [
            "javax.annotation.processing.Filer"
        ],
        "Source": "Tutorial Websites"
    },
    "6288": {
        "Query": "restore JTree Expansion State",
        "GroundTruth": [
            "java.util.StringTokenizer.hasMoreTokens()",
            "java.lang.Integer.parseInt()",
            "javax.swing.JTree.expandRow()"
        ],
        "APIClasses": [
            "java.util.StringTokenizer",
            "java.lang.Integer",
            "javax.swing.JTree"
        ],
        "Source": "Tutorial Websites"
    },
    "6289": {
        "Query": "retrieve Last Modified From URL",
        "GroundTruth": [
            "java.net.URL.openConnection()"
        ],
        "APIClasses": [
            "java.net.URL"
        ],
        "Source": "Tutorial Websites"
    },
    "6290": {
        "Query": "retrieving a string from the system clipboard and for putting a string in the system clipboard",
        "GroundTruth": [
            "java.awt.datatransfer.Clipboard.setContents()",
            "java.awt.datatransfer.Clipboard.getData()"
        ],
        "APIClasses": [
            "java.awt.datatransfer.Clipboard"
        ],
        "Source": "Tutorial Websites"
    },
    "6291": {
        "Query": "return a Vantage Pro two-byte representation of temperature.",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6292": {
        "Query": "return if the given message is a MIDI meta tempo message",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getLength()",
            "javax.sound.midi.MidiMessage.getStatus()",
            "javax.sound.midi.MidiMessage.getMessage()",
            "javax.sound.midi.MidiEvent.getMessage()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.MidiEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "6293": {
        "Query": "return index Of an element in an array",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6294": {
        "Query": "return prime list equal or below n Please notice that element 0 is kept for 1 although 1 is not prime, this is preserved for usage in special occasions",
        "GroundTruth": [
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6295": {
        "Query": "return the attribute value of XML element.",
        "GroundTruth": [
            "org.w3c.dom.Element.getAttribute()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "6296": {
        "Query": "return the blue component of the pixel of the image in java representation than can be summed up with other components to get the summed RGB valued",
        "GroundTruth": [
            "java.awt.image.ColorModel.getBlue()"
        ],
        "APIClasses": [
            "java.awt.image.ColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "6297": {
        "Query": "return the first element from a list.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.List.get()",
            "java.util.Collection.isEmpty()",
            "java.util.Map.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List",
            "java.util.Collection",
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "6298": {
        "Query": "return the red component of the pixel of the image",
        "GroundTruth": [
            "java.awt.image.ColorModel.getRed()"
        ],
        "APIClasses": [
            "java.awt.image.ColorModel"
        ],
        "Source": "Tutorial Websites"
    },
    "6299": {
        "Query": "return true if any CJK characters appear in String s.",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Pattern"
        ],
        "Source": "Tutorial Websites"
    },
    "6300": {
        "Query": "return true if collection is not null and contains the items",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.contains()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection"
        ],
        "Source": "Tutorial Websites"
    },
    "6301": {
        "Query": "return true if substring started at 'start' is a XML entity reference.",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6302": {
        "Query": "return true if the passed message is Meta End Of MIDI Track",
        "GroundTruth": [
            "javax.sound.midi.MidiMessage.getLength()",
            "javax.sound.midi.MidiMessage.getStatus()",
            "javax.sound.midi.MidiMessage.getMessage()",
            "javax.sound.midi.MidiEvent.getMessage()"
        ],
        "APIClasses": [
            "javax.sound.midi.MidiMessage",
            "javax.sound.midi.MidiEvent"
        ],
        "Source": "Tutorial Websites"
    },
    "6303": {
        "Query": "returns a hexadecimal string representation of the color - eg \"AABBCC\" or \"DDAABBCC\" The DD in this case gives the opacity value",
        "GroundTruth": [
            "java.awt.Color.getRGB()",
            "java.lang.Integer.toHexString()",
            "java.lang.String.toUpperCase()"
        ],
        "APIClasses": [
            "java.awt.Color",
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6304": {
        "Query": "returns a nominal percentage (like 5.2%) as a fraction (0.052).",
        "GroundTruth": [
            "java.math.BigDecimal.divide()"
        ],
        "APIClasses": [
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "6305": {
        "Query": "returns a r g b a float array that openGL likes",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6306": {
        "Query": "returns a random date.",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.add()",
            "java.util.Random.nextInt()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "6307": {
        "Query": "returns a random email.",
        "GroundTruth": [
            "java.util.Random.nextInt()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "6308": {
        "Query": "returns a random word.",
        "GroundTruth": [
            "java.util.Random.nextInt()"
        ],
        "APIClasses": [
            "java.util.Random"
        ],
        "Source": "Tutorial Websites"
    },
    "6309": {
        "Query": "returns amount as a percentage of total.",
        "GroundTruth": [
            "java.math.BigInteger.divide()",
            "java.math.BigDecimal.divide()",
            "java.math.BigInteger.multiply()",
            "java.math.BigDecimal.multiply()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "6310": {
        "Query": "returns local name of this element if not null, otherwise returns the name of the XML node",
        "GroundTruth": [
            "org.w3c.dom.Node.getLocalName()"
        ],
        "APIClasses": [
            "org.w3c.dom.Node"
        ],
        "Source": "Tutorial Websites"
    },
    "6311": {
        "Query": "returns selected rows in JTable",
        "GroundTruth": [
            "javax.swing.JTable.getSelectedRows()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "6312": {
        "Query": "returns the angle between (x, y) and (origin X, origin Y).",
        "GroundTruth": [
            "java.lang.Math.atan()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6313": {
        "Query": "returns the ending point of \"path\"",
        "GroundTruth": [
            "java.awt.geom.Path2D.getCurrentPoint()"
        ],
        "APIClasses": [
            "java.awt.geom.Path2D"
        ],
        "Source": "Tutorial Websites"
    },
    "6314": {
        "Query": "returns the largest double value that is smaller than d = x * 10exp where x is rounded down to the closest integer.",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.floor()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6315": {
        "Query": "returns the maximum subarray (contiguous elements) in an array",
        "GroundTruth": [
            "java.util.Arrays.copyOfRange()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6316": {
        "Query": "returns the sql date",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTimeInMillis()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "6317": {
        "Query": "returns true if array a contains all elements of array b",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6318": {
        "Query": "returns true if array a contains any element of array b",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6319": {
        "Query": "returns true if the specified collection is null or empty",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collection.isEmpty()",
            "java.util.Map.isEmpty()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collection",
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "6320": {
        "Query": "returns true if the string contains exactly \"word\" via regex",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.matches()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6321": {
        "Query": "returns true if the string parameter is any of the following values: \"yes\", \"true\", \"on\", \"1\".",
        "GroundTruth": [
            "java.lang.String.isEmpty()",
            "java.lang.String.equalsIgnoreCase()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6322": {
        "Query": "reverse +,- sign BigDecimal.",
        "GroundTruth": [
            "java.math.BigInteger.multiply()",
            "java.math.BigDecimal.multiply()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "6323": {
        "Query": "reverse Array From To Position",
        "GroundTruth": [
            "java.lang.Math.ceil()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6324": {
        "Query": "reverse IP Subnet Mask Domain",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6325": {
        "Query": "reverse List of Integers",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.reverse()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "6326": {
        "Query": "reverse Map IP Address",
        "GroundTruth": [
            "java.lang.Integer.toHexString()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6327": {
        "Query": "rm Dir shell command",
        "GroundTruth": [
            "java.io.File.listFiles()",
            "java.io.File.getName()",
            "java.io.File.delete()"
        ],
        "APIClasses": [
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "6328": {
        "Query": "rotates the item in list",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.rotate()",
            "java.util.List.subList()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "6329": {
        "Query": "round BigDecimal Half Up To DP",
        "GroundTruth": [
            "java.math.BigDecimal.setScale()",
            "java.math.BigDecimal.valueOf()"
        ],
        "APIClasses": [
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "6330": {
        "Query": "round double to Two Decimal",
        "GroundTruth": [
            "java.lang.Double.valueOf()",
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6331": {
        "Query": "round double value via BigDecimal",
        "GroundTruth": [
            "java.lang.Double.toString()",
            "java.math.BigInteger.divide()",
            "java.math.BigDecimal.divide()",
            "java.math.BigInteger.doubleValue()",
            "java.math.BigDecimal.doubleValue()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "6332": {
        "Query": "round java.util.Date To Minutes",
        "GroundTruth": [
            "java.util.Calendar.getTime()",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.Date.getTime()",
            "java.util.Date.from()",
            "java.time.Instant.ofEpochMilli()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.zip.ZipEntry",
            "java.util.Date",
            "java.time.Instant"
        ],
        "Source": "Tutorial Websites"
    },
    "6333": {
        "Query": "run And Wait Thread in JavaFX Thread",
        "GroundTruth": [
            "java.lang.Runnable.run()",
            "java.util.concurrent.FutureTask.get()"
        ],
        "APIClasses": [
            "java.lang.Runnable",
            "java.util.concurrent.FutureTask"
        ],
        "Source": "Tutorial Websites"
    },
    "6334": {
        "Query": "run And Wait on JavaFX Thread",
        "GroundTruth": [
            "java.lang.Runnable.run()",
            "java.util.concurrent.FutureTask.get()"
        ],
        "APIClasses": [
            "java.lang.Runnable",
            "java.util.concurrent.FutureTask"
        ],
        "Source": "Tutorial Websites"
    },
    "6335": {
        "Query": "run Future Task Later",
        "GroundTruth": [
            "java.util.concurrent.ExecutorService.submit()"
        ],
        "APIClasses": [
            "java.util.concurrent.ExecutorService"
        ],
        "Source": "Tutorial Websites"
    },
    "6336": {
        "Query": "run GC and calculate used memory",
        "GroundTruth": [
            "java.lang.management.MemoryMXBean.gc()",
            "java.lang.Thread.yield()",
            "java.lang.Runtime.totalMemory()",
            "java.lang.Runtime.freeMemory()"
        ],
        "APIClasses": [
            "java.lang.management.MemoryMXBean",
            "java.lang.Thread",
            "java.lang.Runtime",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "6337": {
        "Query": "run JavaFX Action Later",
        "GroundTruth": [
            "java.lang.Runnable.run()"
        ],
        "APIClasses": [
            "java.lang.Runnable"
        ],
        "Source": "Tutorial Websites"
    },
    "6338": {
        "Query": "run On JavaFX Thread",
        "GroundTruth": [
            "java.util.function.Consumer.accept()"
        ],
        "APIClasses": [
            "java.util.function.Consumer"
        ],
        "Source": "Tutorial Websites"
    },
    "6339": {
        "Query": "run On Swing Thread",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "javax.swing.SwingUtilities.invokeLater()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "6340": {
        "Query": "run On Swing Thread Later",
        "GroundTruth": [
            "javax.swing.SwingUtilities.invokeLater()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities"
        ],
        "Source": "Tutorial Websites"
    },
    "6341": {
        "Query": "run Query and get ResultSet",
        "GroundTruth": [
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.executeQuery()"
        ],
        "APIClasses": [
            "java.sql.Connection",
            "java.sql.Statement"
        ],
        "Source": "Tutorial Websites"
    },
    "6342": {
        "Query": "run Safe thread in JavaFX",
        "GroundTruth": [
            "java.util.Objects.requireNonNull()",
            "java.lang.Runnable.run()"
        ],
        "APIClasses": [
            "java.util.Objects",
            "java.lang.Runnable"
        ],
        "Source": "Tutorial Websites"
    },
    "6343": {
        "Query": "safe Contains Ignore Case",
        "GroundTruth": [
            "java.lang.String.toLowerCase()",
            "java.lang.Character.toLowerCase()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "6344": {
        "Query": "safe Swing Thread run",
        "GroundTruth": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "java.lang.Runnable.run()",
            "javax.swing.SwingUtilities.invokeLater()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.lang.Runnable"
        ],
        "Source": "Tutorial Websites"
    },
    "6345": {
        "Query": "save Audio Bytes To File",
        "GroundTruth": [
            "javax.sound.sampled.AudioFormat.getFrameSize()",
            "javax.sound.sampled.AudioSystem.write()"
        ],
        "APIClasses": [
            "javax.sound.sampled.AudioFormat",
            "javax.sound.sampled.AudioSystem"
        ],
        "Source": "Tutorial Websites"
    },
    "6346": {
        "Query": "save BufferedImage As Png",
        "GroundTruth": [
            "javax.imageio.ImageIO.write()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "6347": {
        "Query": "save Document with pretty print Transform",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "6348": {
        "Query": "save File by creating new file and its parent folders",
        "GroundTruth": [
            "java.io.File.mkdirs()",
            "java.io.File.createNewFile()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.File"
        ],
        "Source": "Tutorial Websites"
    },
    "6349": {
        "Query": "save XML Content to a file",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "6350": {
        "Query": "save XML Document to a File",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()",
            "javax.xml.transform.Transformer.transform()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer"
        ],
        "Source": "Tutorial Websites"
    },
    "6351": {
        "Query": "scale To Paper for print",
        "GroundTruth": [
            "java.awt.print.Paper.getImageableWidth()",
            "java.awt.print.Paper.getImageableHeight()",
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.awt.print.Paper",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6352": {
        "Query": "scroll JTable Cell To Visible",
        "GroundTruth": [
            "javax.swing.JTable.getCellRect()",
            "javax.swing.JViewport.getViewPosition()"
        ],
        "APIClasses": [
            "javax.swing.JTable",
            "javax.swing.JViewport"
        ],
        "Source": "Tutorial Websites"
    },
    "6353": {
        "Query": "scroll JTable by row",
        "GroundTruth": [
            "javax.swing.JTable.getCellRect()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "6354": {
        "Query": "scroll To Position in JTable",
        "GroundTruth": [
            "javax.swing.JTable.getCellRect()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "6355": {
        "Query": "search Dir by file name",
        "GroundTruth": [
            "java.io.File.listFiles()",
            "java.io.File.getPath()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6356": {
        "Query": "search For Common String between two set",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6357": {
        "Query": "search Method By Name from Method List",
        "GroundTruth": [
            "java.lang.reflect.Method.getName()",
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.reflect.Method",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6358": {
        "Query": "select And Scroll To JTable Position",
        "GroundTruth": [
            "javax.swing.JTable.getCellRect()"
        ],
        "APIClasses": [
            "javax.swing.JTable"
        ],
        "Source": "Tutorial Websites"
    },
    "6359": {
        "Query": "select Nodes from XML String by XPath expression",
        "GroundTruth": [
            "javax.xml.xpath.XPathFactory.newInstance()",
            "javax.xml.xpath.XPathFactory.newXPath()",
            "javax.xml.xpath.XPath.evaluate()"
        ],
        "APIClasses": [
            "javax.xml.xpath.XPathFactory",
            "javax.xml.xpath.XPath"
        ],
        "Source": "Tutorial Websites"
    },
    "6360": {
        "Query": "select Single Node from XML String using XPath expression",
        "GroundTruth": [
            "javax.xml.xpath.XPathFactory.newInstance()",
            "javax.xml.xpath.XPathFactory.newXPath()",
            "javax.xml.xpath.XPath.evaluate()"
        ],
        "APIClasses": [
            "javax.xml.xpath.XPathFactory",
            "javax.xml.xpath.XPath"
        ],
        "Source": "Tutorial Websites"
    },
    "6361": {
        "Query": "select sort int array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.util.Collections.swap()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "6362": {
        "Query": "send Email File Byte",
        "GroundTruth": [
            "java.util.logging.Logger.info()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "6363": {
        "Query": "send Email via Message",
        "GroundTruth": [
            "java.security.cert.X509CertSelector.setSubject()"
        ],
        "APIClasses": [
            "java.security.cert.X509CertSelector"
        ],
        "Source": "Tutorial Websites"
    },
    "6364": {
        "Query": "sends a message to specified Twitter-er from specified account in twitter",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6365": {
        "Query": "serialize to XML Document",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.setOutputProperty()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6366": {
        "Query": "servlet get Cookie Value",
        "GroundTruth": [
            "java.net.CookieStore.getCookies()"
        ],
        "APIClasses": [
            "java.net.CookieStore"
        ],
        "Source": "Tutorial Websites"
    },
    "6367": {
        "Query": "servlet get User Name from Cookie",
        "GroundTruth": [
            "java.net.CookieStore.getCookies()"
        ],
        "APIClasses": [
            "java.net.CookieStore"
        ],
        "Source": "Tutorial Websites"
    },
    "6368": {
        "Query": "servlet is User Logged In via Cookie",
        "GroundTruth": [
            "java.net.CookieStore.getCookies()"
        ],
        "APIClasses": [
            "java.net.CookieStore"
        ],
        "Source": "Tutorial Websites"
    },
    "6369": {
        "Query": "set Border for JComponent",
        "GroundTruth": [
            "javax.swing.BorderFactory.createLineBorder()",
            "javax.swing.BorderFactory.createRaisedBevelBorder()",
            "javax.swing.BorderFactory.createLoweredBevelBorder()",
            "javax.swing.BorderFactory.createCompoundBorder()"
        ],
        "APIClasses": [
            "javax.swing.BorderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "6370": {
        "Query": "set Button Key Stroke",
        "GroundTruth": [
            "javax.swing.JComponent.getInputMap()",
            "javax.swing.InputMap.put()",
            "javax.swing.ActionMap.put()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "javax.swing.InputMap",
            "javax.swing.ActionMap"
        ],
        "Source": "Tutorial Websites"
    },
    "6371": {
        "Query": "set Cancel Button for JRootPane",
        "GroundTruth": [
            "javax.swing.JComponent.getInputMap()",
            "javax.swing.KeyStroke.getKeyStroke()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "javax.swing.KeyStroke"
        ],
        "Source": "Tutorial Websites"
    },
    "6372": {
        "Query": "set Connection Auto Commit",
        "GroundTruth": [
            "java.sql.Connection.getAutoCommit()",
            "java.sql.Connection.setAutoCommit()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "6373": {
        "Query": "set Cookie in HttpServletResponse",
        "GroundTruth": [
            "java.net.HttpCookie.setMaxAge()"
        ],
        "APIClasses": [
            "java.net.HttpCookie"
        ],
        "Source": "Tutorial Websites"
    },
    "6374": {
        "Query": "set Cookie to HttpServletResponse",
        "GroundTruth": [
            "java.net.HttpCookie.setDomain()",
            "java.net.HttpCookie.setPath()",
            "java.net.HttpCookie.setMaxAge()"
        ],
        "APIClasses": [
            "java.net.HttpCookie",
            "java.net.HttpCookie",
            "java.net.HttpCookie"
        ],
        "Source": "Tutorial Websites"
    },
    "6375": {
        "Query": "set Date Format to JavaFX Table Column",
        "GroundTruth": [
            "java.text.DateFormat.getDateInstance()",
            "java.text.Format.format()"
        ],
        "APIClasses": [
            "java.text.DateFormat",
            "java.text.Format"
        ],
        "Source": "Tutorial Websites"
    },
    "6376": {
        "Query": "set Date In JavaFX Date Picker",
        "GroundTruth": [
            "java.util.Date.toInstant()",
            "java.time.ZoneId.systemDefault()"
        ],
        "APIClasses": [
            "java.util.Date",
            "java.time.ZoneId"
        ],
        "Source": "Tutorial Websites"
    },
    "6377": {
        "Query": "set Default Button for JRootPane",
        "GroundTruth": [
            "javax.swing.JRootPane.setDefaultButton()"
        ],
        "APIClasses": [
            "javax.swing.JRootPane"
        ],
        "Source": "Tutorial Websites"
    },
    "6378": {
        "Query": "set End Of Date",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "6379": {
        "Query": "set End Of Month",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getActualMaximum()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "6380": {
        "Query": "set Field by name on Object",
        "GroundTruth": [
            "java.lang.Object.getClass()",
            "java.lang.Class.getDeclaredField()",
            "java.lang.reflect.AccessibleObject.isAccessible()",
            "java.lang.reflect.AccessibleObject.setAccessible()",
            "java.lang.reflect.Field.set()"
        ],
        "APIClasses": [
            "java.lang.Object",
            "java.lang.Class",
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Field"
        ],
        "Source": "Tutorial Websites"
    },
    "6381": {
        "Query": "set Font For AWT Component",
        "GroundTruth": [
            "java.util.Locale.getDefault()",
            "java.lang.String.toString()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.util.Locale",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6382": {
        "Query": "set Frame To Screen Center",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getScreenSize()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit"
        ],
        "Source": "Tutorial Websites"
    },
    "6383": {
        "Query": "set Graphics2D Color Render Default",
        "GroundTruth": [
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "6384": {
        "Query": "set Graphics2D Color Render Quality",
        "GroundTruth": [
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "6385": {
        "Query": "set Graphics2D Color Render Speed",
        "GroundTruth": [
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "6386": {
        "Query": "set Graphics2D Render Default",
        "GroundTruth": [
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "6387": {
        "Query": "set Graphics2D Render Quality",
        "GroundTruth": [
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "6388": {
        "Query": "set Graphics2D Render Speed",
        "GroundTruth": [
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "6389": {
        "Query": "set Int to Database",
        "GroundTruth": [
            "java.sql.Connection.prepareStatement()",
            "java.sql.Connection.close()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "6390": {
        "Query": "set Intersection between HashSet",
        "GroundTruth": [
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6391": {
        "Query": "set JComponent Maximum Height",
        "GroundTruth": [
            "java.awt.Component.setMaximumSize()",
            "java.awt.Component.getMaximumSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "6392": {
        "Query": "set JComponent Maximum Width",
        "GroundTruth": [
            "java.awt.Component.setMaximumSize()",
            "java.awt.Component.getMaximumSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "6393": {
        "Query": "set JComponent Minimum Height",
        "GroundTruth": [
            "java.awt.Component.setMinimumSize()",
            "java.awt.Component.getMinimumSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "6394": {
        "Query": "set JComponent Minimum Width",
        "GroundTruth": [
            "java.awt.Component.setMinimumSize()",
            "java.awt.Component.getMinimumSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "6395": {
        "Query": "set JComponent Preferred Height",
        "GroundTruth": [
            "java.awt.Component.setPreferredSize()",
            "java.awt.Component.getPreferredSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "6396": {
        "Query": "set JComponent Preferred Width",
        "GroundTruth": [
            "java.awt.Component.setPreferredSize()",
            "java.awt.Component.getPreferredSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "6397": {
        "Query": "set JSF Value Binding",
        "GroundTruth": [
            "java.lang.String.indexOf()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6398": {
        "Query": "set JSplitPane Resize Weight",
        "GroundTruth": [
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "6399": {
        "Query": "set JTable Column Width",
        "GroundTruth": [
            "javax.swing.table.TableColumn.getPreferredWidth()",
            "javax.swing.table.TableColumn.setPreferredWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "6400": {
        "Query": "set JTable Columns Percentage",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setPreferredWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "6401": {
        "Query": "set JTable Columns Width",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setPreferredWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "6402": {
        "Query": "set JTable Single Column Width",
        "GroundTruth": [
            "javax.swing.table.TableColumn.setPreferredWidth()"
        ],
        "APIClasses": [
            "javax.swing.table.TableColumn"
        ],
        "Source": "Tutorial Websites"
    },
    "6403": {
        "Query": "set JViewport View Port Position",
        "GroundTruth": [
            "javax.swing.JViewport.getViewPosition()"
        ],
        "APIClasses": [
            "javax.swing.JViewport"
        ],
        "Source": "Tutorial Websites"
    },
    "6404": {
        "Query": "set Java 3D Appearance",
        "GroundTruth": [
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.nextElement()"
        ],
        "APIClasses": [
            "java.util.Enumeration"
        ],
        "Source": "Tutorial Websites"
    },
    "6405": {
        "Query": "set Multiplication for string set",
        "GroundTruth": [
            "java.util.Set.add()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "6406": {
        "Query": "set Next Focusable JComponent",
        "GroundTruth": [
            "javax.swing.JComponent.getInputMap()",
            "javax.swing.KeyStroke.getKeyStroke()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "javax.swing.KeyStroke"
        ],
        "Source": "Tutorial Websites"
    },
    "6407": {
        "Query": "set Or Remove XML Attribute",
        "GroundTruth": [
            "org.w3c.dom.Element.removeAttribute()",
            "org.w3c.dom.Element.setAttribute()"
        ],
        "APIClasses": [
            "org.w3c.dom.Element"
        ],
        "Source": "Tutorial Websites"
    },
    "6408": {
        "Query": "set Selected List item on JList",
        "GroundTruth": [
            "javax.swing.JList.setSelectedValue()"
        ],
        "APIClasses": [
            "javax.swing.JList"
        ],
        "Source": "Tutorial Websites"
    },
    "6409": {
        "Query": "set Start Of Date",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "6410": {
        "Query": "set Start Of Month",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "6411": {
        "Query": "set Swing JComponent Focus Order",
        "GroundTruth": [
            "javax.swing.JComponent.getInputMap()",
            "javax.swing.KeyStroke.getKeyStroke()"
        ],
        "APIClasses": [
            "javax.swing.JComponent",
            "javax.swing.KeyStroke"
        ],
        "Source": "Tutorial Websites"
    },
    "6412": {
        "Query": "set Taxes and Shipment charges in amazon payments",
        "GroundTruth": [
            "javax.xml.ws.http.HTTPException.getStatusCode()"
        ],
        "APIClasses": [
            "javax.xml.ws.http.HTTPException"
        ],
        "Source": "Tutorial Websites"
    },
    "6413": {
        "Query": "set Text Content to XML Node",
        "GroundTruth": [
            "org.w3c.dom.Document.createTextNode()"
        ],
        "APIClasses": [
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "6414": {
        "Query": "set Text To Clipboard",
        "GroundTruth": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()",
            "java.awt.datatransfer.Clipboard.setContents()"
        ],
        "APIClasses": [
            "java.awt.Toolkit",
            "java.awt.Toolkit",
            "java.awt.datatransfer.Clipboard"
        ],
        "Source": "Tutorial Websites"
    },
    "6415": {
        "Query": "set Timezone For Date and return LocalDateTime",
        "GroundTruth": [
            "java.time.LocalDateTime.ofInstant()",
            "java.util.Date.toInstant()",
            "java.time.ZoneId.systemDefault()"
        ],
        "APIClasses": [
            "java.time.LocalDateTime",
            "java.util.Date",
            "java.time.ZoneId"
        ],
        "Source": "Tutorial Websites"
    },
    "6416": {
        "Query": "set XML Text Content",
        "GroundTruth": [
            "javax.swing.text.AbstractDocument.Content.length()",
            "org.w3c.dom.Document.createTextNode()"
        ],
        "APIClasses": [
            "javax.swing.text.AbstractDocument.Content",
            "org.w3c.dom.Document"
        ],
        "Source": "Tutorial Websites"
    },
    "6417": {
        "Query": "set Xml Attribute Value",
        "GroundTruth": [
            "org.w3c.dom.NamedNodeMap.setNamedItem()"
        ],
        "APIClasses": [
            "org.w3c.dom.NamedNodeMap"
        ],
        "Source": "Tutorial Websites"
    },
    "6418": {
        "Query": "set Xml Gregorian Calendar",
        "GroundTruth": [
            "javax.xml.datatype.XMLGregorianCalendar.setYear()",
            "javax.xml.datatype.XMLGregorianCalendar.setMonth()",
            "javax.xml.datatype.XMLGregorianCalendar.setDay()"
        ],
        "APIClasses": [
            "javax.xml.datatype.XMLGregorianCalendar"
        ],
        "Source": "Tutorial Websites"
    },
    "6419": {
        "Query": "set the basic Item attributes,which are MerchantItemId,Title and UnitPriceAmount in amazon payments",
        "GroundTruth": [
            "javax.xml.ws.http.HTTPException.getStatusCode()"
        ],
        "APIClasses": [
            "javax.xml.ws.http.HTTPException"
        ],
        "Source": "Tutorial Websites"
    },
    "6420": {
        "Query": "sha1 digest operation class.",
        "GroundTruth": [
            "java.lang.String.getBytes()",
            "java.security.MessageDigest.digest()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.security.MessageDigest"
        ],
        "Source": "Tutorial Websites"
    },
    "6421": {
        "Query": "shell command by Runtime",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Process.getInputStream()",
            "java.lang.String.valueOf()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Process",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6422": {
        "Query": "shift Item in List",
        "GroundTruth": [
            "java.util.List.indexOf()",
            "java.util.List.size()",
            "java.util.List.remove()",
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "6423": {
        "Query": "short To Byte Array",
        "GroundTruth": [
            "java.nio.ByteBuffer.wrap()",
            "java.nio.ByteBuffer.putShort()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "6424": {
        "Query": "show Colors on BufferedImage",
        "GroundTruth": [
            "java.awt.Image.getHeight()",
            "java.awt.Image.getWidth()",
            "java.awt.image.BufferedImage.setRGB()"
        ],
        "APIClasses": [
            "java.awt.Image",
            "java.awt.image.BufferedImage"
        ],
        "Source": "Tutorial Websites"
    },
    "6425": {
        "Query": "show Confirm Message Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showOptionDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "6426": {
        "Query": "show Error Message Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "6427": {
        "Query": "show Exception Message via JOptionPane",
        "GroundTruth": [
            "java.lang.String.toString()",
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "java.lang.String",
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "6428": {
        "Query": "show Info In JavaFX Alert",
        "GroundTruth": [
            "java.util.ResourceBundle.getString()"
        ],
        "APIClasses": [
            "java.util.ResourceBundle"
        ],
        "Source": "Tutorial Websites"
    },
    "6429": {
        "Query": "show Information Message Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "6430": {
        "Query": "show Input Message Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showInputDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "6431": {
        "Query": "show JavaFX Exception Alert",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6432": {
        "Query": "show JavaFX Information Alert",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.util.Optional.empty()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Optional"
        ],
        "Source": "Tutorial Websites"
    },
    "6433": {
        "Query": "show JavaFX Warning Alert",
        "GroundTruth": [
            "java.lang.String.equals()",
            "java.util.Optional.empty()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Optional"
        ],
        "Source": "Tutorial Websites"
    },
    "6434": {
        "Query": "show Ok Cancel Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showConfirmDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "6435": {
        "Query": "show Open Picture Dialog",
        "GroundTruth": [
            "javax.swing.JFileChooser.showOpenDialog()"
        ],
        "APIClasses": [
            "javax.swing.JFileChooser"
        ],
        "Source": "Tutorial Websites"
    },
    "6436": {
        "Query": "show Warning Message Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showMessageDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "6437": {
        "Query": "show Yes No Cancel Message Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showOptionDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "6438": {
        "Query": "show Yes No Dialog",
        "GroundTruth": [
            "javax.swing.JOptionPane.showConfirmDialog()"
        ],
        "APIClasses": [
            "javax.swing.JOptionPane"
        ],
        "Source": "Tutorial Websites"
    },
    "6439": {
        "Query": "shuffle two dimensional array",
        "GroundTruth": [
            "java.lang.System.nanoTime()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6440": {
        "Query": "shut Down Executor Service And Await Termination",
        "GroundTruth": [
            "java.util.concurrent.ExecutorService.shutdown()",
            "java.util.concurrent.ExecutorService.awaitTermination()",
            "java.util.concurrent.ExecutorService.shutdownNow()"
        ],
        "APIClasses": [
            "java.util.concurrent.ExecutorService"
        ],
        "Source": "Tutorial Websites"
    },
    "6441": {
        "Query": "shut Down ExecutorService Synchronously",
        "GroundTruth": [
            "java.util.concurrent.ExecutorService.shutdown()",
            "java.util.concurrent.ExecutorService.isTerminated()",
            "java.util.concurrent.ExecutorService.awaitTermination()"
        ],
        "APIClasses": [
            "java.util.concurrent.ExecutorService"
        ],
        "Source": "Tutorial Websites"
    },
    "6442": {
        "Query": "shut down ExecutorService Quietly",
        "GroundTruth": [
            "java.util.concurrent.ExecutorService.isShutdown()",
            "java.util.concurrent.ExecutorService.shutdown()",
            "java.util.concurrent.ExecutorService.awaitTermination()",
            "java.util.concurrent.ExecutorService.shutdownNow()"
        ],
        "APIClasses": [
            "java.util.concurrent.ExecutorService"
        ],
        "Source": "Tutorial Websites"
    },
    "6443": {
        "Query": "sin Sum From haversine",
        "GroundTruth": [
            "java.lang.Math.sqrt()",
            "java.lang.StrictMath.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math",
            "java.lang.StrictMath"
        ],
        "Source": "Tutorial Websites"
    },
    "6444": {
        "Query": "skip ByteBuffer by offset",
        "GroundTruth": [
            "java.nio.Buffer.position()",
            "java.nio.channels.FileChannel.position()",
            "java.nio.channels.FileLock.position()",
            "java.nio.channels.SeekableByteChannel.position()"
        ],
        "APIClasses": [
            "java.nio.Buffer",
            "java.nio.channels.FileChannel",
            "java.nio.channels.FileLock",
            "java.nio.channels.SeekableByteChannel"
        ],
        "Source": "Tutorial Websites"
    },
    "6445": {
        "Query": "slice array by offset and length",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6446": {
        "Query": "snap End Of Work Day",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "6447": {
        "Query": "snap Forward Num Days",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.add()",
            "java.util.Calendar.set()"
        ],
        "APIClasses": [
            "java.util.Calendar"
        ],
        "Source": "Tutorial Websites"
    },
    "6448": {
        "Query": "sort List of Integer",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "6449": {
        "Query": "sort Map By Key",
        "GroundTruth": [
            "java.util.Map.entrySet()",
            "java.util.Collections.sort()"
        ],
        "APIClasses": [
            "java.util.Map",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "6450": {
        "Query": "split Array By Size",
        "GroundTruth": [
            "java.util.Arrays.copyOfRange()",
            "java.util.List.add()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.List"
        ],
        "Source": "Tutorial Websites"
    },
    "6451": {
        "Query": "split String For Tool Tip",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.substring()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6452": {
        "Query": "standard deviation on double type array",
        "GroundTruth": [
            "java.lang.Math.pow()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6453": {
        "Query": "stream From Object from ServletOutputStream via JAXB",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()",
            "javax.xml.bind.JAXBContext.createMarshaller()",
            "javax.xml.bind.Marshaller.setProperty()",
            "javax.xml.bind.Marshaller.marshal()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext",
            "javax.xml.bind.JAXBContext",
            "javax.xml.bind.Marshaller"
        ],
        "Source": "Tutorial Websites"
    },
    "6454": {
        "Query": "stream To Object for ServletInputStream via JAXB",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()",
            "javax.xml.bind.Unmarshaller.unmarshal()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext",
            "javax.xml.bind.Unmarshaller"
        ],
        "Source": "Tutorial Websites"
    },
    "6455": {
        "Query": "strech Swing Item To Component",
        "GroundTruth": [
            "java.awt.Component.getPreferredSize()"
        ],
        "APIClasses": [
            "java.awt.Component"
        ],
        "Source": "Tutorial Websites"
    },
    "6456": {
        "Query": "string Sid To Byte Array Sid",
        "GroundTruth": [
            "java.lang.Long.parseLong()"
        ],
        "APIClasses": [
            "java.lang.Long"
        ],
        "Source": "Tutorial Websites"
    },
    "6457": {
        "Query": "string To Character Array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.toCharArray()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6458": {
        "Query": "strip Time Info from Date",
        "GroundTruth": [
            "java.util.Calendar.setTime()",
            "java.util.Calendar.set()",
            "java.util.Calendar.getTime()",
            "java.util.Calendar.getInstance()",
            "java.util.Currency.getInstance()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.util.Currency"
        ],
        "Source": "Tutorial Websites"
    },
    "6459": {
        "Query": "sub array from byte Array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6460": {
        "Query": "subtract day from java.sql.Date via LocalDate",
        "GroundTruth": [
            "java.sql.Date.toLocalDate()",
            "java.time.LocalDate.minusDays()",
            "java.sql.Date.valueOf()"
        ],
        "APIClasses": [
            "java.sql.Date",
            "java.time.LocalDate"
        ],
        "Source": "Tutorial Websites"
    },
    "6461": {
        "Query": "subtract one BigDecimal from another BigDecimal",
        "GroundTruth": [
            "java.math.BigInteger.add()",
            "java.math.BigDecimal.add()",
            "java.math.BigInteger.subtract()",
            "java.math.BigDecimal.subtract()"
        ],
        "APIClasses": [
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "6462": {
        "Query": "subtract two double value via BigDecimal",
        "GroundTruth": [
            "java.lang.Double.toString()",
            "java.math.BigInteger.subtract()",
            "java.math.BigDecimal.subtract()",
            "java.math.BigInteger.doubleValue()",
            "java.math.BigDecimal.doubleValue()"
        ],
        "APIClasses": [
            "java.lang.Double",
            "java.math.BigInteger",
            "java.math.BigDecimal"
        ],
        "Source": "Tutorial Websites"
    },
    "6463": {
        "Query": "sum Int from Database",
        "GroundTruth": [
            "java.sql.Connection.prepareStatement()",
            "java.sql.Connection.close()"
        ],
        "APIClasses": [
            "java.sql.Connection"
        ],
        "Source": "Tutorial Websites"
    },
    "6464": {
        "Query": "sum Of Proper Divisors",
        "GroundTruth": [
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6465": {
        "Query": "swap two element in int array",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6466": {
        "Query": "swaps two entries of an ArrayList",
        "GroundTruth": [
            "java.util.ArrayList.get()",
            "java.util.ArrayList.set()"
        ],
        "APIClasses": [
            "java.util.ArrayList"
        ],
        "Source": "Tutorial Websites"
    },
    "6467": {
        "Query": "swing.ListModel last Index Of",
        "GroundTruth": [
            "java.lang.String.equals()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6468": {
        "Query": "sync Scrolling on JavaFX TableView",
        "GroundTruth": [
            "java.util.logging.Logger.log()"
        ],
        "APIClasses": [
            "java.util.logging.Logger"
        ],
        "Source": "Tutorial Websites"
    },
    "6469": {
        "Query": "take a character and return its hex equivalent",
        "GroundTruth": [
            "java.lang.Character.isLetterOrDigit()",
            "java.lang.Integer.toHexString()",
            "java.lang.String.toUpperCase()",
            "java.lang.Character.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.Character",
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6470": {
        "Query": "takes bytes of PrivateKey saved in database and converts back to PrivateKey.",
        "GroundTruth": [
            "java.security.KeyFactory.getInstance()",
            "java.security.KeyFactory.generatePrivate()"
        ],
        "APIClasses": [
            "java.security.KeyFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "6471": {
        "Query": "terminate Application via Thread",
        "GroundTruth": [
            "java.lang.Thread.getAllStackTraces()",
            "java.lang.ThreadGroup.interrupt()",
            "java.lang.Thread.interrupt()"
        ],
        "APIClasses": [
            "java.lang.Thread",
            "java.lang.ThreadGroup"
        ],
        "Source": "Tutorial Websites"
    },
    "6472": {
        "Query": "test Hash code With HashMap",
        "GroundTruth": [
            "java.lang.String.hashCode()",
            "java.util.Map.put()",
            "java.util.Map.size()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.util.Map"
        ],
        "Source": "Tutorial Websites"
    },
    "6473": {
        "Query": "tests if a string ends with any one of a collection of prefixes",
        "GroundTruth": [
            "java.lang.Iterable.iterator()",
            "java.lang.String.endsWith()"
        ],
        "APIClasses": [
            "java.lang.Iterable",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6474": {
        "Query": "tests if a string starts with any one of a collection of prefixes",
        "GroundTruth": [
            "java.lang.Iterable.iterator()",
            "java.lang.String.startsWith()"
        ],
        "APIClasses": [
            "java.lang.Iterable",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6475": {
        "Query": "text To Numeric Format IPv4",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.length()",
            "java.lang.String.charAt()",
            "java.lang.Character.digit()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "6476": {
        "Query": "the rate list Known Word occur in list Word.",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6477": {
        "Query": "thread Per Cpu Executor",
        "GroundTruth": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.availableProcessors()",
            "java.lang.Thread.setDaemon()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime",
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "6478": {
        "Query": "throw ball angle of 30 degrees at force of 80. Tell position of ball for next 10 seconds.",
        "GroundTruth": [
            "java.lang.Math.cos()",
            "java.lang.Math.toRadians()",
            "java.lang.Math.sin()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6479": {
        "Query": "to Big Endian Dword",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6480": {
        "Query": "to Big Endian Word",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6481": {
        "Query": "to Decimal Format String as 0.###",
        "GroundTruth": [
            "java.lang.String.format()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6482": {
        "Query": "to Excel Column Name",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6483": {
        "Query": "to Excel Column Number",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6484": {
        "Query": "to Little Endian Dword",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6485": {
        "Query": "to Little Endian Word",
        "GroundTruth": [
            "java.util.Arrays.toString()"
        ],
        "APIClasses": [
            "java.util.Arrays"
        ],
        "Source": "Tutorial Websites"
    },
    "6486": {
        "Query": "to Standard Date String in format yyyy-MM-dd HH:mm:ss",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.text.SimpleDateFormat.format()",
            "java.util.Calendar.getTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.text.SimpleDateFormat"
        ],
        "Source": "Tutorial Websites"
    },
    "6487": {
        "Query": "to String Of Modifiers",
        "GroundTruth": [
            "java.lang.String.isEmpty()",
            "java.lang.String.contains()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6488": {
        "Query": "to String Quat Java 3D",
        "GroundTruth": [
            "java.lang.Math.asin()",
            "java.lang.Math.atan2()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6489": {
        "Query": "to java time Duration",
        "GroundTruth": [
            "java.time.Duration.ofSeconds()"
        ],
        "APIClasses": [
            "java.time.Duration"
        ],
        "Source": "Tutorial Websites"
    },
    "6490": {
        "Query": "to java time Instant",
        "GroundTruth": [
            "java.time.Instant.ofEpochSecond()"
        ],
        "APIClasses": [
            "java.time.Instant"
        ],
        "Source": "Tutorial Websites"
    },
    "6491": {
        "Query": "total Length of list of ByteBuffer",
        "GroundTruth": [
            "java.nio.Buffer.remaining()"
        ],
        "APIClasses": [
            "java.nio.Buffer"
        ],
        "Source": "Tutorial Websites"
    },
    "6492": {
        "Query": "training the weka naive bayes classifier",
        "GroundTruth": [
            "java.awt.FileDialog.setFile()"
        ],
        "APIClasses": [
            "java.awt.FileDialog"
        ],
        "Source": "Tutorial Websites"
    },
    "6493": {
        "Query": "trains Cobweb incrementally on data obtained from the ArffLoader.",
        "GroundTruth": [
            "java.awt.FileDialog.setFile()"
        ],
        "APIClasses": [
            "java.awt.FileDialog"
        ],
        "Source": "Tutorial Websites"
    },
    "6494": {
        "Query": "trains NaiveBayes incrementally on data obtained from the ArffLoader",
        "GroundTruth": [
            "java.awt.FileDialog.setFile()"
        ],
        "APIClasses": [
            "java.awt.FileDialog"
        ],
        "Source": "Tutorial Websites"
    },
    "6495": {
        "Query": "transfer sparse format arff file to non-sparse format arff file",
        "GroundTruth": [
            "java.awt.FileDialog.setFile()"
        ],
        "APIClasses": [
            "java.awt.FileDialog"
        ],
        "Source": "Tutorial Websites"
    },
    "6496": {
        "Query": "transform Document To String",
        "GroundTruth": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.Transformer.transform()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.transform.TransformerFactory",
            "javax.xml.transform.Transformer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6497": {
        "Query": "transform String To Xml",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6498": {
        "Query": "transform Xml To String",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6499": {
        "Query": "transform the components in each pixel according to the transform tables to Java Micro Edition Image.",
        "GroundTruth": [
            "java.awt.Image.getWidth()",
            "java.awt.Image.getHeight()",
            "java.lang.Math.min()",
            "java.lang.Math.max()"
        ],
        "APIClasses": [
            "java.awt.Image",
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6500": {
        "Query": "translate Point To Circle Border",
        "GroundTruth": [
            "java.lang.Math.round()",
            "java.lang.Math.sqrt()"
        ],
        "APIClasses": [
            "java.lang.Math"
        ],
        "Source": "Tutorial Websites"
    },
    "6501": {
        "Query": "transpose two dimensional array",
        "GroundTruth": [
            "java.lang.reflect.Array.newInstance()",
            "java.lang.Object.getClass()"
        ],
        "APIClasses": [
            "java.lang.reflect.Array",
            "java.lang.Object"
        ],
        "Source": "Tutorial Websites"
    },
    "6502": {
        "Query": "trim All String element in an array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.String.trim()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6503": {
        "Query": "trim a string from Start",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.Character.isSpace()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "6504": {
        "Query": "trim string from both side",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.Character.isSpace()",
            "java.lang.String.charAt()",
            "java.lang.String.substring()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "6505": {
        "Query": "true if the given Component 's parent Window is currently active (focused).",
        "GroundTruth": [
            "javax.swing.SwingUtilities.getWindowAncestor()",
            "java.awt.Window.isFocused()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.awt.Window"
        ],
        "Source": "Tutorial Websites"
    },
    "6506": {
        "Query": "trust Manager For Key Store",
        "GroundTruth": [
            "javax.net.ssl.TrustManagerFactory.getInstance()",
            "javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()",
            "javax.net.ssl.TrustManagerFactory.getTrustManagers()"
        ],
        "APIClasses": [
            "javax.net.ssl.TrustManagerFactory",
            "javax.net.ssl.TrustManagerFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "6507": {
        "Query": "try Date Parse in dd/MMM/yyyy:hh:mm:ss Z format",
        "GroundTruth": [
            "java.util.Locale.LanguageRange.parse()",
            "java.util.Date.parse()",
            "java.util.logging.Level.parse()",
            "java.util.Date.getTime()"
        ],
        "APIClasses": [
            "java.util.Locale.LanguageRange",
            "java.util.Date",
            "java.util.logging.Level"
        ],
        "Source": "Tutorial Websites"
    },
    "6508": {
        "Query": "turn Off Graphics2D Anti Aliasing",
        "GroundTruth": [
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "6509": {
        "Query": "turn On Graphics2D Anti Alising",
        "GroundTruth": [
            "java.awt.Graphics2D.setRenderingHint()"
        ],
        "APIClasses": [
            "java.awt.Graphics2D"
        ],
        "Source": "Tutorial Websites"
    },
    "6510": {
        "Query": "twitter Creates a public user list.",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6511": {
        "Query": "twitter Get Home Timeline",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6512": {
        "Query": "twitter Uploads an image to Twipple with OAuth credentials specified in a properties file.",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6513": {
        "Query": "twitter Uploads an image to Twitpic with OAuth credentials specified in a properties file.",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6514": {
        "Query": "twitter Uploads an image to img.ly with OAuth credentials specified in a properties file.",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6515": {
        "Query": "twitter timeline Get Mentions",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6516": {
        "Query": "unEscape XML String by replace",
        "GroundTruth": [
            "java.lang.String.replaceAll()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6517": {
        "Query": "unbind Swing Action From Listener",
        "GroundTruth": [
            "javax.swing.Action.getValue()",
            "javax.swing.Action.removePropertyChangeListener()",
            "javax.swing.Action.putValue()"
        ],
        "APIClasses": [
            "javax.swing.Action"
        ],
        "Source": "Tutorial Websites"
    },
    "6518": {
        "Query": "underline Between Up Case",
        "GroundTruth": [
            "java.lang.String.replaceAll()",
            "java.lang.String.toLowerCase()",
            "java.lang.Character.toLowerCase()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "6519": {
        "Query": "union To Array List",
        "GroundTruth": [
            "java.util.Collection.size()",
            "java.util.Collections.addAll()"
        ],
        "APIClasses": [
            "java.util.Collection",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "6520": {
        "Query": "union To Hash Set",
        "GroundTruth": [
            "java.util.Arrays.asList()",
            "java.util.Collections.addAll()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.util.Collections"
        ],
        "Source": "Tutorial Websites"
    },
    "6521": {
        "Query": "union two Sets and return a new Set",
        "GroundTruth": [
            "java.util.Set.addAll()"
        ],
        "APIClasses": [
            "java.util.Set"
        ],
        "Source": "Tutorial Websites"
    },
    "6522": {
        "Query": "unmarshal generic method via JAXB",
        "GroundTruth": [
            "javax.xml.bind.JAXBContext.newInstance()"
        ],
        "APIClasses": [
            "javax.xml.bind.JAXBContext"
        ],
        "Source": "Tutorial Websites"
    },
    "6523": {
        "Query": "unpack Raw byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.Readable.read()",
            "java.lang.AutoCloseable.close()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.Readable",
            "java.lang.AutoCloseable"
        ],
        "Source": "Tutorial Websites"
    },
    "6524": {
        "Query": "update Swing Text Area in Thread",
        "GroundTruth": [
            "javax.swing.SwingUtilities.invokeLater()",
            "java.awt.TextArea.append()"
        ],
        "APIClasses": [
            "javax.swing.SwingUtilities",
            "java.awt.TextArea"
        ],
        "Source": "Tutorial Websites"
    },
    "6525": {
        "Query": "upper Case string and handle null value",
        "GroundTruth": [
            "java.lang.String.toUpperCase()",
            "java.lang.Character.toUpperCase()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.Character"
        ],
        "Source": "Tutorial Websites"
    },
    "6526": {
        "Query": "url Decode with URLDecoder",
        "GroundTruth": [
            "java.net.URLDecoder.decode()"
        ],
        "APIClasses": [
            "java.net.URLDecoder"
        ],
        "Source": "Tutorial Websites"
    },
    "6527": {
        "Query": "url Encode with URLEncoder",
        "GroundTruth": [
            "java.net.URLEncoder.encode()"
        ],
        "APIClasses": [
            "java.net.URLEncoder"
        ],
        "Source": "Tutorial Websites"
    },
    "6528": {
        "Query": "use Empty Border on JComponent",
        "GroundTruth": [
            "javax.swing.BorderFactory.createEmptyBorder()"
        ],
        "APIClasses": [
            "javax.swing.BorderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "6529": {
        "Query": "use ResponseHandler to simplify processing the HTTP response and releasing associated resources.",
        "GroundTruth": [
            "javax.xml.ws.http.HTTPException.getStatusCode()",
            "javax.swing.text.html.parser.DTD.getEntity()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.ws.http.HTTPException",
            "javax.swing.text.html.parser.DTD",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6530": {
        "Query": "use ResponseHandler to simplify the process of processing the HTTP response and releasing associated resources apache http client",
        "GroundTruth": [
            "javax.xml.ws.http.HTTPException.getStatusCode()",
            "javax.swing.text.html.parser.DTD.getEntity()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.ws.http.HTTPException",
            "javax.swing.text.html.parser.DTD",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6531": {
        "Query": "use Title Border on JComponent",
        "GroundTruth": [
            "javax.swing.BorderFactory.createTitledBorder()",
            "javax.swing.BorderFactory.createEmptyBorder()"
        ],
        "APIClasses": [
            "javax.swing.BorderFactory"
        ],
        "Source": "Tutorial Websites"
    },
    "6532": {
        "Query": "use Weka clusterers from Java",
        "GroundTruth": [
            "java.lang.System.exit()"
        ],
        "APIClasses": [
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6533": {
        "Query": "use a Or An",
        "GroundTruth": [
            "java.lang.String.contains()",
            "java.lang.StringBuilder.charAt()",
            "java.lang.StringBuffer.charAt()",
            "java.lang.CharSequence.charAt()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.lang.StringBuilder",
            "java.lang.StringBuffer",
            "java.lang.CharSequence"
        ],
        "Source": "Tutorial Websites"
    },
    "6534": {
        "Query": "use opera profile to set up Remote Web Driver",
        "GroundTruth": [
            "java.lang.Thread.sleep()"
        ],
        "APIClasses": [
            "java.lang.Thread"
        ],
        "Source": "Tutorial Websites"
    },
    "6535": {
        "Query": "use weka Attribute Filter",
        "GroundTruth": [
            "java.awt.FileDialog.setFile()"
        ],
        "APIClasses": [
            "java.awt.FileDialog"
        ],
        "Source": "Tutorial Websites"
    },
    "6536": {
        "Query": "use weka do Classification",
        "GroundTruth": [
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6537": {
        "Query": "use weka to do Attribute Selection",
        "GroundTruth": [
            "java.awt.FileDialog.setFile()"
        ],
        "APIClasses": [
            "java.awt.FileDialog"
        ],
        "Source": "Tutorial Websites"
    },
    "6538": {
        "Query": "use weka unsupervised Normalize",
        "GroundTruth": [
            "java.awt.FileDialog.setFile()"
        ],
        "APIClasses": [
            "java.awt.FileDialog"
        ],
        "Source": "Tutorial Websites"
    },
    "6539": {
        "Query": "used Memory from Runtime",
        "GroundTruth": [
            "java.lang.Runtime.totalMemory()",
            "java.lang.Runtime.freeMemory()"
        ],
        "APIClasses": [
            "java.lang.Runtime",
            "java.lang.Runtime"
        ],
        "Source": "Tutorial Websites"
    },
    "6540": {
        "Query": "utility to generate an int from an array of bytes in sync safe format.",
        "GroundTruth": [
            "java.lang.Integer.toHexString()"
        ],
        "APIClasses": [
            "java.lang.Integer"
        ],
        "Source": "Tutorial Websites"
    },
    "6541": {
        "Query": "validate Email value from JSF UIComponent",
        "GroundTruth": [
            "java.lang.String.lastIndexOf()",
            "java.lang.String.length()",
            "java.lang.String.indexOf()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6542": {
        "Query": "validate Is Annotation Type",
        "GroundTruth": [
            "java.util.Objects.requireNonNull()",
            "java.lang.Class.isAssignableFrom()"
        ],
        "APIClasses": [
            "java.util.Objects",
            "java.lang.Class"
        ],
        "Source": "Tutorial Websites"
    },
    "6543": {
        "Query": "validate input string as double value",
        "GroundTruth": [
            "java.util.regex.Pattern.compile()",
            "java.util.regex.Pattern.matcher()",
            "java.util.regex.Matcher.matches()"
        ],
        "APIClasses": [
            "java.util.regex.Pattern",
            "java.util.regex.Matcher"
        ],
        "Source": "Tutorial Websites"
    },
    "6544": {
        "Query": "wait For Console Input",
        "GroundTruth": [
            "java.util.Scanner.nextLine()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "6545": {
        "Query": "weka Index Instances string features using StringToWordVector filter",
        "GroundTruth": [
            "java.io.Reader.close()",
            "java.io.Writer.close()",
            "java.lang.System.currentTimeMillis()"
        ],
        "APIClasses": [
            "java.io.Reader",
            "java.io.Writer",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6546": {
        "Query": "weka Random Forest Classifier",
        "GroundTruth": [
            "javax.xml.soap.MimeHeaders.setHeader()",
            "java.lang.Integer.parseInt()",
            "java.lang.String.toString()"
        ],
        "APIClasses": [
            "javax.xml.soap.MimeHeaders",
            "java.lang.Integer",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6547": {
        "Query": "weka get attribute from Instance",
        "GroundTruth": [
            "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.attribute()"
        ],
        "APIClasses": [
            "javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder"
        ],
        "Source": "Tutorial Websites"
    },
    "6548": {
        "Query": "wrap String into ByteBuffer",
        "GroundTruth": [
            "java.lang.String.getBytes()",
            "java.nio.ByteBuffer.wrap()"
        ],
        "APIClasses": [
            "java.lang.String",
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "6549": {
        "Query": "write Buffered Image to a file as format",
        "GroundTruth": [
            "java.io.File.getParentFile()",
            "java.io.File.mkdirs()",
            "javax.imageio.ImageIO.write()"
        ],
        "APIClasses": [
            "java.io.File",
            "java.io.File",
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "6550": {
        "Query": "write Fixed String to DataOutput",
        "GroundTruth": [
            "java.lang.String.length()",
            "java.lang.String.charAt()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6551": {
        "Query": "write Input Stream To Output Stream",
        "GroundTruth": [
            "org.omg.CORBA.portable.InputStream.read()",
            "org.omg.CORBA.portable.OutputStream.write()",
            "java.io.InputStream.close()"
        ],
        "APIClasses": [
            "org.omg.CORBA.portable.InputStream",
            "org.omg.CORBA.portable.OutputStream",
            "java.io.InputStream"
        ],
        "Source": "Tutorial Websites"
    },
    "6552": {
        "Query": "write JavaFX Node To Image",
        "GroundTruth": [
            "javax.imageio.ImageIO.write()"
        ],
        "APIClasses": [
            "javax.imageio.ImageIO"
        ],
        "Source": "Tutorial Websites"
    },
    "6553": {
        "Query": "write Object to XML String as JavaBean",
        "GroundTruth": [
            "java.beans.Encoder.writeObject()"
        ],
        "APIClasses": [
            "java.beans.Encoder"
        ],
        "Source": "Tutorial Websites"
    },
    "6554": {
        "Query": "write Session Id To Cookie",
        "GroundTruth": [
            "java.net.HttpCookie.setMaxAge()",
            "java.net.CookieStore.getCookies()",
            "java.lang.String.equalsIgnoreCase()"
        ],
        "APIClasses": [
            "java.net.HttpCookie",
            "java.net.CookieStore",
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6555": {
        "Query": "write Session Id To New Cookie",
        "GroundTruth": [
            "java.net.HttpCookie.setMaxAge()"
        ],
        "APIClasses": [
            "java.net.HttpCookie"
        ],
        "Source": "Tutorial Websites"
    },
    "6556": {
        "Query": "write XML Document to console",
        "GroundTruth": [
            "org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance()",
            "org.w3c.dom.ls.DOMImplementationLS.createLSSerializer()"
        ],
        "APIClasses": [
            "org.w3c.dom.bootstrap.DOMImplementationRegistry",
            "org.w3c.dom.ls.DOMImplementationLS"
        ],
        "Source": "Tutorial Websites"
    },
    "6557": {
        "Query": "write XML Node To String",
        "GroundTruth": [
            "org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance()",
            "org.w3c.dom.ls.DOMImplementationLS.createLSSerializer()"
        ],
        "APIClasses": [
            "org.w3c.dom.bootstrap.DOMImplementationRegistry",
            "org.w3c.dom.ls.DOMImplementationLS"
        ],
        "Source": "Tutorial Websites"
    },
    "6558": {
        "Query": "write xml element start tag, data and end tag into XmlStreamWriter",
        "GroundTruth": [
            "javax.xml.stream.XMLStreamWriter.writeStartElement()",
            "javax.xml.stream.XMLStreamWriter.writeCharacters()",
            "javax.xml.stream.XMLStreamWriter.writeEndElement()"
        ],
        "APIClasses": [
            "javax.xml.stream.XMLStreamWriter",
            "javax.xml.stream.XMLStreamWriter",
            "javax.xml.stream.XMLStreamWriter"
        ],
        "Source": "Tutorial Websites"
    },
    "6559": {
        "Query": "writes data to a file using PrintWriter",
        "GroundTruth": [
            "java.util.Scanner.nextLine()"
        ],
        "APIClasses": [
            "java.util.Scanner"
        ],
        "Source": "Tutorial Websites"
    },
    "6560": {
        "Query": "writes the length of data as an 16 bit unsigned value, followed by the actual data.",
        "GroundTruth": [
            "java.nio.ByteBuffer.putShort()"
        ],
        "APIClasses": [
            "java.nio.ByteBuffer"
        ],
        "Source": "Tutorial Websites"
    },
    "6561": {
        "Query": "xml To Java Bean",
        "GroundTruth": [
            "java.lang.String.getBytes()"
        ],
        "APIClasses": [
            "java.lang.String"
        ],
        "Source": "Tutorial Websites"
    },
    "6562": {
        "Query": "xor two byte array",
        "GroundTruth": [
            "java.util.Arrays.toString()",
            "java.lang.System.arraycopy()"
        ],
        "APIClasses": [
            "java.util.Arrays",
            "java.lang.System"
        ],
        "Source": "Tutorial Websites"
    },
    "6563": {
        "Query": "yyyy-MM-dd HH:mm:ss String To Calendar",
        "GroundTruth": [
            "java.util.Calendar.getInstance()",
            "java.text.SimpleDateFormat.parse()",
            "java.util.Calendar.setTime()"
        ],
        "APIClasses": [
            "java.util.Calendar",
            "java.text.SimpleDateFormat"
        ],
        "Source": "Tutorial Websites"
    }
}